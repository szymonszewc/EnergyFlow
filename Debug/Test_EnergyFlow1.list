
Test_EnergyFlow1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007608  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007790  08007790  00017790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077c8  080077c8  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080077c8  080077c8  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077c8  080077c8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077c8  080077c8  000177c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077cc  080077cc  000177cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080077d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000020  080077f0  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  080077f0  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ccb  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a59  00000000  00000000  00036d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f8  00000000  00000000  0003a778  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f0  00000000  00000000  0003ba70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e953  00000000  00000000  0003cb60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000167ff  00000000  00000000  0005b4b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aa97d  00000000  00000000  00071cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c62f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004980  00000000  00000000  0011c6ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007778 	.word	0x08007778

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08007778 	.word	0x08007778

080001c8 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	463b      	mov	r3, r7
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]
 80001d8:	60da      	str	r2, [r3, #12]
 80001da:	611a      	str	r2, [r3, #16]
 80001dc:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 80001de:	4b3c      	ldr	r3, [pc, #240]	; (80002d0 <MX_ADC2_Init+0x108>)
 80001e0:	4a3c      	ldr	r2, [pc, #240]	; (80002d4 <MX_ADC2_Init+0x10c>)
 80001e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80001e4:	4b3a      	ldr	r3, [pc, #232]	; (80002d0 <MX_ADC2_Init+0x108>)
 80001e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80001ea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80001ec:	4b38      	ldr	r3, [pc, #224]	; (80002d0 <MX_ADC2_Init+0x108>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001f2:	4b37      	ldr	r3, [pc, #220]	; (80002d0 <MX_ADC2_Init+0x108>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80001f8:	4b35      	ldr	r3, [pc, #212]	; (80002d0 <MX_ADC2_Init+0x108>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80001fe:	4b34      	ldr	r3, [pc, #208]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000200:	2200      	movs	r2, #0
 8000202:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000206:	4b32      	ldr	r3, [pc, #200]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000208:	2200      	movs	r2, #0
 800020a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800020c:	4b30      	ldr	r3, [pc, #192]	; (80002d0 <MX_ADC2_Init+0x108>)
 800020e:	2201      	movs	r2, #1
 8000210:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000212:	4b2f      	ldr	r3, [pc, #188]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000214:	2200      	movs	r2, #0
 8000216:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000218:	4b2d      	ldr	r3, [pc, #180]	; (80002d0 <MX_ADC2_Init+0x108>)
 800021a:	2204      	movs	r2, #4
 800021c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800021e:	4b2c      	ldr	r3, [pc, #176]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000220:	2201      	movs	r2, #1
 8000222:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000226:	4b2a      	ldr	r3, [pc, #168]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000228:	2204      	movs	r2, #4
 800022a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800022c:	4b28      	ldr	r3, [pc, #160]	; (80002d0 <MX_ADC2_Init+0x108>)
 800022e:	2200      	movs	r2, #0
 8000230:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000232:	4b27      	ldr	r3, [pc, #156]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000234:	2200      	movs	r2, #0
 8000236:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000238:	4825      	ldr	r0, [pc, #148]	; (80002d0 <MX_ADC2_Init+0x108>)
 800023a:	f000 ffff 	bl	800123c <HAL_ADC_Init>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000244:	f000 fa80 	bl	8000748 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000248:	2301      	movs	r3, #1
 800024a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800024c:	2301      	movs	r3, #1
 800024e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000254:	2307      	movs	r3, #7
 8000256:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000258:	2300      	movs	r3, #0
 800025a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800025c:	2300      	movs	r3, #0
 800025e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000260:	463b      	mov	r3, r7
 8000262:	4619      	mov	r1, r3
 8000264:	481a      	ldr	r0, [pc, #104]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000266:	f001 fa55 	bl	8001714 <HAL_ADC_ConfigChannel>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000270:	f000 fa6a 	bl	8000748 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000274:	2302      	movs	r3, #2
 8000276:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000278:	2302      	movs	r3, #2
 800027a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800027c:	463b      	mov	r3, r7
 800027e:	4619      	mov	r1, r3
 8000280:	4813      	ldr	r0, [pc, #76]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000282:	f001 fa47 	bl	8001714 <HAL_ADC_ConfigChannel>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800028c:	f000 fa5c 	bl	8000748 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000290:	2303      	movs	r3, #3
 8000292:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000294:	2303      	movs	r3, #3
 8000296:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000298:	463b      	mov	r3, r7
 800029a:	4619      	mov	r1, r3
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <MX_ADC2_Init+0x108>)
 800029e:	f001 fa39 	bl	8001714 <HAL_ADC_ConfigChannel>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80002a8:	f000 fa4e 	bl	8000748 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002ac:	2304      	movs	r3, #4
 80002ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002b0:	2304      	movs	r3, #4
 80002b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80002b4:	463b      	mov	r3, r7
 80002b6:	4619      	mov	r1, r3
 80002b8:	4805      	ldr	r0, [pc, #20]	; (80002d0 <MX_ADC2_Init+0x108>)
 80002ba:	f001 fa2b 	bl	8001714 <HAL_ADC_ConfigChannel>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80002c4:	f000 fa40 	bl	8000748 <Error_Handler>
  }

}
 80002c8:	bf00      	nop
 80002ca:	3718      	adds	r7, #24
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	2000009c 	.word	0x2000009c
 80002d4:	50000100 	.word	0x50000100

080002d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e0:	f107 0314 	add.w	r3, r7, #20
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a2c      	ldr	r2, [pc, #176]	; (80003a8 <HAL_ADC_MspInit+0xd0>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d152      	bne.n	80003a0 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80002fa:	4b2c      	ldr	r3, [pc, #176]	; (80003ac <HAL_ADC_MspInit+0xd4>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a2b      	ldr	r2, [pc, #172]	; (80003ac <HAL_ADC_MspInit+0xd4>)
 8000300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b29      	ldr	r3, [pc, #164]	; (80003ac <HAL_ADC_MspInit+0xd4>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800030e:	613b      	str	r3, [r7, #16]
 8000310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000312:	4b26      	ldr	r3, [pc, #152]	; (80003ac <HAL_ADC_MspInit+0xd4>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a25      	ldr	r2, [pc, #148]	; (80003ac <HAL_ADC_MspInit+0xd4>)
 8000318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800031c:	6153      	str	r3, [r2, #20]
 800031e:	4b23      	ldr	r3, [pc, #140]	; (80003ac <HAL_ADC_MspInit+0xd4>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC2_IN1
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = SC_VOLTAGE_PIN_Pin|FC_VOLTAGE_PIN_Pin|FC_CURRENT_SENSOR_PIN_Pin|SC_CURRENT_SENSOR_PIN_Pin;
 800032a:	23f0      	movs	r3, #240	; 0xf0
 800032c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800032e:	2303      	movs	r3, #3
 8000330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000336:	f107 0314 	add.w	r3, r7, #20
 800033a:	4619      	mov	r1, r3
 800033c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000340:	f002 faea 	bl	8002918 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel4;
 8000344:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000346:	4a1b      	ldr	r2, [pc, #108]	; (80003b4 <HAL_ADC_MspInit+0xdc>)
 8000348:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800034a:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 800034c:	2200      	movs	r2, #0
 800034e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000350:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000356:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000358:	2280      	movs	r2, #128	; 0x80
 800035a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800035c:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 800035e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000362:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000366:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800036a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 800036e:	2220      	movs	r2, #32
 8000370:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000374:	2200      	movs	r2, #0
 8000376:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000378:	480d      	ldr	r0, [pc, #52]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 800037a:	f002 f8bf 	bl	80024fc <HAL_DMA_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000384:	f000 f9e0 	bl	8000748 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_ADC2_DMA1_CH4);
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <HAL_ADC_MspInit+0xe0>)
 800038a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800038c:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <HAL_ADC_MspInit+0xe0>)
 800038e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000392:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a06      	ldr	r2, [pc, #24]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000398:	639a      	str	r2, [r3, #56]	; 0x38
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80003a0:	bf00      	nop
 80003a2:	3728      	adds	r7, #40	; 0x28
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	50000100 	.word	0x50000100
 80003ac:	40021000 	.word	0x40021000
 80003b0:	200000ec 	.word	0x200000ec
 80003b4:	40020044 	.word	0x40020044
 80003b8:	40010000 	.word	0x40010000

080003bc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80003c0:	4b10      	ldr	r3, [pc, #64]	; (8000404 <MX_CRC_Init+0x48>)
 80003c2:	4a11      	ldr	r2, [pc, #68]	; (8000408 <MX_CRC_Init+0x4c>)
 80003c4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80003c6:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <MX_CRC_Init+0x48>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80003cc:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <MX_CRC_Init+0x48>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_CRC_Init+0x48>)
 80003d4:	2207      	movs	r2, #7
 80003d6:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 80003d8:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <MX_CRC_Init+0x48>)
 80003da:	2210      	movs	r2, #16
 80003dc:	60da      	str	r2, [r3, #12]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_CRC_Init+0x48>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80003e4:	4b07      	ldr	r3, [pc, #28]	; (8000404 <MX_CRC_Init+0x48>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80003ea:	4b06      	ldr	r3, [pc, #24]	; (8000404 <MX_CRC_Init+0x48>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80003f0:	4804      	ldr	r0, [pc, #16]	; (8000404 <MX_CRC_Init+0x48>)
 80003f2:	f001 fe87 	bl	8002104 <HAL_CRC_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_CRC_Init+0x44>
  {
    Error_Handler();
 80003fc:	f000 f9a4 	bl	8000748 <Error_Handler>
  }

}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000130 	.word	0x20000130
 8000408:	40023000 	.word	0x40023000

0800040c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <HAL_CRC_MspInit+0x38>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d10b      	bne.n	8000436 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <HAL_CRC_MspInit+0x3c>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a09      	ldr	r2, [pc, #36]	; (8000448 <HAL_CRC_MspInit+0x3c>)
 8000424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b07      	ldr	r3, [pc, #28]	; (8000448 <HAL_CRC_MspInit+0x3c>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000436:	bf00      	nop
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40023000 	.word	0x40023000
 8000448:	40021000 	.word	0x40021000

0800044c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_DMA_Init+0x68>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a17      	ldr	r2, [pc, #92]	; (80004b4 <MX_DMA_Init+0x68>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <MX_DMA_Init+0x68>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	2100      	movs	r1, #0
 800046e:	200c      	movs	r0, #12
 8000470:	f001 fe11 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000474:	200c      	movs	r0, #12
 8000476:	f001 fe2a 	bl	80020ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	200e      	movs	r0, #14
 8000480:	f001 fe09 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000484:	200e      	movs	r0, #14
 8000486:	f001 fe22 	bl	80020ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	200f      	movs	r0, #15
 8000490:	f001 fe01 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000494:	200f      	movs	r0, #15
 8000496:	f001 fe1a 	bl	80020ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2100      	movs	r1, #0
 800049e:	2010      	movs	r0, #16
 80004a0:	f001 fdf9 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004a4:	2010      	movs	r0, #16
 80004a6:	f001 fe12 	bl	80020ce <HAL_NVIC_EnableIRQ>

}
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000

080004b8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ce:	4b4e      	ldr	r3, [pc, #312]	; (8000608 <MX_GPIO_Init+0x150>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a4d      	ldr	r2, [pc, #308]	; (8000608 <MX_GPIO_Init+0x150>)
 80004d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b4b      	ldr	r3, [pc, #300]	; (8000608 <MX_GPIO_Init+0x150>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	4b48      	ldr	r3, [pc, #288]	; (8000608 <MX_GPIO_Init+0x150>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a47      	ldr	r2, [pc, #284]	; (8000608 <MX_GPIO_Init+0x150>)
 80004ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b45      	ldr	r3, [pc, #276]	; (8000608 <MX_GPIO_Init+0x150>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	4b42      	ldr	r3, [pc, #264]	; (8000608 <MX_GPIO_Init+0x150>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a41      	ldr	r2, [pc, #260]	; (8000608 <MX_GPIO_Init+0x150>)
 8000504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b3f      	ldr	r3, [pc, #252]	; (8000608 <MX_GPIO_Init+0x150>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SC_ON_GPIO_Port, SC_ON_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f002 fb6c 	bl	8002bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FC_DECHARGING_GPIO_Port, FC_DECHARGING_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	4838      	ldr	r0, [pc, #224]	; (800060c <MX_GPIO_Init+0x154>)
 800052a:	f002 fb67 	bl	8002bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800052e:	2302      	movs	r3, #2
 8000530:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000532:	2303      	movs	r3, #3
 8000534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800053a:	f107 030c 	add.w	r3, r7, #12
 800053e:	4619      	mov	r1, r3
 8000540:	4833      	ldr	r0, [pc, #204]	; (8000610 <MX_GPIO_Init+0x158>)
 8000542:	f002 f9e9 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000546:	f649 4302 	movw	r3, #39938	; 0x9c02
 800054a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800054c:	2303      	movs	r3, #3
 800054e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	4619      	mov	r1, r3
 800055a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055e:	f002 f9db 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB4 PBPin */
  GPIO_InitStruct.Pin = FAN_2_GPIO_Pin|GPIO_PIN_4|FAN_1_GPIO_Pin;
 8000562:	2352      	movs	r3, #82	; 0x52
 8000564:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000566:	4b2b      	ldr	r3, [pc, #172]	; (8000614 <MX_GPIO_Init+0x15c>)
 8000568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	4619      	mov	r1, r3
 8000574:	4825      	ldr	r0, [pc, #148]	; (800060c <MX_GPIO_Init+0x154>)
 8000576:	f002 f9cf 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SC_ON_Pin;
 800057a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800057e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SC_ON_GPIO_Port, &GPIO_InitStruct);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4619      	mov	r1, r3
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f002 f9bf 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800059a:	2328      	movs	r3, #40	; 0x28
 800059c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800059e:	2303      	movs	r3, #3
 80005a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	4619      	mov	r1, r3
 80005ac:	4817      	ldr	r0, [pc, #92]	; (800060c <MX_GPIO_Init+0x154>)
 80005ae:	f002 f9b3 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FC_DECHARGING_Pin;
 80005b2:	2380      	movs	r3, #128	; 0x80
 80005b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FC_DECHARGING_GPIO_Port, &GPIO_InitStruct);
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	4619      	mov	r1, r3
 80005c8:	4810      	ldr	r0, [pc, #64]	; (800060c <MX_GPIO_Init+0x154>)
 80005ca:	f002 f9a5 	bl	8002918 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 3, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2103      	movs	r1, #3
 80005d2:	2007      	movs	r0, #7
 80005d4:	f001 fd5f 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80005d8:	2007      	movs	r0, #7
 80005da:	f001 fd78 	bl	80020ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2103      	movs	r1, #3
 80005e2:	200a      	movs	r0, #10
 80005e4:	f001 fd57 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80005e8:	200a      	movs	r0, #10
 80005ea:	f001 fd70 	bl	80020ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2101      	movs	r1, #1
 80005f2:	2017      	movs	r0, #23
 80005f4:	f001 fd4f 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005f8:	2017      	movs	r0, #23
 80005fa:	f001 fd68 	bl	80020ce <HAL_NVIC_EnableIRQ>

}
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000
 800060c:	48000400 	.word	0x48000400
 8000610:	48001400 	.word	0x48001400
 8000614:	10210000 	.word	0x10210000

08000618 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_IWDG_Init+0x34>)
 800061e:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <MX_IWDG_Init+0x38>)
 8000620:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_IWDG_Init+0x34>)
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 2000;
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_IWDG_Init+0x34>)
 800062a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800062e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 1500;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_IWDG_Init+0x34>)
 8000632:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000636:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_IWDG_Init+0x34>)
 800063a:	f002 fb0f 	bl	8002c5c <HAL_IWDG_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000644:	f000 f880 	bl	8000748 <Error_Handler>
  }

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000154 	.word	0x20000154
 8000650:	40003000 	.word	0x40003000

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000658:	f000 fd6c 	bl	8001134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065c:	f000 f819 	bl	8000692 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f7ff ff2a 	bl	80004b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000664:	f7ff fef2 	bl	800044c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000668:	f000 fc8a 	bl	8000f80 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 800066c:	f7ff fdac 	bl	80001c8 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000670:	f000 f92e 	bl	80008d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000674:	f000 f9d8 	bl	8000a28 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000678:	f000 fa4c 	bl	8000b14 <MX_TIM3_Init>
  MX_CRC_Init();
 800067c:	f7ff fe9e 	bl	80003bc <MX_CRC_Init>
  MX_IWDG_Init();
 8000680:	f7ff ffca 	bl	8000618 <MX_IWDG_Init>
  MX_TIM6_Init();
 8000684:	f000 fabc 	bl	8000c00 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000688:	f000 faf0 	bl	8000c6c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  hydrogreen_main();
 800068c:	f006 faa8 	bl	8006be0 <hydrogreen_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000690:	e7fe      	b.n	8000690 <main+0x3c>

08000692 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b096      	sub	sp, #88	; 0x58
 8000696:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000698:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800069c:	2228      	movs	r2, #40	; 0x28
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f007 f861 	bl	8007768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
 80006c4:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006c6:	230a      	movs	r3, #10
 80006c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ca:	2301      	movs	r3, #1
 80006cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ce:	2310      	movs	r3, #16
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006d2:	2301      	movs	r3, #1
 80006d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006da:	2300      	movs	r3, #0
 80006dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006de:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80006e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 fb0d 	bl	8002d08 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006f4:	f000 f828 	bl	8000748 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	2102      	movs	r1, #2
 8000714:	4618      	mov	r0, r3
 8000716:	f003 f9ff 	bl	8003b18 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000720:	f000 f812 	bl	8000748 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4618      	mov	r0, r3
 8000732:	f003 fc27 	bl	8003f84 <HAL_RCCEx_PeriphCLKConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800073c:	f000 f804 	bl	8000748 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3758      	adds	r7, #88	; 0x58
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	hydrogreen_hardFault();
 800074c:	f006 fa6a 	bl	8006c24 <hydrogreen_hardFault>
  /* USER CODE END Error_Handler_Debug */
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_MspInit+0x44>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <HAL_MspInit+0x44>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6193      	str	r3, [r2, #24]
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_MspInit+0x44>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_MspInit+0x44>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	4a08      	ldr	r2, [pc, #32]	; (8000798 <HAL_MspInit+0x44>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	61d3      	str	r3, [r2, #28]
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_MspInit+0x44>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <NMI_Handler+0x4>

080007a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <HardFault_Handler+0x4>

080007a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <MemManage_Handler+0x4>

080007ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <BusFault_Handler+0x4>

080007b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <UsageFault_Handler+0x4>

080007ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_SYSTICK_Callback();
 80007e8:	f006 fe92 	bl	8007510 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ec:	f000 fce8 	bl	80011c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80007f8:	2002      	movs	r0, #2
 80007fa:	f002 fa17 	bl	8002c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}

08000802 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000806:	2010      	movs	r0, #16
 8000808:	f002 fa10 	bl	8002c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <DMA1_Channel2_IRQHandler+0x10>)
 8000816:	f001 ff8e 	bl	8002736 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000164 	.word	0x20000164

08000824 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <DMA1_Channel4_IRQHandler+0x10>)
 800082a:	f001 ff84 	bl	8002736 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000ec 	.word	0x200000ec

08000838 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <DMA1_Channel5_IRQHandler+0x10>)
 800083e:	f001 ff7a 	bl	8002736 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200001a8 	.word	0x200001a8

0800084c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <DMA1_Channel6_IRQHandler+0x10>)
 8000852:	f001 ff70 	bl	8002736 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000368 	.word	0x20000368

08000860 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000864:	2040      	movs	r0, #64	; 0x40
 8000866:	f002 f9e1 	bl	8002c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <USART2_IRQHandler+0x10>)
 8000876:	f005 faa3 	bl	8005dc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200003ac 	.word	0x200003ac

08000884 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <TIM6_DAC1_IRQHandler+0x10>)
 800088a:	f004 f8a1 	bl	80049d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000238 	.word	0x20000238

08000898 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <TIM7_DAC2_IRQHandler+0x10>)
 800089e:	f004 f897 	bl	80049d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000031c 	.word	0x2000031c

080008ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <SystemInit+0x20>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <SystemInit+0x20>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch1;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b09a      	sub	sp, #104	; 0x68
 80008d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
 8000900:	615a      	str	r2, [r3, #20]
 8000902:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	222c      	movs	r2, #44	; 0x2c
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f006 ff2c 	bl	8007768 <memset>

  htim1.Instance = TIM1;
 8000910:	4b43      	ldr	r3, [pc, #268]	; (8000a20 <MX_TIM1_Init+0x150>)
 8000912:	4a44      	ldr	r2, [pc, #272]	; (8000a24 <MX_TIM1_Init+0x154>)
 8000914:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8000916:	4b42      	ldr	r3, [pc, #264]	; (8000a20 <MX_TIM1_Init+0x150>)
 8000918:	2209      	movs	r2, #9
 800091a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091c:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <MX_TIM1_Init+0x150>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000922:	4b3f      	ldr	r3, [pc, #252]	; (8000a20 <MX_TIM1_Init+0x150>)
 8000924:	22ff      	movs	r2, #255	; 0xff
 8000926:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000928:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <MX_TIM1_Init+0x150>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800092e:	4b3c      	ldr	r3, [pc, #240]	; (8000a20 <MX_TIM1_Init+0x150>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000934:	4b3a      	ldr	r3, [pc, #232]	; (8000a20 <MX_TIM1_Init+0x150>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800093a:	4839      	ldr	r0, [pc, #228]	; (8000a20 <MX_TIM1_Init+0x150>)
 800093c:	f003 fc48 	bl	80041d0 <HAL_TIM_Base_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000946:	f7ff feff 	bl	8000748 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000950:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000954:	4619      	mov	r1, r3
 8000956:	4832      	ldr	r0, [pc, #200]	; (8000a20 <MX_TIM1_Init+0x150>)
 8000958:	f004 fa6a 	bl	8004e30 <HAL_TIM_ConfigClockSource>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000962:	f7ff fef1 	bl	8000748 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000966:	482e      	ldr	r0, [pc, #184]	; (8000a20 <MX_TIM1_Init+0x150>)
 8000968:	f003 fce6 	bl	8004338 <HAL_TIM_PWM_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000972:	f7ff fee9 	bl	8000748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000976:	2300      	movs	r3, #0
 8000978:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000982:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000986:	4619      	mov	r1, r3
 8000988:	4825      	ldr	r0, [pc, #148]	; (8000a20 <MX_TIM1_Init+0x150>)
 800098a:	f004 fff5 	bl	8005978 <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000994:	f7ff fed8 	bl	8000748 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000998:	2360      	movs	r3, #96	; 0x60
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a0:	2300      	movs	r3, #0
 80009a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009a4:	2300      	movs	r3, #0
 80009a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009b8:	2200      	movs	r2, #0
 80009ba:	4619      	mov	r1, r3
 80009bc:	4818      	ldr	r0, [pc, #96]	; (8000a20 <MX_TIM1_Init+0x150>)
 80009be:	f004 f927 	bl	8004c10 <HAL_TIM_PWM_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80009c8:	f7ff febe 	bl	8000748 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	4619      	mov	r1, r3
 8000a00:	4807      	ldr	r0, [pc, #28]	; (8000a20 <MX_TIM1_Init+0x150>)
 8000a02:	f005 f827 	bl	8005a54 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000a0c:	f7ff fe9c 	bl	8000748 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <MX_TIM1_Init+0x150>)
 8000a12:	f000 fa35 	bl	8000e80 <HAL_TIM_MspPostInit>

}
 8000a16:	bf00      	nop
 8000a18:	3768      	adds	r7, #104	; 0x68
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000284 	.word	0x20000284
 8000a24:	40012c00 	.word	0x40012c00

08000a28 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08e      	sub	sp, #56	; 0x38
 8000a2c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a48:	463b      	mov	r3, r7
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]
 8000a56:	615a      	str	r2, [r3, #20]
 8000a58:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000a5a:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000a5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8000a62:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000a64:	221f      	movs	r2, #31
 8000a66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a68:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000a6e:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000a70:	2263      	movs	r2, #99	; 0x63
 8000a72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a74:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7a:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a80:	4823      	ldr	r0, [pc, #140]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000a82:	f003 fba5 	bl	80041d0 <HAL_TIM_Base_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a8c:	f7ff fe5c 	bl	8000748 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	481c      	ldr	r0, [pc, #112]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000a9e:	f004 f9c7 	bl	8004e30 <HAL_TIM_ConfigClockSource>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000aa8:	f7ff fe4e 	bl	8000748 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000aac:	4818      	ldr	r0, [pc, #96]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000aae:	f003 fc43 	bl	8004338 <HAL_TIM_PWM_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ab8:	f7ff fe46 	bl	8000748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4811      	ldr	r0, [pc, #68]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000acc:	f004 ff54 	bl	8005978 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000ad6:	f7ff fe37 	bl	8000748 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ada:	2360      	movs	r3, #96	; 0x60
 8000adc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 99;
 8000ade:	2363      	movs	r3, #99	; 0x63
 8000ae0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aea:	463b      	mov	r3, r7
 8000aec:	2200      	movs	r2, #0
 8000aee:	4619      	mov	r1, r3
 8000af0:	4807      	ldr	r0, [pc, #28]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000af2:	f004 f88d 	bl	8004c10 <HAL_TIM_PWM_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000afc:	f7ff fe24 	bl	8000748 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000b02:	f000 f9bd 	bl	8000e80 <HAL_TIM_MspPostInit>

}
 8000b06:	bf00      	nop
 8000b08:	3738      	adds	r7, #56	; 0x38
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200002d0 	.word	0x200002d0

08000b14 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08e      	sub	sp, #56	; 0x38
 8000b18:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b34:	463b      	mov	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]
 8000b42:	615a      	str	r2, [r3, #20]
 8000b44:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000b46:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000b48:	4a2c      	ldr	r2, [pc, #176]	; (8000bfc <MX_TIM3_Init+0xe8>)
 8000b4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000b4e:	221f      	movs	r2, #31
 8000b50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000b58:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000b5a:	2263      	movs	r2, #99	; 0x63
 8000b5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5e:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b64:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b6a:	4823      	ldr	r0, [pc, #140]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000b6c:	f003 fb30 	bl	80041d0 <HAL_TIM_Base_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b76:	f7ff fde7 	bl	8000748 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b84:	4619      	mov	r1, r3
 8000b86:	481c      	ldr	r0, [pc, #112]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000b88:	f004 f952 	bl	8004e30 <HAL_TIM_ConfigClockSource>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b92:	f7ff fdd9 	bl	8000748 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b96:	4818      	ldr	r0, [pc, #96]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000b98:	f003 fbce 	bl	8004338 <HAL_TIM_PWM_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ba2:	f7ff fdd1 	bl	8000748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4810      	ldr	r0, [pc, #64]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000bb6:	f004 fedf 	bl	8005978 <HAL_TIMEx_MasterConfigSynchronization>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000bc0:	f7ff fdc2 	bl	8000748 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc4:	2360      	movs	r3, #96	; 0x60
 8000bc6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	2208      	movs	r2, #8
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000bdc:	f004 f818 	bl	8004c10 <HAL_TIM_PWM_ConfigChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000be6:	f7ff fdaf 	bl	8000748 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000bea:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000bec:	f000 f948 	bl	8000e80 <HAL_TIM_MspPostInit>

}
 8000bf0:	bf00      	nop
 8000bf2:	3738      	adds	r7, #56	; 0x38
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200001ec 	.word	0x200001ec
 8000bfc:	40000400 	.word	0x40000400

08000c00 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_TIM6_Init+0x64>)
 8000c12:	4a15      	ldr	r2, [pc, #84]	; (8000c68 <MX_TIM6_Init+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64-1;
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_TIM6_Init+0x64>)
 8000c18:	223f      	movs	r2, #63	; 0x3f
 8000c1a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_TIM6_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <MX_TIM6_Init+0x64>)
 8000c24:	2263      	movs	r2, #99	; 0x63
 8000c26:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_TIM6_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c2e:	480d      	ldr	r0, [pc, #52]	; (8000c64 <MX_TIM6_Init+0x64>)
 8000c30:	f003 face 	bl	80041d0 <HAL_TIM_Base_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000c3a:	f7ff fd85 	bl	8000748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <MX_TIM6_Init+0x64>)
 8000c4c:	f004 fe94 	bl	8005978 <HAL_TIMEx_MasterConfigSynchronization>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000c56:	f7ff fd77 	bl	8000748 <Error_Handler>
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000238 	.word	0x20000238
 8000c68:	40001000 	.word	0x40001000

08000c6c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_TIM7_Init+0x64>)
 8000c7e:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <MX_TIM7_Init+0x68>)
 8000c80:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 64-1;
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_TIM7_Init+0x64>)
 8000c84:	223f      	movs	r2, #63	; 0x3f
 8000c86:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_TIM7_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10-1;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_TIM7_Init+0x64>)
 8000c90:	2209      	movs	r2, #9
 8000c92:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_TIM7_Init+0x64>)
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c9a:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <MX_TIM7_Init+0x64>)
 8000c9c:	f003 fa98 	bl	80041d0 <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000ca6:	f7ff fd4f 	bl	8000748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <MX_TIM7_Init+0x64>)
 8000cb8:	f004 fe5e 	bl	8005978 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000cc2:	f7ff fd41 	bl	8000748 <Error_Handler>
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000031c 	.word	0x2000031c
 8000cd4:	40001400 	.word	0x40001400

08000cd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a5d      	ldr	r2, [pc, #372]	; (8000e5c <HAL_TIM_Base_MspInit+0x184>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d134      	bne.n	8000d54 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cea:	4b5d      	ldr	r3, [pc, #372]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4a5c      	ldr	r2, [pc, #368]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000cf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cf4:	6193      	str	r3, [r2, #24]
 8000cf6:	4b5a      	ldr	r3, [pc, #360]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cfe:	61fb      	str	r3, [r7, #28]
 8000d00:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000d02:	4b58      	ldr	r3, [pc, #352]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d04:	4a58      	ldr	r2, [pc, #352]	; (8000e68 <HAL_TIM_Base_MspInit+0x190>)
 8000d06:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d08:	4b56      	ldr	r3, [pc, #344]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0e:	4b55      	ldr	r3, [pc, #340]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d14:	4b53      	ldr	r3, [pc, #332]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d16:	2280      	movs	r2, #128	; 0x80
 8000d18:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d1a:	4b52      	ldr	r3, [pc, #328]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d20:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d22:	4b50      	ldr	r3, [pc, #320]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d28:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000d2a:	4b4e      	ldr	r3, [pc, #312]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d2c:	2220      	movs	r2, #32
 8000d2e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d30:	4b4c      	ldr	r3, [pc, #304]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000d36:	484b      	ldr	r0, [pc, #300]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d38:	f001 fbe0 	bl	80024fc <HAL_DMA_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000d42:	f7ff fd01 	bl	8000748 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a46      	ldr	r2, [pc, #280]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d4a:	625a      	str	r2, [r3, #36]	; 0x24
 8000d4c:	4a45      	ldr	r2, [pc, #276]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000d52:	e07e      	b.n	8000e52 <HAL_TIM_Base_MspInit+0x17a>
  else if(tim_baseHandle->Instance==TIM2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d5c:	d134      	bne.n	8000dc8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d5e:	4b40      	ldr	r3, [pc, #256]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	4a3f      	ldr	r2, [pc, #252]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	61d3      	str	r3, [r2, #28]
 8000d6a:	4b3d      	ldr	r3, [pc, #244]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	69bb      	ldr	r3, [r7, #24]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000d76:	4b3d      	ldr	r3, [pc, #244]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000d78:	4a3d      	ldr	r2, [pc, #244]	; (8000e70 <HAL_TIM_Base_MspInit+0x198>)
 8000d7a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d7c:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000d7e:	2210      	movs	r2, #16
 8000d80:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d82:	4b3a      	ldr	r3, [pc, #232]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d88:	4b38      	ldr	r3, [pc, #224]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000d8a:	2280      	movs	r2, #128	; 0x80
 8000d8c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d8e:	4b37      	ldr	r3, [pc, #220]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d94:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d9c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000d9e:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000da0:	2220      	movs	r2, #32
 8000da2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000da4:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000daa:	4830      	ldr	r0, [pc, #192]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000dac:	f001 fba6 	bl	80024fc <HAL_DMA_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_TIM_Base_MspInit+0xe2>
      Error_Handler();
 8000db6:	f7ff fcc7 	bl	8000748 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a2b      	ldr	r2, [pc, #172]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000dbe:	625a      	str	r2, [r3, #36]	; 0x24
 8000dc0:	4a2a      	ldr	r2, [pc, #168]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000dc6:	e044      	b.n	8000e52 <HAL_TIM_Base_MspInit+0x17a>
  else if(tim_baseHandle->Instance==TIM3)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a29      	ldr	r2, [pc, #164]	; (8000e74 <HAL_TIM_Base_MspInit+0x19c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d10c      	bne.n	8000dec <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dd2:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	61d3      	str	r3, [r2, #28]
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697b      	ldr	r3, [r7, #20]
}
 8000dea:	e032      	b.n	8000e52 <HAL_TIM_Base_MspInit+0x17a>
  else if(tim_baseHandle->Instance==TIM6)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a21      	ldr	r2, [pc, #132]	; (8000e78 <HAL_TIM_Base_MspInit+0x1a0>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d114      	bne.n	8000e20 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a19      	ldr	r2, [pc, #100]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000dfc:	f043 0310 	orr.w	r3, r3, #16
 8000e00:	61d3      	str	r3, [r2, #28]
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	f003 0310 	and.w	r3, r3, #16
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 1, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2101      	movs	r1, #1
 8000e12:	2036      	movs	r0, #54	; 0x36
 8000e14:	f001 f93f 	bl	8002096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000e18:	2036      	movs	r0, #54	; 0x36
 8000e1a:	f001 f958 	bl	80020ce <HAL_NVIC_EnableIRQ>
}
 8000e1e:	e018      	b.n	8000e52 <HAL_TIM_Base_MspInit+0x17a>
  else if(tim_baseHandle->Instance==TIM7)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a15      	ldr	r2, [pc, #84]	; (8000e7c <HAL_TIM_Base_MspInit+0x1a4>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d113      	bne.n	8000e52 <HAL_TIM_Base_MspInit+0x17a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	4a0c      	ldr	r2, [pc, #48]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000e30:	f043 0320 	orr.w	r3, r3, #32
 8000e34:	61d3      	str	r3, [r2, #28]
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	f003 0320 	and.w	r3, r3, #32
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 3, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2103      	movs	r1, #3
 8000e46:	2037      	movs	r0, #55	; 0x37
 8000e48:	f001 f925 	bl	8002096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8000e4c:	2037      	movs	r0, #55	; 0x37
 8000e4e:	f001 f93e 	bl	80020ce <HAL_NVIC_EnableIRQ>
}
 8000e52:	bf00      	nop
 8000e54:	3720      	adds	r7, #32
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40012c00 	.word	0x40012c00
 8000e60:	40021000 	.word	0x40021000
 8000e64:	20000164 	.word	0x20000164
 8000e68:	4002001c 	.word	0x4002001c
 8000e6c:	200001a8 	.word	0x200001a8
 8000e70:	40020058 	.word	0x40020058
 8000e74:	40000400 	.word	0x40000400
 8000e78:	40001000 	.word	0x40001000
 8000e7c:	40001400 	.word	0x40001400

08000e80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a34      	ldr	r2, [pc, #208]	; (8000f70 <HAL_TIM_MspPostInit+0xf0>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d11e      	bne.n	8000ee0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b34      	ldr	r3, [pc, #208]	; (8000f74 <HAL_TIM_MspPostInit+0xf4>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a33      	ldr	r2, [pc, #204]	; (8000f74 <HAL_TIM_MspPostInit+0xf4>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
 8000eae:	4b31      	ldr	r3, [pc, #196]	; (8000f74 <HAL_TIM_MspPostInit+0xf4>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = FAN_PWM_TIM_Pin;
 8000eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000ecc:	2306      	movs	r3, #6
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_PWM_TIM_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eda:	f001 fd1d 	bl	8002918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ede:	e043      	b.n	8000f68 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM2)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee8:	d11d      	bne.n	8000f26 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <HAL_TIM_MspPostInit+0xf4>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	4a21      	ldr	r2, [pc, #132]	; (8000f74 <HAL_TIM_MspPostInit+0xf4>)
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	6153      	str	r3, [r2, #20]
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <HAL_TIM_MspPostInit+0xf4>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8000f02:	2301      	movs	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f12:	2301      	movs	r3, #1
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f001 fcfa 	bl	8002918 <HAL_GPIO_Init>
}
 8000f24:	e020      	b.n	8000f68 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM3)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <HAL_TIM_MspPostInit+0xf8>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d11b      	bne.n	8000f68 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_TIM_MspPostInit+0xf4>)
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <HAL_TIM_MspPostInit+0xf4>)
 8000f36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3a:	6153      	str	r3, [r2, #20]
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <HAL_TIM_MspPostInit+0xf4>)
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FC_MOSFET_PWM_TIM_Pin;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FC_MOSFET_PWM_TIM_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <HAL_TIM_MspPostInit+0xfc>)
 8000f64:	f001 fcd8 	bl	8002918 <HAL_GPIO_Init>
}
 8000f68:	bf00      	nop
 8000f6a:	3728      	adds	r7, #40	; 0x28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40012c00 	.word	0x40012c00
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40000400 	.word	0x40000400
 8000f7c:	48000400 	.word	0x48000400

08000f80 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000f86:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <MX_USART2_UART_Init+0x70>)
 8000f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000f8c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000fb2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fb6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000fba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fbe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000fc2:	2230      	movs	r2, #48	; 0x30
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000fc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fcc:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000fd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000fd8:	f004 fdd2 	bl	8005b80 <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USART2_UART_Init+0x66>
  {
    Error_Handler();
 8000fe2:	f7ff fbb1 	bl	8000748 <Error_Handler>
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200003ac 	.word	0x200003ac
 8000ff0:	40004400 	.word	0x40004400

08000ff4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a2f      	ldr	r2, [pc, #188]	; (80010d0 <HAL_UART_MspInit+0xdc>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d157      	bne.n	80010c6 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001016:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <HAL_UART_MspInit+0xe0>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a2e      	ldr	r2, [pc, #184]	; (80010d4 <HAL_UART_MspInit+0xe0>)
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	61d3      	str	r3, [r2, #28]
 8001022:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <HAL_UART_MspInit+0xe0>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <HAL_UART_MspInit+0xe0>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	4a28      	ldr	r2, [pc, #160]	; (80010d4 <HAL_UART_MspInit+0xe0>)
 8001034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001038:	6153      	str	r3, [r2, #20]
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <HAL_UART_MspInit+0xe0>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = RS_TX_Pin|RS_RX_Pin;
 8001046:	230c      	movs	r3, #12
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001056:	2307      	movs	r3, #7
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001064:	f001 fc58 	bl	8002918 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <HAL_UART_MspInit+0xe8>)
 800106c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 8001094:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001098:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800109a:	480f      	ldr	r0, [pc, #60]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 800109c:	f001 fa2e 	bl	80024fc <HAL_DMA_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80010a6:	f7ff fb4f 	bl	8000748 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 80010ae:	671a      	str	r2, [r3, #112]	; 0x70
 80010b0:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2101      	movs	r1, #1
 80010ba:	2026      	movs	r0, #38	; 0x26
 80010bc:	f000 ffeb 	bl	8002096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010c0:	2026      	movs	r0, #38	; 0x26
 80010c2:	f001 f804 	bl	80020ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40004400 	.word	0x40004400
 80010d4:	40021000 	.word	0x40021000
 80010d8:	20000368 	.word	0x20000368
 80010dc:	4002006c 	.word	0x4002006c

080010e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001118 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <LoopForever+0x6>)
  ldr r1, =_edata
 80010e6:	490e      	ldr	r1, [pc, #56]	; (8001120 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e8:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <LoopForever+0xe>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010fc:	4c0b      	ldr	r4, [pc, #44]	; (800112c <LoopForever+0x16>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800110a:	f7ff fbcf 	bl	80008ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110e:	f006 fb07 	bl	8007720 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001112:	f7ff fa9f 	bl	8000654 <main>

08001116 <LoopForever>:

LoopForever:
    b LoopForever
 8001116:	e7fe      	b.n	8001116 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001118:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001120:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001124:	080077d0 	.word	0x080077d0
  ldr r2, =_sbss
 8001128:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800112c:	200004ac 	.word	0x200004ac

08001130 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <ADC1_2_IRQHandler>
	...

08001134 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_Init+0x28>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a07      	ldr	r2, [pc, #28]	; (800115c <HAL_Init+0x28>)
 800113e:	f043 0310 	orr.w	r3, r3, #16
 8001142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001144:	2003      	movs	r0, #3
 8001146:	f000 ff9b 	bl	8002080 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114a:	2000      	movs	r0, #0
 800114c:	f000 f808 	bl	8001160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001150:	f7ff fb00 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40022000 	.word	0x40022000

08001160 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_InitTick+0x54>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_InitTick+0x58>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	fbb3 f3f1 	udiv	r3, r3, r1
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f000 ffb3 	bl	80020ea <HAL_SYSTICK_Config>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e00e      	b.n	80011ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b0f      	cmp	r3, #15
 8001192:	d80a      	bhi.n	80011aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001194:	2200      	movs	r2, #0
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f000 ff7b 	bl	8002096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a0:	4a06      	ldr	r2, [pc, #24]	; (80011bc <HAL_InitTick+0x5c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e000      	b.n	80011ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000000 	.word	0x20000000
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000004 	.word	0x20000004

080011c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000430 	.word	0x20000430

080011e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000430 	.word	0x20000430

08001200 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b09a      	sub	sp, #104	; 0x68
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e172      	b.n	8001542 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	2b00      	cmp	r3, #0
 800126c:	d176      	bne.n	800135c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	2b00      	cmp	r3, #0
 8001274:	d152      	bne.n	800131c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff f821 	bl	80002d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d13b      	bne.n	800131c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 fdbb 	bl	8001e20 <ADC_Disable>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d12f      	bne.n	800131c <HAL_ADC_Init+0xe0>
 80012bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d12b      	bne.n	800131c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012cc:	f023 0302 	bic.w	r3, r3, #2
 80012d0:	f043 0202 	orr.w	r2, r3, #2
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012e6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012f6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012f8:	4b94      	ldr	r3, [pc, #592]	; (800154c <HAL_ADC_Init+0x310>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a94      	ldr	r2, [pc, #592]	; (8001550 <HAL_ADC_Init+0x314>)
 80012fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001302:	0c9a      	lsrs	r2, r3, #18
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800130e:	e002      	b.n	8001316 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3b01      	subs	r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f9      	bne.n	8001310 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d007      	beq.n	800133a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001338:	d110      	bne.n	800135c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f023 0312 	bic.w	r3, r3, #18
 8001342:	f043 0210 	orr.w	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f043 0201 	orr.w	r2, r3, #1
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	2b00      	cmp	r3, #0
 8001366:	f040 80df 	bne.w	8001528 <HAL_ADC_Init+0x2ec>
 800136a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800136e:	2b00      	cmp	r3, #0
 8001370:	f040 80da 	bne.w	8001528 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 80d2 	bne.w	8001528 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800138c:	f043 0202 	orr.w	r2, r3, #2
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001394:	4b6f      	ldr	r3, [pc, #444]	; (8001554 <HAL_ADC_Init+0x318>)
 8001396:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013a0:	d102      	bne.n	80013a8 <HAL_ADC_Init+0x16c>
 80013a2:	4b6d      	ldr	r3, [pc, #436]	; (8001558 <HAL_ADC_Init+0x31c>)
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	e002      	b.n	80013ae <HAL_ADC_Init+0x172>
 80013a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013ac:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d108      	bne.n	80013ce <HAL_ADC_Init+0x192>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d101      	bne.n	80013ce <HAL_ADC_Init+0x192>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_ADC_Init+0x194>
 80013ce:	2300      	movs	r3, #0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d11c      	bne.n	800140e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013d4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d010      	beq.n	80013fc <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d107      	bne.n	80013f6 <HAL_ADC_Init+0x1ba>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <HAL_ADC_Init+0x1ba>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_ADC_Init+0x1bc>
 80013f6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d108      	bne.n	800140e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80013fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	431a      	orrs	r2, r3
 800140a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800140c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7e5b      	ldrb	r3, [r3, #25]
 8001412:	035b      	lsls	r3, r3, #13
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001418:	2a01      	cmp	r2, #1
 800141a:	d002      	beq.n	8001422 <HAL_ADC_Init+0x1e6>
 800141c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001420:	e000      	b.n	8001424 <HAL_ADC_Init+0x1e8>
 8001422:	2200      	movs	r2, #0
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	4313      	orrs	r3, r2
 8001432:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001434:	4313      	orrs	r3, r2
 8001436:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d11b      	bne.n	800147a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7e5b      	ldrb	r3, [r3, #25]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d109      	bne.n	800145e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	3b01      	subs	r3, #1
 8001450:	045a      	lsls	r2, r3, #17
 8001452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001454:	4313      	orrs	r3, r2
 8001456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145a:	663b      	str	r3, [r7, #96]	; 0x60
 800145c:	e00d      	b.n	800147a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001466:	f043 0220 	orr.w	r2, r3, #32
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	2b01      	cmp	r3, #1
 8001480:	d007      	beq.n	8001492 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	4313      	orrs	r3, r2
 800148c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800148e:	4313      	orrs	r3, r2
 8001490:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b00      	cmp	r3, #0
 800149e:	d114      	bne.n	80014ca <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014ae:	f023 0302 	bic.w	r3, r3, #2
 80014b2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7e1b      	ldrb	r3, [r3, #24]
 80014b8:	039a      	lsls	r2, r3, #14
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4313      	orrs	r3, r2
 80014c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014c6:	4313      	orrs	r3, r2
 80014c8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <HAL_ADC_Init+0x320>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80014da:	430b      	orrs	r3, r1
 80014dc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d10c      	bne.n	8001500 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	f023 010f 	bic.w	r1, r3, #15
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	1e5a      	subs	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	631a      	str	r2, [r3, #48]	; 0x30
 80014fe:	e007      	b.n	8001510 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 020f 	bic.w	r2, r2, #15
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f023 0303 	bic.w	r3, r3, #3
 800151e:	f043 0201 	orr.w	r2, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	641a      	str	r2, [r3, #64]	; 0x40
 8001526:	e00a      	b.n	800153e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f023 0312 	bic.w	r3, r3, #18
 8001530:	f043 0210 	orr.w	r2, r3, #16
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001538:	2301      	movs	r3, #1
 800153a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800153e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001542:	4618      	mov	r0, r3
 8001544:	3768      	adds	r7, #104	; 0x68
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000000 	.word	0x20000000
 8001550:	431bde83 	.word	0x431bde83
 8001554:	50000300 	.word	0x50000300
 8001558:	50000100 	.word	0x50000100
 800155c:	fff0c007 	.word	0xfff0c007

08001560 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	2b00      	cmp	r3, #0
 800157c:	f040 80b9 	bne.w	80016f2 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001586:	2b01      	cmp	r3, #1
 8001588:	d101      	bne.n	800158e <HAL_ADC_Start_DMA+0x2e>
 800158a:	2302      	movs	r3, #2
 800158c:	e0b4      	b.n	80016f8 <HAL_ADC_Start_DMA+0x198>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001596:	4b5a      	ldr	r3, [pc, #360]	; (8001700 <HAL_ADC_Start_DMA+0x1a0>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f040 80a0 	bne.w	80016e4 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f000 fbdd 	bl	8001d64 <ADC_Enable>
 80015aa:	4603      	mov	r3, r0
 80015ac:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f040 8092 	bne.w	80016da <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015ca:	4b4d      	ldr	r3, [pc, #308]	; (8001700 <HAL_ADC_Start_DMA+0x1a0>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 031f 	and.w	r3, r3, #31
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d004      	beq.n	80015e0 <HAL_ADC_Start_DMA+0x80>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015de:	d115      	bne.n	800160c <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d027      	beq.n	800164a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001602:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800160a:	e01e      	b.n	800164a <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001620:	d004      	beq.n	800162c <HAL_ADC_Start_DMA+0xcc>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a37      	ldr	r2, [pc, #220]	; (8001704 <HAL_ADC_Start_DMA+0x1a4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d10e      	bne.n	800164a <HAL_ADC_Start_DMA+0xea>
 800162c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001642:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001656:	d106      	bne.n	8001666 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	f023 0206 	bic.w	r2, r3, #6
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	645a      	str	r2, [r3, #68]	; 0x44
 8001664:	e002      	b.n	800166c <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001678:	4a23      	ldr	r2, [pc, #140]	; (8001708 <HAL_ADC_Start_DMA+0x1a8>)
 800167a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001680:	4a22      	ldr	r2, [pc, #136]	; (800170c <HAL_ADC_Start_DMA+0x1ac>)
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001688:	4a21      	ldr	r2, [pc, #132]	; (8001710 <HAL_ADC_Start_DMA+0x1b0>)
 800168a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	221c      	movs	r2, #28
 8001692:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0210 	orr.w	r2, r2, #16
 80016a2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3340      	adds	r3, #64	; 0x40
 80016be:	4619      	mov	r1, r3
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f000 ff61 	bl	800258a <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0204 	orr.w	r2, r2, #4
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	e00d      	b.n	80016f6 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80016e2:	e008      	b.n	80016f6 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80016f0:	e001      	b.n	80016f6 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016f2:	2302      	movs	r3, #2
 80016f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	50000300 	.word	0x50000300
 8001704:	50000100 	.word	0x50000100
 8001708:	08001c99 	.word	0x08001c99
 800170c:	08001d13 	.word	0x08001d13
 8001710:	08001d2f 	.word	0x08001d2f

08001714 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001714:	b480      	push	{r7}
 8001716:	b09b      	sub	sp, #108	; 0x6c
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x22>
 8001732:	2302      	movs	r3, #2
 8001734:	e2a5      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x56e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	f040 8289 	bne.w	8001c60 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b04      	cmp	r3, #4
 8001754:	d81c      	bhi.n	8001790 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	461a      	mov	r2, r3
 800176a:	231f      	movs	r3, #31
 800176c:	4093      	lsls	r3, r2
 800176e:	43db      	mvns	r3, r3
 8001770:	4019      	ands	r1, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa00 f203 	lsl.w	r2, r0, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	631a      	str	r2, [r3, #48]	; 0x30
 800178e:	e063      	b.n	8001858 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b09      	cmp	r3, #9
 8001796:	d81e      	bhi.n	80017d6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	3b1e      	subs	r3, #30
 80017ac:	221f      	movs	r2, #31
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	4019      	ands	r1, r3
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4413      	add	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	3b1e      	subs	r3, #30
 80017c8:	fa00 f203 	lsl.w	r2, r0, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	635a      	str	r2, [r3, #52]	; 0x34
 80017d4:	e040      	b.n	8001858 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b0e      	cmp	r3, #14
 80017dc:	d81e      	bhi.n	800181c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	3b3c      	subs	r3, #60	; 0x3c
 80017f2:	221f      	movs	r2, #31
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4019      	ands	r1, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	3b3c      	subs	r3, #60	; 0x3c
 800180e:	fa00 f203 	lsl.w	r2, r0, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	639a      	str	r2, [r3, #56]	; 0x38
 800181a:	e01d      	b.n	8001858 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	3b5a      	subs	r3, #90	; 0x5a
 8001830:	221f      	movs	r2, #31
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	4019      	ands	r1, r3
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	3b5a      	subs	r3, #90	; 0x5a
 800184c:	fa00 f203 	lsl.w	r2, r0, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 80e5 	bne.w	8001a32 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b09      	cmp	r3, #9
 800186e:	d91c      	bls.n	80018aa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6999      	ldr	r1, [r3, #24]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	3b1e      	subs	r3, #30
 8001882:	2207      	movs	r2, #7
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	4019      	ands	r1, r3
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	6898      	ldr	r0, [r3, #8]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	3b1e      	subs	r3, #30
 800189c:	fa00 f203 	lsl.w	r2, r0, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	619a      	str	r2, [r3, #24]
 80018a8:	e019      	b.n	80018de <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6959      	ldr	r1, [r3, #20]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	2207      	movs	r2, #7
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	4019      	ands	r1, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	6898      	ldr	r0, [r3, #8]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	fa00 f203 	lsl.w	r2, r0, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	08db      	lsrs	r3, r3, #3
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d84f      	bhi.n	80019a0 <HAL_ADC_ConfigChannel+0x28c>
 8001900:	a201      	add	r2, pc, #4	; (adr r2, 8001908 <HAL_ADC_ConfigChannel+0x1f4>)
 8001902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001906:	bf00      	nop
 8001908:	08001919 	.word	0x08001919
 800190c:	0800193b 	.word	0x0800193b
 8001910:	0800195d 	.word	0x0800195d
 8001914:	0800197f 	.word	0x0800197f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800191e:	4b9e      	ldr	r3, [pc, #632]	; (8001b98 <HAL_ADC_ConfigChannel+0x484>)
 8001920:	4013      	ands	r3, r2
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	0691      	lsls	r1, r2, #26
 8001928:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800192a:	430a      	orrs	r2, r1
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001936:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001938:	e07e      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001940:	4b95      	ldr	r3, [pc, #596]	; (8001b98 <HAL_ADC_ConfigChannel+0x484>)
 8001942:	4013      	ands	r3, r2
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	0691      	lsls	r1, r2, #26
 800194a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800194c:	430a      	orrs	r2, r1
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001958:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800195a:	e06d      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001962:	4b8d      	ldr	r3, [pc, #564]	; (8001b98 <HAL_ADC_ConfigChannel+0x484>)
 8001964:	4013      	ands	r3, r2
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	0691      	lsls	r1, r2, #26
 800196c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800196e:	430a      	orrs	r2, r1
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800197a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800197c:	e05c      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001984:	4b84      	ldr	r3, [pc, #528]	; (8001b98 <HAL_ADC_ConfigChannel+0x484>)
 8001986:	4013      	ands	r3, r2
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	0691      	lsls	r1, r2, #26
 800198e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001990:	430a      	orrs	r2, r1
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800199c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800199e:	e04b      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	069b      	lsls	r3, r3, #26
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d107      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019c2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	069b      	lsls	r3, r3, #26
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d107      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019e6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	069b      	lsls	r3, r3, #26
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d107      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a0a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	069b      	lsls	r3, r3, #26
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d10a      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a2e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001a30:	e001      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001a32:	bf00      	nop
 8001a34:	e000      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001a36:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d108      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x344>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x344>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x346>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 810b 	bne.w	8001c76 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d00f      	beq.n	8001a88 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2201      	movs	r2, #1
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	400a      	ands	r2, r1
 8001a82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a86:	e049      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2201      	movs	r2, #1
 8001a96:	409a      	lsls	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b09      	cmp	r3, #9
 8001aa8:	d91c      	bls.n	8001ae4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6999      	ldr	r1, [r3, #24]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	3b1b      	subs	r3, #27
 8001abc:	2207      	movs	r2, #7
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	4019      	ands	r1, r3
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	6898      	ldr	r0, [r3, #8]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3b1b      	subs	r3, #27
 8001ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	619a      	str	r2, [r3, #24]
 8001ae2:	e01b      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6959      	ldr	r1, [r3, #20]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	2207      	movs	r2, #7
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	4019      	ands	r1, r3
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	6898      	ldr	r0, [r3, #8]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	fa00 f203 	lsl.w	r2, r0, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <HAL_ADC_ConfigChannel+0x488>)
 8001b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b10      	cmp	r3, #16
 8001b26:	d105      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d015      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b38:	2b11      	cmp	r3, #17
 8001b3a:	d105      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00b      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b4c:	2b12      	cmp	r3, #18
 8001b4e:	f040 8092 	bne.w	8001c76 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f040 808b 	bne.w	8001c76 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b68:	d102      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x45c>
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_ADC_ConfigChannel+0x48c>)
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	e002      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x462>
 8001b70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b74:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d10f      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x490>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d108      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x490>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e007      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x492>
 8001b96:	bf00      	nop
 8001b98:	83fff000 	.word	0x83fff000
 8001b9c:	50000300 	.word	0x50000300
 8001ba0:	50000100 	.word	0x50000100
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d150      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001baa:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d010      	beq.n	8001bd2 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d107      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x4b8>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x4b8>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <HAL_ADC_ConfigChannel+0x4ba>
 8001bcc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d13c      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d11d      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x502>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be2:	d118      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bee:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bf0:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <HAL_ADC_ConfigChannel+0x57c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a27      	ldr	r2, [pc, #156]	; (8001c94 <HAL_ADC_ConfigChannel+0x580>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	0c9a      	lsrs	r2, r3, #18
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c06:	e002      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f9      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c14:	e02e      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b11      	cmp	r3, #17
 8001c1c:	d10b      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x522>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c26:	d106      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c32:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c34:	e01e      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b12      	cmp	r3, #18
 8001c3c:	d11a      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c48:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c4a:	e013      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f043 0220 	orr.w	r2, r3, #32
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c5e:	e00a      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	f043 0220 	orr.w	r2, r3, #32
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c72:	e000      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c74:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	376c      	adds	r7, #108	; 0x6c
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000000 	.word	0x20000000
 8001c94:	431bde83 	.word	0x431bde83

08001c98 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d126      	bne.n	8001d00 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d115      	bne.n	8001cf8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d111      	bne.n	8001cf8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f043 0201 	orr.w	r2, r3, #1
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f7ff fa81 	bl	8001200 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001cfe:	e004      	b.n	8001d0a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f7ff fa77 	bl	8001214 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	f043 0204 	orr.w	r2, r3, #4
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f7ff fa67 	bl	8001228 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d108      	bne.n	8001d90 <ADC_Enable+0x2c>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <ADC_Enable+0x2c>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <ADC_Enable+0x2e>
 8001d90:	2300      	movs	r3, #0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d13c      	bne.n	8001e10 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <ADC_Enable+0xb8>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00d      	beq.n	8001dc0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f043 0210 	orr.w	r2, r3, #16
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db4:	f043 0201 	orr.w	r2, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e028      	b.n	8001e12 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001dd0:	f7ff fa0a 	bl	80011e8 <HAL_GetTick>
 8001dd4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001dd6:	e014      	b.n	8001e02 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001dd8:	f7ff fa06 	bl	80011e8 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d90d      	bls.n	8001e02 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f043 0210 	orr.w	r2, r3, #16
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e007      	b.n	8001e12 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d1e3      	bne.n	8001dd8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	8000003f 	.word	0x8000003f

08001e20 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d108      	bne.n	8001e4c <ADC_Disable+0x2c>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <ADC_Disable+0x2c>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <ADC_Disable+0x2e>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d040      	beq.n	8001ed4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 030d 	and.w	r3, r3, #13
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d10f      	bne.n	8001e80 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0202 	orr.w	r2, r2, #2
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2203      	movs	r2, #3
 8001e76:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001e78:	f7ff f9b6 	bl	80011e8 <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e7e:	e022      	b.n	8001ec6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f043 0210 	orr.w	r2, r3, #16
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e90:	f043 0201 	orr.w	r2, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e01c      	b.n	8001ed6 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e9c:	f7ff f9a4 	bl	80011e8 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d90d      	bls.n	8001ec6 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f043 0210 	orr.w	r2, r3, #16
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f043 0201 	orr.w	r2, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e007      	b.n	8001ed6 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d0e3      	beq.n	8001e9c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001efc:	4013      	ands	r3, r2
 8001efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f12:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	60d3      	str	r3, [r2, #12]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <__NVIC_GetPriorityGrouping+0x18>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	f003 0307 	and.w	r3, r3, #7
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	db0b      	blt.n	8001f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	f003 021f 	and.w	r2, r3, #31
 8001f5c:	4907      	ldr	r1, [pc, #28]	; (8001f7c <__NVIC_EnableIRQ+0x38>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	2001      	movs	r0, #1
 8001f66:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000e100 	.word	0xe000e100

08001f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	6039      	str	r1, [r7, #0]
 8001f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	db0a      	blt.n	8001faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	490c      	ldr	r1, [pc, #48]	; (8001fcc <__NVIC_SetPriority+0x4c>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	0112      	lsls	r2, r2, #4
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa8:	e00a      	b.n	8001fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4908      	ldr	r1, [pc, #32]	; (8001fd0 <__NVIC_SetPriority+0x50>)
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	3b04      	subs	r3, #4
 8001fb8:	0112      	lsls	r2, r2, #4
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	761a      	strb	r2, [r3, #24]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000e100 	.word	0xe000e100
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	; 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f1c3 0307 	rsb	r3, r3, #7
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	bf28      	it	cs
 8001ff2:	2304      	movcs	r3, #4
 8001ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	2b06      	cmp	r3, #6
 8001ffc:	d902      	bls.n	8002004 <NVIC_EncodePriority+0x30>
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3b03      	subs	r3, #3
 8002002:	e000      	b.n	8002006 <NVIC_EncodePriority+0x32>
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	f04f 32ff 	mov.w	r2, #4294967295
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43da      	mvns	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	401a      	ands	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800201c:	f04f 31ff 	mov.w	r1, #4294967295
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	43d9      	mvns	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	4313      	orrs	r3, r2
         );
}
 800202e:	4618      	mov	r0, r3
 8002030:	3724      	adds	r7, #36	; 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3b01      	subs	r3, #1
 8002048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800204c:	d301      	bcc.n	8002052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800204e:	2301      	movs	r3, #1
 8002050:	e00f      	b.n	8002072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002052:	4a0a      	ldr	r2, [pc, #40]	; (800207c <SysTick_Config+0x40>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3b01      	subs	r3, #1
 8002058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800205a:	210f      	movs	r1, #15
 800205c:	f04f 30ff 	mov.w	r0, #4294967295
 8002060:	f7ff ff8e 	bl	8001f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <SysTick_Config+0x40>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206a:	4b04      	ldr	r3, [pc, #16]	; (800207c <SysTick_Config+0x40>)
 800206c:	2207      	movs	r2, #7
 800206e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	e000e010 	.word	0xe000e010

08002080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff29 	bl	8001ee0 <__NVIC_SetPriorityGrouping>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b086      	sub	sp, #24
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a8:	f7ff ff3e 	bl	8001f28 <__NVIC_GetPriorityGrouping>
 80020ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	6978      	ldr	r0, [r7, #20]
 80020b4:	f7ff ff8e 	bl	8001fd4 <NVIC_EncodePriority>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff5d 	bl	8001f80 <__NVIC_SetPriority>
}
 80020c6:	bf00      	nop
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff31 	bl	8001f44 <__NVIC_EnableIRQ>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ffa2 	bl	800203c <SysTick_Config>
 80020f8:	4603      	mov	r3, r0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e054      	b.n	80021c0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7f5b      	ldrb	r3, [r3, #29]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d105      	bne.n	800212c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7fe f970 	bl	800040c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	791b      	ldrb	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10c      	bne.n	8002154 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a22      	ldr	r2, [pc, #136]	; (80021c8 <HAL_CRC_Init+0xc4>)
 8002140:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0218 	bic.w	r2, r2, #24
 8002150:	609a      	str	r2, [r3, #8]
 8002152:	e00c      	b.n	800216e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6899      	ldr	r1, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	461a      	mov	r2, r3
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f946 	bl	80023f0 <HAL_CRCEx_Polynomial_Set>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e028      	b.n	80021c0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	795b      	ldrb	r3, [r3, #5]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d105      	bne.n	8002182 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f04f 32ff 	mov.w	r2, #4294967295
 800217e:	611a      	str	r2, [r3, #16]
 8002180:	e004      	b.n	800218c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6912      	ldr	r2, [r2, #16]
 800218a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695a      	ldr	r2, [r3, #20]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699a      	ldr	r2, [r3, #24]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	04c11db7 	.word	0x04c11db7

080021cc <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80021d8:	2300      	movs	r3, #0
 80021da:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2202      	movs	r2, #2
 80021e0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 0201 	orr.w	r2, r2, #1
 80021f0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d022      	beq.n	8002240 <HAL_CRC_Calculate+0x74>
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d002      	beq.n	8002204 <HAL_CRC_Calculate+0x38>
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d017      	beq.n	8002232 <HAL_CRC_Calculate+0x66>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002202:	e024      	b.n	800224e <HAL_CRC_Calculate+0x82>
      for (index = 0U; index < BufferLength; index++)
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	e00a      	b.n	8002220 <HAL_CRC_Calculate+0x54>
        hcrc->Instance->DR = pBuffer[index];
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	441a      	add	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	3301      	adds	r3, #1
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	429a      	cmp	r2, r3
 8002226:	d3f0      	bcc.n	800220a <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	613b      	str	r3, [r7, #16]
      break;
 8002230:	e00d      	b.n	800224e <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f811 	bl	800225e <CRC_Handle_8>
 800223c:	6138      	str	r0, [r7, #16]
      break;
 800223e:	e006      	b.n	800224e <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68b9      	ldr	r1, [r7, #8]
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 f898 	bl	800237a <CRC_Handle_16>
 800224a:	6138      	str	r0, [r7, #16]
      break;
 800224c:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002254:	693b      	ldr	r3, [r7, #16]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800225e:	b480      	push	{r7}
 8002260:	b089      	sub	sp, #36	; 0x24
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	e023      	b.n	80022b8 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	4413      	add	r3, r2
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	3301      	adds	r3, #1
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	440b      	add	r3, r1
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800228a:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	3302      	adds	r3, #2
 8002292:	68b9      	ldr	r1, [r7, #8]
 8002294:	440b      	add	r3, r1
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800229a:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	3303      	adds	r3, #3
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	440b      	add	r3, r1
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80022ae:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80022b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3301      	adds	r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	69fa      	ldr	r2, [r7, #28]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d3d6      	bcc.n	8002270 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d04d      	beq.n	8002368 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d107      	bne.n	80022e6 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	4413      	add	r3, r2
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d116      	bne.n	800231e <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	4413      	add	r3, r2
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	b21a      	sxth	r2, r3
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	3301      	adds	r3, #1
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	440b      	add	r3, r1
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	b21b      	sxth	r3, r3
 800230c:	4313      	orrs	r3, r2
 800230e:	b21b      	sxth	r3, r3
 8002310:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	8b7a      	ldrh	r2, [r7, #26]
 800231c:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b03      	cmp	r3, #3
 8002326:	d11f      	bne.n	8002368 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	4413      	add	r3, r2
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	021b      	lsls	r3, r3, #8
 8002334:	b21a      	sxth	r2, r3
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	3301      	adds	r3, #1
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	440b      	add	r3, r1
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	b21b      	sxth	r3, r3
 8002344:	4313      	orrs	r3, r2
 8002346:	b21b      	sxth	r3, r3
 8002348:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	8b7a      	ldrh	r2, [r7, #26]
 8002354:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	3302      	adds	r3, #2
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	4413      	add	r3, r2
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3724      	adds	r7, #36	; 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800237a:	b480      	push	{r7}
 800237c:	b087      	sub	sp, #28
 800237e:	af00      	add	r7, sp, #0
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	e013      	b.n	80023b4 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	4413      	add	r3, r2
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	041a      	lsls	r2, r3, #16
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	3302      	adds	r3, #2
 800239e:	68b9      	ldr	r1, [r7, #8]
 80023a0:	440b      	add	r3, r1
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	3301      	adds	r3, #1
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	085b      	lsrs	r3, r3, #1
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d3e6      	bcc.n	800238c <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d009      	beq.n	80023dc <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	4413      	add	r3, r2
 80023d6:	881a      	ldrh	r2, [r3, #0]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002400:	231f      	movs	r3, #31
 8002402:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002404:	bf00      	nop
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1e5a      	subs	r2, r3, #1
 800240a:	613a      	str	r2, [r7, #16]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d009      	beq.n	8002424 <HAL_CRCEx_Polynomial_Set+0x34>
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	fa22 f303 	lsr.w	r3, r2, r3
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b18      	cmp	r3, #24
 8002428:	d846      	bhi.n	80024b8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800242a:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <HAL_CRCEx_Polynomial_Set+0x40>)
 800242c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002430:	080024bf 	.word	0x080024bf
 8002434:	080024b9 	.word	0x080024b9
 8002438:	080024b9 	.word	0x080024b9
 800243c:	080024b9 	.word	0x080024b9
 8002440:	080024b9 	.word	0x080024b9
 8002444:	080024b9 	.word	0x080024b9
 8002448:	080024b9 	.word	0x080024b9
 800244c:	080024b9 	.word	0x080024b9
 8002450:	080024ad 	.word	0x080024ad
 8002454:	080024b9 	.word	0x080024b9
 8002458:	080024b9 	.word	0x080024b9
 800245c:	080024b9 	.word	0x080024b9
 8002460:	080024b9 	.word	0x080024b9
 8002464:	080024b9 	.word	0x080024b9
 8002468:	080024b9 	.word	0x080024b9
 800246c:	080024b9 	.word	0x080024b9
 8002470:	080024a1 	.word	0x080024a1
 8002474:	080024b9 	.word	0x080024b9
 8002478:	080024b9 	.word	0x080024b9
 800247c:	080024b9 	.word	0x080024b9
 8002480:	080024b9 	.word	0x080024b9
 8002484:	080024b9 	.word	0x080024b9
 8002488:	080024b9 	.word	0x080024b9
 800248c:	080024b9 	.word	0x080024b9
 8002490:	08002495 	.word	0x08002495
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	2b06      	cmp	r3, #6
 8002498:	d913      	bls.n	80024c2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800249e:	e010      	b.n	80024c2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	2b07      	cmp	r3, #7
 80024a4:	d90f      	bls.n	80024c6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80024aa:	e00c      	b.n	80024c6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	2b0f      	cmp	r3, #15
 80024b0:	d90b      	bls.n	80024ca <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80024b6:	e008      	b.n	80024ca <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	75fb      	strb	r3, [r7, #23]
      break;
 80024bc:	e006      	b.n	80024cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80024be:	bf00      	nop
 80024c0:	e004      	b.n	80024cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80024c2:	bf00      	nop
 80024c4:	e002      	b.n	80024cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80024c6:	bf00      	nop
 80024c8:	e000      	b.n	80024cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80024ca:	bf00      	nop
  }
  if (status == HAL_OK)
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10d      	bne.n	80024ee <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f023 0118 	bic.w	r1, r3, #24
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80024ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	371c      	adds	r7, #28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e037      	b.n	8002582 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2202      	movs	r2, #2
 8002516:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002528:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800252c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002536:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002542:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800254e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f9b7 	bl	80028d8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}  
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_DMA_Start_IT+0x20>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e04a      	b.n	8002640 <HAL_DMA_Start_IT+0xb6>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d13a      	bne.n	8002632 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0201 	bic.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f94b 	bl	800287c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f042 020e 	orr.w	r2, r2, #14
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e00f      	b.n	8002620 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 020a 	orr.w	r2, r2, #10
 800260e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0204 	bic.w	r2, r2, #4
 800261e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	e005      	b.n	800263e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800263a:	2302      	movs	r3, #2
 800263c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800263e:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002656:	2b02      	cmp	r3, #2
 8002658:	d008      	beq.n	800266c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2204      	movs	r2, #4
 800265e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e020      	b.n	80026ae <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 020e 	bic.w	r2, r2, #14
 800267a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f202 	lsl.w	r2, r1, r2
 800269a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d005      	beq.n	80026dc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2204      	movs	r2, #4
 80026d4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
 80026da:	e027      	b.n	800272c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 020e 	bic.w	r2, r2, #14
 80026ea:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002704:	2101      	movs	r1, #1
 8002706:	fa01 f202 	lsl.w	r2, r1, r2
 800270a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
    } 
  }
  return status;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	2204      	movs	r2, #4
 8002754:	409a      	lsls	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d024      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x72>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01f      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d107      	bne.n	8002786 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0204 	bic.w	r2, r2, #4
 8002784:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278e:	2104      	movs	r1, #4
 8002790:	fa01 f202 	lsl.w	r2, r1, r2
 8002794:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	2b00      	cmp	r3, #0
 800279c:	d06a      	beq.n	8002874 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80027a6:	e065      	b.n	8002874 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	2202      	movs	r2, #2
 80027ae:	409a      	lsls	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d02c      	beq.n	8002812 <HAL_DMA_IRQHandler+0xdc>
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d027      	beq.n	8002812 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0320 	and.w	r3, r3, #32
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10b      	bne.n	80027e8 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 020a 	bic.w	r2, r2, #10
 80027de:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f0:	2102      	movs	r1, #2
 80027f2:	fa01 f202 	lsl.w	r2, r1, r2
 80027f6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	2b00      	cmp	r3, #0
 8002806:	d035      	beq.n	8002874 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002810:	e030      	b.n	8002874 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	2208      	movs	r2, #8
 8002818:	409a      	lsls	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d028      	beq.n	8002874 <HAL_DMA_IRQHandler+0x13e>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d023      	beq.n	8002874 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 020e 	bic.w	r2, r2, #14
 800283a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	2101      	movs	r1, #1
 8002846:	fa01 f202 	lsl.w	r2, r1, r2
 800284a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	2b00      	cmp	r3, #0
 8002868:	d004      	beq.n	8002874 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	4798      	blx	r3
    }
  }
}  
 8002872:	e7ff      	b.n	8002874 <HAL_DMA_IRQHandler+0x13e>
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f202 	lsl.w	r2, r1, r2
 8002898:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b10      	cmp	r3, #16
 80028a8:	d108      	bne.n	80028bc <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028ba:	e007      	b.n	80028cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	60da      	str	r2, [r3, #12]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <DMA_CalcBaseAndBitshift+0x34>)
 80028e8:	4413      	add	r3, r2
 80028ea:	4a09      	ldr	r2, [pc, #36]	; (8002910 <DMA_CalcBaseAndBitshift+0x38>)
 80028ec:	fba2 2303 	umull	r2, r3, r2, r3
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	009a      	lsls	r2, r3, #2
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a06      	ldr	r2, [pc, #24]	; (8002914 <DMA_CalcBaseAndBitshift+0x3c>)
 80028fc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	bffdfff8 	.word	0xbffdfff8
 8002910:	cccccccd 	.word	0xcccccccd
 8002914:	40020000 	.word	0x40020000

08002918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002926:	e14e      	b.n	8002bc6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	2101      	movs	r1, #1
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	fa01 f303 	lsl.w	r3, r1, r3
 8002934:	4013      	ands	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8140 	beq.w	8002bc0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d00b      	beq.n	8002960 <HAL_GPIO_Init+0x48>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d007      	beq.n	8002960 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002954:	2b11      	cmp	r3, #17
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b12      	cmp	r3, #18
 800295e:	d130      	bne.n	80029c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002996:	2201      	movs	r2, #1
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	f003 0201 	and.w	r2, r3, #1
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	2203      	movs	r2, #3
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0xea>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b12      	cmp	r3, #18
 8002a00:	d123      	bne.n	8002a4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	08da      	lsrs	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3208      	adds	r2, #8
 8002a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	220f      	movs	r2, #15
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4013      	ands	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	08da      	lsrs	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3208      	adds	r2, #8
 8002a44:	6939      	ldr	r1, [r7, #16]
 8002a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	2203      	movs	r2, #3
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0203 	and.w	r2, r3, #3
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 809a 	beq.w	8002bc0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8c:	4b55      	ldr	r3, [pc, #340]	; (8002be4 <HAL_GPIO_Init+0x2cc>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	4a54      	ldr	r2, [pc, #336]	; (8002be4 <HAL_GPIO_Init+0x2cc>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	6193      	str	r3, [r2, #24]
 8002a98:	4b52      	ldr	r3, [pc, #328]	; (8002be4 <HAL_GPIO_Init+0x2cc>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002aa4:	4a50      	ldr	r2, [pc, #320]	; (8002be8 <HAL_GPIO_Init+0x2d0>)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	089b      	lsrs	r3, r3, #2
 8002aaa:	3302      	adds	r3, #2
 8002aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	220f      	movs	r2, #15
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ace:	d013      	beq.n	8002af8 <HAL_GPIO_Init+0x1e0>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a46      	ldr	r2, [pc, #280]	; (8002bec <HAL_GPIO_Init+0x2d4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d00d      	beq.n	8002af4 <HAL_GPIO_Init+0x1dc>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a45      	ldr	r2, [pc, #276]	; (8002bf0 <HAL_GPIO_Init+0x2d8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d007      	beq.n	8002af0 <HAL_GPIO_Init+0x1d8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a44      	ldr	r2, [pc, #272]	; (8002bf4 <HAL_GPIO_Init+0x2dc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d101      	bne.n	8002aec <HAL_GPIO_Init+0x1d4>
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e006      	b.n	8002afa <HAL_GPIO_Init+0x1e2>
 8002aec:	2305      	movs	r3, #5
 8002aee:	e004      	b.n	8002afa <HAL_GPIO_Init+0x1e2>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e002      	b.n	8002afa <HAL_GPIO_Init+0x1e2>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <HAL_GPIO_Init+0x1e2>
 8002af8:	2300      	movs	r3, #0
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	f002 0203 	and.w	r2, r2, #3
 8002b00:	0092      	lsls	r2, r2, #2
 8002b02:	4093      	lsls	r3, r2
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b0a:	4937      	ldr	r1, [pc, #220]	; (8002be8 <HAL_GPIO_Init+0x2d0>)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	089b      	lsrs	r3, r3, #2
 8002b10:	3302      	adds	r3, #2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b18:	4b37      	ldr	r3, [pc, #220]	; (8002bf8 <HAL_GPIO_Init+0x2e0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b3c:	4a2e      	ldr	r2, [pc, #184]	; (8002bf8 <HAL_GPIO_Init+0x2e0>)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b42:	4b2d      	ldr	r3, [pc, #180]	; (8002bf8 <HAL_GPIO_Init+0x2e0>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b66:	4a24      	ldr	r2, [pc, #144]	; (8002bf8 <HAL_GPIO_Init+0x2e0>)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b6c:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <HAL_GPIO_Init+0x2e0>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b90:	4a19      	ldr	r2, [pc, #100]	; (8002bf8 <HAL_GPIO_Init+0x2e0>)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b96:	4b18      	ldr	r3, [pc, #96]	; (8002bf8 <HAL_GPIO_Init+0x2e0>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002bba:	4a0f      	ldr	r2, [pc, #60]	; (8002bf8 <HAL_GPIO_Init+0x2e0>)
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f47f aea9 	bne.w	8002928 <HAL_GPIO_Init+0x10>
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40010000 	.word	0x40010000
 8002bec:	48000400 	.word	0x48000400
 8002bf0:	48000800 	.word	0x48000800
 8002bf4:	48000c00 	.word	0x48000c00
 8002bf8:	40010400 	.word	0x40010400

08002bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	807b      	strh	r3, [r7, #2]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c0c:	787b      	ldrb	r3, [r7, #1]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c12:	887a      	ldrh	r2, [r7, #2]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c18:	e002      	b.n	8002c20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c1a:	887a      	ldrh	r2, [r7, #2]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d006      	beq.n	8002c50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c42:	4a05      	ldr	r2, [pc, #20]	; (8002c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 ff80 	bl	8006b50 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40010400 	.word	0x40010400

08002c5c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e038      	b.n	8002ce0 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002c76:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f245 5255 	movw	r2, #21845	; 0x5555
 8002c80:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6852      	ldr	r2, [r2, #4]
 8002c8a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6892      	ldr	r2, [r2, #8]
 8002c94:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002c96:	f7fe faa7 	bl	80011e8 <HAL_GetTick>
 8002c9a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8002c9c:	e008      	b.n	8002cb0 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002c9e:	f7fe faa3 	bl	80011e8 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b26      	cmp	r3, #38	; 0x26
 8002caa:	d901      	bls.n	8002cb0 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e017      	b.n	8002ce0 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f1      	bne.n	8002c9e <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d005      	beq.n	8002cd4 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	68d2      	ldr	r2, [r2, #12]
 8002cd0:	611a      	str	r2, [r3, #16]
 8002cd2:	e004      	b.n	8002cde <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002cdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002cf8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	1d3b      	adds	r3, r7, #4
 8002d12:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d14:	1d3b      	adds	r3, r7, #4
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d102      	bne.n	8002d22 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f000 bef4 	b.w	8003b0a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 816a 	beq.w	8003006 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d32:	4bb3      	ldr	r3, [pc, #716]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 030c 	and.w	r3, r3, #12
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d00c      	beq.n	8002d58 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d3e:	4bb0      	ldr	r3, [pc, #704]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d159      	bne.n	8002dfe <HAL_RCC_OscConfig+0xf6>
 8002d4a:	4bad      	ldr	r3, [pc, #692]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d56:	d152      	bne.n	8002dfe <HAL_RCC_OscConfig+0xf6>
 8002d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d5c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002d64:	fa93 f3a3 	rbit	r3, r3
 8002d68:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d6c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	fab3 f383 	clz	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d102      	bne.n	8002d8a <HAL_RCC_OscConfig+0x82>
 8002d84:	4b9e      	ldr	r3, [pc, #632]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	e015      	b.n	8002db6 <HAL_RCC_OscConfig+0xae>
 8002d8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d8e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002d9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002da2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002da6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002db2:	4b93      	ldr	r3, [pc, #588]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dba:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002dbe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002dc2:	fa92 f2a2 	rbit	r2, r2
 8002dc6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002dca:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002dce:	fab2 f282 	clz	r2, r2
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	f042 0220 	orr.w	r2, r2, #32
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	f002 021f 	and.w	r2, r2, #31
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f202 	lsl.w	r2, r1, r2
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 810c 	beq.w	8003004 <HAL_RCC_OscConfig+0x2fc>
 8002dec:	1d3b      	adds	r3, r7, #4
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f040 8106 	bne.w	8003004 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	f000 be86 	b.w	8003b0a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dfe:	1d3b      	adds	r3, r7, #4
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e08:	d106      	bne.n	8002e18 <HAL_RCC_OscConfig+0x110>
 8002e0a:	4b7d      	ldr	r3, [pc, #500]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a7c      	ldr	r2, [pc, #496]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e030      	b.n	8002e7a <HAL_RCC_OscConfig+0x172>
 8002e18:	1d3b      	adds	r3, r7, #4
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x134>
 8002e22:	4b77      	ldr	r3, [pc, #476]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a76      	ldr	r2, [pc, #472]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	4b74      	ldr	r3, [pc, #464]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a73      	ldr	r2, [pc, #460]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e01e      	b.n	8002e7a <HAL_RCC_OscConfig+0x172>
 8002e3c:	1d3b      	adds	r3, r7, #4
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e46:	d10c      	bne.n	8002e62 <HAL_RCC_OscConfig+0x15a>
 8002e48:	4b6d      	ldr	r3, [pc, #436]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a6c      	ldr	r2, [pc, #432]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002e4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	4b6a      	ldr	r3, [pc, #424]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a69      	ldr	r2, [pc, #420]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	e00b      	b.n	8002e7a <HAL_RCC_OscConfig+0x172>
 8002e62:	4b67      	ldr	r3, [pc, #412]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a66      	ldr	r2, [pc, #408]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	4b64      	ldr	r3, [pc, #400]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a63      	ldr	r2, [pc, #396]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e78:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e7a:	4b61      	ldr	r3, [pc, #388]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	f023 020f 	bic.w	r2, r3, #15
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	495d      	ldr	r1, [pc, #372]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e8e:	1d3b      	adds	r3, r7, #4
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d059      	beq.n	8002f4c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7fe f9a6 	bl	80011e8 <HAL_GetTick>
 8002e9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea2:	f7fe f9a1 	bl	80011e8 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	; 0x64
 8002eb0:	d902      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	f000 be29 	b.w	8003b0a <HAL_RCC_OscConfig+0xe02>
 8002eb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ebc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002ec4:	fa93 f3a3 	rbit	r3, r3
 8002ec8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002ecc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed0:	fab3 f383 	clz	r3, r3
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d102      	bne.n	8002eea <HAL_RCC_OscConfig+0x1e2>
 8002ee4:	4b46      	ldr	r3, [pc, #280]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	e015      	b.n	8002f16 <HAL_RCC_OscConfig+0x20e>
 8002eea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eee:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002ef6:	fa93 f3a3 	rbit	r3, r3
 8002efa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002efe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f02:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002f06:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002f12:	4b3b      	ldr	r3, [pc, #236]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f1a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002f1e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002f22:	fa92 f2a2 	rbit	r2, r2
 8002f26:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002f2a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002f2e:	fab2 f282 	clz	r2, r2
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	f042 0220 	orr.w	r2, r2, #32
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	f002 021f 	and.w	r2, r2, #31
 8002f3e:	2101      	movs	r1, #1
 8002f40:	fa01 f202 	lsl.w	r2, r1, r2
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0ab      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x19a>
 8002f4a:	e05c      	b.n	8003006 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe f94c 	bl	80011e8 <HAL_GetTick>
 8002f50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f56:	f7fe f947 	bl	80011e8 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d902      	bls.n	8002f6c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	f000 bdcf 	b.w	8003b0a <HAL_RCC_OscConfig+0xe02>
 8002f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f70:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002f80:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f84:	fab3 f383 	clz	r3, r3
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d102      	bne.n	8002f9e <HAL_RCC_OscConfig+0x296>
 8002f98:	4b19      	ldr	r3, [pc, #100]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	e015      	b.n	8002fca <HAL_RCC_OscConfig+0x2c2>
 8002f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fa2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002fb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fb6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002fba:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002fbe:	fa93 f3a3 	rbit	r3, r3
 8002fc2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <HAL_RCC_OscConfig+0x2f8>)
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fce:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002fd2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002fd6:	fa92 f2a2 	rbit	r2, r2
 8002fda:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002fde:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002fe2:	fab2 f282 	clz	r2, r2
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	f042 0220 	orr.w	r2, r2, #32
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	f002 021f 	and.w	r2, r2, #31
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1ab      	bne.n	8002f56 <HAL_RCC_OscConfig+0x24e>
 8002ffe:	e002      	b.n	8003006 <HAL_RCC_OscConfig+0x2fe>
 8003000:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 816f 	beq.w	80032f4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003016:	4bd0      	ldr	r3, [pc, #832]	; (8003358 <HAL_RCC_OscConfig+0x650>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003022:	4bcd      	ldr	r3, [pc, #820]	; (8003358 <HAL_RCC_OscConfig+0x650>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	2b08      	cmp	r3, #8
 800302c:	d16c      	bne.n	8003108 <HAL_RCC_OscConfig+0x400>
 800302e:	4bca      	ldr	r3, [pc, #808]	; (8003358 <HAL_RCC_OscConfig+0x650>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d166      	bne.n	8003108 <HAL_RCC_OscConfig+0x400>
 800303a:	2302      	movs	r3, #2
 800303c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800304c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003050:	fab3 f383 	clz	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d102      	bne.n	800306a <HAL_RCC_OscConfig+0x362>
 8003064:	4bbc      	ldr	r3, [pc, #752]	; (8003358 <HAL_RCC_OscConfig+0x650>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	e013      	b.n	8003092 <HAL_RCC_OscConfig+0x38a>
 800306a:	2302      	movs	r3, #2
 800306c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800307c:	2302      	movs	r3, #2
 800307e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003082:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800308e:	4bb2      	ldr	r3, [pc, #712]	; (8003358 <HAL_RCC_OscConfig+0x650>)
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	2202      	movs	r2, #2
 8003094:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003098:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800309c:	fa92 f2a2 	rbit	r2, r2
 80030a0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80030a4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80030a8:	fab2 f282 	clz	r2, r2
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	f042 0220 	orr.w	r2, r2, #32
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	f002 021f 	and.w	r2, r2, #31
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f202 	lsl.w	r2, r1, r2
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d007      	beq.n	80030d4 <HAL_RCC_OscConfig+0x3cc>
 80030c4:	1d3b      	adds	r3, r7, #4
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d002      	beq.n	80030d4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f000 bd1b 	b.w	8003b0a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d4:	4ba0      	ldr	r3, [pc, #640]	; (8003358 <HAL_RCC_OscConfig+0x650>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030dc:	1d3b      	adds	r3, r7, #4
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	21f8      	movs	r1, #248	; 0xf8
 80030e4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80030ec:	fa91 f1a1 	rbit	r1, r1
 80030f0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80030f4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80030f8:	fab1 f181 	clz	r1, r1
 80030fc:	b2c9      	uxtb	r1, r1
 80030fe:	408b      	lsls	r3, r1
 8003100:	4995      	ldr	r1, [pc, #596]	; (8003358 <HAL_RCC_OscConfig+0x650>)
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003106:	e0f5      	b.n	80032f4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003108:	1d3b      	adds	r3, r7, #4
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 8085 	beq.w	800321e <HAL_RCC_OscConfig+0x516>
 8003114:	2301      	movs	r3, #1
 8003116:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800311e:	fa93 f3a3 	rbit	r3, r3
 8003122:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003126:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800312a:	fab3 f383 	clz	r3, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003134:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	461a      	mov	r2, r3
 800313c:	2301      	movs	r3, #1
 800313e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe f852 	bl	80011e8 <HAL_GetTick>
 8003144:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003148:	e00a      	b.n	8003160 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800314a:	f7fe f84d 	bl	80011e8 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d902      	bls.n	8003160 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	f000 bcd5 	b.w	8003b0a <HAL_RCC_OscConfig+0xe02>
 8003160:	2302      	movs	r3, #2
 8003162:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003172:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b01      	cmp	r3, #1
 8003188:	d102      	bne.n	8003190 <HAL_RCC_OscConfig+0x488>
 800318a:	4b73      	ldr	r3, [pc, #460]	; (8003358 <HAL_RCC_OscConfig+0x650>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	e013      	b.n	80031b8 <HAL_RCC_OscConfig+0x4b0>
 8003190:	2302      	movs	r3, #2
 8003192:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800319a:	fa93 f3a3 	rbit	r3, r3
 800319e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80031a2:	2302      	movs	r3, #2
 80031a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80031a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80031b4:	4b68      	ldr	r3, [pc, #416]	; (8003358 <HAL_RCC_OscConfig+0x650>)
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	2202      	movs	r2, #2
 80031ba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80031be:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80031c2:	fa92 f2a2 	rbit	r2, r2
 80031c6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80031ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80031ce:	fab2 f282 	clz	r2, r2
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	f042 0220 	orr.w	r2, r2, #32
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	f002 021f 	and.w	r2, r2, #31
 80031de:	2101      	movs	r1, #1
 80031e0:	fa01 f202 	lsl.w	r2, r1, r2
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0af      	beq.n	800314a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ea:	4b5b      	ldr	r3, [pc, #364]	; (8003358 <HAL_RCC_OscConfig+0x650>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f2:	1d3b      	adds	r3, r7, #4
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	21f8      	movs	r1, #248	; 0xf8
 80031fa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003202:	fa91 f1a1 	rbit	r1, r1
 8003206:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800320a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800320e:	fab1 f181 	clz	r1, r1
 8003212:	b2c9      	uxtb	r1, r1
 8003214:	408b      	lsls	r3, r1
 8003216:	4950      	ldr	r1, [pc, #320]	; (8003358 <HAL_RCC_OscConfig+0x650>)
 8003218:	4313      	orrs	r3, r2
 800321a:	600b      	str	r3, [r1, #0]
 800321c:	e06a      	b.n	80032f4 <HAL_RCC_OscConfig+0x5ec>
 800321e:	2301      	movs	r3, #1
 8003220:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003228:	fa93 f3a3 	rbit	r3, r3
 800322c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003230:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800323e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	461a      	mov	r2, r3
 8003246:	2300      	movs	r3, #0
 8003248:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324a:	f7fd ffcd 	bl	80011e8 <HAL_GetTick>
 800324e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003252:	e00a      	b.n	800326a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003254:	f7fd ffc8 	bl	80011e8 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d902      	bls.n	800326a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	f000 bc50 	b.w	8003b0a <HAL_RCC_OscConfig+0xe02>
 800326a:	2302      	movs	r3, #2
 800326c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800327c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003280:	fab3 f383 	clz	r3, r3
 8003284:	b2db      	uxtb	r3, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d102      	bne.n	800329a <HAL_RCC_OscConfig+0x592>
 8003294:	4b30      	ldr	r3, [pc, #192]	; (8003358 <HAL_RCC_OscConfig+0x650>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	e013      	b.n	80032c2 <HAL_RCC_OscConfig+0x5ba>
 800329a:	2302      	movs	r3, #2
 800329c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80032a4:	fa93 f3a3 	rbit	r3, r3
 80032a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80032ac:	2302      	movs	r3, #2
 80032ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80032b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80032be:	4b26      	ldr	r3, [pc, #152]	; (8003358 <HAL_RCC_OscConfig+0x650>)
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	2202      	movs	r2, #2
 80032c4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80032c8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80032cc:	fa92 f2a2 	rbit	r2, r2
 80032d0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80032d4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80032d8:	fab2 f282 	clz	r2, r2
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	f042 0220 	orr.w	r2, r2, #32
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	f002 021f 	and.w	r2, r2, #31
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f202 	lsl.w	r2, r1, r2
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1af      	bne.n	8003254 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f4:	1d3b      	adds	r3, r7, #4
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 80da 	beq.w	80034b8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003304:	1d3b      	adds	r3, r7, #4
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d069      	beq.n	80033e2 <HAL_RCC_OscConfig+0x6da>
 800330e:	2301      	movs	r3, #1
 8003310:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003324:	fab3 f383 	clz	r3, r3
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	4b0b      	ldr	r3, [pc, #44]	; (800335c <HAL_RCC_OscConfig+0x654>)
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	461a      	mov	r2, r3
 8003334:	2301      	movs	r3, #1
 8003336:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003338:	f7fd ff56 	bl	80011e8 <HAL_GetTick>
 800333c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003340:	e00e      	b.n	8003360 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003342:	f7fd ff51 	bl	80011e8 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d906      	bls.n	8003360 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e3d9      	b.n	8003b0a <HAL_RCC_OscConfig+0xe02>
 8003356:	bf00      	nop
 8003358:	40021000 	.word	0x40021000
 800335c:	10908120 	.word	0x10908120
 8003360:	2302      	movs	r3, #2
 8003362:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003372:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003376:	2202      	movs	r2, #2
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	fa93 f2a3 	rbit	r2, r3
 8003384:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800338e:	2202      	movs	r2, #2
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	fa93 f2a3 	rbit	r2, r3
 800339c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80033a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a2:	4ba5      	ldr	r3, [pc, #660]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 80033a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80033aa:	2102      	movs	r1, #2
 80033ac:	6019      	str	r1, [r3, #0]
 80033ae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	fa93 f1a3 	rbit	r1, r3
 80033b8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033bc:	6019      	str	r1, [r3, #0]
  return result;
 80033be:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	fab3 f383 	clz	r3, r3
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	2101      	movs	r1, #1
 80033d6:	fa01 f303 	lsl.w	r3, r1, r3
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0b0      	beq.n	8003342 <HAL_RCC_OscConfig+0x63a>
 80033e0:	e06a      	b.n	80034b8 <HAL_RCC_OscConfig+0x7b0>
 80033e2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80033e6:	2201      	movs	r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	fa93 f2a3 	rbit	r2, r3
 80033f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033f8:	601a      	str	r2, [r3, #0]
  return result;
 80033fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033fe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003400:	fab3 f383 	clz	r3, r3
 8003404:	b2db      	uxtb	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	4b8c      	ldr	r3, [pc, #560]	; (800363c <HAL_RCC_OscConfig+0x934>)
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	461a      	mov	r2, r3
 8003410:	2300      	movs	r3, #0
 8003412:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003414:	f7fd fee8 	bl	80011e8 <HAL_GetTick>
 8003418:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341c:	e009      	b.n	8003432 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800341e:	f7fd fee3 	bl	80011e8 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e36b      	b.n	8003b0a <HAL_RCC_OscConfig+0xe02>
 8003432:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003436:	2202      	movs	r2, #2
 8003438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	fa93 f2a3 	rbit	r2, r3
 8003444:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800344e:	2202      	movs	r2, #2
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	fa93 f2a3 	rbit	r2, r3
 800345c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003466:	2202      	movs	r2, #2
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	fa93 f2a3 	rbit	r2, r3
 8003474:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003478:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800347a:	4b6f      	ldr	r3, [pc, #444]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 800347c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800347e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003482:	2102      	movs	r1, #2
 8003484:	6019      	str	r1, [r3, #0]
 8003486:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	fa93 f1a3 	rbit	r1, r3
 8003490:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003494:	6019      	str	r1, [r3, #0]
  return result;
 8003496:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	2101      	movs	r1, #1
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1b2      	bne.n	800341e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b8:	1d3b      	adds	r3, r7, #4
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 8158 	beq.w	8003778 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c8:	2300      	movs	r3, #0
 80034ca:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ce:	4b5a      	ldr	r3, [pc, #360]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d112      	bne.n	8003500 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034da:	4b57      	ldr	r3, [pc, #348]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	4a56      	ldr	r2, [pc, #344]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 80034e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e4:	61d3      	str	r3, [r2, #28]
 80034e6:	4b54      	ldr	r3, [pc, #336]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80034ee:	f107 0308 	add.w	r3, r7, #8
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	f107 0308 	add.w	r3, r7, #8
 80034f8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80034fa:	2301      	movs	r3, #1
 80034fc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	4b4f      	ldr	r3, [pc, #316]	; (8003640 <HAL_RCC_OscConfig+0x938>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d11a      	bne.n	8003542 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800350c:	4b4c      	ldr	r3, [pc, #304]	; (8003640 <HAL_RCC_OscConfig+0x938>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a4b      	ldr	r2, [pc, #300]	; (8003640 <HAL_RCC_OscConfig+0x938>)
 8003512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003516:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003518:	f7fd fe66 	bl	80011e8 <HAL_GetTick>
 800351c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	e009      	b.n	8003536 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003522:	f7fd fe61 	bl	80011e8 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	; 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e2e9      	b.n	8003b0a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003536:	4b42      	ldr	r3, [pc, #264]	; (8003640 <HAL_RCC_OscConfig+0x938>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0ef      	beq.n	8003522 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003542:	1d3b      	adds	r3, r7, #4
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d106      	bne.n	800355a <HAL_RCC_OscConfig+0x852>
 800354c:	4b3a      	ldr	r3, [pc, #232]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4a39      	ldr	r2, [pc, #228]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6213      	str	r3, [r2, #32]
 8003558:	e02f      	b.n	80035ba <HAL_RCC_OscConfig+0x8b2>
 800355a:	1d3b      	adds	r3, r7, #4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10c      	bne.n	800357e <HAL_RCC_OscConfig+0x876>
 8003564:	4b34      	ldr	r3, [pc, #208]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	4a33      	ldr	r2, [pc, #204]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	6213      	str	r3, [r2, #32]
 8003570:	4b31      	ldr	r3, [pc, #196]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4a30      	ldr	r2, [pc, #192]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 8003576:	f023 0304 	bic.w	r3, r3, #4
 800357a:	6213      	str	r3, [r2, #32]
 800357c:	e01d      	b.n	80035ba <HAL_RCC_OscConfig+0x8b2>
 800357e:	1d3b      	adds	r3, r7, #4
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b05      	cmp	r3, #5
 8003586:	d10c      	bne.n	80035a2 <HAL_RCC_OscConfig+0x89a>
 8003588:	4b2b      	ldr	r3, [pc, #172]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4a2a      	ldr	r2, [pc, #168]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 800358e:	f043 0304 	orr.w	r3, r3, #4
 8003592:	6213      	str	r3, [r2, #32]
 8003594:	4b28      	ldr	r3, [pc, #160]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	4a27      	ldr	r2, [pc, #156]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	6213      	str	r3, [r2, #32]
 80035a0:	e00b      	b.n	80035ba <HAL_RCC_OscConfig+0x8b2>
 80035a2:	4b25      	ldr	r3, [pc, #148]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	4a24      	ldr	r2, [pc, #144]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	6213      	str	r3, [r2, #32]
 80035ae:	4b22      	ldr	r3, [pc, #136]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	4a21      	ldr	r2, [pc, #132]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 80035b4:	f023 0304 	bic.w	r3, r3, #4
 80035b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ba:	1d3b      	adds	r3, r7, #4
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d06b      	beq.n	800369c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c4:	f7fd fe10 	bl	80011e8 <HAL_GetTick>
 80035c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035cc:	e00b      	b.n	80035e6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fd fe0b 	bl	80011e8 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	; 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e291      	b.n	8003b0a <HAL_RCC_OscConfig+0xe02>
 80035e6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80035ea:	2202      	movs	r2, #2
 80035ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	fa93 f2a3 	rbit	r2, r3
 80035f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003602:	2202      	movs	r2, #2
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	fa93 f2a3 	rbit	r2, r3
 8003610:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003614:	601a      	str	r2, [r3, #0]
  return result;
 8003616:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800361a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361c:	fab3 f383 	clz	r3, r3
 8003620:	b2db      	uxtb	r3, r3
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	b2db      	uxtb	r3, r3
 8003626:	f043 0302 	orr.w	r3, r3, #2
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d109      	bne.n	8003644 <HAL_RCC_OscConfig+0x93c>
 8003630:	4b01      	ldr	r3, [pc, #4]	; (8003638 <HAL_RCC_OscConfig+0x930>)
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	e014      	b.n	8003660 <HAL_RCC_OscConfig+0x958>
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	10908120 	.word	0x10908120
 8003640:	40007000 	.word	0x40007000
 8003644:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003648:	2202      	movs	r2, #2
 800364a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	fa93 f2a3 	rbit	r2, r3
 8003656:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	4bbb      	ldr	r3, [pc, #748]	; (800394c <HAL_RCC_OscConfig+0xc44>)
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003664:	2102      	movs	r1, #2
 8003666:	6011      	str	r1, [r2, #0]
 8003668:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	fa92 f1a2 	rbit	r1, r2
 8003672:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003676:	6011      	str	r1, [r2, #0]
  return result;
 8003678:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	fab2 f282 	clz	r2, r2
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	f002 021f 	and.w	r2, r2, #31
 800368e:	2101      	movs	r1, #1
 8003690:	fa01 f202 	lsl.w	r2, r1, r2
 8003694:	4013      	ands	r3, r2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d099      	beq.n	80035ce <HAL_RCC_OscConfig+0x8c6>
 800369a:	e063      	b.n	8003764 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369c:	f7fd fda4 	bl	80011e8 <HAL_GetTick>
 80036a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a4:	e00b      	b.n	80036be <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a6:	f7fd fd9f 	bl	80011e8 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e225      	b.n	8003b0a <HAL_RCC_OscConfig+0xe02>
 80036be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80036c2:	2202      	movs	r2, #2
 80036c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	fa93 f2a3 	rbit	r2, r3
 80036d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80036da:	2202      	movs	r2, #2
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	fa93 f2a3 	rbit	r2, r3
 80036e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036ec:	601a      	str	r2, [r3, #0]
  return result;
 80036ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f4:	fab3 f383 	clz	r3, r3
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f043 0302 	orr.w	r3, r3, #2
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d102      	bne.n	800370e <HAL_RCC_OscConfig+0xa06>
 8003708:	4b90      	ldr	r3, [pc, #576]	; (800394c <HAL_RCC_OscConfig+0xc44>)
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	e00d      	b.n	800372a <HAL_RCC_OscConfig+0xa22>
 800370e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003712:	2202      	movs	r2, #2
 8003714:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	fa93 f2a3 	rbit	r2, r3
 8003720:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	4b89      	ldr	r3, [pc, #548]	; (800394c <HAL_RCC_OscConfig+0xc44>)
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800372e:	2102      	movs	r1, #2
 8003730:	6011      	str	r1, [r2, #0]
 8003732:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	fa92 f1a2 	rbit	r1, r2
 800373c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003740:	6011      	str	r1, [r2, #0]
  return result;
 8003742:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	fab2 f282 	clz	r2, r2
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	f002 021f 	and.w	r2, r2, #31
 8003758:	2101      	movs	r1, #1
 800375a:	fa01 f202 	lsl.w	r2, r1, r2
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1a0      	bne.n	80036a6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003764:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003768:	2b01      	cmp	r3, #1
 800376a:	d105      	bne.n	8003778 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376c:	4b77      	ldr	r3, [pc, #476]	; (800394c <HAL_RCC_OscConfig+0xc44>)
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	4a76      	ldr	r2, [pc, #472]	; (800394c <HAL_RCC_OscConfig+0xc44>)
 8003772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003776:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003778:	1d3b      	adds	r3, r7, #4
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 81c2 	beq.w	8003b08 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003784:	4b71      	ldr	r3, [pc, #452]	; (800394c <HAL_RCC_OscConfig+0xc44>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b08      	cmp	r3, #8
 800378e:	f000 819c 	beq.w	8003aca <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	2b02      	cmp	r3, #2
 800379a:	f040 8114 	bne.w	80039c6 <HAL_RCC_OscConfig+0xcbe>
 800379e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80037a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	fa93 f2a3 	rbit	r2, r3
 80037b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80037b6:	601a      	str	r2, [r3, #0]
  return result;
 80037b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80037bc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	461a      	mov	r2, r3
 80037d0:	2300      	movs	r3, #0
 80037d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fd fd08 	bl	80011e8 <HAL_GetTick>
 80037d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037dc:	e009      	b.n	80037f2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037de:	f7fd fd03 	bl	80011e8 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e18b      	b.n	8003b0a <HAL_RCC_OscConfig+0xe02>
 80037f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80037f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	fa93 f2a3 	rbit	r2, r3
 8003806:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800380a:	601a      	str	r2, [r3, #0]
  return result;
 800380c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003810:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003812:	fab3 f383 	clz	r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b01      	cmp	r3, #1
 8003824:	d102      	bne.n	800382c <HAL_RCC_OscConfig+0xb24>
 8003826:	4b49      	ldr	r3, [pc, #292]	; (800394c <HAL_RCC_OscConfig+0xc44>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	e01b      	b.n	8003864 <HAL_RCC_OscConfig+0xb5c>
 800382c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003830:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003834:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	fa93 f2a3 	rbit	r2, r3
 8003840:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800384a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	fa93 f2a3 	rbit	r2, r3
 800385a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	4b3a      	ldr	r3, [pc, #232]	; (800394c <HAL_RCC_OscConfig+0xc44>)
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003868:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800386c:	6011      	str	r1, [r2, #0]
 800386e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	fa92 f1a2 	rbit	r1, r2
 8003878:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800387c:	6011      	str	r1, [r2, #0]
  return result;
 800387e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	fab2 f282 	clz	r2, r2
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	f042 0220 	orr.w	r2, r2, #32
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	f002 021f 	and.w	r2, r2, #31
 8003894:	2101      	movs	r1, #1
 8003896:	fa01 f202 	lsl.w	r2, r1, r2
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d19e      	bne.n	80037de <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038a0:	4b2a      	ldr	r3, [pc, #168]	; (800394c <HAL_RCC_OscConfig+0xc44>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038a8:	1d3b      	adds	r3, r7, #4
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038ae:	1d3b      	adds	r3, r7, #4
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	430b      	orrs	r3, r1
 80038b6:	4925      	ldr	r1, [pc, #148]	; (800394c <HAL_RCC_OscConfig+0xc44>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
 80038bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	fa93 f2a3 	rbit	r2, r3
 80038d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038d4:	601a      	str	r2, [r3, #0]
  return result;
 80038d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038da:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038dc:	fab3 f383 	clz	r3, r3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	461a      	mov	r2, r3
 80038ee:	2301      	movs	r3, #1
 80038f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f2:	f7fd fc79 	bl	80011e8 <HAL_GetTick>
 80038f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038fa:	e009      	b.n	8003910 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038fc:	f7fd fc74 	bl	80011e8 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e0fc      	b.n	8003b0a <HAL_RCC_OscConfig+0xe02>
 8003910:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003914:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	fa93 f2a3 	rbit	r2, r3
 8003924:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003928:	601a      	str	r2, [r3, #0]
  return result;
 800392a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800392e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003930:	fab3 f383 	clz	r3, r3
 8003934:	b2db      	uxtb	r3, r3
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	b2db      	uxtb	r3, r3
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	d105      	bne.n	8003950 <HAL_RCC_OscConfig+0xc48>
 8003944:	4b01      	ldr	r3, [pc, #4]	; (800394c <HAL_RCC_OscConfig+0xc44>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	e01e      	b.n	8003988 <HAL_RCC_OscConfig+0xc80>
 800394a:	bf00      	nop
 800394c:	40021000 	.word	0x40021000
 8003950:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003954:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	fa93 f2a3 	rbit	r2, r3
 8003964:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800396e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	fa93 f2a3 	rbit	r2, r3
 800397e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	4b63      	ldr	r3, [pc, #396]	; (8003b14 <HAL_RCC_OscConfig+0xe0c>)
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800398c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003990:	6011      	str	r1, [r2, #0]
 8003992:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	fa92 f1a2 	rbit	r1, r2
 800399c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80039a0:	6011      	str	r1, [r2, #0]
  return result;
 80039a2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	fab2 f282 	clz	r2, r2
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	f042 0220 	orr.w	r2, r2, #32
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	f002 021f 	and.w	r2, r2, #31
 80039b8:	2101      	movs	r1, #1
 80039ba:	fa01 f202 	lsl.w	r2, r1, r2
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d09b      	beq.n	80038fc <HAL_RCC_OscConfig+0xbf4>
 80039c4:	e0a0      	b.n	8003b08 <HAL_RCC_OscConfig+0xe00>
 80039c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	fa93 f2a3 	rbit	r2, r3
 80039da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039de:	601a      	str	r2, [r3, #0]
  return result;
 80039e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039e4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e6:	fab3 f383 	clz	r3, r3
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	461a      	mov	r2, r3
 80039f8:	2300      	movs	r3, #0
 80039fa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fc:	f7fd fbf4 	bl	80011e8 <HAL_GetTick>
 8003a00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a04:	e009      	b.n	8003a1a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a06:	f7fd fbef 	bl	80011e8 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e077      	b.n	8003b0a <HAL_RCC_OscConfig+0xe02>
 8003a1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	fa93 f2a3 	rbit	r2, r3
 8003a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a32:	601a      	str	r2, [r3, #0]
  return result;
 8003a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a3a:	fab3 f383 	clz	r3, r3
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d102      	bne.n	8003a54 <HAL_RCC_OscConfig+0xd4c>
 8003a4e:	4b31      	ldr	r3, [pc, #196]	; (8003b14 <HAL_RCC_OscConfig+0xe0c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	e01b      	b.n	8003a8c <HAL_RCC_OscConfig+0xd84>
 8003a54:	f107 0320 	add.w	r3, r7, #32
 8003a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	f107 0320 	add.w	r3, r7, #32
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	fa93 f2a3 	rbit	r2, r3
 8003a68:	f107 031c 	add.w	r3, r7, #28
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	f107 0318 	add.w	r3, r7, #24
 8003a72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	f107 0318 	add.w	r3, r7, #24
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	fa93 f2a3 	rbit	r2, r3
 8003a82:	f107 0314 	add.w	r3, r7, #20
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <HAL_RCC_OscConfig+0xe0c>)
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	f107 0210 	add.w	r2, r7, #16
 8003a90:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a94:	6011      	str	r1, [r2, #0]
 8003a96:	f107 0210 	add.w	r2, r7, #16
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	fa92 f1a2 	rbit	r1, r2
 8003aa0:	f107 020c 	add.w	r2, r7, #12
 8003aa4:	6011      	str	r1, [r2, #0]
  return result;
 8003aa6:	f107 020c 	add.w	r2, r7, #12
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	fab2 f282 	clz	r2, r2
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	f042 0220 	orr.w	r2, r2, #32
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	f002 021f 	and.w	r2, r2, #31
 8003abc:	2101      	movs	r1, #1
 8003abe:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d19e      	bne.n	8003a06 <HAL_RCC_OscConfig+0xcfe>
 8003ac8:	e01e      	b.n	8003b08 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aca:	1d3b      	adds	r3, r7, #4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e018      	b.n	8003b0a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <HAL_RCC_OscConfig+0xe0c>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ae0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ae4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ae8:	1d3b      	adds	r3, r7, #4
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d108      	bne.n	8003b04 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003af2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003af6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003afa:	1d3b      	adds	r3, r7, #4
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000

08003b18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b09e      	sub	sp, #120	; 0x78
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e162      	b.n	8003df6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b30:	4b90      	ldr	r3, [pc, #576]	; (8003d74 <HAL_RCC_ClockConfig+0x25c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d910      	bls.n	8003b60 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3e:	4b8d      	ldr	r3, [pc, #564]	; (8003d74 <HAL_RCC_ClockConfig+0x25c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 0207 	bic.w	r2, r3, #7
 8003b46:	498b      	ldr	r1, [pc, #556]	; (8003d74 <HAL_RCC_ClockConfig+0x25c>)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4e:	4b89      	ldr	r3, [pc, #548]	; (8003d74 <HAL_RCC_ClockConfig+0x25c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e14a      	b.n	8003df6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b6c:	4b82      	ldr	r3, [pc, #520]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	497f      	ldr	r1, [pc, #508]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80dc 	beq.w	8003d44 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d13c      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xf6>
 8003b94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b98:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b9c:	fa93 f3a3 	rbit	r3, r3
 8003ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba4:	fab3 f383 	clz	r3, r3
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d102      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xa6>
 8003bb8:	4b6f      	ldr	r3, [pc, #444]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	e00f      	b.n	8003bde <HAL_RCC_ClockConfig+0xc6>
 8003bbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bc6:	fa93 f3a3 	rbit	r3, r3
 8003bca:	667b      	str	r3, [r7, #100]	; 0x64
 8003bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bd0:	663b      	str	r3, [r7, #96]	; 0x60
 8003bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bd4:	fa93 f3a3 	rbit	r3, r3
 8003bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bda:	4b67      	ldr	r3, [pc, #412]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003be2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003be4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003be6:	fa92 f2a2 	rbit	r2, r2
 8003bea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003bec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bee:	fab2 f282 	clz	r2, r2
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	f042 0220 	orr.w	r2, r2, #32
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	f002 021f 	and.w	r2, r2, #31
 8003bfe:	2101      	movs	r1, #1
 8003c00:	fa01 f202 	lsl.w	r2, r1, r2
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d17b      	bne.n	8003d02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e0f3      	b.n	8003df6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d13c      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x178>
 8003c16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c1a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1e:	fa93 f3a3 	rbit	r3, r3
 8003c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c26:	fab3 f383 	clz	r3, r3
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	095b      	lsrs	r3, r3, #5
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d102      	bne.n	8003c40 <HAL_RCC_ClockConfig+0x128>
 8003c3a:	4b4f      	ldr	r3, [pc, #316]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	e00f      	b.n	8003c60 <HAL_RCC_ClockConfig+0x148>
 8003c40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c48:	fa93 f3a3 	rbit	r3, r3
 8003c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c52:	643b      	str	r3, [r7, #64]	; 0x40
 8003c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c56:	fa93 f3a3 	rbit	r3, r3
 8003c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c5c:	4b46      	ldr	r3, [pc, #280]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c64:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c68:	fa92 f2a2 	rbit	r2, r2
 8003c6c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c70:	fab2 f282 	clz	r2, r2
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	f042 0220 	orr.w	r2, r2, #32
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	f002 021f 	and.w	r2, r2, #31
 8003c80:	2101      	movs	r1, #1
 8003c82:	fa01 f202 	lsl.w	r2, r1, r2
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d13a      	bne.n	8003d02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0b2      	b.n	8003df6 <HAL_RCC_ClockConfig+0x2de>
 8003c90:	2302      	movs	r3, #2
 8003c92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	fa93 f3a3 	rbit	r3, r3
 8003c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d102      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x1a0>
 8003cb2:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	e00d      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x1bc>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbe:	fa93 f3a3 	rbit	r3, r3
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	623b      	str	r3, [r7, #32]
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	fa93 f3a3 	rbit	r3, r3
 8003cce:	61fb      	str	r3, [r7, #28]
 8003cd0:	4b29      	ldr	r3, [pc, #164]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	61ba      	str	r2, [r7, #24]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	fa92 f2a2 	rbit	r2, r2
 8003cde:	617a      	str	r2, [r7, #20]
  return result;
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	fab2 f282 	clz	r2, r2
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	f042 0220 	orr.w	r2, r2, #32
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	f002 021f 	and.w	r2, r2, #31
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e079      	b.n	8003df6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d02:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f023 0203 	bic.w	r2, r3, #3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	491a      	ldr	r1, [pc, #104]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d14:	f7fd fa68 	bl	80011e8 <HAL_GetTick>
 8003d18:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1a:	e00a      	b.n	8003d32 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d1c:	f7fd fa64 	bl	80011e8 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e061      	b.n	8003df6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d32:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f003 020c 	and.w	r2, r3, #12
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d1eb      	bne.n	8003d1c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d44:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <HAL_RCC_ClockConfig+0x25c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d214      	bcs.n	8003d7c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d52:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <HAL_RCC_ClockConfig+0x25c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f023 0207 	bic.w	r2, r3, #7
 8003d5a:	4906      	ldr	r1, [pc, #24]	; (8003d74 <HAL_RCC_ClockConfig+0x25c>)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d62:	4b04      	ldr	r3, [pc, #16]	; (8003d74 <HAL_RCC_ClockConfig+0x25c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e040      	b.n	8003df6 <HAL_RCC_ClockConfig+0x2de>
 8003d74:	40022000 	.word	0x40022000
 8003d78:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d88:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <HAL_RCC_ClockConfig+0x2e8>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	491a      	ldr	r1, [pc, #104]	; (8003e00 <HAL_RCC_ClockConfig+0x2e8>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003da6:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <HAL_RCC_ClockConfig+0x2e8>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4912      	ldr	r1, [pc, #72]	; (8003e00 <HAL_RCC_ClockConfig+0x2e8>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003dba:	f000 f829 	bl	8003e10 <HAL_RCC_GetSysClockFreq>
 8003dbe:	4601      	mov	r1, r0
 8003dc0:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <HAL_RCC_ClockConfig+0x2e8>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dc8:	22f0      	movs	r2, #240	; 0xf0
 8003dca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	fa92 f2a2 	rbit	r2, r2
 8003dd2:	60fa      	str	r2, [r7, #12]
  return result;
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	fab2 f282 	clz	r2, r2
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	40d3      	lsrs	r3, r2
 8003dde:	4a09      	ldr	r2, [pc, #36]	; (8003e04 <HAL_RCC_ClockConfig+0x2ec>)
 8003de0:	5cd3      	ldrb	r3, [r2, r3]
 8003de2:	fa21 f303 	lsr.w	r3, r1, r3
 8003de6:	4a08      	ldr	r2, [pc, #32]	; (8003e08 <HAL_RCC_ClockConfig+0x2f0>)
 8003de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003dea:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <HAL_RCC_ClockConfig+0x2f4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fd f9b6 	bl	8001160 <HAL_InitTick>
  
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3778      	adds	r7, #120	; 0x78
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40021000 	.word	0x40021000
 8003e04:	08007790 	.word	0x08007790
 8003e08:	20000000 	.word	0x20000000
 8003e0c:	20000004 	.word	0x20000004

08003e10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b08b      	sub	sp, #44	; 0x2c
 8003e14:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61bb      	str	r3, [r7, #24]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e2a:	4b29      	ldr	r3, [pc, #164]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d002      	beq.n	8003e40 <HAL_RCC_GetSysClockFreq+0x30>
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d003      	beq.n	8003e46 <HAL_RCC_GetSysClockFreq+0x36>
 8003e3e:	e03c      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e40:	4b24      	ldr	r3, [pc, #144]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e42:	623b      	str	r3, [r7, #32]
      break;
 8003e44:	e03c      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e4c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e50:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	fa92 f2a2 	rbit	r2, r2
 8003e58:	607a      	str	r2, [r7, #4]
  return result;
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	fab2 f282 	clz	r2, r2
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	40d3      	lsrs	r3, r2
 8003e64:	4a1c      	ldr	r2, [pc, #112]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e66:	5cd3      	ldrb	r3, [r2, r3]
 8003e68:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e6a:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	220f      	movs	r2, #15
 8003e74:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	fa92 f2a2 	rbit	r2, r2
 8003e7c:	60fa      	str	r2, [r7, #12]
  return result;
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	fab2 f282 	clz	r2, r2
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	40d3      	lsrs	r3, r2
 8003e88:	4a14      	ldr	r2, [pc, #80]	; (8003edc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e8a:	5cd3      	ldrb	r3, [r2, r3]
 8003e8c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d008      	beq.n	8003eaa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e98:	4a0e      	ldr	r2, [pc, #56]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea8:	e004      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	4a0c      	ldr	r2, [pc, #48]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003eae:	fb02 f303 	mul.w	r3, r2, r3
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	623b      	str	r3, [r7, #32]
      break;
 8003eb8:	e002      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003eba:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ebc:	623b      	str	r3, [r7, #32]
      break;
 8003ebe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	372c      	adds	r7, #44	; 0x2c
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	007a1200 	.word	0x007a1200
 8003ed8:	080077a8 	.word	0x080077a8
 8003edc:	080077b8 	.word	0x080077b8
 8003ee0:	003d0900 	.word	0x003d0900

08003ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ee8:	4b03      	ldr	r3, [pc, #12]	; (8003ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eea:	681b      	ldr	r3, [r3, #0]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	20000000 	.word	0x20000000

08003efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f02:	f7ff ffef 	bl	8003ee4 <HAL_RCC_GetHCLKFreq>
 8003f06:	4601      	mov	r1, r0
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f10:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	fa92 f2a2 	rbit	r2, r2
 8003f1c:	603a      	str	r2, [r7, #0]
  return result;
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	fab2 f282 	clz	r2, r2
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	40d3      	lsrs	r3, r2
 8003f28:	4a04      	ldr	r2, [pc, #16]	; (8003f3c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003f2a:	5cd3      	ldrb	r3, [r2, r3]
 8003f2c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	080077a0 	.word	0x080077a0

08003f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f46:	f7ff ffcd 	bl	8003ee4 <HAL_RCC_GetHCLKFreq>
 8003f4a:	4601      	mov	r1, r0
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003f54:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003f58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	fa92 f2a2 	rbit	r2, r2
 8003f60:	603a      	str	r2, [r7, #0]
  return result;
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	fab2 f282 	clz	r2, r2
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	40d3      	lsrs	r3, r2
 8003f6c:	4a04      	ldr	r2, [pc, #16]	; (8003f80 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003f6e:	5cd3      	ldrb	r3, [r2, r3]
 8003f70:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	080077a0 	.word	0x080077a0

08003f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b092      	sub	sp, #72	; 0x48
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f94:	2300      	movs	r3, #0
 8003f96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 80cd 	beq.w	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa8:	4b86      	ldr	r3, [pc, #536]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10e      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb4:	4b83      	ldr	r3, [pc, #524]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	4a82      	ldr	r2, [pc, #520]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	61d3      	str	r3, [r2, #28]
 8003fc0:	4b80      	ldr	r3, [pc, #512]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd2:	4b7d      	ldr	r3, [pc, #500]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d118      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fde:	4b7a      	ldr	r3, [pc, #488]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a79      	ldr	r2, [pc, #484]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fea:	f7fd f8fd 	bl	80011e8 <HAL_GetTick>
 8003fee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff0:	e008      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff2:	f7fd f8f9 	bl	80011e8 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b64      	cmp	r3, #100	; 0x64
 8003ffe:	d901      	bls.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e0db      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004004:	4b70      	ldr	r3, [pc, #448]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004010:	4b6c      	ldr	r3, [pc, #432]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004018:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800401a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d07d      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004028:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800402a:	429a      	cmp	r2, r3
 800402c:	d076      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800402e:	4b65      	ldr	r3, [pc, #404]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800403c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	fa93 f3a3 	rbit	r3, r3
 8004044:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004048:	fab3 f383 	clz	r3, r3
 800404c:	b2db      	uxtb	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	4b5e      	ldr	r3, [pc, #376]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	461a      	mov	r2, r3
 8004058:	2301      	movs	r3, #1
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004060:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004064:	fa93 f3a3 	rbit	r3, r3
 8004068:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800406a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800406c:	fab3 f383 	clz	r3, r3
 8004070:	b2db      	uxtb	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	4b55      	ldr	r3, [pc, #340]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	461a      	mov	r2, r3
 800407c:	2300      	movs	r3, #0
 800407e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004080:	4a50      	ldr	r2, [pc, #320]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004084:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d045      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004090:	f7fd f8aa 	bl	80011e8 <HAL_GetTick>
 8004094:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004096:	e00a      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004098:	f7fd f8a6 	bl	80011e8 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e086      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80040ae:	2302      	movs	r3, #2
 80040b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b4:	fa93 f3a3 	rbit	r3, r3
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ba:	2302      	movs	r3, #2
 80040bc:	623b      	str	r3, [r7, #32]
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	61fb      	str	r3, [r7, #28]
  return result;
 80040c6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c8:	fab3 f383 	clz	r3, r3
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	f043 0302 	orr.w	r3, r3, #2
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d102      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80040dc:	4b39      	ldr	r3, [pc, #228]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	e007      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80040e2:	2302      	movs	r3, #2
 80040e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	fa93 f3a3 	rbit	r3, r3
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	4b35      	ldr	r3, [pc, #212]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	2202      	movs	r2, #2
 80040f4:	613a      	str	r2, [r7, #16]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	fa92 f2a2 	rbit	r2, r2
 80040fc:	60fa      	str	r2, [r7, #12]
  return result;
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	fab2 f282 	clz	r2, r2
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	f002 021f 	and.w	r2, r2, #31
 8004110:	2101      	movs	r1, #1
 8004112:	fa01 f202 	lsl.w	r2, r1, r2
 8004116:	4013      	ands	r3, r2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0bd      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800411c:	4b29      	ldr	r3, [pc, #164]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	4926      	ldr	r1, [pc, #152]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800412a:	4313      	orrs	r3, r2
 800412c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800412e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004132:	2b01      	cmp	r3, #1
 8004134:	d105      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004136:	4b23      	ldr	r3, [pc, #140]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	4a22      	ldr	r2, [pc, #136]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800413c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004140:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d008      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800414e:	4b1d      	ldr	r3, [pc, #116]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	f023 0203 	bic.w	r2, r3, #3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	491a      	ldr	r1, [pc, #104]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800415c:	4313      	orrs	r3, r2
 800415e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800416c:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	f023 0210 	bic.w	r2, r3, #16
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4912      	ldr	r1, [pc, #72]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800417a:	4313      	orrs	r3, r2
 800417c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800418a:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	490b      	ldr	r1, [pc, #44]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004198:	4313      	orrs	r3, r2
 800419a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	4903      	ldr	r1, [pc, #12]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3748      	adds	r7, #72	; 0x48
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40021000 	.word	0x40021000
 80041c8:	40007000 	.word	0x40007000
 80041cc:	10908100 	.word	0x10908100

080041d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e049      	b.n	8004276 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fc fd6e 	bl	8000cd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3304      	adds	r3, #4
 800420c:	4619      	mov	r1, r3
 800420e:	4610      	mov	r0, r2
 8004210:	f000 ffd4 	bl	80051bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b01      	cmp	r3, #1
 8004292:	d001      	beq.n	8004298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e040      	b.n	800431a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1c      	ldr	r2, [pc, #112]	; (8004328 <HAL_TIM_Base_Start_IT+0xa8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00e      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x58>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c2:	d009      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x58>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a18      	ldr	r2, [pc, #96]	; (800432c <HAL_TIM_Base_Start_IT+0xac>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d004      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x58>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a17      	ldr	r2, [pc, #92]	; (8004330 <HAL_TIM_Base_Start_IT+0xb0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d115      	bne.n	8004304 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	4b15      	ldr	r3, [pc, #84]	; (8004334 <HAL_TIM_Base_Start_IT+0xb4>)
 80042e0:	4013      	ands	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b06      	cmp	r3, #6
 80042e8:	d015      	beq.n	8004316 <HAL_TIM_Base_Start_IT+0x96>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f0:	d011      	beq.n	8004316 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0201 	orr.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004302:	e008      	b.n	8004316 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	e000      	b.n	8004318 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004316:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40012c00 	.word	0x40012c00
 800432c:	40000400 	.word	0x40000400
 8004330:	40014000 	.word	0x40014000
 8004334:	00010007 	.word	0x00010007

08004338 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e049      	b.n	80043de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f841 	bl	80043e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3304      	adds	r3, #4
 8004374:	4619      	mov	r1, r3
 8004376:	4610      	mov	r0, r2
 8004378:	f000 ff20 	bl	80051bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d109      	bne.n	8004420 <HAL_TIM_PWM_Start+0x24>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	bf14      	ite	ne
 8004418:	2301      	movne	r3, #1
 800441a:	2300      	moveq	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e03c      	b.n	800449a <HAL_TIM_PWM_Start+0x9e>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b04      	cmp	r3, #4
 8004424:	d109      	bne.n	800443a <HAL_TIM_PWM_Start+0x3e>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b01      	cmp	r3, #1
 8004430:	bf14      	ite	ne
 8004432:	2301      	movne	r3, #1
 8004434:	2300      	moveq	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	e02f      	b.n	800449a <HAL_TIM_PWM_Start+0x9e>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b08      	cmp	r3, #8
 800443e:	d109      	bne.n	8004454 <HAL_TIM_PWM_Start+0x58>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	bf14      	ite	ne
 800444c:	2301      	movne	r3, #1
 800444e:	2300      	moveq	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	e022      	b.n	800449a <HAL_TIM_PWM_Start+0x9e>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b0c      	cmp	r3, #12
 8004458:	d109      	bne.n	800446e <HAL_TIM_PWM_Start+0x72>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b01      	cmp	r3, #1
 8004464:	bf14      	ite	ne
 8004466:	2301      	movne	r3, #1
 8004468:	2300      	moveq	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	e015      	b.n	800449a <HAL_TIM_PWM_Start+0x9e>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b10      	cmp	r3, #16
 8004472:	d109      	bne.n	8004488 <HAL_TIM_PWM_Start+0x8c>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	bf14      	ite	ne
 8004480:	2301      	movne	r3, #1
 8004482:	2300      	moveq	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	e008      	b.n	800449a <HAL_TIM_PWM_Start+0x9e>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	bf14      	ite	ne
 8004494:	2301      	movne	r3, #1
 8004496:	2300      	moveq	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e088      	b.n	80045b4 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d104      	bne.n	80044b2 <HAL_TIM_PWM_Start+0xb6>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b0:	e023      	b.n	80044fa <HAL_TIM_PWM_Start+0xfe>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d104      	bne.n	80044c2 <HAL_TIM_PWM_Start+0xc6>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c0:	e01b      	b.n	80044fa <HAL_TIM_PWM_Start+0xfe>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d104      	bne.n	80044d2 <HAL_TIM_PWM_Start+0xd6>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d0:	e013      	b.n	80044fa <HAL_TIM_PWM_Start+0xfe>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b0c      	cmp	r3, #12
 80044d6:	d104      	bne.n	80044e2 <HAL_TIM_PWM_Start+0xe6>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044e0:	e00b      	b.n	80044fa <HAL_TIM_PWM_Start+0xfe>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d104      	bne.n	80044f2 <HAL_TIM_PWM_Start+0xf6>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044f0:	e003      	b.n	80044fa <HAL_TIM_PWM_Start+0xfe>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2202      	movs	r2, #2
 80044f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2201      	movs	r2, #1
 8004500:	6839      	ldr	r1, [r7, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f001 fa12 	bl	800592c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a2b      	ldr	r2, [pc, #172]	; (80045bc <HAL_TIM_PWM_Start+0x1c0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00e      	beq.n	8004530 <HAL_TIM_PWM_Start+0x134>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a2a      	ldr	r2, [pc, #168]	; (80045c0 <HAL_TIM_PWM_Start+0x1c4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d009      	beq.n	8004530 <HAL_TIM_PWM_Start+0x134>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a28      	ldr	r2, [pc, #160]	; (80045c4 <HAL_TIM_PWM_Start+0x1c8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d004      	beq.n	8004530 <HAL_TIM_PWM_Start+0x134>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a27      	ldr	r2, [pc, #156]	; (80045c8 <HAL_TIM_PWM_Start+0x1cc>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d101      	bne.n	8004534 <HAL_TIM_PWM_Start+0x138>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <HAL_TIM_PWM_Start+0x13a>
 8004534:	2300      	movs	r3, #0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004548:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a1b      	ldr	r2, [pc, #108]	; (80045bc <HAL_TIM_PWM_Start+0x1c0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00e      	beq.n	8004572 <HAL_TIM_PWM_Start+0x176>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455c:	d009      	beq.n	8004572 <HAL_TIM_PWM_Start+0x176>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1a      	ldr	r2, [pc, #104]	; (80045cc <HAL_TIM_PWM_Start+0x1d0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d004      	beq.n	8004572 <HAL_TIM_PWM_Start+0x176>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <HAL_TIM_PWM_Start+0x1c4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d115      	bne.n	800459e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <HAL_TIM_PWM_Start+0x1d4>)
 800457a:	4013      	ands	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b06      	cmp	r3, #6
 8004582:	d015      	beq.n	80045b0 <HAL_TIM_PWM_Start+0x1b4>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458a:	d011      	beq.n	80045b0 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459c:	e008      	b.n	80045b0 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f042 0201 	orr.w	r2, r2, #1
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	e000      	b.n	80045b2 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	40014000 	.word	0x40014000
 80045c4:	40014400 	.word	0x40014400
 80045c8:	40014800 	.word	0x40014800
 80045cc:	40000400 	.word	0x40000400
 80045d0:	00010007 	.word	0x00010007

080045d4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d109      	bne.n	80045fc <HAL_TIM_PWM_Start_DMA+0x28>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	bf0c      	ite	eq
 80045f4:	2301      	moveq	r3, #1
 80045f6:	2300      	movne	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	e03c      	b.n	8004676 <HAL_TIM_PWM_Start_DMA+0xa2>
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d109      	bne.n	8004616 <HAL_TIM_PWM_Start_DMA+0x42>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	bf0c      	ite	eq
 800460e:	2301      	moveq	r3, #1
 8004610:	2300      	movne	r3, #0
 8004612:	b2db      	uxtb	r3, r3
 8004614:	e02f      	b.n	8004676 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b08      	cmp	r3, #8
 800461a:	d109      	bne.n	8004630 <HAL_TIM_PWM_Start_DMA+0x5c>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	bf0c      	ite	eq
 8004628:	2301      	moveq	r3, #1
 800462a:	2300      	movne	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	e022      	b.n	8004676 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b0c      	cmp	r3, #12
 8004634:	d109      	bne.n	800464a <HAL_TIM_PWM_Start_DMA+0x76>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	bf0c      	ite	eq
 8004642:	2301      	moveq	r3, #1
 8004644:	2300      	movne	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	e015      	b.n	8004676 <HAL_TIM_PWM_Start_DMA+0xa2>
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2b10      	cmp	r3, #16
 800464e:	d109      	bne.n	8004664 <HAL_TIM_PWM_Start_DMA+0x90>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	bf0c      	ite	eq
 800465c:	2301      	moveq	r3, #1
 800465e:	2300      	movne	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	e008      	b.n	8004676 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	bf0c      	ite	eq
 8004670:	2301      	moveq	r3, #1
 8004672:	2300      	movne	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 800467a:	2302      	movs	r3, #2
 800467c:	e192      	b.n	80049a4 <HAL_TIM_PWM_Start_DMA+0x3d0>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d109      	bne.n	8004698 <HAL_TIM_PWM_Start_DMA+0xc4>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b01      	cmp	r3, #1
 800468e:	bf0c      	ite	eq
 8004690:	2301      	moveq	r3, #1
 8004692:	2300      	movne	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	e03c      	b.n	8004712 <HAL_TIM_PWM_Start_DMA+0x13e>
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b04      	cmp	r3, #4
 800469c:	d109      	bne.n	80046b2 <HAL_TIM_PWM_Start_DMA+0xde>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	bf0c      	ite	eq
 80046aa:	2301      	moveq	r3, #1
 80046ac:	2300      	movne	r3, #0
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	e02f      	b.n	8004712 <HAL_TIM_PWM_Start_DMA+0x13e>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d109      	bne.n	80046cc <HAL_TIM_PWM_Start_DMA+0xf8>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	bf0c      	ite	eq
 80046c4:	2301      	moveq	r3, #1
 80046c6:	2300      	movne	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	e022      	b.n	8004712 <HAL_TIM_PWM_Start_DMA+0x13e>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b0c      	cmp	r3, #12
 80046d0:	d109      	bne.n	80046e6 <HAL_TIM_PWM_Start_DMA+0x112>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b01      	cmp	r3, #1
 80046dc:	bf0c      	ite	eq
 80046de:	2301      	moveq	r3, #1
 80046e0:	2300      	movne	r3, #0
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	e015      	b.n	8004712 <HAL_TIM_PWM_Start_DMA+0x13e>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b10      	cmp	r3, #16
 80046ea:	d109      	bne.n	8004700 <HAL_TIM_PWM_Start_DMA+0x12c>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	bf0c      	ite	eq
 80046f8:	2301      	moveq	r3, #1
 80046fa:	2300      	movne	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	e008      	b.n	8004712 <HAL_TIM_PWM_Start_DMA+0x13e>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b01      	cmp	r3, #1
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d034      	beq.n	8004780 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d104      	bne.n	8004726 <HAL_TIM_PWM_Start_DMA+0x152>
 800471c:	887b      	ldrh	r3, [r7, #2]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e13e      	b.n	80049a4 <HAL_TIM_PWM_Start_DMA+0x3d0>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d104      	bne.n	8004736 <HAL_TIM_PWM_Start_DMA+0x162>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004734:	e026      	b.n	8004784 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b04      	cmp	r3, #4
 800473a:	d104      	bne.n	8004746 <HAL_TIM_PWM_Start_DMA+0x172>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004744:	e01e      	b.n	8004784 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2b08      	cmp	r3, #8
 800474a:	d104      	bne.n	8004756 <HAL_TIM_PWM_Start_DMA+0x182>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004754:	e016      	b.n	8004784 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b0c      	cmp	r3, #12
 800475a:	d104      	bne.n	8004766 <HAL_TIM_PWM_Start_DMA+0x192>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004764:	e00e      	b.n	8004784 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b10      	cmp	r3, #16
 800476a:	d104      	bne.n	8004776 <HAL_TIM_PWM_Start_DMA+0x1a2>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004774:	e006      	b.n	8004784 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2202      	movs	r2, #2
 800477a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800477e:	e001      	b.n	8004784 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e10f      	b.n	80049a4 <HAL_TIM_PWM_Start_DMA+0x3d0>
  }

  switch (Channel)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b0c      	cmp	r3, #12
 8004788:	f200 80ae 	bhi.w	80048e8 <HAL_TIM_PWM_Start_DMA+0x314>
 800478c:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 800478e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004792:	bf00      	nop
 8004794:	080047c9 	.word	0x080047c9
 8004798:	080048e9 	.word	0x080048e9
 800479c:	080048e9 	.word	0x080048e9
 80047a0:	080048e9 	.word	0x080048e9
 80047a4:	08004811 	.word	0x08004811
 80047a8:	080048e9 	.word	0x080048e9
 80047ac:	080048e9 	.word	0x080048e9
 80047b0:	080048e9 	.word	0x080048e9
 80047b4:	08004859 	.word	0x08004859
 80047b8:	080048e9 	.word	0x080048e9
 80047bc:	080048e9 	.word	0x080048e9
 80047c0:	080048e9 	.word	0x080048e9
 80047c4:	080048a1 	.word	0x080048a1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	4a77      	ldr	r2, [pc, #476]	; (80049ac <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80047ce:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	4a76      	ldr	r2, [pc, #472]	; (80049b0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80047d6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	4a75      	ldr	r2, [pc, #468]	; (80049b4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80047de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3334      	adds	r3, #52	; 0x34
 80047ec:	461a      	mov	r2, r3
 80047ee:	887b      	ldrh	r3, [r7, #2]
 80047f0:	f7fd fecb 	bl	800258a <HAL_DMA_Start_IT>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e0d2      	b.n	80049a4 <HAL_TIM_PWM_Start_DMA+0x3d0>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800480c:	60da      	str	r2, [r3, #12]
      break;
 800480e:	e06c      	b.n	80048ea <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	4a65      	ldr	r2, [pc, #404]	; (80049ac <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004816:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	4a64      	ldr	r2, [pc, #400]	; (80049b0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800481e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	4a63      	ldr	r2, [pc, #396]	; (80049b4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8004826:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3338      	adds	r3, #56	; 0x38
 8004834:	461a      	mov	r2, r3
 8004836:	887b      	ldrh	r3, [r7, #2]
 8004838:	f7fd fea7 	bl	800258a <HAL_DMA_Start_IT>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e0ae      	b.n	80049a4 <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004854:	60da      	str	r2, [r3, #12]
      break;
 8004856:	e048      	b.n	80048ea <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	4a53      	ldr	r2, [pc, #332]	; (80049ac <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800485e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	4a52      	ldr	r2, [pc, #328]	; (80049b0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004866:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	4a51      	ldr	r2, [pc, #324]	; (80049b4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800486e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	333c      	adds	r3, #60	; 0x3c
 800487c:	461a      	mov	r2, r3
 800487e:	887b      	ldrh	r3, [r7, #2]
 8004880:	f7fd fe83 	bl	800258a <HAL_DMA_Start_IT>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e08a      	b.n	80049a4 <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800489c:	60da      	str	r2, [r3, #12]
      break;
 800489e:	e024      	b.n	80048ea <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	4a41      	ldr	r2, [pc, #260]	; (80049ac <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80048a6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	4a40      	ldr	r2, [pc, #256]	; (80049b0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80048ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	4a3f      	ldr	r2, [pc, #252]	; (80049b4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3340      	adds	r3, #64	; 0x40
 80048c4:	461a      	mov	r2, r3
 80048c6:	887b      	ldrh	r3, [r7, #2]
 80048c8:	f7fd fe5f 	bl	800258a <HAL_DMA_Start_IT>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e066      	b.n	80049a4 <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048e4:	60da      	str	r2, [r3, #12]
      break;
 80048e6:	e000      	b.n	80048ea <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 80048e8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2201      	movs	r2, #1
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f001 f81a 	bl	800592c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a2e      	ldr	r2, [pc, #184]	; (80049b8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00e      	beq.n	8004920 <HAL_TIM_PWM_Start_DMA+0x34c>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a2d      	ldr	r2, [pc, #180]	; (80049bc <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d009      	beq.n	8004920 <HAL_TIM_PWM_Start_DMA+0x34c>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a2b      	ldr	r2, [pc, #172]	; (80049c0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d004      	beq.n	8004920 <HAL_TIM_PWM_Start_DMA+0x34c>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a2a      	ldr	r2, [pc, #168]	; (80049c4 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d101      	bne.n	8004924 <HAL_TIM_PWM_Start_DMA+0x350>
 8004920:	2301      	movs	r3, #1
 8004922:	e000      	b.n	8004926 <HAL_TIM_PWM_Start_DMA+0x352>
 8004924:	2300      	movs	r3, #0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d007      	beq.n	800493a <HAL_TIM_PWM_Start_DMA+0x366>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004938:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a1e      	ldr	r2, [pc, #120]	; (80049b8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d00e      	beq.n	8004962 <HAL_TIM_PWM_Start_DMA+0x38e>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494c:	d009      	beq.n	8004962 <HAL_TIM_PWM_Start_DMA+0x38e>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1d      	ldr	r2, [pc, #116]	; (80049c8 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d004      	beq.n	8004962 <HAL_TIM_PWM_Start_DMA+0x38e>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a17      	ldr	r2, [pc, #92]	; (80049bc <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d115      	bne.n	800498e <HAL_TIM_PWM_Start_DMA+0x3ba>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	4b18      	ldr	r3, [pc, #96]	; (80049cc <HAL_TIM_PWM_Start_DMA+0x3f8>)
 800496a:	4013      	ands	r3, r2
 800496c:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b06      	cmp	r3, #6
 8004972:	d015      	beq.n	80049a0 <HAL_TIM_PWM_Start_DMA+0x3cc>
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800497a:	d011      	beq.n	80049a0 <HAL_TIM_PWM_Start_DMA+0x3cc>
    {
      __HAL_TIM_ENABLE(htim);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498c:	e008      	b.n	80049a0 <HAL_TIM_PWM_Start_DMA+0x3cc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 0201 	orr.w	r2, r2, #1
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	e000      	b.n	80049a2 <HAL_TIM_PWM_Start_DMA+0x3ce>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	080050ad 	.word	0x080050ad
 80049b0:	08005155 	.word	0x08005155
 80049b4:	0800501b 	.word	0x0800501b
 80049b8:	40012c00 	.word	0x40012c00
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40014400 	.word	0x40014400
 80049c4:	40014800 	.word	0x40014800
 80049c8:	40000400 	.word	0x40000400
 80049cc:	00010007 	.word	0x00010007

080049d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d122      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d11b      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0202 	mvn.w	r2, #2
 80049fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 facf 	bl	8004fb6 <HAL_TIM_IC_CaptureCallback>
 8004a18:	e005      	b.n	8004a26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fac1 	bl	8004fa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fad2 	bl	8004fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0204 	mvn.w	r2, #4
 8004a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2202      	movs	r2, #2
 8004a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 faa5 	bl	8004fb6 <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa97 	bl	8004fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 faa8 	bl	8004fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d122      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0208 	mvn.w	r2, #8
 8004aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fa7b 	bl	8004fb6 <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fa6d 	bl	8004fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fa7e 	bl	8004fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	2b10      	cmp	r3, #16
 8004ae0:	d122      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d11b      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0210 	mvn.w	r2, #16
 8004af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2208      	movs	r2, #8
 8004afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fa51 	bl	8004fb6 <HAL_TIM_IC_CaptureCallback>
 8004b14:	e005      	b.n	8004b22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fa43 	bl	8004fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fa54 	bl	8004fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d10e      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d107      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0201 	mvn.w	r2, #1
 8004b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f002 fce4 	bl	800751c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5e:	2b80      	cmp	r3, #128	; 0x80
 8004b60:	d10e      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6c:	2b80      	cmp	r3, #128	; 0x80
 8004b6e:	d107      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 ffec 	bl	8005b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b8e:	d10e      	bne.n	8004bae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	2b80      	cmp	r3, #128	; 0x80
 8004b9c:	d107      	bne.n	8004bae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 ffdf 	bl	8005b6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb8:	2b40      	cmp	r3, #64	; 0x40
 8004bba:	d10e      	bne.n	8004bda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d107      	bne.n	8004bda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fa0c 	bl	8004ff2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d10e      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d107      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f06f 0220 	mvn.w	r2, #32
 8004bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 ff9f 	bl	8005b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e0fd      	b.n	8004e26 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b14      	cmp	r3, #20
 8004c36:	f200 80f0 	bhi.w	8004e1a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004c3a:	a201      	add	r2, pc, #4	; (adr r2, 8004c40 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c40:	08004c95 	.word	0x08004c95
 8004c44:	08004e1b 	.word	0x08004e1b
 8004c48:	08004e1b 	.word	0x08004e1b
 8004c4c:	08004e1b 	.word	0x08004e1b
 8004c50:	08004cd5 	.word	0x08004cd5
 8004c54:	08004e1b 	.word	0x08004e1b
 8004c58:	08004e1b 	.word	0x08004e1b
 8004c5c:	08004e1b 	.word	0x08004e1b
 8004c60:	08004d17 	.word	0x08004d17
 8004c64:	08004e1b 	.word	0x08004e1b
 8004c68:	08004e1b 	.word	0x08004e1b
 8004c6c:	08004e1b 	.word	0x08004e1b
 8004c70:	08004d57 	.word	0x08004d57
 8004c74:	08004e1b 	.word	0x08004e1b
 8004c78:	08004e1b 	.word	0x08004e1b
 8004c7c:	08004e1b 	.word	0x08004e1b
 8004c80:	08004d99 	.word	0x08004d99
 8004c84:	08004e1b 	.word	0x08004e1b
 8004c88:	08004e1b 	.word	0x08004e1b
 8004c8c:	08004e1b 	.word	0x08004e1b
 8004c90:	08004dd9 	.word	0x08004dd9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fb06 	bl	80052ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0208 	orr.w	r2, r2, #8
 8004cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0204 	bic.w	r2, r2, #4
 8004cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6999      	ldr	r1, [r3, #24]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	619a      	str	r2, [r3, #24]
      break;
 8004cd2:	e0a3      	b.n	8004e1c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fb6c 	bl	80053b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6999      	ldr	r1, [r3, #24]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	021a      	lsls	r2, r3, #8
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	619a      	str	r2, [r3, #24]
      break;
 8004d14:	e082      	b.n	8004e1c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 fbcb 	bl	80054b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 0208 	orr.w	r2, r2, #8
 8004d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0204 	bic.w	r2, r2, #4
 8004d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69d9      	ldr	r1, [r3, #28]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	61da      	str	r2, [r3, #28]
      break;
 8004d54:	e062      	b.n	8004e1c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fc29 	bl	80055b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69da      	ldr	r2, [r3, #28]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69d9      	ldr	r1, [r3, #28]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	021a      	lsls	r2, r3, #8
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	61da      	str	r2, [r3, #28]
      break;
 8004d96:	e041      	b.n	8004e1c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fc6c 	bl	800567c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0208 	orr.w	r2, r2, #8
 8004db2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0204 	bic.w	r2, r2, #4
 8004dc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004dd6:	e021      	b.n	8004e1c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fcaa 	bl	8005738 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004df2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	021a      	lsls	r2, r3, #8
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e18:	e000      	b.n	8004e1c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004e1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop

08004e30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d101      	bne.n	8004e48 <HAL_TIM_ConfigClockSource+0x18>
 8004e44:	2302      	movs	r3, #2
 8004e46:	e0a8      	b.n	8004f9a <HAL_TIM_ConfigClockSource+0x16a>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b40      	cmp	r3, #64	; 0x40
 8004e82:	d067      	beq.n	8004f54 <HAL_TIM_ConfigClockSource+0x124>
 8004e84:	2b40      	cmp	r3, #64	; 0x40
 8004e86:	d80b      	bhi.n	8004ea0 <HAL_TIM_ConfigClockSource+0x70>
 8004e88:	2b10      	cmp	r3, #16
 8004e8a:	d073      	beq.n	8004f74 <HAL_TIM_ConfigClockSource+0x144>
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	d802      	bhi.n	8004e96 <HAL_TIM_ConfigClockSource+0x66>
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d06f      	beq.n	8004f74 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e94:	e078      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004e96:	2b20      	cmp	r3, #32
 8004e98:	d06c      	beq.n	8004f74 <HAL_TIM_ConfigClockSource+0x144>
 8004e9a:	2b30      	cmp	r3, #48	; 0x30
 8004e9c:	d06a      	beq.n	8004f74 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004e9e:	e073      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004ea0:	2b70      	cmp	r3, #112	; 0x70
 8004ea2:	d00d      	beq.n	8004ec0 <HAL_TIM_ConfigClockSource+0x90>
 8004ea4:	2b70      	cmp	r3, #112	; 0x70
 8004ea6:	d804      	bhi.n	8004eb2 <HAL_TIM_ConfigClockSource+0x82>
 8004ea8:	2b50      	cmp	r3, #80	; 0x50
 8004eaa:	d033      	beq.n	8004f14 <HAL_TIM_ConfigClockSource+0xe4>
 8004eac:	2b60      	cmp	r3, #96	; 0x60
 8004eae:	d041      	beq.n	8004f34 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004eb0:	e06a      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb6:	d066      	beq.n	8004f86 <HAL_TIM_ConfigClockSource+0x156>
 8004eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ebc:	d017      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004ebe:	e063      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	6899      	ldr	r1, [r3, #8]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f000 fd0c 	bl	80058ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ee2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	609a      	str	r2, [r3, #8]
      break;
 8004eec:	e04c      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	6899      	ldr	r1, [r3, #8]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f000 fcf5 	bl	80058ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f10:	609a      	str	r2, [r3, #8]
      break;
 8004f12:	e039      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6818      	ldr	r0, [r3, #0]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	6859      	ldr	r1, [r3, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	461a      	mov	r2, r3
 8004f22:	f000 fc69 	bl	80057f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2150      	movs	r1, #80	; 0x50
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fcc2 	bl	80058b6 <TIM_ITRx_SetConfig>
      break;
 8004f32:	e029      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6818      	ldr	r0, [r3, #0]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	6859      	ldr	r1, [r3, #4]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	461a      	mov	r2, r3
 8004f42:	f000 fc88 	bl	8005856 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2160      	movs	r1, #96	; 0x60
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fcb2 	bl	80058b6 <TIM_ITRx_SetConfig>
      break;
 8004f52:	e019      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6818      	ldr	r0, [r3, #0]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	6859      	ldr	r1, [r3, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	461a      	mov	r2, r3
 8004f62:	f000 fc49 	bl	80057f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2140      	movs	r1, #64	; 0x40
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fca2 	bl	80058b6 <TIM_ITRx_SetConfig>
      break;
 8004f72:	e009      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	f000 fc99 	bl	80058b6 <TIM_ITRx_SetConfig>
        break;
 8004f84:	e000      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004f86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	429a      	cmp	r2, r3
 8005030:	d107      	bne.n	8005042 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005040:	e02a      	b.n	8005098 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	429a      	cmp	r2, r3
 800504a:	d107      	bne.n	800505c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2202      	movs	r2, #2
 8005050:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800505a:	e01d      	b.n	8005098 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	429a      	cmp	r2, r3
 8005064:	d107      	bne.n	8005076 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2204      	movs	r2, #4
 800506a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005074:	e010      	b.n	8005098 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	429a      	cmp	r2, r3
 800507e:	d107      	bne.n	8005090 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2208      	movs	r2, #8
 8005084:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800508e:	e003      	b.n	8005098 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f7ff ffb4 	bl	8005006 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	771a      	strb	r2, [r3, #28]
}
 80050a4:	bf00      	nop
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d10b      	bne.n	80050dc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2201      	movs	r2, #1
 80050c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d136      	bne.n	8005140 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050da:	e031      	b.n	8005140 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d10b      	bne.n	80050fe <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2202      	movs	r2, #2
 80050ea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d125      	bne.n	8005140 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050fc:	e020      	b.n	8005140 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	429a      	cmp	r2, r3
 8005106:	d10b      	bne.n	8005120 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2204      	movs	r2, #4
 800510c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d114      	bne.n	8005140 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800511e:	e00f      	b.n	8005140 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	429a      	cmp	r2, r3
 8005128:	d10a      	bne.n	8005140 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2208      	movs	r2, #8
 800512e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d103      	bne.n	8005140 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f7ff ff42 	bl	8004fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	771a      	strb	r2, [r3, #28]
}
 800514c:	bf00      	nop
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	429a      	cmp	r2, r3
 800516a:	d103      	bne.n	8005174 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2201      	movs	r2, #1
 8005170:	771a      	strb	r2, [r3, #28]
 8005172:	e019      	b.n	80051a8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	429a      	cmp	r2, r3
 800517c:	d103      	bne.n	8005186 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2202      	movs	r2, #2
 8005182:	771a      	strb	r2, [r3, #28]
 8005184:	e010      	b.n	80051a8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	429a      	cmp	r2, r3
 800518e:	d103      	bne.n	8005198 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2204      	movs	r2, #4
 8005194:	771a      	strb	r2, [r3, #28]
 8005196:	e007      	b.n	80051a8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d102      	bne.n	80051a8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2208      	movs	r2, #8
 80051a6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f7ff ff18 	bl	8004fde <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	771a      	strb	r2, [r3, #28]
}
 80051b4:	bf00      	nop
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a32      	ldr	r2, [pc, #200]	; (8005298 <TIM_Base_SetConfig+0xdc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d007      	beq.n	80051e4 <TIM_Base_SetConfig+0x28>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051da:	d003      	beq.n	80051e4 <TIM_Base_SetConfig+0x28>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a2f      	ldr	r2, [pc, #188]	; (800529c <TIM_Base_SetConfig+0xe0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d108      	bne.n	80051f6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a27      	ldr	r2, [pc, #156]	; (8005298 <TIM_Base_SetConfig+0xdc>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d013      	beq.n	8005226 <TIM_Base_SetConfig+0x6a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005204:	d00f      	beq.n	8005226 <TIM_Base_SetConfig+0x6a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a24      	ldr	r2, [pc, #144]	; (800529c <TIM_Base_SetConfig+0xe0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d00b      	beq.n	8005226 <TIM_Base_SetConfig+0x6a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a23      	ldr	r2, [pc, #140]	; (80052a0 <TIM_Base_SetConfig+0xe4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d007      	beq.n	8005226 <TIM_Base_SetConfig+0x6a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a22      	ldr	r2, [pc, #136]	; (80052a4 <TIM_Base_SetConfig+0xe8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d003      	beq.n	8005226 <TIM_Base_SetConfig+0x6a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a21      	ldr	r2, [pc, #132]	; (80052a8 <TIM_Base_SetConfig+0xec>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d108      	bne.n	8005238 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800522c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4313      	orrs	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a0e      	ldr	r2, [pc, #56]	; (8005298 <TIM_Base_SetConfig+0xdc>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00b      	beq.n	800527c <TIM_Base_SetConfig+0xc0>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a0e      	ldr	r2, [pc, #56]	; (80052a0 <TIM_Base_SetConfig+0xe4>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d007      	beq.n	800527c <TIM_Base_SetConfig+0xc0>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a0d      	ldr	r2, [pc, #52]	; (80052a4 <TIM_Base_SetConfig+0xe8>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d003      	beq.n	800527c <TIM_Base_SetConfig+0xc0>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a0c      	ldr	r2, [pc, #48]	; (80052a8 <TIM_Base_SetConfig+0xec>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d103      	bne.n	8005284 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	691a      	ldr	r2, [r3, #16]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	615a      	str	r2, [r3, #20]
}
 800528a:	bf00      	nop
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40012c00 	.word	0x40012c00
 800529c:	40000400 	.word	0x40000400
 80052a0:	40014000 	.word	0x40014000
 80052a4:	40014400 	.word	0x40014400
 80052a8:	40014800 	.word	0x40014800

080052ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	f023 0201 	bic.w	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0303 	bic.w	r3, r3, #3
 80052e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f023 0302 	bic.w	r3, r3, #2
 80052f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	4313      	orrs	r3, r2
 8005302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a28      	ldr	r2, [pc, #160]	; (80053a8 <TIM_OC1_SetConfig+0xfc>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00b      	beq.n	8005324 <TIM_OC1_SetConfig+0x78>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a27      	ldr	r2, [pc, #156]	; (80053ac <TIM_OC1_SetConfig+0x100>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d007      	beq.n	8005324 <TIM_OC1_SetConfig+0x78>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a26      	ldr	r2, [pc, #152]	; (80053b0 <TIM_OC1_SetConfig+0x104>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d003      	beq.n	8005324 <TIM_OC1_SetConfig+0x78>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a25      	ldr	r2, [pc, #148]	; (80053b4 <TIM_OC1_SetConfig+0x108>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d10c      	bne.n	800533e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f023 0308 	bic.w	r3, r3, #8
 800532a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f023 0304 	bic.w	r3, r3, #4
 800533c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a19      	ldr	r2, [pc, #100]	; (80053a8 <TIM_OC1_SetConfig+0xfc>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00b      	beq.n	800535e <TIM_OC1_SetConfig+0xb2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a18      	ldr	r2, [pc, #96]	; (80053ac <TIM_OC1_SetConfig+0x100>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d007      	beq.n	800535e <TIM_OC1_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a17      	ldr	r2, [pc, #92]	; (80053b0 <TIM_OC1_SetConfig+0x104>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d003      	beq.n	800535e <TIM_OC1_SetConfig+0xb2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a16      	ldr	r2, [pc, #88]	; (80053b4 <TIM_OC1_SetConfig+0x108>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d111      	bne.n	8005382 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800536c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	621a      	str	r2, [r3, #32]
}
 800539c:	bf00      	nop
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40014000 	.word	0x40014000
 80053b0:	40014400 	.word	0x40014400
 80053b4:	40014800 	.word	0x40014800

080053b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f023 0210 	bic.w	r2, r3, #16
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f023 0320 	bic.w	r3, r3, #32
 8005406:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a24      	ldr	r2, [pc, #144]	; (80054a8 <TIM_OC2_SetConfig+0xf0>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d10d      	bne.n	8005438 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005436:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a1b      	ldr	r2, [pc, #108]	; (80054a8 <TIM_OC2_SetConfig+0xf0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00b      	beq.n	8005458 <TIM_OC2_SetConfig+0xa0>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a1a      	ldr	r2, [pc, #104]	; (80054ac <TIM_OC2_SetConfig+0xf4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d007      	beq.n	8005458 <TIM_OC2_SetConfig+0xa0>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a19      	ldr	r2, [pc, #100]	; (80054b0 <TIM_OC2_SetConfig+0xf8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d003      	beq.n	8005458 <TIM_OC2_SetConfig+0xa0>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a18      	ldr	r2, [pc, #96]	; (80054b4 <TIM_OC2_SetConfig+0xfc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d113      	bne.n	8005480 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800545e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005466:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	621a      	str	r2, [r3, #32]
}
 800549a:	bf00      	nop
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40012c00 	.word	0x40012c00
 80054ac:	40014000 	.word	0x40014000
 80054b0:	40014400 	.word	0x40014400
 80054b4:	40014800 	.word	0x40014800

080054b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0303 	bic.w	r3, r3, #3
 80054f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	021b      	lsls	r3, r3, #8
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a23      	ldr	r2, [pc, #140]	; (80055a4 <TIM_OC3_SetConfig+0xec>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d10d      	bne.n	8005536 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005520:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	021b      	lsls	r3, r3, #8
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005534:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a1a      	ldr	r2, [pc, #104]	; (80055a4 <TIM_OC3_SetConfig+0xec>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00b      	beq.n	8005556 <TIM_OC3_SetConfig+0x9e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a19      	ldr	r2, [pc, #100]	; (80055a8 <TIM_OC3_SetConfig+0xf0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d007      	beq.n	8005556 <TIM_OC3_SetConfig+0x9e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a18      	ldr	r2, [pc, #96]	; (80055ac <TIM_OC3_SetConfig+0xf4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d003      	beq.n	8005556 <TIM_OC3_SetConfig+0x9e>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a17      	ldr	r2, [pc, #92]	; (80055b0 <TIM_OC3_SetConfig+0xf8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d113      	bne.n	800557e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800555c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	621a      	str	r2, [r3, #32]
}
 8005598:	bf00      	nop
 800559a:	371c      	adds	r7, #28
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	40012c00 	.word	0x40012c00
 80055a8:	40014000 	.word	0x40014000
 80055ac:	40014400 	.word	0x40014400
 80055b0:	40014800 	.word	0x40014800

080055b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	021b      	lsls	r3, r3, #8
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	031b      	lsls	r3, r3, #12
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a16      	ldr	r2, [pc, #88]	; (800566c <TIM_OC4_SetConfig+0xb8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00b      	beq.n	8005630 <TIM_OC4_SetConfig+0x7c>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a15      	ldr	r2, [pc, #84]	; (8005670 <TIM_OC4_SetConfig+0xbc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d007      	beq.n	8005630 <TIM_OC4_SetConfig+0x7c>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a14      	ldr	r2, [pc, #80]	; (8005674 <TIM_OC4_SetConfig+0xc0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d003      	beq.n	8005630 <TIM_OC4_SetConfig+0x7c>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a13      	ldr	r2, [pc, #76]	; (8005678 <TIM_OC4_SetConfig+0xc4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d109      	bne.n	8005644 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005636:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	019b      	lsls	r3, r3, #6
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40012c00 	.word	0x40012c00
 8005670:	40014000 	.word	0x40014000
 8005674:	40014400 	.word	0x40014400
 8005678:	40014800 	.word	0x40014800

0800567c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	041b      	lsls	r3, r3, #16
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a15      	ldr	r2, [pc, #84]	; (8005728 <TIM_OC5_SetConfig+0xac>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00b      	beq.n	80056ee <TIM_OC5_SetConfig+0x72>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a14      	ldr	r2, [pc, #80]	; (800572c <TIM_OC5_SetConfig+0xb0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d007      	beq.n	80056ee <TIM_OC5_SetConfig+0x72>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a13      	ldr	r2, [pc, #76]	; (8005730 <TIM_OC5_SetConfig+0xb4>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d003      	beq.n	80056ee <TIM_OC5_SetConfig+0x72>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a12      	ldr	r2, [pc, #72]	; (8005734 <TIM_OC5_SetConfig+0xb8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d109      	bne.n	8005702 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	021b      	lsls	r3, r3, #8
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	621a      	str	r2, [r3, #32]
}
 800571c:	bf00      	nop
 800571e:	371c      	adds	r7, #28
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	40012c00 	.word	0x40012c00
 800572c:	40014000 	.word	0x40014000
 8005730:	40014400 	.word	0x40014400
 8005734:	40014800 	.word	0x40014800

08005738 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800576a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800577e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	051b      	lsls	r3, r3, #20
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a16      	ldr	r2, [pc, #88]	; (80057e8 <TIM_OC6_SetConfig+0xb0>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00b      	beq.n	80057ac <TIM_OC6_SetConfig+0x74>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a15      	ldr	r2, [pc, #84]	; (80057ec <TIM_OC6_SetConfig+0xb4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d007      	beq.n	80057ac <TIM_OC6_SetConfig+0x74>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a14      	ldr	r2, [pc, #80]	; (80057f0 <TIM_OC6_SetConfig+0xb8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d003      	beq.n	80057ac <TIM_OC6_SetConfig+0x74>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a13      	ldr	r2, [pc, #76]	; (80057f4 <TIM_OC6_SetConfig+0xbc>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d109      	bne.n	80057c0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	029b      	lsls	r3, r3, #10
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40012c00 	.word	0x40012c00
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40014400 	.word	0x40014400
 80057f4:	40014800 	.word	0x40014800

080057f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f023 0201 	bic.w	r2, r3, #1
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f023 030a 	bic.w	r3, r3, #10
 8005834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	621a      	str	r2, [r3, #32]
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005856:	b480      	push	{r7}
 8005858:	b087      	sub	sp, #28
 800585a:	af00      	add	r7, sp, #0
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	f023 0210 	bic.w	r2, r3, #16
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	031b      	lsls	r3, r3, #12
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005892:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	621a      	str	r2, [r3, #32]
}
 80058aa:	bf00      	nop
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b085      	sub	sp, #20
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	f043 0307 	orr.w	r3, r3, #7
 80058d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	609a      	str	r2, [r3, #8]
}
 80058e0:	bf00      	nop
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	021a      	lsls	r2, r3, #8
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	431a      	orrs	r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4313      	orrs	r3, r2
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	609a      	str	r2, [r3, #8]
}
 8005920:	bf00      	nop
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f003 031f 	and.w	r3, r3, #31
 800593e:	2201      	movs	r2, #1
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a1a      	ldr	r2, [r3, #32]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	43db      	mvns	r3, r3
 800594e:	401a      	ands	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a1a      	ldr	r2, [r3, #32]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f003 031f 	and.w	r3, r3, #31
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	fa01 f303 	lsl.w	r3, r1, r3
 8005964:	431a      	orrs	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	621a      	str	r2, [r3, #32]
}
 800596a:	bf00      	nop
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
	...

08005978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800598c:	2302      	movs	r3, #2
 800598e:	e054      	b.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a24      	ldr	r2, [pc, #144]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d108      	bne.n	80059cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80059c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a17      	ldr	r2, [pc, #92]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00e      	beq.n	8005a0e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f8:	d009      	beq.n	8005a0e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a13      	ldr	r2, [pc, #76]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d004      	beq.n	8005a0e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a11      	ldr	r2, [pc, #68]	; (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d10c      	bne.n	8005a28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40012c00 	.word	0x40012c00
 8005a4c:	40000400 	.word	0x40000400
 8005a50:	40014000 	.word	0x40014000

08005a54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e060      	b.n	8005b32 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	041b      	lsls	r3, r3, #16
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a14      	ldr	r2, [pc, #80]	; (8005b40 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d115      	bne.n	8005b20 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	051b      	lsls	r3, r3, #20
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40012c00 	.word	0x40012c00

08005b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e040      	b.n	8005c14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fb fa26 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2224      	movs	r2, #36	; 0x24
 8005bac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0201 	bic.w	r2, r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fb28 	bl	8006214 <UART_SetConfig>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e022      	b.n	8005c14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fc54 	bl	8006484 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0201 	orr.w	r2, r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fcdb 	bl	80065c8 <UART_CheckIdleState>
 8005c12:	4603      	mov	r3, r0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08a      	sub	sp, #40	; 0x28
 8005c20:	af02      	add	r7, sp, #8
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	603b      	str	r3, [r7, #0]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	f040 8082 	bne.w	8005d3a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <HAL_UART_Transmit+0x26>
 8005c3c:	88fb      	ldrh	r3, [r7, #6]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e07a      	b.n	8005d3c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_UART_Transmit+0x38>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e073      	b.n	8005d3c <HAL_UART_Transmit+0x120>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2221      	movs	r2, #33	; 0x21
 8005c68:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c6a:	f7fb fabd 	bl	80011e8 <HAL_GetTick>
 8005c6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	88fa      	ldrh	r2, [r7, #6]
 8005c74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	88fa      	ldrh	r2, [r7, #6]
 8005c7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c88:	d108      	bne.n	8005c9c <HAL_UART_Transmit+0x80>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	61bb      	str	r3, [r7, #24]
 8005c9a:	e003      	b.n	8005ca4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005cac:	e02d      	b.n	8005d0a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	2180      	movs	r1, #128	; 0x80
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 fcce 	bl	800665a <UART_WaitOnFlagUntilTimeout>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e039      	b.n	8005d3c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10b      	bne.n	8005ce6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	881a      	ldrh	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cda:	b292      	uxth	r2, r2
 8005cdc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	3302      	adds	r3, #2
 8005ce2:	61bb      	str	r3, [r7, #24]
 8005ce4:	e008      	b.n	8005cf8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	781a      	ldrb	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	b292      	uxth	r2, r2
 8005cf0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1cb      	bne.n	8005cae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2140      	movs	r1, #64	; 0x40
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 fc9a 	bl	800665a <UART_WaitOnFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e005      	b.n	8005d3c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2220      	movs	r2, #32
 8005d34:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	e000      	b.n	8005d3c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005d3a:	2302      	movs	r3, #2
  }
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3720      	adds	r7, #32
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d56:	2b20      	cmp	r3, #32
 8005d58:	d12c      	bne.n	8005db4 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <HAL_UART_Receive_DMA+0x22>
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e025      	b.n	8005db6 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_UART_Receive_DMA+0x34>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e01e      	b.n	8005db6 <HAL_UART_Receive_DMA+0x72>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005da2:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005da4:	88fb      	ldrh	r3, [r7, #6]
 8005da6:	461a      	mov	r2, r3
 8005da8:	68b9      	ldr	r1, [r7, #8]
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 fcd2 	bl	8006754 <UART_Start_Receive_DMA>
 8005db0:	4603      	mov	r3, r0
 8005db2:	e000      	b.n	8005db6 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005db4:	2302      	movs	r3, #2
  }
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b088      	sub	sp, #32
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	f640 030f 	movw	r3, #2063	; 0x80f
 8005de6:	4013      	ands	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d113      	bne.n	8005e18 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00e      	beq.n	8005e18 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	f003 0320 	and.w	r3, r3, #32
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d009      	beq.n	8005e18 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 81cd 	beq.w	80061a8 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	4798      	blx	r3
      }
      return;
 8005e16:	e1c7      	b.n	80061a8 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 80e3 	beq.w	8005fe6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d105      	bne.n	8005e36 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	4ba5      	ldr	r3, [pc, #660]	; (80060c4 <HAL_UART_IRQHandler+0x304>)
 8005e2e:	4013      	ands	r3, r2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 80d8 	beq.w	8005fe6 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d010      	beq.n	8005e62 <HAL_UART_IRQHandler+0xa2>
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00b      	beq.n	8005e62 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e58:	f043 0201 	orr.w	r2, r3, #1
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d010      	beq.n	8005e8e <HAL_UART_IRQHandler+0xce>
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00b      	beq.n	8005e8e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e84:	f043 0204 	orr.w	r2, r3, #4
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d010      	beq.n	8005eba <HAL_UART_IRQHandler+0xfa>
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00b      	beq.n	8005eba <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2204      	movs	r2, #4
 8005ea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eb0:	f043 0202 	orr.w	r2, r3, #2
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d015      	beq.n	8005ef0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	f003 0320 	and.w	r3, r3, #32
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d104      	bne.n	8005ed8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00b      	beq.n	8005ef0 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2208      	movs	r2, #8
 8005ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ee6:	f043 0208 	orr.w	r2, r3, #8
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d011      	beq.n	8005f1e <HAL_UART_IRQHandler+0x15e>
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00c      	beq.n	8005f1e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f14:	f043 0220 	orr.w	r2, r3, #32
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 8141 	beq.w	80061ac <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	f003 0320 	and.w	r3, r3, #32
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00c      	beq.n	8005f4e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d007      	beq.n	8005f4e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f54:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f60:	2b40      	cmp	r3, #64	; 0x40
 8005f62:	d004      	beq.n	8005f6e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d031      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fc71 	bl	8006856 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7e:	2b40      	cmp	r3, #64	; 0x40
 8005f80:	d123      	bne.n	8005fca <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f90:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d013      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9e:	4a4a      	ldr	r2, [pc, #296]	; (80060c8 <HAL_UART_IRQHandler+0x308>)
 8005fa0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fc fb87 	bl	80026ba <HAL_DMA_Abort_IT>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d017      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc0:	e00f      	b.n	8005fe2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f910 	bl	80061e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc8:	e00b      	b.n	8005fe2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f90c 	bl	80061e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd0:	e007      	b.n	8005fe2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f908 	bl	80061e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005fe0:	e0e4      	b.n	80061ac <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe2:	bf00      	nop
    return;
 8005fe4:	e0e2      	b.n	80061ac <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	f040 80a7 	bne.w	800613e <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	f003 0310 	and.w	r3, r3, #16
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 80a1 	beq.w	800613e <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 809b 	beq.w	800613e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2210      	movs	r2, #16
 800600e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601a:	2b40      	cmp	r3, #64	; 0x40
 800601c:	d156      	bne.n	80060cc <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8006028:	893b      	ldrh	r3, [r7, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 80c0 	beq.w	80061b0 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006036:	893a      	ldrh	r2, [r7, #8]
 8006038:	429a      	cmp	r2, r3
 800603a:	f080 80b9 	bcs.w	80061b0 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	893a      	ldrh	r2, [r7, #8]
 8006042:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	2b20      	cmp	r3, #32
 800604e:	d02a      	beq.n	80060a6 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800605e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0201 	bic.w	r2, r2, #1
 800606e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800607e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2220      	movs	r2, #32
 8006084:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0210 	bic.w	r2, r2, #16
 800609a:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fc fad1 	bl	8002648 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f89e 	bl	80061fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80060c0:	e076      	b.n	80061b0 <HAL_UART_IRQHandler+0x3f0>
 80060c2:	bf00      	nop
 80060c4:	04000120 	.word	0x04000120
 80060c8:	080069fb 	.word	0x080069fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060d8:	b29b      	uxth	r3, r3
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d064      	beq.n	80061b4 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 80060ea:	897b      	ldrh	r3, [r7, #10]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d061      	beq.n	80061b4 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80060fe:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689a      	ldr	r2, [r3, #8]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0201 	bic.w	r2, r2, #1
 800610e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0210 	bic.w	r2, r2, #16
 8006130:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006132:	897b      	ldrh	r3, [r7, #10]
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f860 	bl	80061fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800613c:	e03a      	b.n	80061b4 <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00d      	beq.n	8006164 <HAL_UART_IRQHandler+0x3a4>
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d008      	beq.n	8006164 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800615a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fc7b 	bl	8006a58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006162:	e02a      	b.n	80061ba <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00d      	beq.n	800618a <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006174:	2b00      	cmp	r3, #0
 8006176:	d008      	beq.n	800618a <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800617c:	2b00      	cmp	r3, #0
 800617e:	d01b      	beq.n	80061b8 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	4798      	blx	r3
    }
    return;
 8006188:	e016      	b.n	80061b8 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	d012      	beq.n	80061ba <HAL_UART_IRQHandler+0x3fa>
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00d      	beq.n	80061ba <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fc41 	bl	8006a26 <UART_EndTransmit_IT>
    return;
 80061a4:	bf00      	nop
 80061a6:	e008      	b.n	80061ba <HAL_UART_IRQHandler+0x3fa>
      return;
 80061a8:	bf00      	nop
 80061aa:	e006      	b.n	80061ba <HAL_UART_IRQHandler+0x3fa>
    return;
 80061ac:	bf00      	nop
 80061ae:	e004      	b.n	80061ba <HAL_UART_IRQHandler+0x3fa>
      return;
 80061b0:	bf00      	nop
 80061b2:	e002      	b.n	80061ba <HAL_UART_IRQHandler+0x3fa>
      return;
 80061b4:	bf00      	nop
 80061b6:	e000      	b.n	80061ba <HAL_UART_IRQHandler+0x3fa>
    return;
 80061b8:	bf00      	nop
  }

}
 80061ba:	3720      	adds	r7, #32
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800621c:	2300      	movs	r3, #0
 800621e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	4b8b      	ldr	r3, [pc, #556]	; (800646c <UART_SetConfig+0x258>)
 8006240:	4013      	ands	r3, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6812      	ldr	r2, [r2, #0]
 8006246:	6979      	ldr	r1, [r7, #20]
 8006248:	430b      	orrs	r3, r1
 800624a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68da      	ldr	r2, [r3, #12]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	430a      	orrs	r2, r1
 8006284:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a79      	ldr	r2, [pc, #484]	; (8006470 <UART_SetConfig+0x25c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d121      	bne.n	80062d4 <UART_SetConfig+0xc0>
 8006290:	4b78      	ldr	r3, [pc, #480]	; (8006474 <UART_SetConfig+0x260>)
 8006292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006294:	f003 0303 	and.w	r3, r3, #3
 8006298:	2b03      	cmp	r3, #3
 800629a:	d817      	bhi.n	80062cc <UART_SetConfig+0xb8>
 800629c:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <UART_SetConfig+0x90>)
 800629e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a2:	bf00      	nop
 80062a4:	080062b5 	.word	0x080062b5
 80062a8:	080062c1 	.word	0x080062c1
 80062ac:	080062c7 	.word	0x080062c7
 80062b0:	080062bb 	.word	0x080062bb
 80062b4:	2300      	movs	r3, #0
 80062b6:	77fb      	strb	r3, [r7, #31]
 80062b8:	e01e      	b.n	80062f8 <UART_SetConfig+0xe4>
 80062ba:	2302      	movs	r3, #2
 80062bc:	77fb      	strb	r3, [r7, #31]
 80062be:	e01b      	b.n	80062f8 <UART_SetConfig+0xe4>
 80062c0:	2304      	movs	r3, #4
 80062c2:	77fb      	strb	r3, [r7, #31]
 80062c4:	e018      	b.n	80062f8 <UART_SetConfig+0xe4>
 80062c6:	2308      	movs	r3, #8
 80062c8:	77fb      	strb	r3, [r7, #31]
 80062ca:	e015      	b.n	80062f8 <UART_SetConfig+0xe4>
 80062cc:	2310      	movs	r3, #16
 80062ce:	77fb      	strb	r3, [r7, #31]
 80062d0:	bf00      	nop
 80062d2:	e011      	b.n	80062f8 <UART_SetConfig+0xe4>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a67      	ldr	r2, [pc, #412]	; (8006478 <UART_SetConfig+0x264>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d102      	bne.n	80062e4 <UART_SetConfig+0xd0>
 80062de:	2300      	movs	r3, #0
 80062e0:	77fb      	strb	r3, [r7, #31]
 80062e2:	e009      	b.n	80062f8 <UART_SetConfig+0xe4>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a64      	ldr	r2, [pc, #400]	; (800647c <UART_SetConfig+0x268>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d102      	bne.n	80062f4 <UART_SetConfig+0xe0>
 80062ee:	2300      	movs	r3, #0
 80062f0:	77fb      	strb	r3, [r7, #31]
 80062f2:	e001      	b.n	80062f8 <UART_SetConfig+0xe4>
 80062f4:	2310      	movs	r3, #16
 80062f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006300:	d15c      	bne.n	80063bc <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8006302:	7ffb      	ldrb	r3, [r7, #31]
 8006304:	2b08      	cmp	r3, #8
 8006306:	d828      	bhi.n	800635a <UART_SetConfig+0x146>
 8006308:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <UART_SetConfig+0xfc>)
 800630a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630e:	bf00      	nop
 8006310:	08006335 	.word	0x08006335
 8006314:	0800633d 	.word	0x0800633d
 8006318:	08006345 	.word	0x08006345
 800631c:	0800635b 	.word	0x0800635b
 8006320:	0800634b 	.word	0x0800634b
 8006324:	0800635b 	.word	0x0800635b
 8006328:	0800635b 	.word	0x0800635b
 800632c:	0800635b 	.word	0x0800635b
 8006330:	08006353 	.word	0x08006353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006334:	f7fd fde2 	bl	8003efc <HAL_RCC_GetPCLK1Freq>
 8006338:	61b8      	str	r0, [r7, #24]
        break;
 800633a:	e013      	b.n	8006364 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800633c:	f7fd fe00 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 8006340:	61b8      	str	r0, [r7, #24]
        break;
 8006342:	e00f      	b.n	8006364 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006344:	4b4e      	ldr	r3, [pc, #312]	; (8006480 <UART_SetConfig+0x26c>)
 8006346:	61bb      	str	r3, [r7, #24]
        break;
 8006348:	e00c      	b.n	8006364 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800634a:	f7fd fd61 	bl	8003e10 <HAL_RCC_GetSysClockFreq>
 800634e:	61b8      	str	r0, [r7, #24]
        break;
 8006350:	e008      	b.n	8006364 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006356:	61bb      	str	r3, [r7, #24]
        break;
 8006358:	e004      	b.n	8006364 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	77bb      	strb	r3, [r7, #30]
        break;
 8006362:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d074      	beq.n	8006454 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	005a      	lsls	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	441a      	add	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	fbb2 f3f3 	udiv	r3, r2, r3
 800637e:	b29b      	uxth	r3, r3
 8006380:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b0f      	cmp	r3, #15
 8006386:	d916      	bls.n	80063b6 <UART_SetConfig+0x1a2>
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800638e:	d212      	bcs.n	80063b6 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	b29b      	uxth	r3, r3
 8006394:	f023 030f 	bic.w	r3, r3, #15
 8006398:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	085b      	lsrs	r3, r3, #1
 800639e:	b29b      	uxth	r3, r3
 80063a0:	f003 0307 	and.w	r3, r3, #7
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	89fb      	ldrh	r3, [r7, #14]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	89fa      	ldrh	r2, [r7, #14]
 80063b2:	60da      	str	r2, [r3, #12]
 80063b4:	e04e      	b.n	8006454 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	77bb      	strb	r3, [r7, #30]
 80063ba:	e04b      	b.n	8006454 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063bc:	7ffb      	ldrb	r3, [r7, #31]
 80063be:	2b08      	cmp	r3, #8
 80063c0:	d827      	bhi.n	8006412 <UART_SetConfig+0x1fe>
 80063c2:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <UART_SetConfig+0x1b4>)
 80063c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c8:	080063ed 	.word	0x080063ed
 80063cc:	080063f5 	.word	0x080063f5
 80063d0:	080063fd 	.word	0x080063fd
 80063d4:	08006413 	.word	0x08006413
 80063d8:	08006403 	.word	0x08006403
 80063dc:	08006413 	.word	0x08006413
 80063e0:	08006413 	.word	0x08006413
 80063e4:	08006413 	.word	0x08006413
 80063e8:	0800640b 	.word	0x0800640b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063ec:	f7fd fd86 	bl	8003efc <HAL_RCC_GetPCLK1Freq>
 80063f0:	61b8      	str	r0, [r7, #24]
        break;
 80063f2:	e013      	b.n	800641c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f4:	f7fd fda4 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 80063f8:	61b8      	str	r0, [r7, #24]
        break;
 80063fa:	e00f      	b.n	800641c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063fc:	4b20      	ldr	r3, [pc, #128]	; (8006480 <UART_SetConfig+0x26c>)
 80063fe:	61bb      	str	r3, [r7, #24]
        break;
 8006400:	e00c      	b.n	800641c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006402:	f7fd fd05 	bl	8003e10 <HAL_RCC_GetSysClockFreq>
 8006406:	61b8      	str	r0, [r7, #24]
        break;
 8006408:	e008      	b.n	800641c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800640a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800640e:	61bb      	str	r3, [r7, #24]
        break;
 8006410:	e004      	b.n	800641c <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	77bb      	strb	r3, [r7, #30]
        break;
 800641a:	bf00      	nop
    }

    if (pclk != 0U)
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d018      	beq.n	8006454 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	085a      	lsrs	r2, r3, #1
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	441a      	add	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	fbb2 f3f3 	udiv	r3, r2, r3
 8006434:	b29b      	uxth	r3, r3
 8006436:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	2b0f      	cmp	r3, #15
 800643c:	d908      	bls.n	8006450 <UART_SetConfig+0x23c>
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006444:	d204      	bcs.n	8006450 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	60da      	str	r2, [r3, #12]
 800644e:	e001      	b.n	8006454 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006460:	7fbb      	ldrb	r3, [r7, #30]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3720      	adds	r7, #32
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	efff69f3 	.word	0xefff69f3
 8006470:	40013800 	.word	0x40013800
 8006474:	40021000 	.word	0x40021000
 8006478:	40004400 	.word	0x40004400
 800647c:	40004800 	.word	0x40004800
 8006480:	007a1200 	.word	0x007a1200

08006484 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00a      	beq.n	80064ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00a      	beq.n	80064f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00a      	beq.n	8006514 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	f003 0310 	and.w	r3, r3, #16
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00a      	beq.n	8006536 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00a      	beq.n	8006558 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006560:	2b00      	cmp	r3, #0
 8006562:	d01a      	beq.n	800659a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006582:	d10a      	bne.n	800659a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	605a      	str	r2, [r3, #4]
  }
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af02      	add	r7, sp, #8
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065d8:	f7fa fe06 	bl	80011e8 <HAL_GetTick>
 80065dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0308 	and.w	r3, r3, #8
 80065e8:	2b08      	cmp	r3, #8
 80065ea:	d10e      	bne.n	800660a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f82d 	bl	800665a <UART_WaitOnFlagUntilTimeout>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e023      	b.n	8006652 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	2b04      	cmp	r3, #4
 8006616:	d10e      	bne.n	8006636 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006618:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f817 	bl	800665a <UART_WaitOnFlagUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e00d      	b.n	8006652 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2220      	movs	r2, #32
 800663a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2220      	movs	r2, #32
 8006640:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	603b      	str	r3, [r7, #0]
 8006666:	4613      	mov	r3, r2
 8006668:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800666a:	e05e      	b.n	800672a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006672:	d05a      	beq.n	800672a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006674:	f7fa fdb8 	bl	80011e8 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	429a      	cmp	r2, r3
 8006682:	d302      	bcc.n	800668a <UART_WaitOnFlagUntilTimeout+0x30>
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d11b      	bne.n	80066c2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006698:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 0201 	bic.w	r2, r2, #1
 80066a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e043      	b.n	800674a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0304 	and.w	r3, r3, #4
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d02c      	beq.n	800672a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066de:	d124      	bne.n	800672a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 0201 	bic.w	r2, r2, #1
 8006708:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2220      	movs	r2, #32
 800670e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2220      	movs	r2, #32
 8006714:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2220      	movs	r2, #32
 800671a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e00f      	b.n	800674a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	69da      	ldr	r2, [r3, #28]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	4013      	ands	r3, r2
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	429a      	cmp	r2, r3
 8006738:	bf0c      	ite	eq
 800673a:	2301      	moveq	r3, #1
 800673c:	2300      	movne	r3, #0
 800673e:	b2db      	uxtb	r3, r3
 8006740:	461a      	mov	r2, r3
 8006742:	79fb      	ldrb	r3, [r7, #7]
 8006744:	429a      	cmp	r2, r3
 8006746:	d091      	beq.n	800666c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
	...

08006754 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	4613      	mov	r3, r2
 8006760:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	88fa      	ldrh	r2, [r7, #6]
 800676c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2222      	movs	r2, #34	; 0x22
 800677c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006782:	2b00      	cmp	r3, #0
 8006784:	d02b      	beq.n	80067de <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	4a25      	ldr	r2, [pc, #148]	; (8006820 <UART_Start_Receive_DMA+0xcc>)
 800678c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006792:	4a24      	ldr	r2, [pc, #144]	; (8006824 <UART_Start_Receive_DMA+0xd0>)
 8006794:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679a:	4a23      	ldr	r2, [pc, #140]	; (8006828 <UART_Start_Receive_DMA+0xd4>)
 800679c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a2:	2200      	movs	r2, #0
 80067a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3324      	adds	r3, #36	; 0x24
 80067b0:	4619      	mov	r1, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b6:	461a      	mov	r2, r3
 80067b8:	88fb      	ldrh	r3, [r7, #6]
 80067ba:	f7fb fee6 	bl	800258a <HAL_DMA_Start_IT>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00c      	beq.n	80067de <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2210      	movs	r2, #16
 80067c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2220      	movs	r2, #32
 80067d8:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e01c      	b.n	8006818 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067f4:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f042 0201 	orr.w	r2, r2, #1
 8006804:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006814:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	080068b5 	.word	0x080068b5
 8006824:	08006947 	.word	0x08006947
 8006828:	0800697f 	.word	0x0800697f

0800682c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006842:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2220      	movs	r2, #32
 8006848:	679a      	str	r2, [r3, #120]	; 0x78
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800686c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006882:	2b01      	cmp	r3, #1
 8006884:	d107      	bne.n	8006896 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f022 0210 	bic.w	r2, r2, #16
 8006894:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2220      	movs	r2, #32
 800689a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	2b20      	cmp	r3, #32
 80068c8:	d02a      	beq.n	8006920 <UART_DMAReceiveCplt+0x6c>
  {
    huart->RxXferCount = 0U;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068e0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0201 	bic.w	r2, r2, #1
 80068f0:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006900:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2220      	movs	r2, #32
 8006906:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800690c:	2b01      	cmp	r3, #1
 800690e:	d107      	bne.n	8006920 <UART_DMAReceiveCplt+0x6c>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0210 	bic.w	r2, r2, #16
 800691e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006924:	2b01      	cmp	r3, #1
 8006926:	d107      	bne.n	8006938 <UART_DMAReceiveCplt+0x84>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800692e:	4619      	mov	r1, r3
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f7ff fc63 	bl	80061fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006936:	e002      	b.n	800693e <UART_DMAReceiveCplt+0x8a>
    HAL_UART_RxCpltCallback(huart);
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 fbfd 	bl	8007138 <HAL_UART_RxCpltCallback>
}
 800693e:	bf00      	nop
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006958:	2b01      	cmp	r3, #1
 800695a:	d109      	bne.n	8006970 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006962:	085b      	lsrs	r3, r3, #1
 8006964:	b29b      	uxth	r3, r3
 8006966:	4619      	mov	r1, r3
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f7ff fc47 	bl	80061fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800696e:	e002      	b.n	8006976 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f7ff fc2f 	bl	80061d4 <HAL_UART_RxHalfCpltCallback>
}
 8006976:	bf00      	nop
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b086      	sub	sp, #24
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006990:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006996:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a2:	2b80      	cmp	r3, #128	; 0x80
 80069a4:	d109      	bne.n	80069ba <UART_DMAError+0x3c>
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	2b21      	cmp	r3, #33	; 0x21
 80069aa:	d106      	bne.n	80069ba <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80069b4:	6978      	ldr	r0, [r7, #20]
 80069b6:	f7ff ff39 	bl	800682c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c4:	2b40      	cmp	r3, #64	; 0x40
 80069c6:	d109      	bne.n	80069dc <UART_DMAError+0x5e>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b22      	cmp	r3, #34	; 0x22
 80069cc:	d106      	bne.n	80069dc <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80069d6:	6978      	ldr	r0, [r7, #20]
 80069d8:	f7ff ff3d 	bl	8006856 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e2:	f043 0210 	orr.w	r2, r3, #16
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069ec:	6978      	ldr	r0, [r7, #20]
 80069ee:	f7ff fbfb 	bl	80061e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069f2:	bf00      	nop
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f7ff fbe5 	bl	80061e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a1e:	bf00      	nop
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b082      	sub	sp, #8
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a3c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff fbb8 	bl	80061c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a50:	bf00      	nop
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <energyflow_init>:
#include "measurements.h"

EnergyFlow hydros;

void energyflow_init(void)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	af00      	add	r7, sp, #0
	 hydros.charging=0;
 8006a70:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <energyflow_init+0x30>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
	 HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8006a76:	2108      	movs	r1, #8
 8006a78:	4809      	ldr	r0, [pc, #36]	; (8006aa0 <energyflow_init+0x34>)
 8006a7a:	f7fd fcbf 	bl	80043fc <HAL_TIM_PWM_Start>
	 HAL_GPIO_WritePin(SC_ON_GPIO_Port, SC_ON_Pin, RESET);
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a88:	f7fc f8b8 	bl	8002bfc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(FC_DECHARGING_GPIO_Port, FC_DECHARGING_Pin, RESET);
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2180      	movs	r1, #128	; 0x80
 8006a90:	4804      	ldr	r0, [pc, #16]	; (8006aa4 <energyflow_init+0x38>)
 8006a92:	f7fc f8b3 	bl	8002bfc <HAL_GPIO_WritePin>
}
 8006a96:	bf00      	nop
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	20000434 	.word	0x20000434
 8006aa0:	200001ec 	.word	0x200001ec
 8006aa4:	48000400 	.word	0x48000400

08006aa8 <fans_init>:
FC_FANS FANS;

static void doCalculations(void);

void fans_init()
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
	 HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_1,&FANS.controlValue,1);
 8006aac:	2301      	movs	r3, #1
 8006aae:	4a03      	ldr	r2, [pc, #12]	; (8006abc <fans_init+0x14>)
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	4803      	ldr	r0, [pc, #12]	; (8006ac0 <fans_init+0x18>)
 8006ab4:	f7fd fd8e 	bl	80045d4 <HAL_TIM_PWM_Start_DMA>
}
 8006ab8:	bf00      	nop
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	2000043c 	.word	0x2000043c
 8006ac0:	20000284 	.word	0x20000284

08006ac4 <fansStep>:
void fansStep(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
	doCalculations();
 8006ac8:	f000 f802 	bl	8006ad0 <doCalculations>
}
 8006acc:	bf00      	nop
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <doCalculations>:

void doCalculations(void)   //co 150 ms
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0
	sampleTime++;
 8006ad4:	4b1a      	ldr	r3, [pc, #104]	; (8006b40 <doCalculations+0x70>)
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	4b18      	ldr	r3, [pc, #96]	; (8006b40 <doCalculations+0x70>)
 8006ade:	701a      	strb	r2, [r3, #0]
	if (sampleTime>=150)	//oblicz predkosc obrotowa w rpm
 8006ae0:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <doCalculations+0x70>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	2b95      	cmp	r3, #149	; 0x95
 8006ae6:	d926      	bls.n	8006b36 <doCalculations+0x66>
	{
	FANS.rpm_1=pulses_1*200;
 8006ae8:	4b16      	ldr	r3, [pc, #88]	; (8006b44 <doCalculations+0x74>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	461a      	mov	r2, r3
 8006af0:	0092      	lsls	r2, r2, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	461a      	mov	r2, r3
 8006af6:	0091      	lsls	r1, r2, #2
 8006af8:	461a      	mov	r2, r3
 8006afa:	460b      	mov	r3, r1
 8006afc:	4413      	add	r3, r2
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	4b11      	ldr	r3, [pc, #68]	; (8006b48 <doCalculations+0x78>)
 8006b04:	801a      	strh	r2, [r3, #0]
	FANS.rpm_2=pulses_2*200; //200 dla 150 ms okresu
 8006b06:	4b11      	ldr	r3, [pc, #68]	; (8006b4c <doCalculations+0x7c>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	0092      	lsls	r2, r2, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	461a      	mov	r2, r3
 8006b14:	0091      	lsls	r1, r2, #2
 8006b16:	461a      	mov	r2, r3
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4413      	add	r3, r2
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	4b09      	ldr	r3, [pc, #36]	; (8006b48 <doCalculations+0x78>)
 8006b22:	805a      	strh	r2, [r3, #2]
	pulses_1=0;		//zeruj impulsy
 8006b24:	4b07      	ldr	r3, [pc, #28]	; (8006b44 <doCalculations+0x74>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	701a      	strb	r2, [r3, #0]
	pulses_2=0;
 8006b2a:	4b08      	ldr	r3, [pc, #32]	; (8006b4c <doCalculations+0x7c>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	701a      	strb	r2, [r3, #0]
	sampleTime=0;	//zeruj czas pomiaru
 8006b30:	4b03      	ldr	r3, [pc, #12]	; (8006b40 <doCalculations+0x70>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	701a      	strb	r2, [r3, #0]
	}
}
 8006b36:	bf00      	nop
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	2000003c 	.word	0x2000003c
 8006b44:	2000003d 	.word	0x2000003d
 8006b48:	20000438 	.word	0x20000438
 8006b4c:	2000003e 	.word	0x2000003e

08006b50 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	80fb      	strh	r3, [r7, #6]
	//Zlicza impulsy poszczegolnych wentylatorow
	switch(GPIO_Pin)
 8006b5a:	88fb      	ldrh	r3, [r7, #6]
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d009      	beq.n	8006b74 <HAL_GPIO_EXTI_Callback+0x24>
 8006b60:	2b40      	cmp	r3, #64	; 0x40
 8006b62:	d000      	beq.n	8006b66 <HAL_GPIO_EXTI_Callback+0x16>
	break;
	case fan_2_PIN:
		pulses_2++;
	break;
	default:
	break;
 8006b64:	e00d      	b.n	8006b82 <HAL_GPIO_EXTI_Callback+0x32>
		pulses_1++;
 8006b66:	4b0a      	ldr	r3, [pc, #40]	; (8006b90 <HAL_GPIO_EXTI_Callback+0x40>)
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	b2da      	uxtb	r2, r3
 8006b6e:	4b08      	ldr	r3, [pc, #32]	; (8006b90 <HAL_GPIO_EXTI_Callback+0x40>)
 8006b70:	701a      	strb	r2, [r3, #0]
	break;
 8006b72:	e006      	b.n	8006b82 <HAL_GPIO_EXTI_Callback+0x32>
		pulses_2++;
 8006b74:	4b07      	ldr	r3, [pc, #28]	; (8006b94 <HAL_GPIO_EXTI_Callback+0x44>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	4b05      	ldr	r3, [pc, #20]	; (8006b94 <HAL_GPIO_EXTI_Callback+0x44>)
 8006b7e:	701a      	strb	r2, [r3, #0]
	break;
 8006b80:	bf00      	nop
	}
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	2000003d 	.word	0x2000003d
 8006b94:	2000003e 	.word	0x2000003e

08006b98 <hydrogreen_init>:
/**
* @fn hydrogreen_init(void)
* @brief Glowna funkcja inicjalizujaca, powinna zostac wywolana wewnatrz hydrogreen_main()
*/
static void hydrogreen_init(void)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	af00      	add	r7, sp, #0
	watchdog_init();
 8006b9c:	f000 fce2 	bl	8007564 <watchdog_init>
    timers_init();
 8006ba0:	f000 fbe4 	bl	800736c <timers_init>
    rs485_init();
 8006ba4:	f000 fa0c 	bl	8006fc0 <rs485_init>
    adc_init();
 8006ba8:	f000 f844 	bl	8006c34 <adc_init>
    motor_init();
 8006bac:	f000 f950 	bl	8006e50 <motor_init>
    energyflow_init();
 8006bb0:	f7ff ff5c 	bl	8006a6c <energyflow_init>
    fans_init();
 8006bb4:	f7ff ff78 	bl	8006aa8 <fans_init>
}
 8006bb8:	bf00      	nop
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <hydrogreen_step1kHz>:
/**
* @fn hydrogreen_step1kHz(void)
* @brief Glowna funkcja wykonywana co T = 1ms, powinna zostac wywolana wewnatrz hydrogreen_main()
*/
static inline void hydrogreen_step1kHz(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	af00      	add	r7, sp, #0
#ifdef HYDROGREEN_DEBUG
  HAL_GPIO_WritePin(GPIOA, DBG_Pin, GPIO_PIN_RESET);
#endif
  watchdog_step();
 8006bc0:	f000 fda4 	bl	800770c <watchdog_step>
  fansStep();
 8006bc4:	f7ff ff7e 	bl	8006ac4 <fansStep>
  PIDstep();
 8006bc8:	f000 f952 	bl	8006e70 <PIDstep>
  adc_step();
 8006bcc:	f000 f938 	bl	8006e40 <adc_step>
#ifdef HYDROGREEN_DEBUG
  HAL_GPIO_WritePin(GPIOA, DBG_Pin, GPIO_PIN_SET);
#endif
}
 8006bd0:	bf00      	nop
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <hydrogreen_step10kHz>:
/**
* @fn hydrogreen_step(void)
* @brief Glowna funkcja wykonywana co T = 0,1ms, powinna zostac wywolana wewnatrz hydrogreen_main()
*/
static inline void hydrogreen_step10kHz(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
 rs485_step();
 8006bd8:	f000 fa02 	bl	8006fe0 <rs485_step>
}
 8006bdc:	bf00      	nop
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <hydrogreen_main>:
/**
* @fn hydrogreen_main(void)
* @brief Glowna funkcja programu, powinna zostac wywolana w pliku main.c, pomiedzy  USER CODE BEGIN 2 a USER CODE END 2
*/
void hydrogreen_main(void)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
  hydrogreen_init();
 8006be4:	f7ff ffd8 	bl	8006b98 <hydrogreen_init>

 while (1)
    {
      //Sprawdz czy wystapil tick timera nastepujacy z f = 1kHz
      if (timers_tick1kHz)
 8006be8:	4b0c      	ldr	r3, [pc, #48]	; (8006c1c <hydrogreen_main+0x3c>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d008      	beq.n	8006c04 <hydrogreen_main+0x24>
	{
	  timers_beforeStep1kHz();
 8006bf2:	f000 fc19 	bl	8007428 <timers_beforeStep1kHz>

	  hydrogreen_step1kHz();
 8006bf6:	f7ff ffe1 	bl	8006bbc <hydrogreen_step1kHz>

	  timers_afterStep1kHz();
 8006bfa:	f000 fc21 	bl	8007440 <timers_afterStep1kHz>

	  timers_tick1kHz = 0;
 8006bfe:	4b07      	ldr	r3, [pc, #28]	; (8006c1c <hydrogreen_main+0x3c>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	701a      	strb	r2, [r3, #0]
	}

      //Sprawdz czy wystapil tick timera nastepujacy z f = 10kHz
      if (timers_tick10kHz)
 8006c04:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <hydrogreen_main+0x40>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0ec      	beq.n	8006be8 <hydrogreen_main+0x8>
	{
	  hydrogreen_step10kHz();
 8006c0e:	f7ff ffe1 	bl	8006bd4 <hydrogreen_step10kHz>
	  timers_tick10kHz = 0;
 8006c12:	4b03      	ldr	r3, [pc, #12]	; (8006c20 <hydrogreen_main+0x40>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	701a      	strb	r2, [r3, #0]
      if (timers_tick1kHz)
 8006c18:	e7e6      	b.n	8006be8 <hydrogreen_main+0x8>
 8006c1a:	bf00      	nop
 8006c1c:	20000490 	.word	0x20000490
 8006c20:	2000048c 	.word	0x2000048c

08006c24 <hydrogreen_hardFault>:
/**
* @fn hydrogreen_hardFault(void)
* @brief Sygnalizacja wystapienia hard fault'a, wywolac w pliku main.c, w funkcji Error_Handler()
*/
void hydrogreen_hardFault(void)
{
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0
  //HAL_GPIO_WritePin(GPIOB, LED_NUCLEO_Pin, GPIO_PIN_SET);
}
 8006c28:	bf00      	nop
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
	...

08006c34 <adc_init>:
static void averaging_Values(void);
/*
 * Inicjalizacja adc z dma oraz stałych filtrujących dla filtru
 */
void adc_init(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	af00      	add	r7, sp, #0
  HAL_ADC_Start_DMA(&adcChannel, (uint32_t*) adcDataToCalculate, 4);
 8006c38:	2204      	movs	r2, #4
 8006c3a:	490a      	ldr	r1, [pc, #40]	; (8006c64 <adc_init+0x30>)
 8006c3c:	480a      	ldr	r0, [pc, #40]	; (8006c68 <adc_init+0x34>)
 8006c3e:	f7fa fc8f 	bl	8001560 <HAL_ADC_Start_DMA>
  VALUES.FC_Temp_Const=255;
 8006c42:	4b0a      	ldr	r3, [pc, #40]	; (8006c6c <adc_init+0x38>)
 8006c44:	22ff      	movs	r2, #255	; 0xff
 8006c46:	731a      	strb	r2, [r3, #12]
  VALUES.FC_V_Const=255;
 8006c48:	4b08      	ldr	r3, [pc, #32]	; (8006c6c <adc_init+0x38>)
 8006c4a:	22ff      	movs	r2, #255	; 0xff
 8006c4c:	771a      	strb	r2, [r3, #28]
  VALUES.SC_C_Const=255;
 8006c4e:	4b07      	ldr	r3, [pc, #28]	; (8006c6c <adc_init+0x38>)
 8006c50:	22ff      	movs	r2, #255	; 0xff
 8006c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  VALUES.SC_V_Const=255;
 8006c56:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <adc_init+0x38>)
 8006c58:	22ff      	movs	r2, #255	; 0xff
 8006c5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8006c5e:	bf00      	nop
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20000480 	.word	0x20000480
 8006c68:	2000009c 	.word	0x2000009c
 8006c6c:	20000440 	.word	0x20000440

08006c70 <calculateValues>:
/*
 * Funkcja przelicza wartosci z ADC na wartosci uzyteczne
 */
static void calculateValues(void)
{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
	//Przelicza wartosci z ADC na temperature w stopniach Celsjusza, napiecie i prad
	VALUES.FC_Temp_to_average=(((4095.0f-(float)adcDataToCalculate[0])*20))/300.0f; //zależność wyznaczona eksperymentalnie w sali
 8006c74:	4b26      	ldr	r3, [pc, #152]	; (8006d10 <calculateValues+0xa0>)
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	ee07 3a90 	vmov	s15, r3
 8006c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c80:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8006d14 <calculateValues+0xa4>
 8006c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c88:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006c8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006c90:	eddf 6a21 	vldr	s13, [pc, #132]	; 8006d18 <calculateValues+0xa8>
 8006c94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c98:	4b20      	ldr	r3, [pc, #128]	; (8006d1c <calculateValues+0xac>)
 8006c9a:	edc3 7a02 	vstr	s15, [r3, #8]
	VALUES.SC_V_to_average=((float)adcDataToCalculate[1]*60)/4095.0f;
 8006c9e:	4b1c      	ldr	r3, [pc, #112]	; (8006d10 <calculateValues+0xa0>)
 8006ca0:	885b      	ldrh	r3, [r3, #2]
 8006ca2:	ee07 3a90 	vmov	s15, r3
 8006ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006caa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006d20 <calculateValues+0xb0>
 8006cae:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006cb2:	eddf 6a18 	vldr	s13, [pc, #96]	; 8006d14 <calculateValues+0xa4>
 8006cb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006cba:	4b18      	ldr	r3, [pc, #96]	; (8006d1c <calculateValues+0xac>)
 8006cbc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	VALUES.SC_C_to_average=((float)adcDataToCalculate[2]*5)/4095.0f;
 8006cc0:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <calculateValues+0xa0>)
 8006cc2:	889b      	ldrh	r3, [r3, #4]
 8006cc4:	ee07 3a90 	vmov	s15, r3
 8006cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ccc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8006cd0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006cd4:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8006d14 <calculateValues+0xa4>
 8006cd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006cdc:	4b0f      	ldr	r3, [pc, #60]	; (8006d1c <calculateValues+0xac>)
 8006cde:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	VALUES.FC_V_to_average=((float)adcDataToCalculate[3]*60)/4095.0f;
 8006ce2:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <calculateValues+0xa0>)
 8006ce4:	88db      	ldrh	r3, [r3, #6]
 8006ce6:	ee07 3a90 	vmov	s15, r3
 8006cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cee:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006d20 <calculateValues+0xb0>
 8006cf2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006cf6:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006d14 <calculateValues+0xa4>
 8006cfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006cfe:	4b07      	ldr	r3, [pc, #28]	; (8006d1c <calculateValues+0xac>)
 8006d00:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8006d04:	bf00      	nop
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	20000480 	.word	0x20000480
 8006d14:	457ff000 	.word	0x457ff000
 8006d18:	43960000 	.word	0x43960000
 8006d1c:	20000440 	.word	0x20000440
 8006d20:	42700000 	.word	0x42700000

08006d24 <averaging_Values>:
/*
 * Funkcja filtrujaca pomiary
 */
static void averaging_Values(void)
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0
	VALUES.FC_TEMP.value=(VALUES.prev_FC_Temp*(VALUES.FC_Temp_Const-1)+VALUES.FC_Temp_to_average)/VALUES.FC_Temp_Const;
 8006d28:	4b44      	ldr	r3, [pc, #272]	; (8006e3c <averaging_Values+0x118>)
 8006d2a:	ed93 7a01 	vldr	s14, [r3, #4]
 8006d2e:	4b43      	ldr	r3, [pc, #268]	; (8006e3c <averaging_Values+0x118>)
 8006d30:	7b1b      	ldrb	r3, [r3, #12]
 8006d32:	3b01      	subs	r3, #1
 8006d34:	ee07 3a90 	vmov	s15, r3
 8006d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d40:	4b3e      	ldr	r3, [pc, #248]	; (8006e3c <averaging_Values+0x118>)
 8006d42:	edd3 7a02 	vldr	s15, [r3, #8]
 8006d46:	ee77 6a27 	vadd.f32	s13, s14, s15
 8006d4a:	4b3c      	ldr	r3, [pc, #240]	; (8006e3c <averaging_Values+0x118>)
 8006d4c:	7b1b      	ldrb	r3, [r3, #12]
 8006d4e:	ee07 3a90 	vmov	s15, r3
 8006d52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d5a:	4b38      	ldr	r3, [pc, #224]	; (8006e3c <averaging_Values+0x118>)
 8006d5c:	edc3 7a00 	vstr	s15, [r3]
	VALUES.SC_V.value=(VALUES.prev_SC_V*(VALUES.SC_V_Const-1)+VALUES.SC_V_to_average)/VALUES.SC_V_Const;
 8006d60:	4b36      	ldr	r3, [pc, #216]	; (8006e3c <averaging_Values+0x118>)
 8006d62:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8006d66:	4b35      	ldr	r3, [pc, #212]	; (8006e3c <averaging_Values+0x118>)
 8006d68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	ee07 3a90 	vmov	s15, r3
 8006d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d7a:	4b30      	ldr	r3, [pc, #192]	; (8006e3c <averaging_Values+0x118>)
 8006d7c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006d80:	ee77 6a27 	vadd.f32	s13, s14, s15
 8006d84:	4b2d      	ldr	r3, [pc, #180]	; (8006e3c <averaging_Values+0x118>)
 8006d86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d96:	4b29      	ldr	r3, [pc, #164]	; (8006e3c <averaging_Values+0x118>)
 8006d98:	edc3 7a08 	vstr	s15, [r3, #32]
	VALUES.SC_C.value=(VALUES.prev_SC_C*(VALUES.SC_C_Const-1)+VALUES.SC_C_to_average)/VALUES.SC_C_Const;
 8006d9c:	4b27      	ldr	r3, [pc, #156]	; (8006e3c <averaging_Values+0x118>)
 8006d9e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8006da2:	4b26      	ldr	r3, [pc, #152]	; (8006e3c <averaging_Values+0x118>)
 8006da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da8:	3b01      	subs	r3, #1
 8006daa:	ee07 3a90 	vmov	s15, r3
 8006dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006db2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006db6:	4b21      	ldr	r3, [pc, #132]	; (8006e3c <averaging_Values+0x118>)
 8006db8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006dbc:	ee77 6a27 	vadd.f32	s13, s14, s15
 8006dc0:	4b1e      	ldr	r3, [pc, #120]	; (8006e3c <averaging_Values+0x118>)
 8006dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dc6:	ee07 3a90 	vmov	s15, r3
 8006dca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dd2:	4b1a      	ldr	r3, [pc, #104]	; (8006e3c <averaging_Values+0x118>)
 8006dd4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	VALUES.FC_V.value=(VALUES.prev_FC_V*(VALUES.FC_V_Const-1)+VALUES.FC_V_to_average)/VALUES.FC_V_Const;
 8006dd8:	4b18      	ldr	r3, [pc, #96]	; (8006e3c <averaging_Values+0x118>)
 8006dda:	ed93 7a05 	vldr	s14, [r3, #20]
 8006dde:	4b17      	ldr	r3, [pc, #92]	; (8006e3c <averaging_Values+0x118>)
 8006de0:	7f1b      	ldrb	r3, [r3, #28]
 8006de2:	3b01      	subs	r3, #1
 8006de4:	ee07 3a90 	vmov	s15, r3
 8006de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006df0:	4b12      	ldr	r3, [pc, #72]	; (8006e3c <averaging_Values+0x118>)
 8006df2:	edd3 7a06 	vldr	s15, [r3, #24]
 8006df6:	ee77 6a27 	vadd.f32	s13, s14, s15
 8006dfa:	4b10      	ldr	r3, [pc, #64]	; (8006e3c <averaging_Values+0x118>)
 8006dfc:	7f1b      	ldrb	r3, [r3, #28]
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e0a:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <averaging_Values+0x118>)
 8006e0c:	edc3 7a04 	vstr	s15, [r3, #16]
	VALUES.prev_FC_Temp=VALUES.FC_Temp_to_average;
 8006e10:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <averaging_Values+0x118>)
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	4a09      	ldr	r2, [pc, #36]	; (8006e3c <averaging_Values+0x118>)
 8006e16:	6053      	str	r3, [r2, #4]
	VALUES.prev_FC_V=VALUES.FC_V_to_average;
 8006e18:	4b08      	ldr	r3, [pc, #32]	; (8006e3c <averaging_Values+0x118>)
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	4a07      	ldr	r2, [pc, #28]	; (8006e3c <averaging_Values+0x118>)
 8006e1e:	6153      	str	r3, [r2, #20]
	VALUES.prev_SC_C=VALUES.SC_C_to_average;
 8006e20:	4b06      	ldr	r3, [pc, #24]	; (8006e3c <averaging_Values+0x118>)
 8006e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e24:	4a05      	ldr	r2, [pc, #20]	; (8006e3c <averaging_Values+0x118>)
 8006e26:	6353      	str	r3, [r2, #52]	; 0x34
	VALUES.prev_SC_V=VALUES.SC_V_to_average;
 8006e28:	4b04      	ldr	r3, [pc, #16]	; (8006e3c <averaging_Values+0x118>)
 8006e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2c:	4a03      	ldr	r2, [pc, #12]	; (8006e3c <averaging_Values+0x118>)
 8006e2e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8006e30:	bf00      	nop
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	20000440 	.word	0x20000440

08006e40 <adc_step>:
void adc_step()
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	af00      	add	r7, sp, #0
	calculateValues();
 8006e44:	f7ff ff14 	bl	8006c70 <calculateValues>
	averaging_Values();
 8006e48:	f7ff ff6c 	bl	8006d24 <averaging_Values>
}
 8006e4c:	bf00      	nop
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <motor_init>:

#include "tim.h"
#include "rs485.h"

void motor_init(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_1, (uint32_t*)RS485_RX_VERIFIED_DATA.motorPWM,1);
 8006e54:	4b04      	ldr	r3, [pc, #16]	; (8006e68 <motor_init+0x18>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	4803      	ldr	r0, [pc, #12]	; (8006e6c <motor_init+0x1c>)
 8006e60:	f7fd fbb8 	bl	80045d4 <HAL_TIM_PWM_Start_DMA>
}
 8006e64:	bf00      	nop
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	20000488 	.word	0x20000488
 8006e6c:	200002d0 	.word	0x200002d0

08006e70 <PIDstep>:
 float Kd=2;
 static uint32_t value=0;


void PIDstep()
{
 8006e70:	b480      	push	{r7}
 8006e72:	af00      	add	r7, sp, #0
	//setTemp=RS485_RX_VERIFIED_DATA.fcPrepareToRaceMode;
	//setTemp=100;
	fcTemp=VALUES.FC_TEMP.value;
 8006e74:	4b44      	ldr	r3, [pc, #272]	; (8006f88 <PIDstep+0x118>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a44      	ldr	r2, [pc, #272]	; (8006f8c <PIDstep+0x11c>)
 8006e7a:	6013      	str	r3, [r2, #0]
	error=fcTemp-setTemp;
 8006e7c:	4b43      	ldr	r3, [pc, #268]	; (8006f8c <PIDstep+0x11c>)
 8006e7e:	ed93 7a00 	vldr	s14, [r3]
 8006e82:	4b43      	ldr	r3, [pc, #268]	; (8006f90 <PIDstep+0x120>)
 8006e84:	edd3 7a00 	vldr	s15, [r3]
 8006e88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e8c:	4b41      	ldr	r3, [pc, #260]	; (8006f94 <PIDstep+0x124>)
 8006e8e:	edc3 7a00 	vstr	s15, [r3]
	dError=error-lastError;
 8006e92:	4b40      	ldr	r3, [pc, #256]	; (8006f94 <PIDstep+0x124>)
 8006e94:	ed93 7a00 	vldr	s14, [r3]
 8006e98:	4b3f      	ldr	r3, [pc, #252]	; (8006f98 <PIDstep+0x128>)
 8006e9a:	edd3 7a00 	vldr	s15, [r3]
 8006e9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ea2:	4b3e      	ldr	r3, [pc, #248]	; (8006f9c <PIDstep+0x12c>)
 8006ea4:	edc3 7a00 	vstr	s15, [r3]
	iError=iError+lastError;
 8006ea8:	4b3d      	ldr	r3, [pc, #244]	; (8006fa0 <PIDstep+0x130>)
 8006eaa:	ed93 7a00 	vldr	s14, [r3]
 8006eae:	4b3a      	ldr	r3, [pc, #232]	; (8006f98 <PIDstep+0x128>)
 8006eb0:	edd3 7a00 	vldr	s15, [r3]
 8006eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006eb8:	4b39      	ldr	r3, [pc, #228]	; (8006fa0 <PIDstep+0x130>)
 8006eba:	edc3 7a00 	vstr	s15, [r3]
	lastError=error;
 8006ebe:	4b35      	ldr	r3, [pc, #212]	; (8006f94 <PIDstep+0x124>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a35      	ldr	r2, [pc, #212]	; (8006f98 <PIDstep+0x128>)
 8006ec4:	6013      	str	r3, [r2, #0]
	if(fcTemp<setTemp)
 8006ec6:	4b31      	ldr	r3, [pc, #196]	; (8006f8c <PIDstep+0x11c>)
 8006ec8:	ed93 7a00 	vldr	s14, [r3]
 8006ecc:	4b30      	ldr	r3, [pc, #192]	; (8006f90 <PIDstep+0x120>)
 8006ece:	edd3 7a00 	vldr	s15, [r3]
 8006ed2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eda:	d506      	bpl.n	8006eea <PIDstep+0x7a>
	{
		value=0;
 8006edc:	4b31      	ldr	r3, [pc, #196]	; (8006fa4 <PIDstep+0x134>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	601a      	str	r2, [r3, #0]
		iError=0;
 8006ee2:	4b2f      	ldr	r3, [pc, #188]	; (8006fa0 <PIDstep+0x130>)
 8006ee4:	f04f 0200 	mov.w	r2, #0
 8006ee8:	601a      	str	r2, [r3, #0]
	}
	if(iError>=150)
 8006eea:	4b2d      	ldr	r3, [pc, #180]	; (8006fa0 <PIDstep+0x130>)
 8006eec:	edd3 7a00 	vldr	s15, [r3]
 8006ef0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8006fa8 <PIDstep+0x138>
 8006ef4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006efc:	db02      	blt.n	8006f04 <PIDstep+0x94>
	{
		iError=150;
 8006efe:	4b28      	ldr	r3, [pc, #160]	; (8006fa0 <PIDstep+0x130>)
 8006f00:	4a2a      	ldr	r2, [pc, #168]	; (8006fac <PIDstep+0x13c>)
 8006f02:	601a      	str	r2, [r3, #0]
	}
	value=Kp*error+Ki*iError+Kd*dError;
 8006f04:	4b2a      	ldr	r3, [pc, #168]	; (8006fb0 <PIDstep+0x140>)
 8006f06:	ed93 7a00 	vldr	s14, [r3]
 8006f0a:	4b22      	ldr	r3, [pc, #136]	; (8006f94 <PIDstep+0x124>)
 8006f0c:	edd3 7a00 	vldr	s15, [r3]
 8006f10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f14:	4b27      	ldr	r3, [pc, #156]	; (8006fb4 <PIDstep+0x144>)
 8006f16:	edd3 6a00 	vldr	s13, [r3]
 8006f1a:	4b21      	ldr	r3, [pc, #132]	; (8006fa0 <PIDstep+0x130>)
 8006f1c:	edd3 7a00 	vldr	s15, [r3]
 8006f20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f28:	4b23      	ldr	r3, [pc, #140]	; (8006fb8 <PIDstep+0x148>)
 8006f2a:	edd3 6a00 	vldr	s13, [r3]
 8006f2e:	4b1b      	ldr	r3, [pc, #108]	; (8006f9c <PIDstep+0x12c>)
 8006f30:	edd3 7a00 	vldr	s15, [r3]
 8006f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f40:	ee17 2a90 	vmov	r2, s15
 8006f44:	4b17      	ldr	r3, [pc, #92]	; (8006fa4 <PIDstep+0x134>)
 8006f46:	601a      	str	r2, [r3, #0]
	if(fcTemp<setTemp)
 8006f48:	4b10      	ldr	r3, [pc, #64]	; (8006f8c <PIDstep+0x11c>)
 8006f4a:	ed93 7a00 	vldr	s14, [r3]
 8006f4e:	4b10      	ldr	r3, [pc, #64]	; (8006f90 <PIDstep+0x120>)
 8006f50:	edd3 7a00 	vldr	s15, [r3]
 8006f54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f5c:	d502      	bpl.n	8006f64 <PIDstep+0xf4>
	{
		value=0;
 8006f5e:	4b11      	ldr	r3, [pc, #68]	; (8006fa4 <PIDstep+0x134>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]
	}
	if(value>=255)
 8006f64:	4b0f      	ldr	r3, [pc, #60]	; (8006fa4 <PIDstep+0x134>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2bfe      	cmp	r3, #254	; 0xfe
 8006f6a:	d903      	bls.n	8006f74 <PIDstep+0x104>
	{
		FANS.controlValue=255;
 8006f6c:	4b13      	ldr	r3, [pc, #76]	; (8006fbc <PIDstep+0x14c>)
 8006f6e:	22ff      	movs	r2, #255	; 0xff
 8006f70:	605a      	str	r2, [r3, #4]
	else
	{
		FANS.controlValue=value;
	}

}
 8006f72:	e003      	b.n	8006f7c <PIDstep+0x10c>
		FANS.controlValue=value;
 8006f74:	4b0b      	ldr	r3, [pc, #44]	; (8006fa4 <PIDstep+0x134>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a10      	ldr	r2, [pc, #64]	; (8006fbc <PIDstep+0x14c>)
 8006f7a:	6053      	str	r3, [r2, #4]
}
 8006f7c:	bf00      	nop
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	20000440 	.word	0x20000440
 8006f8c:	20000040 	.word	0x20000040
 8006f90:	2000000c 	.word	0x2000000c
 8006f94:	20000044 	.word	0x20000044
 8006f98:	20000050 	.word	0x20000050
 8006f9c:	2000004c 	.word	0x2000004c
 8006fa0:	20000048 	.word	0x20000048
 8006fa4:	20000054 	.word	0x20000054
 8006fa8:	43160000 	.word	0x43160000
 8006fac:	43160000 	.word	0x43160000
 8006fb0:	20000010 	.word	0x20000010
 8006fb4:	20000014 	.word	0x20000014
 8006fb8:	20000018 	.word	0x20000018
 8006fbc:	20000438 	.word	0x20000438

08006fc0 <rs485_init>:
/**
* @fn rs485_init(void)
* @brief Inicjalizacja magistrali RS-485, umiescic wewnatrz hydrogreen_init(void)
*/
void rs485_init(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
  HAL_UART_Receive_DMA(&UART_PORT_RS485, &RS485_BUFF.rx, 1);				//Rozpocznij nasluchiwanie
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	4904      	ldr	r1, [pc, #16]	; (8006fd8 <rs485_init+0x18>)
 8006fc8:	4804      	ldr	r0, [pc, #16]	; (8006fdc <rs485_init+0x1c>)
 8006fca:	f7fe febb 	bl	8005d44 <HAL_UART_Receive_DMA>
  prepareNewDataToSend();								//Przygotuj nowy pakiet danych
 8006fce:	f000 f8e7 	bl	80071a0 <prepareNewDataToSend>
}
 8006fd2:	bf00      	nop
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	2000007d 	.word	0x2000007d
 8006fdc:	200003ac 	.word	0x200003ac

08006fe0 <rs485_step>:
/**
* @fn rs485_step(void)
* @brief Funkcja obslugujaca magistrale, umiescic wewnatrz hydrogreen_step(void)
*/
void rs485_step(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
  receiveData();
 8006fe4:	f000 f840 	bl	8007068 <receiveData>
  sendData();
 8006fe8:	f000 f802 	bl	8006ff0 <sendData>
}
 8006fec:	bf00      	nop
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <sendData>:
/**
* @fn sendData(void)
* @brief Funkcja ktorej zadaniem jest obsluga linii TX, powinna zostac umieszczona w wewnatrz rs485_step()
*/
static void sendData(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	af00      	add	r7, sp, #0

  static uint16_t cntEndOfTxTick=0;							//Zmienna wykorzystywana do odliczenia czasu wskazujacego na koniec transmisji

  //Sprawdz czy wyslano cala ramke danych
  if (posInTxTab < TX_FRAME_LENGHT)
 8006ff4:	4b17      	ldr	r3, [pc, #92]	; (8007054 <sendData+0x64>)
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	2b14      	cmp	r3, #20
 8006ffa:	d816      	bhi.n	800702a <sendData+0x3a>
    {
      //Nie, wysylaj dalej
      RS485_BUFF.tx = dataToTx[posInTxTab];
 8006ffc:	4b15      	ldr	r3, [pc, #84]	; (8007054 <sendData+0x64>)
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	461a      	mov	r2, r3
 8007002:	4b15      	ldr	r3, [pc, #84]	; (8007058 <sendData+0x68>)
 8007004:	5c9a      	ldrb	r2, [r3, r2]
 8007006:	4b15      	ldr	r3, [pc, #84]	; (800705c <sendData+0x6c>)
 8007008:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800700a:	b672      	cpsid	i

      //Na czas wysylania danych wylacz przerwania
      __disable_irq();
      HAL_UART_Transmit(&UART_PORT_RS485, &RS485_BUFF.tx, 1, HAL_MAX_DELAY);
 800700c:	f04f 33ff 	mov.w	r3, #4294967295
 8007010:	2201      	movs	r2, #1
 8007012:	4912      	ldr	r1, [pc, #72]	; (800705c <sendData+0x6c>)
 8007014:	4812      	ldr	r0, [pc, #72]	; (8007060 <sendData+0x70>)
 8007016:	f7fe fe01 	bl	8005c1c <HAL_UART_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 800701a:	b662      	cpsie	i
      __enable_irq();
      posInTxTab++;
 800701c:	4b0d      	ldr	r3, [pc, #52]	; (8007054 <sendData+0x64>)
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	3301      	adds	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <sendData+0x64>)
 8007026:	801a      	strh	r2, [r3, #0]
      cntEndOfTxTick = 0;
      posInTxTab = 0;

      prepareNewDataToSend();
    }
}
 8007028:	e012      	b.n	8007050 <sendData+0x60>
  else if (cntEndOfTxTick < TX_FRAME_LENGHT)
 800702a:	4b0e      	ldr	r3, [pc, #56]	; (8007064 <sendData+0x74>)
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	2b14      	cmp	r3, #20
 8007030:	d806      	bhi.n	8007040 <sendData+0x50>
      cntEndOfTxTick++;
 8007032:	4b0c      	ldr	r3, [pc, #48]	; (8007064 <sendData+0x74>)
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	3301      	adds	r3, #1
 8007038:	b29a      	uxth	r2, r3
 800703a:	4b0a      	ldr	r3, [pc, #40]	; (8007064 <sendData+0x74>)
 800703c:	801a      	strh	r2, [r3, #0]
}
 800703e:	e007      	b.n	8007050 <sendData+0x60>
      cntEndOfTxTick = 0;
 8007040:	4b08      	ldr	r3, [pc, #32]	; (8007064 <sendData+0x74>)
 8007042:	2200      	movs	r2, #0
 8007044:	801a      	strh	r2, [r3, #0]
      posInTxTab = 0;
 8007046:	4b03      	ldr	r3, [pc, #12]	; (8007054 <sendData+0x64>)
 8007048:	2200      	movs	r2, #0
 800704a:	801a      	strh	r2, [r3, #0]
      prepareNewDataToSend();
 800704c:	f000 f8a8 	bl	80071a0 <prepareNewDataToSend>
}
 8007050:	bf00      	nop
 8007052:	bd80      	pop	{r7, pc}
 8007054:	2000007a 	.word	0x2000007a
 8007058:	20000064 	.word	0x20000064
 800705c:	2000007c 	.word	0x2000007c
 8007060:	200003ac 	.word	0x200003ac
 8007064:	2000007e 	.word	0x2000007e

08007068 <receiveData>:
/**
* @fn receiveData(void)
* @brief Funkcja ktorej zadaniem jest obsluga linii RX, umiescic wewnatrz rs485_step()
*/
static void receiveData(void)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0

  static uint32_t rejectedFramesInRow=0;							//Zmienna przechowujaca liczbe straconych ramek z rzedu
  static uint32_t cntEndOfRxTick=0;							//Zmienna wykorzystywana do odliczenia czasu wskazujacego na koniec transmisji

  //Sprawdz czy otrzymano nowe dane
  if (!intRxCplt)
 800706e:	4b2b      	ldr	r3, [pc, #172]	; (800711c <receiveData+0xb4>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	d105      	bne.n	8007084 <receiveData+0x1c>
    {
      //Nie otrzymano nowych danych, zacznij odliczac czas
      cntEndOfRxTick++;
 8007078:	4b29      	ldr	r3, [pc, #164]	; (8007120 <receiveData+0xb8>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3301      	adds	r3, #1
 800707e:	4a28      	ldr	r2, [pc, #160]	; (8007120 <receiveData+0xb8>)
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	e007      	b.n	8007094 <receiveData+0x2c>
    }
  else if (intRxCplt)
 8007084:	4b25      	ldr	r3, [pc, #148]	; (800711c <receiveData+0xb4>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <receiveData+0x2c>
    {
      //Nowe dane zostaly otrzymane, zeruj flage informujaca o zakonczeniu transmisji
      intRxCplt = 0;
 800708e:	4b23      	ldr	r3, [pc, #140]	; (800711c <receiveData+0xb4>)
 8007090:	2200      	movs	r2, #0
 8007092:	701a      	strb	r2, [r3, #0]
    }

  //Sprawdz czy minal juz czas wynoszacy RX_FRAME_LENGHT
  if (cntEndOfRxTick > RX_FRAME_LENGHT)
 8007094:	4b22      	ldr	r3, [pc, #136]	; (8007120 <receiveData+0xb8>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b06      	cmp	r3, #6
 800709a:	d93a      	bls.n	8007112 <receiveData+0xaa>
  __ASM volatile ("cpsid i" : : : "memory");
 800709c:	b672      	cpsid	i
    {
      //Na czas przetwarzania danych wylacz przerwania
      __disable_irq();

      //Czas minal, oznacza to koniec ramki
      cntEndOfRxTick = 0;
 800709e:	4b20      	ldr	r3, [pc, #128]	; (8007120 <receiveData+0xb8>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	601a      	str	r2, [r3, #0]
      posInRxTab = 0;
 80070a4:	4b1f      	ldr	r3, [pc, #124]	; (8007124 <receiveData+0xbc>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	801a      	strh	r2, [r3, #0]

      //OBLICZ SUME KONTROLNA
      uint8_t crcSumOnMCU = HAL_CRC_Calculate(&hcrc, (uint32_t*)dataFromRx, (RX_FRAME_LENGHT - 2));
 80070aa:	2204      	movs	r2, #4
 80070ac:	491e      	ldr	r1, [pc, #120]	; (8007128 <receiveData+0xc0>)
 80070ae:	481f      	ldr	r0, [pc, #124]	; (800712c <receiveData+0xc4>)
 80070b0:	f7fb f88c 	bl	80021cc <HAL_CRC_Calculate>
 80070b4:	4603      	mov	r3, r0
 80070b6:	71bb      	strb	r3, [r7, #6]

      //Sprawdz czy sumy kontrolne oraz bajt EOT (End Of Tranmission) sie zgadzaja
      if ( (dataFromRx[RX_FRAME_LENGHT - 2] == EOT_BYTE) && (crcSumOnMCU == dataFromRx[RX_FRAME_LENGHT - 1]) )
 80070b8:	4b1b      	ldr	r3, [pc, #108]	; (8007128 <receiveData+0xc0>)
 80070ba:	791b      	ldrb	r3, [r3, #4]
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b17      	cmp	r3, #23
 80070c0:	d10e      	bne.n	80070e0 <receiveData+0x78>
 80070c2:	4b19      	ldr	r3, [pc, #100]	; (8007128 <receiveData+0xc0>)
 80070c4:	795b      	ldrb	r3, [r3, #5]
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	79ba      	ldrb	r2, [r7, #6]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d108      	bne.n	80070e0 <receiveData+0x78>
	{
	  processReceivedData();
 80070ce:	f000 f907 	bl	80072e0 <processReceivedData>
	  rs485_flt = RS485_FLT_NONE;
 80070d2:	4b17      	ldr	r3, [pc, #92]	; (8007130 <receiveData+0xc8>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	701a      	strb	r2, [r3, #0]
	  rejectedFramesInRow = 0;
 80070d8:	4b16      	ldr	r3, [pc, #88]	; (8007134 <receiveData+0xcc>)
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	e00a      	b.n	80070f6 <receiveData+0x8e>
	}
      else
	{
    	  processReceivedData();
 80070e0:	f000 f8fe 	bl	80072e0 <processReceivedData>
	//  rejectedFramesInRow++;

	  //Jezeli odrzucono wiecej niz 50 ramek z rzedu uznaj ze tranmisja zostala zerwana
	  if (rejectedFramesInRow > 50)
 80070e4:	4b13      	ldr	r3, [pc, #76]	; (8007134 <receiveData+0xcc>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b32      	cmp	r3, #50	; 0x32
 80070ea:	d904      	bls.n	80070f6 <receiveData+0x8e>
	    {
	      resetActData();
 80070ec:	f000 f928 	bl	8007340 <resetActData>
	      rs485_flt = RS485_NEW_DATA_TIMEOUT;
 80070f0:	4b0f      	ldr	r3, [pc, #60]	; (8007130 <receiveData+0xc8>)
 80070f2:	2211      	movs	r2, #17
 80070f4:	701a      	strb	r2, [r3, #0]
	    }
	}

      //Wyczysc bufor odbiorczy
      for (uint8_t i = 0; i < RX_FRAME_LENGHT; i++)
 80070f6:	2300      	movs	r3, #0
 80070f8:	71fb      	strb	r3, [r7, #7]
 80070fa:	e006      	b.n	800710a <receiveData+0xa2>
	{
	  dataFromRx[i] = 0x00;
 80070fc:	79fb      	ldrb	r3, [r7, #7]
 80070fe:	4a0a      	ldr	r2, [pc, #40]	; (8007128 <receiveData+0xc0>)
 8007100:	2100      	movs	r1, #0
 8007102:	54d1      	strb	r1, [r2, r3]
      for (uint8_t i = 0; i < RX_FRAME_LENGHT; i++)
 8007104:	79fb      	ldrb	r3, [r7, #7]
 8007106:	3301      	adds	r3, #1
 8007108:	71fb      	strb	r3, [r7, #7]
 800710a:	79fb      	ldrb	r3, [r7, #7]
 800710c:	2b05      	cmp	r3, #5
 800710e:	d9f5      	bls.n	80070fc <receiveData+0x94>
  __ASM volatile ("cpsie i" : : : "memory");
 8007110:	b662      	cpsie	i
	}

      __enable_irq();
    }
}
 8007112:	bf00      	nop
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	20000060 	.word	0x20000060
 8007120:	20000080 	.word	0x20000080
 8007124:	2000005e 	.word	0x2000005e
 8007128:	20000058 	.word	0x20000058
 800712c:	20000130 	.word	0x20000130
 8007130:	2000001c 	.word	0x2000001c
 8007134:	20000084 	.word	0x20000084

08007138 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&UART_PORT_RS485, &RS485_BUFF.rx, 1);			//Ponownie rozpocznij nasluchiwanie nasluchiwanie
 8007140:	2201      	movs	r2, #1
 8007142:	4911      	ldr	r1, [pc, #68]	; (8007188 <HAL_UART_RxCpltCallback+0x50>)
 8007144:	4811      	ldr	r0, [pc, #68]	; (800718c <HAL_UART_RxCpltCallback+0x54>)
 8007146:	f7fe fdfd 	bl	8005d44 <HAL_UART_Receive_DMA>

  intRxCplt = 1;								//Ustaw flage informujaca o otrzymaniu nowych danych
 800714a:	4b11      	ldr	r3, [pc, #68]	; (8007190 <HAL_UART_RxCpltCallback+0x58>)
 800714c:	2201      	movs	r2, #1
 800714e:	701a      	strb	r2, [r3, #0]

  if (posInRxTab > RX_FRAME_LENGHT) posInRxTab = 0;				//Zabezpieczenie przed wyjsciem poza zakres tablicy
 8007150:	4b10      	ldr	r3, [pc, #64]	; (8007194 <HAL_UART_RxCpltCallback+0x5c>)
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	b29b      	uxth	r3, r3
 8007156:	2b06      	cmp	r3, #6
 8007158:	d902      	bls.n	8007160 <HAL_UART_RxCpltCallback+0x28>
 800715a:	4b0e      	ldr	r3, [pc, #56]	; (8007194 <HAL_UART_RxCpltCallback+0x5c>)
 800715c:	2200      	movs	r2, #0
 800715e:	801a      	strh	r2, [r3, #0]

  dataFromRx[posInRxTab] = RS485_BUFF.rx;					//Przypisz otrzymany bajt do analizowanej tablicy
 8007160:	4b0c      	ldr	r3, [pc, #48]	; (8007194 <HAL_UART_RxCpltCallback+0x5c>)
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	b29b      	uxth	r3, r3
 8007166:	461a      	mov	r2, r3
 8007168:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <HAL_UART_RxCpltCallback+0x60>)
 800716a:	7859      	ldrb	r1, [r3, #1]
 800716c:	4b0b      	ldr	r3, [pc, #44]	; (800719c <HAL_UART_RxCpltCallback+0x64>)
 800716e:	5499      	strb	r1, [r3, r2]
  posInRxTab++;
 8007170:	4b08      	ldr	r3, [pc, #32]	; (8007194 <HAL_UART_RxCpltCallback+0x5c>)
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	b29b      	uxth	r3, r3
 8007176:	3301      	adds	r3, #1
 8007178:	b29a      	uxth	r2, r3
 800717a:	4b06      	ldr	r3, [pc, #24]	; (8007194 <HAL_UART_RxCpltCallback+0x5c>)
 800717c:	801a      	strh	r2, [r3, #0]
}
 800717e:	bf00      	nop
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	2000007d 	.word	0x2000007d
 800718c:	200003ac 	.word	0x200003ac
 8007190:	20000060 	.word	0x20000060
 8007194:	2000005e 	.word	0x2000005e
 8007198:	2000007c 	.word	0x2000007c
 800719c:	20000058 	.word	0x20000058

080071a0 <prepareNewDataToSend>:
/**
* @fn prepareNewDataToSend(void)
* @brief Funkcja przygotowujaca dane do wysylki, wykorzystana wewnatrz sendData(void)
*/
static void prepareNewDataToSend(void)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0

  uint8_t j = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	71fb      	strb	r3, [r7, #7]
  dataToTx[++j] = VALUES.SC_C.array[3];
  dataToTx[++j] = 2;
  dataToTx[++j] = 2;
  dataToTx[++j] = emergency;
  dataToTx[++j] = EOT_BYTE;*/
    dataToTx[j] = 1;
 80071aa:	79fb      	ldrb	r3, [r7, #7]
 80071ac:	4a4a      	ldr	r2, [pc, #296]	; (80072d8 <prepareNewDataToSend+0x138>)
 80071ae:	2101      	movs	r1, #1
 80071b0:	54d1      	strb	r1, [r2, r3]
    dataToTx[++j] = 2;
 80071b2:	79fb      	ldrb	r3, [r7, #7]
 80071b4:	3301      	adds	r3, #1
 80071b6:	71fb      	strb	r3, [r7, #7]
 80071b8:	79fb      	ldrb	r3, [r7, #7]
 80071ba:	4a47      	ldr	r2, [pc, #284]	; (80072d8 <prepareNewDataToSend+0x138>)
 80071bc:	2102      	movs	r1, #2
 80071be:	54d1      	strb	r1, [r2, r3]
    dataToTx[++j] = 3;
 80071c0:	79fb      	ldrb	r3, [r7, #7]
 80071c2:	3301      	adds	r3, #1
 80071c4:	71fb      	strb	r3, [r7, #7]
 80071c6:	79fb      	ldrb	r3, [r7, #7]
 80071c8:	4a43      	ldr	r2, [pc, #268]	; (80072d8 <prepareNewDataToSend+0x138>)
 80071ca:	2103      	movs	r1, #3
 80071cc:	54d1      	strb	r1, [r2, r3]
    dataToTx[++j] = 3;
 80071ce:	79fb      	ldrb	r3, [r7, #7]
 80071d0:	3301      	adds	r3, #1
 80071d2:	71fb      	strb	r3, [r7, #7]
 80071d4:	79fb      	ldrb	r3, [r7, #7]
 80071d6:	4a40      	ldr	r2, [pc, #256]	; (80072d8 <prepareNewDataToSend+0x138>)
 80071d8:	2103      	movs	r1, #3
 80071da:	54d1      	strb	r1, [r2, r3]
    dataToTx[++j] = 3;
 80071dc:	79fb      	ldrb	r3, [r7, #7]
 80071de:	3301      	adds	r3, #1
 80071e0:	71fb      	strb	r3, [r7, #7]
 80071e2:	79fb      	ldrb	r3, [r7, #7]
 80071e4:	4a3c      	ldr	r2, [pc, #240]	; (80072d8 <prepareNewDataToSend+0x138>)
 80071e6:	2103      	movs	r1, #3
 80071e8:	54d1      	strb	r1, [r2, r3]
    dataToTx[++j] = 3;
 80071ea:	79fb      	ldrb	r3, [r7, #7]
 80071ec:	3301      	adds	r3, #1
 80071ee:	71fb      	strb	r3, [r7, #7]
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	4a39      	ldr	r2, [pc, #228]	; (80072d8 <prepareNewDataToSend+0x138>)
 80071f4:	2103      	movs	r1, #3
 80071f6:	54d1      	strb	r1, [r2, r3]
    dataToTx[++j] = 3;
 80071f8:	79fb      	ldrb	r3, [r7, #7]
 80071fa:	3301      	adds	r3, #1
 80071fc:	71fb      	strb	r3, [r7, #7]
 80071fe:	79fb      	ldrb	r3, [r7, #7]
 8007200:	4a35      	ldr	r2, [pc, #212]	; (80072d8 <prepareNewDataToSend+0x138>)
 8007202:	2103      	movs	r1, #3
 8007204:	54d1      	strb	r1, [r2, r3]
    dataToTx[++j] = 3;
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	3301      	adds	r3, #1
 800720a:	71fb      	strb	r3, [r7, #7]
 800720c:	79fb      	ldrb	r3, [r7, #7]
 800720e:	4a32      	ldr	r2, [pc, #200]	; (80072d8 <prepareNewDataToSend+0x138>)
 8007210:	2103      	movs	r1, #3
 8007212:	54d1      	strb	r1, [r2, r3]
    dataToTx[++j] = 3;
 8007214:	79fb      	ldrb	r3, [r7, #7]
 8007216:	3301      	adds	r3, #1
 8007218:	71fb      	strb	r3, [r7, #7]
 800721a:	79fb      	ldrb	r3, [r7, #7]
 800721c:	4a2e      	ldr	r2, [pc, #184]	; (80072d8 <prepareNewDataToSend+0x138>)
 800721e:	2103      	movs	r1, #3
 8007220:	54d1      	strb	r1, [r2, r3]
    dataToTx[++j] = 3;
 8007222:	79fb      	ldrb	r3, [r7, #7]
 8007224:	3301      	adds	r3, #1
 8007226:	71fb      	strb	r3, [r7, #7]
 8007228:	79fb      	ldrb	r3, [r7, #7]
 800722a:	4a2b      	ldr	r2, [pc, #172]	; (80072d8 <prepareNewDataToSend+0x138>)
 800722c:	2103      	movs	r1, #3
 800722e:	54d1      	strb	r1, [r2, r3]
    dataToTx[++j] = 3;
 8007230:	79fb      	ldrb	r3, [r7, #7]
 8007232:	3301      	adds	r3, #1
 8007234:	71fb      	strb	r3, [r7, #7]
 8007236:	79fb      	ldrb	r3, [r7, #7]
 8007238:	4a27      	ldr	r2, [pc, #156]	; (80072d8 <prepareNewDataToSend+0x138>)
 800723a:	2103      	movs	r1, #3
 800723c:	54d1      	strb	r1, [r2, r3]
    dataToTx[++j] = 3;
 800723e:	79fb      	ldrb	r3, [r7, #7]
 8007240:	3301      	adds	r3, #1
 8007242:	71fb      	strb	r3, [r7, #7]
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	4a24      	ldr	r2, [pc, #144]	; (80072d8 <prepareNewDataToSend+0x138>)
 8007248:	2103      	movs	r1, #3
 800724a:	54d1      	strb	r1, [r2, r3]
    dataToTx[++j] = 3;
 800724c:	79fb      	ldrb	r3, [r7, #7]
 800724e:	3301      	adds	r3, #1
 8007250:	71fb      	strb	r3, [r7, #7]
 8007252:	79fb      	ldrb	r3, [r7, #7]
 8007254:	4a20      	ldr	r2, [pc, #128]	; (80072d8 <prepareNewDataToSend+0x138>)
 8007256:	2103      	movs	r1, #3
 8007258:	54d1      	strb	r1, [r2, r3]
    dataToTx[++j] = 3;
 800725a:	79fb      	ldrb	r3, [r7, #7]
 800725c:	3301      	adds	r3, #1
 800725e:	71fb      	strb	r3, [r7, #7]
 8007260:	79fb      	ldrb	r3, [r7, #7]
 8007262:	4a1d      	ldr	r2, [pc, #116]	; (80072d8 <prepareNewDataToSend+0x138>)
 8007264:	2103      	movs	r1, #3
 8007266:	54d1      	strb	r1, [r2, r3]
    dataToTx[++j] = 3;
 8007268:	79fb      	ldrb	r3, [r7, #7]
 800726a:	3301      	adds	r3, #1
 800726c:	71fb      	strb	r3, [r7, #7]
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	4a19      	ldr	r2, [pc, #100]	; (80072d8 <prepareNewDataToSend+0x138>)
 8007272:	2103      	movs	r1, #3
 8007274:	54d1      	strb	r1, [r2, r3]
    dataToTx[++j] = 3;
 8007276:	79fb      	ldrb	r3, [r7, #7]
 8007278:	3301      	adds	r3, #1
 800727a:	71fb      	strb	r3, [r7, #7]
 800727c:	79fb      	ldrb	r3, [r7, #7]
 800727e:	4a16      	ldr	r2, [pc, #88]	; (80072d8 <prepareNewDataToSend+0x138>)
 8007280:	2103      	movs	r1, #3
 8007282:	54d1      	strb	r1, [r2, r3]
    dataToTx[++j] = 2;
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	3301      	adds	r3, #1
 8007288:	71fb      	strb	r3, [r7, #7]
 800728a:	79fb      	ldrb	r3, [r7, #7]
 800728c:	4a12      	ldr	r2, [pc, #72]	; (80072d8 <prepareNewDataToSend+0x138>)
 800728e:	2102      	movs	r1, #2
 8007290:	54d1      	strb	r1, [r2, r3]
    dataToTx[++j] = 0;
 8007292:	79fb      	ldrb	r3, [r7, #7]
 8007294:	3301      	adds	r3, #1
 8007296:	71fb      	strb	r3, [r7, #7]
 8007298:	79fb      	ldrb	r3, [r7, #7]
 800729a:	4a0f      	ldr	r2, [pc, #60]	; (80072d8 <prepareNewDataToSend+0x138>)
 800729c:	2100      	movs	r1, #0
 800729e:	54d1      	strb	r1, [r2, r3]
    dataToTx[++j] = 3;
 80072a0:	79fb      	ldrb	r3, [r7, #7]
 80072a2:	3301      	adds	r3, #1
 80072a4:	71fb      	strb	r3, [r7, #7]
 80072a6:	79fb      	ldrb	r3, [r7, #7]
 80072a8:	4a0b      	ldr	r2, [pc, #44]	; (80072d8 <prepareNewDataToSend+0x138>)
 80072aa:	2103      	movs	r1, #3
 80072ac:	54d1      	strb	r1, [r2, r3]
    dataToTx[++j] = 3;
 80072ae:	79fb      	ldrb	r3, [r7, #7]
 80072b0:	3301      	adds	r3, #1
 80072b2:	71fb      	strb	r3, [r7, #7]
 80072b4:	79fb      	ldrb	r3, [r7, #7]
 80072b6:	4a08      	ldr	r2, [pc, #32]	; (80072d8 <prepareNewDataToSend+0x138>)
 80072b8:	2103      	movs	r1, #3
 80072ba:	54d1      	strb	r1, [r2, r3]

  //OBLICZ SUME KONTROLNA
  uint8_t calculatedCrcSumOnMCU = HAL_CRC_Calculate(&hcrc, (uint32_t*)dataToTx, (TX_FRAME_LENGHT - 2) );
 80072bc:	2213      	movs	r2, #19
 80072be:	4906      	ldr	r1, [pc, #24]	; (80072d8 <prepareNewDataToSend+0x138>)
 80072c0:	4806      	ldr	r0, [pc, #24]	; (80072dc <prepareNewDataToSend+0x13c>)
 80072c2:	f7fa ff83 	bl	80021cc <HAL_CRC_Calculate>
 80072c6:	4603      	mov	r3, r0
 80072c8:	71bb      	strb	r3, [r7, #6]

  //Wrzuc obliczona sume kontrolna na koniec wysylanej tablicy
  dataToTx[TX_FRAME_LENGHT - 1] = calculatedCrcSumOnMCU;
 80072ca:	4a03      	ldr	r2, [pc, #12]	; (80072d8 <prepareNewDataToSend+0x138>)
 80072cc:	79bb      	ldrb	r3, [r7, #6]
 80072ce:	7513      	strb	r3, [r2, #20]
}
 80072d0:	bf00      	nop
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	20000064 	.word	0x20000064
 80072dc:	20000130 	.word	0x20000130

080072e0 <processReceivedData>:
/**
* @fn processReveivedData()
* @brief Funkcja przypisujaca odebrane dane do zmiennych docelowych
*/
static void processReceivedData(void)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0

  uint8_t i = 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	71fb      	strb	r3, [r7, #7]
  RS485_RX_VERIFIED_DATA.motorPWM = dataFromRx[i];
 80072ea:	79fb      	ldrb	r3, [r7, #7]
 80072ec:	4a12      	ldr	r2, [pc, #72]	; (8007338 <processReceivedData+0x58>)
 80072ee:	5cd3      	ldrb	r3, [r2, r3]
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	4b12      	ldr	r3, [pc, #72]	; (800733c <processReceivedData+0x5c>)
 80072f4:	701a      	strb	r2, [r3, #0]
  RS485_RX_VERIFIED_DATA.mode = dataFromRx[++i];
 80072f6:	79fb      	ldrb	r3, [r7, #7]
 80072f8:	3301      	adds	r3, #1
 80072fa:	71fb      	strb	r3, [r7, #7]
 80072fc:	79fb      	ldrb	r3, [r7, #7]
 80072fe:	4a0e      	ldr	r2, [pc, #56]	; (8007338 <processReceivedData+0x58>)
 8007300:	5cd3      	ldrb	r3, [r2, r3]
 8007302:	b2da      	uxtb	r2, r3
 8007304:	4b0d      	ldr	r3, [pc, #52]	; (800733c <processReceivedData+0x5c>)
 8007306:	705a      	strb	r2, [r3, #1]
  RS485_RX_VERIFIED_DATA.scOn = dataFromRx[++i];
 8007308:	79fb      	ldrb	r3, [r7, #7]
 800730a:	3301      	adds	r3, #1
 800730c:	71fb      	strb	r3, [r7, #7]
 800730e:	79fb      	ldrb	r3, [r7, #7]
 8007310:	4a09      	ldr	r2, [pc, #36]	; (8007338 <processReceivedData+0x58>)
 8007312:	5cd3      	ldrb	r3, [r2, r3]
 8007314:	b2da      	uxtb	r2, r3
 8007316:	4b09      	ldr	r3, [pc, #36]	; (800733c <processReceivedData+0x5c>)
 8007318:	709a      	strb	r2, [r3, #2]
  RS485_RX_VERIFIED_DATA.emergencyScenario = dataFromRx[++i];
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	3301      	adds	r3, #1
 800731e:	71fb      	strb	r3, [r7, #7]
 8007320:	79fb      	ldrb	r3, [r7, #7]
 8007322:	4a05      	ldr	r2, [pc, #20]	; (8007338 <processReceivedData+0x58>)
 8007324:	5cd3      	ldrb	r3, [r2, r3]
 8007326:	b2da      	uxtb	r2, r3
 8007328:	4b04      	ldr	r3, [pc, #16]	; (800733c <processReceivedData+0x5c>)
 800732a:	70da      	strb	r2, [r3, #3]
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	20000058 	.word	0x20000058
 800733c:	20000488 	.word	0x20000488

08007340 <resetActData>:
/**
* @fn resetActData
* @brief Zerowanie zmiennych docelowych (odbywa sie m.in w przypadku zerwania transmisji)
*/
static void resetActData(void)
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
	  RS485_RX_VERIFIED_DATA.motorPWM = 0;
 8007344:	4b08      	ldr	r3, [pc, #32]	; (8007368 <resetActData+0x28>)
 8007346:	2200      	movs	r2, #0
 8007348:	701a      	strb	r2, [r3, #0]
	  RS485_RX_VERIFIED_DATA.mode = 0;
 800734a:	4b07      	ldr	r3, [pc, #28]	; (8007368 <resetActData+0x28>)
 800734c:	2200      	movs	r2, #0
 800734e:	705a      	strb	r2, [r3, #1]
	  RS485_RX_VERIFIED_DATA.scOn = 0;
 8007350:	4b05      	ldr	r3, [pc, #20]	; (8007368 <resetActData+0x28>)
 8007352:	2200      	movs	r2, #0
 8007354:	709a      	strb	r2, [r3, #2]
	  RS485_RX_VERIFIED_DATA.emergencyScenario = 0;
 8007356:	4b04      	ldr	r3, [pc, #16]	; (8007368 <resetActData+0x28>)
 8007358:	2200      	movs	r2, #0
 800735a:	70da      	strb	r2, [r3, #3]
}
 800735c:	bf00      	nop
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	20000488 	.word	0x20000488

0800736c <timers_init>:
/**
* @fn timers_init(void)
* @brief Funkcja inicjalizujaca timery
*/
void timers_init(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim6);		//Inicjalizuj TIM6 pracujacy z czestotliwoscia 10kHz
 8007370:	4803      	ldr	r0, [pc, #12]	; (8007380 <timers_init+0x14>)
 8007372:	f7fc ff85 	bl	8004280 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);		//Inicjalizuj TIM7 pracujacy z czestotliwoscia 100kHz
 8007376:	4803      	ldr	r0, [pc, #12]	; (8007384 <timers_init+0x18>)
 8007378:	f7fc ff82 	bl	8004280 <HAL_TIM_Base_Start_IT>
}
 800737c:	bf00      	nop
 800737e:	bd80      	pop	{r7, pc}
 8007380:	20000238 	.word	0x20000238
 8007384:	2000031c 	.word	0x2000031c

08007388 <timers_step>:
/**
* @fn timers_main(void)
* @brief Glowna funkcja odpowiadajaca za interwaly czasowe wykorzystywane w systemie
*/
static inline void timers_step(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
  timers_tick1kHz = 1;
 800738c:	4b03      	ldr	r3, [pc, #12]	; (800739c <timers_step+0x14>)
 800738e:	2201      	movs	r2, #1
 8007390:	701a      	strb	r2, [r3, #0]

  setSystemOperatingTime();
 8007392:	f000 f805 	bl	80073a0 <setSystemOperatingTime>
}
 8007396:	bf00      	nop
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000490 	.word	0x20000490

080073a0 <setSystemOperatingTime>:
/**
* @fn setSystemOperatingTime(void)
* @brief Funkcja przeliczajaca czas pracy systemu na milisekundy, sekundy, minuty oraz godziny
*/
static inline void setSystemOperatingTime(void)
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
  timers_mainTimeMiliseconds++;
 80073a4:	4b1c      	ldr	r3, [pc, #112]	; (8007418 <setSystemOperatingTime+0x78>)
 80073a6:	881b      	ldrh	r3, [r3, #0]
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	3301      	adds	r3, #1
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	4b1a      	ldr	r3, [pc, #104]	; (8007418 <setSystemOperatingTime+0x78>)
 80073b0:	801a      	strh	r2, [r3, #0]

  //Sekundy
  if (timers_mainTimeMiliseconds >= PERIOD_1S)
 80073b2:	4b19      	ldr	r3, [pc, #100]	; (8007418 <setSystemOperatingTime+0x78>)
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073bc:	d309      	bcc.n	80073d2 <setSystemOperatingTime+0x32>
    {
      timers_mainTimeMiliseconds = 0;
 80073be:	4b16      	ldr	r3, [pc, #88]	; (8007418 <setSystemOperatingTime+0x78>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	801a      	strh	r2, [r3, #0]
      timers_mainTimeSeconds++;
 80073c4:	4b15      	ldr	r3, [pc, #84]	; (800741c <setSystemOperatingTime+0x7c>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	3301      	adds	r3, #1
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	4b13      	ldr	r3, [pc, #76]	; (800741c <setSystemOperatingTime+0x7c>)
 80073d0:	701a      	strb	r2, [r3, #0]
    }

  //Minuty
  if (timers_mainTimeSeconds >= 60)
 80073d2:	4b12      	ldr	r3, [pc, #72]	; (800741c <setSystemOperatingTime+0x7c>)
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b3b      	cmp	r3, #59	; 0x3b
 80073da:	d909      	bls.n	80073f0 <setSystemOperatingTime+0x50>
    {
      timers_mainTimeSeconds = 0;
 80073dc:	4b0f      	ldr	r3, [pc, #60]	; (800741c <setSystemOperatingTime+0x7c>)
 80073de:	2200      	movs	r2, #0
 80073e0:	701a      	strb	r2, [r3, #0]
      timers_mainTimeMinutes++;
 80073e2:	4b0f      	ldr	r3, [pc, #60]	; (8007420 <setSystemOperatingTime+0x80>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	3301      	adds	r3, #1
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	4b0c      	ldr	r3, [pc, #48]	; (8007420 <setSystemOperatingTime+0x80>)
 80073ee:	701a      	strb	r2, [r3, #0]
    }

  //Godziny
  if (timers_mainTimeMinutes >= 60)
 80073f0:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <setSystemOperatingTime+0x80>)
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b3b      	cmp	r3, #59	; 0x3b
 80073f8:	d909      	bls.n	800740e <setSystemOperatingTime+0x6e>
    {
      timers_mainTimeMinutes = 0;
 80073fa:	4b09      	ldr	r3, [pc, #36]	; (8007420 <setSystemOperatingTime+0x80>)
 80073fc:	2200      	movs	r2, #0
 80073fe:	701a      	strb	r2, [r3, #0]
      timers_mainTimeHours++;
 8007400:	4b08      	ldr	r3, [pc, #32]	; (8007424 <setSystemOperatingTime+0x84>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	b2db      	uxtb	r3, r3
 8007406:	3301      	adds	r3, #1
 8007408:	b2da      	uxtb	r2, r3
 800740a:	4b06      	ldr	r3, [pc, #24]	; (8007424 <setSystemOperatingTime+0x84>)
 800740c:	701a      	strb	r2, [r3, #0]
    }
}
 800740e:	bf00      	nop
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	2000048e 	.word	0x2000048e
 800741c:	200004a0 	.word	0x200004a0
 8007420:	20000498 	.word	0x20000498
 8007424:	20000491 	.word	0x20000491

08007428 <timers_beforeStep1kHz>:
/**
* @fn timers_beforeStep1kHz(void)
* @brief Funkcja sluzaca do obliczania czasu trwania petli hydrogreen_step(), wywolac przed hydrogreen_step()
*/
void timers_beforeStep1kHz(void)
{
 8007428:	b480      	push	{r7}
 800742a:	af00      	add	r7, sp, #0
  timers_sysCycle100kHzCnt = 0;
 800742c:	4b03      	ldr	r3, [pc, #12]	; (800743c <timers_beforeStep1kHz+0x14>)
 800742e:	2200      	movs	r2, #0
 8007430:	601a      	str	r2, [r3, #0]
}
 8007432:	bf00      	nop
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	20000088 	.word	0x20000088

08007440 <timers_afterStep1kHz>:
/**
* @fn timers_afterStep1kHz(void)
* @brief Funkcja sluzaca do obliczania czasu trwania petli hydrogreen_step(), wywolac po hydrogreen_step()
*/
void timers_afterStep1kHz(void)
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
  static uint32_t actSysCyclePeriod;
  static uint32_t avgSysCyclePeriodSum;
  static uint16_t avgCnt;

  //Warunek wykorzystywany przy inicjalizacji systemu (tylko raz)
  if (!initFlag)
 8007444:	4b2a      	ldr	r3, [pc, #168]	; (80074f0 <timers_afterStep1kHz+0xb0>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10b      	bne.n	8007464 <timers_afterStep1kHz+0x24>
    {
      timers_minSysCyclePeriod = 10 * timers_sysCycle100kHzCnt;
 800744c:	4b29      	ldr	r3, [pc, #164]	; (80074f4 <timers_afterStep1kHz+0xb4>)
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	4613      	mov	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	461a      	mov	r2, r3
 800745a:	4b27      	ldr	r3, [pc, #156]	; (80074f8 <timers_afterStep1kHz+0xb8>)
 800745c:	601a      	str	r2, [r3, #0]
      initFlag = 1;
 800745e:	4b24      	ldr	r3, [pc, #144]	; (80074f0 <timers_afterStep1kHz+0xb0>)
 8007460:	2201      	movs	r2, #1
 8007462:	701a      	strb	r2, [r3, #0]
    }

  actSysCyclePeriod = 10 * timers_sysCycle100kHzCnt; //Przeliczenie otrzymanej wartosci na mikrosekundy
 8007464:	4b23      	ldr	r3, [pc, #140]	; (80074f4 <timers_afterStep1kHz+0xb4>)
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	4613      	mov	r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	005b      	lsls	r3, r3, #1
 8007470:	461a      	mov	r2, r3
 8007472:	4b22      	ldr	r3, [pc, #136]	; (80074fc <timers_afterStep1kHz+0xbc>)
 8007474:	601a      	str	r2, [r3, #0]

  timers_sysCycle100kHzCnt = 0;
 8007476:	4b1f      	ldr	r3, [pc, #124]	; (80074f4 <timers_afterStep1kHz+0xb4>)
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]

  //Oblicz sredni czas trwania cyklu ze 100 probek
  if (avgCnt <= 100)
 800747c:	4b20      	ldr	r3, [pc, #128]	; (8007500 <timers_afterStep1kHz+0xc0>)
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	2b64      	cmp	r3, #100	; 0x64
 8007482:	d80d      	bhi.n	80074a0 <timers_afterStep1kHz+0x60>
    {
      avgSysCyclePeriodSum = avgSysCyclePeriodSum + actSysCyclePeriod;
 8007484:	4b1f      	ldr	r3, [pc, #124]	; (8007504 <timers_afterStep1kHz+0xc4>)
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	4b1c      	ldr	r3, [pc, #112]	; (80074fc <timers_afterStep1kHz+0xbc>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4413      	add	r3, r2
 800748e:	4a1d      	ldr	r2, [pc, #116]	; (8007504 <timers_afterStep1kHz+0xc4>)
 8007490:	6013      	str	r3, [r2, #0]
      avgCnt++;
 8007492:	4b1b      	ldr	r3, [pc, #108]	; (8007500 <timers_afterStep1kHz+0xc0>)
 8007494:	881b      	ldrh	r3, [r3, #0]
 8007496:	3301      	adds	r3, #1
 8007498:	b29a      	uxth	r2, r3
 800749a:	4b19      	ldr	r3, [pc, #100]	; (8007500 <timers_afterStep1kHz+0xc0>)
 800749c:	801a      	strh	r2, [r3, #0]
 800749e:	e00d      	b.n	80074bc <timers_afterStep1kHz+0x7c>
    }
  else
    {
      timers_avgSysCyclePeriod =  avgSysCyclePeriodSum / avgCnt;
 80074a0:	4b18      	ldr	r3, [pc, #96]	; (8007504 <timers_afterStep1kHz+0xc4>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a16      	ldr	r2, [pc, #88]	; (8007500 <timers_afterStep1kHz+0xc0>)
 80074a6:	8812      	ldrh	r2, [r2, #0]
 80074a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80074ac:	4a16      	ldr	r2, [pc, #88]	; (8007508 <timers_afterStep1kHz+0xc8>)
 80074ae:	6013      	str	r3, [r2, #0]
      avgSysCyclePeriodSum = 0;
 80074b0:	4b14      	ldr	r3, [pc, #80]	; (8007504 <timers_afterStep1kHz+0xc4>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]
      avgCnt = 0;
 80074b6:	4b12      	ldr	r3, [pc, #72]	; (8007500 <timers_afterStep1kHz+0xc0>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	801a      	strh	r2, [r3, #0]
    }

  //Najkrotszy czas trwania cyklu
  if (actSysCyclePeriod < timers_minSysCyclePeriod)
 80074bc:	4b0f      	ldr	r3, [pc, #60]	; (80074fc <timers_afterStep1kHz+0xbc>)
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	4b0d      	ldr	r3, [pc, #52]	; (80074f8 <timers_afterStep1kHz+0xb8>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d203      	bcs.n	80074d0 <timers_afterStep1kHz+0x90>
    {
      timers_minSysCyclePeriod =  actSysCyclePeriod;
 80074c8:	4b0c      	ldr	r3, [pc, #48]	; (80074fc <timers_afterStep1kHz+0xbc>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a0a      	ldr	r2, [pc, #40]	; (80074f8 <timers_afterStep1kHz+0xb8>)
 80074ce:	6013      	str	r3, [r2, #0]
    }

  //Najdluzszy czas trwania cyklu
  if (actSysCyclePeriod > timers_maxSysCyclePeriod)
 80074d0:	4b0a      	ldr	r3, [pc, #40]	; (80074fc <timers_afterStep1kHz+0xbc>)
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	4b0d      	ldr	r3, [pc, #52]	; (800750c <timers_afterStep1kHz+0xcc>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d903      	bls.n	80074e4 <timers_afterStep1kHz+0xa4>
    {
      timers_maxSysCyclePeriod = actSysCyclePeriod;
 80074dc:	4b07      	ldr	r3, [pc, #28]	; (80074fc <timers_afterStep1kHz+0xbc>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a0a      	ldr	r2, [pc, #40]	; (800750c <timers_afterStep1kHz+0xcc>)
 80074e2:	6013      	str	r3, [r2, #0]
    }
}
 80074e4:	bf00      	nop
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	2000008c 	.word	0x2000008c
 80074f4:	20000088 	.word	0x20000088
 80074f8:	2000049c 	.word	0x2000049c
 80074fc:	20000090 	.word	0x20000090
 8007500:	20000094 	.word	0x20000094
 8007504:	20000098 	.word	0x20000098
 8007508:	200004a4 	.word	0x200004a4
 800750c:	20000494 	.word	0x20000494

08007510 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
  timers_step();
 8007514:	f7ff ff38 	bl	8007388 <timers_step>
}
 8007518:	bf00      	nop
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a0a      	ldr	r2, [pc, #40]	; (8007554 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d102      	bne.n	8007534 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
      timers_tick10kHz = 1;
 800752e:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8007530:	2201      	movs	r2, #1
 8007532:	701a      	strb	r2, [r3, #0]
    }

  if (htim->Instance == TIM7)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a08      	ldr	r2, [pc, #32]	; (800755c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d104      	bne.n	8007548 <HAL_TIM_PeriodElapsedCallback+0x2c>
    {
      timers_sysCycle100kHzCnt++;
 800753e:	4b08      	ldr	r3, [pc, #32]	; (8007560 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3301      	adds	r3, #1
 8007544:	4a06      	ldr	r2, [pc, #24]	; (8007560 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8007546:	6013      	str	r3, [r2, #0]
    }
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	40001000 	.word	0x40001000
 8007558:	2000048c 	.word	0x2000048c
 800755c:	40001400 	.word	0x40001400
 8007560:	20000088 	.word	0x20000088

08007564 <watchdog_init>:
/**
* @fn watchdog_init(void)
* @brief Funkcja sprawdzajaca przyczyne zresetowania systemu i inicjalizujaca watchdoga
*/
void watchdog_init(void)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b0a0      	sub	sp, #128	; 0x80
 8007568:	af00      	add	r7, sp, #0
 800756a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800756e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007570:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007572:	fa93 f3a3 	rbit	r3, r3
 8007576:	67bb      	str	r3, [r7, #120]	; 0x78
 8007578:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800757c:	677b      	str	r3, [r7, #116]	; 0x74
 800757e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007580:	fa93 f3a3 	rbit	r3, r3
 8007584:	673b      	str	r3, [r7, #112]	; 0x70
 8007586:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800758a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800758c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800758e:	fa93 f3a3 	rbit	r3, r3
 8007592:	66bb      	str	r3, [r7, #104]	; 0x68
  //Warunek sprawdzajacy czy system zostal zresetowany z powodu zaniku zasilania
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET)
 8007594:	4b5a      	ldr	r3, [pc, #360]	; (8007700 <watchdog_init+0x19c>)
 8007596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007598:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800759c:	667b      	str	r3, [r7, #100]	; 0x64
 800759e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075a0:	fa93 f3a3 	rbit	r3, r3
 80075a4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80075a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075a8:	fab3 f383 	clz	r3, r3
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	f003 031f 	and.w	r3, r3, #31
 80075b8:	2101      	movs	r1, #1
 80075ba:	fa01 f303 	lsl.w	r3, r1, r3
 80075be:	4013      	ands	r3, r2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <watchdog_init+0x68>
    {
      watchdog_flt = WATCHDOG_FLT_LPWRRST;
 80075c4:	4b4f      	ldr	r3, [pc, #316]	; (8007704 <watchdog_init+0x1a0>)
 80075c6:	2201      	movs	r2, #1
 80075c8:	701a      	strb	r2, [r3, #0]
 80075ca:	e091      	b.n	80076f0 <watchdog_init+0x18c>
 80075cc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80075d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075d4:	fa93 f3a3 	rbit	r3, r3
 80075d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80075da:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80075de:	657b      	str	r3, [r7, #84]	; 0x54
 80075e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075e2:	fa93 f3a3 	rbit	r3, r3
 80075e6:	653b      	str	r3, [r7, #80]	; 0x50
 80075e8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80075ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075f0:	fa93 f3a3 	rbit	r3, r3
 80075f4:	64bb      	str	r3, [r7, #72]	; 0x48
    }

  //Warunek sprawdzajacy czy system zaczal prace po wykorzystaniu resetu przez uklad czuwajacy
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET)
 80075f6:	4b42      	ldr	r3, [pc, #264]	; (8007700 <watchdog_init+0x19c>)
 80075f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80075fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007602:	fa93 f3a3 	rbit	r3, r3
 8007606:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800760a:	fab3 f383 	clz	r3, r3
 800760e:	b2db      	uxtb	r3, r3
 8007610:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007614:	b2db      	uxtb	r3, r3
 8007616:	f003 031f 	and.w	r3, r3, #31
 800761a:	2101      	movs	r1, #1
 800761c:	fa01 f303 	lsl.w	r3, r1, r3
 8007620:	4013      	ands	r3, r2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <watchdog_init+0xca>
    {
      watchdog_flt = WATCHDOG_FLT_IWDGRST;
 8007626:	4b37      	ldr	r3, [pc, #220]	; (8007704 <watchdog_init+0x1a0>)
 8007628:	2202      	movs	r2, #2
 800762a:	701a      	strb	r2, [r3, #0]
 800762c:	e060      	b.n	80076f0 <watchdog_init+0x18c>
 800762e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007632:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007636:	fa93 f3a3 	rbit	r3, r3
 800763a:	63bb      	str	r3, [r7, #56]	; 0x38
 800763c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007640:	637b      	str	r3, [r7, #52]	; 0x34
 8007642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007644:	fa93 f3a3 	rbit	r3, r3
 8007648:	633b      	str	r3, [r7, #48]	; 0x30
 800764a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800764e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007652:	fa93 f3a3 	rbit	r3, r3
 8007656:	62bb      	str	r3, [r7, #40]	; 0x28
    }

  //Warunek sprawdzajacy czy reset systemu zostal wywolany w programie
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET)
 8007658:	4b29      	ldr	r3, [pc, #164]	; (8007700 <watchdog_init+0x19c>)
 800765a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800765c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007660:	627b      	str	r3, [r7, #36]	; 0x24
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	fa93 f3a3 	rbit	r3, r3
 8007668:	623b      	str	r3, [r7, #32]
  return result;
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	fab3 f383 	clz	r3, r3
 8007670:	b2db      	uxtb	r3, r3
 8007672:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007676:	b2db      	uxtb	r3, r3
 8007678:	f003 031f 	and.w	r3, r3, #31
 800767c:	2101      	movs	r1, #1
 800767e:	fa01 f303 	lsl.w	r3, r1, r3
 8007682:	4013      	ands	r3, r2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <watchdog_init+0x12c>
    {
      watchdog_flt = WATCHDOG_FLT_SFTRST;
 8007688:	4b1e      	ldr	r3, [pc, #120]	; (8007704 <watchdog_init+0x1a0>)
 800768a:	2203      	movs	r2, #3
 800768c:	701a      	strb	r2, [r3, #0]
 800768e:	e02f      	b.n	80076f0 <watchdog_init+0x18c>
 8007690:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007694:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	fa93 f3a3 	rbit	r3, r3
 800769c:	61bb      	str	r3, [r7, #24]
 800769e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076a2:	617b      	str	r3, [r7, #20]
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	fa93 f3a3 	rbit	r3, r3
 80076aa:	613b      	str	r3, [r7, #16]
 80076ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076b0:	60fb      	str	r3, [r7, #12]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	fa93 f3a3 	rbit	r3, r3
 80076b8:	60bb      	str	r3, [r7, #8]
    }

  //Warunek sprawdzajacy czy reset systemu nastapil poprzez wlaczenie badz odlaczenie zasilania
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 80076ba:	4b11      	ldr	r3, [pc, #68]	; (8007700 <watchdog_init+0x19c>)
 80076bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076c2:	607b      	str	r3, [r7, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	fa93 f3a3 	rbit	r3, r3
 80076ca:	603b      	str	r3, [r7, #0]
  return result;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	fab3 f383 	clz	r3, r3
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	f003 031f 	and.w	r3, r3, #31
 80076de:	2101      	movs	r1, #1
 80076e0:	fa01 f303 	lsl.w	r3, r1, r3
 80076e4:	4013      	ands	r3, r2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <watchdog_init+0x18c>
    {
      watchdog_flt = WATCHDOG_FLT_NONE;
 80076ea:	4b06      	ldr	r3, [pc, #24]	; (8007704 <watchdog_init+0x1a0>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	701a      	strb	r2, [r3, #0]
    }

  HAL_IWDG_Refresh(&hiwdg); 			//Przeladowanie IWDG
 80076f0:	4805      	ldr	r0, [pc, #20]	; (8007708 <watchdog_init+0x1a4>)
 80076f2:	f7fb faf9 	bl	8002ce8 <HAL_IWDG_Refresh>
}
 80076f6:	bf00      	nop
 80076f8:	3780      	adds	r7, #128	; 0x80
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	40021000 	.word	0x40021000
 8007704:	200004a8 	.word	0x200004a8
 8007708:	20000154 	.word	0x20000154

0800770c <watchdog_step>:
/**
* @fn watchdog_step(void)
* @brief Funkcja przeladowujaca IWDG, powinna zostac wywolana wewnatrz hydrogreen_step()
*/
inline void watchdog_step(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
  HAL_IWDG_Refresh(&hiwdg); 			//Przeladowanie IWDG
 8007710:	4802      	ldr	r0, [pc, #8]	; (800771c <watchdog_step+0x10>)
 8007712:	f7fb fae9 	bl	8002ce8 <HAL_IWDG_Refresh>
}
 8007716:	bf00      	nop
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	20000154 	.word	0x20000154

08007720 <__libc_init_array>:
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	4e0d      	ldr	r6, [pc, #52]	; (8007758 <__libc_init_array+0x38>)
 8007724:	4c0d      	ldr	r4, [pc, #52]	; (800775c <__libc_init_array+0x3c>)
 8007726:	1ba4      	subs	r4, r4, r6
 8007728:	10a4      	asrs	r4, r4, #2
 800772a:	2500      	movs	r5, #0
 800772c:	42a5      	cmp	r5, r4
 800772e:	d109      	bne.n	8007744 <__libc_init_array+0x24>
 8007730:	4e0b      	ldr	r6, [pc, #44]	; (8007760 <__libc_init_array+0x40>)
 8007732:	4c0c      	ldr	r4, [pc, #48]	; (8007764 <__libc_init_array+0x44>)
 8007734:	f000 f820 	bl	8007778 <_init>
 8007738:	1ba4      	subs	r4, r4, r6
 800773a:	10a4      	asrs	r4, r4, #2
 800773c:	2500      	movs	r5, #0
 800773e:	42a5      	cmp	r5, r4
 8007740:	d105      	bne.n	800774e <__libc_init_array+0x2e>
 8007742:	bd70      	pop	{r4, r5, r6, pc}
 8007744:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007748:	4798      	blx	r3
 800774a:	3501      	adds	r5, #1
 800774c:	e7ee      	b.n	800772c <__libc_init_array+0xc>
 800774e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007752:	4798      	blx	r3
 8007754:	3501      	adds	r5, #1
 8007756:	e7f2      	b.n	800773e <__libc_init_array+0x1e>
 8007758:	080077c8 	.word	0x080077c8
 800775c:	080077c8 	.word	0x080077c8
 8007760:	080077c8 	.word	0x080077c8
 8007764:	080077cc 	.word	0x080077cc

08007768 <memset>:
 8007768:	4402      	add	r2, r0
 800776a:	4603      	mov	r3, r0
 800776c:	4293      	cmp	r3, r2
 800776e:	d100      	bne.n	8007772 <memset+0xa>
 8007770:	4770      	bx	lr
 8007772:	f803 1b01 	strb.w	r1, [r3], #1
 8007776:	e7f9      	b.n	800776c <memset+0x4>

08007778 <_init>:
 8007778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777a:	bf00      	nop
 800777c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777e:	bc08      	pop	{r3}
 8007780:	469e      	mov	lr, r3
 8007782:	4770      	bx	lr

08007784 <_fini>:
 8007784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007786:	bf00      	nop
 8007788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778a:	bc08      	pop	{r3}
 800778c:	469e      	mov	lr, r3
 800778e:	4770      	bx	lr
