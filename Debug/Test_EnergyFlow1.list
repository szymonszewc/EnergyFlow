
Test_EnergyFlow1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000756c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080076f4  080076f4  000176f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800772c  0800772c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800772c  0800772c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800772c  0800772c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800772c  0800772c  0001772c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007730  08007730  00017730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  2000000c  08007740  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08007740  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017009  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003af1  00000000  00000000  00037045  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001310  00000000  00000000  0003ab38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001108  00000000  00000000  0003be48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e95f  00000000  00000000  0003cf50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000168ca  00000000  00000000  0005b8af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aaa7c  00000000  00000000  00072179  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011cbf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f4  00000000  00000000  0011cc70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080076dc 	.word	0x080076dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080076dc 	.word	0x080076dc

080001c8 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	463b      	mov	r3, r7
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]
 80001d8:	60da      	str	r2, [r3, #12]
 80001da:	611a      	str	r2, [r3, #16]
 80001dc:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 80001de:	4b3c      	ldr	r3, [pc, #240]	; (80002d0 <MX_ADC2_Init+0x108>)
 80001e0:	4a3c      	ldr	r2, [pc, #240]	; (80002d4 <MX_ADC2_Init+0x10c>)
 80001e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80001e4:	4b3a      	ldr	r3, [pc, #232]	; (80002d0 <MX_ADC2_Init+0x108>)
 80001e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80001ea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80001ec:	4b38      	ldr	r3, [pc, #224]	; (80002d0 <MX_ADC2_Init+0x108>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001f2:	4b37      	ldr	r3, [pc, #220]	; (80002d0 <MX_ADC2_Init+0x108>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80001f8:	4b35      	ldr	r3, [pc, #212]	; (80002d0 <MX_ADC2_Init+0x108>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80001fe:	4b34      	ldr	r3, [pc, #208]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000200:	2200      	movs	r2, #0
 8000202:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000206:	4b32      	ldr	r3, [pc, #200]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000208:	2200      	movs	r2, #0
 800020a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800020c:	4b30      	ldr	r3, [pc, #192]	; (80002d0 <MX_ADC2_Init+0x108>)
 800020e:	2201      	movs	r2, #1
 8000210:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000212:	4b2f      	ldr	r3, [pc, #188]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000214:	2200      	movs	r2, #0
 8000216:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000218:	4b2d      	ldr	r3, [pc, #180]	; (80002d0 <MX_ADC2_Init+0x108>)
 800021a:	2204      	movs	r2, #4
 800021c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800021e:	4b2c      	ldr	r3, [pc, #176]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000220:	2201      	movs	r2, #1
 8000222:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000226:	4b2a      	ldr	r3, [pc, #168]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000228:	2204      	movs	r2, #4
 800022a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800022c:	4b28      	ldr	r3, [pc, #160]	; (80002d0 <MX_ADC2_Init+0x108>)
 800022e:	2200      	movs	r2, #0
 8000230:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000232:	4b27      	ldr	r3, [pc, #156]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000234:	2200      	movs	r2, #0
 8000236:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000238:	4825      	ldr	r0, [pc, #148]	; (80002d0 <MX_ADC2_Init+0x108>)
 800023a:	f000 ffff 	bl	800123c <HAL_ADC_Init>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000244:	f000 fa80 	bl	8000748 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000248:	2301      	movs	r3, #1
 800024a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800024c:	2301      	movs	r3, #1
 800024e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000254:	2307      	movs	r3, #7
 8000256:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000258:	2300      	movs	r3, #0
 800025a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800025c:	2300      	movs	r3, #0
 800025e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000260:	463b      	mov	r3, r7
 8000262:	4619      	mov	r1, r3
 8000264:	481a      	ldr	r0, [pc, #104]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000266:	f001 fa55 	bl	8001714 <HAL_ADC_ConfigChannel>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000270:	f000 fa6a 	bl	8000748 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000274:	2302      	movs	r3, #2
 8000276:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000278:	2302      	movs	r3, #2
 800027a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800027c:	463b      	mov	r3, r7
 800027e:	4619      	mov	r1, r3
 8000280:	4813      	ldr	r0, [pc, #76]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000282:	f001 fa47 	bl	8001714 <HAL_ADC_ConfigChannel>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800028c:	f000 fa5c 	bl	8000748 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000290:	2303      	movs	r3, #3
 8000292:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000294:	2303      	movs	r3, #3
 8000296:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000298:	463b      	mov	r3, r7
 800029a:	4619      	mov	r1, r3
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <MX_ADC2_Init+0x108>)
 800029e:	f001 fa39 	bl	8001714 <HAL_ADC_ConfigChannel>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80002a8:	f000 fa4e 	bl	8000748 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002ac:	2304      	movs	r3, #4
 80002ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002b0:	2304      	movs	r3, #4
 80002b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80002b4:	463b      	mov	r3, r7
 80002b6:	4619      	mov	r1, r3
 80002b8:	4805      	ldr	r0, [pc, #20]	; (80002d0 <MX_ADC2_Init+0x108>)
 80002ba:	f001 fa2b 	bl	8001714 <HAL_ADC_ConfigChannel>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80002c4:	f000 fa40 	bl	8000748 <Error_Handler>
  }

}
 80002c8:	bf00      	nop
 80002ca:	3718      	adds	r7, #24
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000070 	.word	0x20000070
 80002d4:	50000100 	.word	0x50000100

080002d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e0:	f107 0314 	add.w	r3, r7, #20
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a2c      	ldr	r2, [pc, #176]	; (80003a8 <HAL_ADC_MspInit+0xd0>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d152      	bne.n	80003a0 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80002fa:	4b2c      	ldr	r3, [pc, #176]	; (80003ac <HAL_ADC_MspInit+0xd4>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a2b      	ldr	r2, [pc, #172]	; (80003ac <HAL_ADC_MspInit+0xd4>)
 8000300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b29      	ldr	r3, [pc, #164]	; (80003ac <HAL_ADC_MspInit+0xd4>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800030e:	613b      	str	r3, [r7, #16]
 8000310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000312:	4b26      	ldr	r3, [pc, #152]	; (80003ac <HAL_ADC_MspInit+0xd4>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a25      	ldr	r2, [pc, #148]	; (80003ac <HAL_ADC_MspInit+0xd4>)
 8000318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800031c:	6153      	str	r3, [r2, #20]
 800031e:	4b23      	ldr	r3, [pc, #140]	; (80003ac <HAL_ADC_MspInit+0xd4>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC2_IN1
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = FC_TEMPERATURE_PIN_Pin|SC_VOLTAGE_PIN_Pin|SC_CURRENT_SENSOR_PIN_Pin|FC_VOLTAGE_PIN_Pin;
 800032a:	23f0      	movs	r3, #240	; 0xf0
 800032c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800032e:	2303      	movs	r3, #3
 8000330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000336:	f107 0314 	add.w	r3, r7, #20
 800033a:	4619      	mov	r1, r3
 800033c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000340:	f002 f9d8 	bl	80026f4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel4;
 8000344:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000346:	4a1b      	ldr	r2, [pc, #108]	; (80003b4 <HAL_ADC_MspInit+0xdc>)
 8000348:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800034a:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 800034c:	2200      	movs	r2, #0
 800034e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000350:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000356:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000358:	2280      	movs	r2, #128	; 0x80
 800035a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800035c:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 800035e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000362:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000366:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800036a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 800036e:	2220      	movs	r2, #32
 8000370:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000374:	2200      	movs	r2, #0
 8000376:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000378:	480d      	ldr	r0, [pc, #52]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 800037a:	f001 ffad 	bl	80022d8 <HAL_DMA_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000384:	f000 f9e0 	bl	8000748 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_ADC2_DMA1_CH4);
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <HAL_ADC_MspInit+0xe0>)
 800038a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800038c:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <HAL_ADC_MspInit+0xe0>)
 800038e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000392:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a06      	ldr	r2, [pc, #24]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000398:	639a      	str	r2, [r3, #56]	; 0x38
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80003a0:	bf00      	nop
 80003a2:	3728      	adds	r7, #40	; 0x28
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	50000100 	.word	0x50000100
 80003ac:	40021000 	.word	0x40021000
 80003b0:	200000c0 	.word	0x200000c0
 80003b4:	40020044 	.word	0x40020044
 80003b8:	40010000 	.word	0x40010000

080003bc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80003c0:	4b10      	ldr	r3, [pc, #64]	; (8000404 <MX_CRC_Init+0x48>)
 80003c2:	4a11      	ldr	r2, [pc, #68]	; (8000408 <MX_CRC_Init+0x4c>)
 80003c4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80003c6:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <MX_CRC_Init+0x48>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80003cc:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <MX_CRC_Init+0x48>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_CRC_Init+0x48>)
 80003d4:	2207      	movs	r2, #7
 80003d6:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 80003d8:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <MX_CRC_Init+0x48>)
 80003da:	2210      	movs	r2, #16
 80003dc:	60da      	str	r2, [r3, #12]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_CRC_Init+0x48>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80003e4:	4b07      	ldr	r3, [pc, #28]	; (8000404 <MX_CRC_Init+0x48>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80003ea:	4b06      	ldr	r3, [pc, #24]	; (8000404 <MX_CRC_Init+0x48>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80003f0:	4804      	ldr	r0, [pc, #16]	; (8000404 <MX_CRC_Init+0x48>)
 80003f2:	f001 fe87 	bl	8002104 <HAL_CRC_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_CRC_Init+0x44>
  {
    Error_Handler();
 80003fc:	f000 f9a4 	bl	8000748 <Error_Handler>
  }

}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000104 	.word	0x20000104
 8000408:	40023000 	.word	0x40023000

0800040c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <HAL_CRC_MspInit+0x38>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d10b      	bne.n	8000436 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <HAL_CRC_MspInit+0x3c>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a09      	ldr	r2, [pc, #36]	; (8000448 <HAL_CRC_MspInit+0x3c>)
 8000424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b07      	ldr	r3, [pc, #28]	; (8000448 <HAL_CRC_MspInit+0x3c>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000436:	bf00      	nop
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40023000 	.word	0x40023000
 8000448:	40021000 	.word	0x40021000

0800044c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_DMA_Init+0x68>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a17      	ldr	r2, [pc, #92]	; (80004b4 <MX_DMA_Init+0x68>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <MX_DMA_Init+0x68>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	2100      	movs	r1, #0
 800046e:	200c      	movs	r0, #12
 8000470:	f001 fe11 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000474:	200c      	movs	r0, #12
 8000476:	f001 fe2a 	bl	80020ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	200e      	movs	r0, #14
 8000480:	f001 fe09 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000484:	200e      	movs	r0, #14
 8000486:	f001 fe22 	bl	80020ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	200f      	movs	r0, #15
 8000490:	f001 fe01 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000494:	200f      	movs	r0, #15
 8000496:	f001 fe1a 	bl	80020ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2100      	movs	r1, #0
 800049e:	2010      	movs	r0, #16
 80004a0:	f001 fdf9 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004a4:	2010      	movs	r0, #16
 80004a6:	f001 fe12 	bl	80020ce <HAL_NVIC_EnableIRQ>

}
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000

080004b8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ce:	4b4e      	ldr	r3, [pc, #312]	; (8000608 <MX_GPIO_Init+0x150>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a4d      	ldr	r2, [pc, #308]	; (8000608 <MX_GPIO_Init+0x150>)
 80004d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b4b      	ldr	r3, [pc, #300]	; (8000608 <MX_GPIO_Init+0x150>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	4b48      	ldr	r3, [pc, #288]	; (8000608 <MX_GPIO_Init+0x150>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a47      	ldr	r2, [pc, #284]	; (8000608 <MX_GPIO_Init+0x150>)
 80004ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b45      	ldr	r3, [pc, #276]	; (8000608 <MX_GPIO_Init+0x150>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	4b42      	ldr	r3, [pc, #264]	; (8000608 <MX_GPIO_Init+0x150>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a41      	ldr	r2, [pc, #260]	; (8000608 <MX_GPIO_Init+0x150>)
 8000504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b3f      	ldr	r3, [pc, #252]	; (8000608 <MX_GPIO_Init+0x150>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SC_ON_GPIO_Port, SC_ON_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f002 fa5a 	bl	80029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FC_DECHARGING_GPIO_Port, FC_DECHARGING_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	4838      	ldr	r0, [pc, #224]	; (800060c <MX_GPIO_Init+0x154>)
 800052a:	f002 fa55 	bl	80029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800052e:	2302      	movs	r3, #2
 8000530:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000532:	2303      	movs	r3, #3
 8000534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800053a:	f107 030c 	add.w	r3, r7, #12
 800053e:	4619      	mov	r1, r3
 8000540:	4833      	ldr	r0, [pc, #204]	; (8000610 <MX_GPIO_Init+0x158>)
 8000542:	f002 f8d7 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000546:	f649 4302 	movw	r3, #39938	; 0x9c02
 800054a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800054c:	2303      	movs	r3, #3
 800054e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	4619      	mov	r1, r3
 800055a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055e:	f002 f8c9 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB4 PBPin */
  GPIO_InitStruct.Pin = FAN_2_GPIO_Pin|GPIO_PIN_4|FAN_1_GPIO_Pin;
 8000562:	2352      	movs	r3, #82	; 0x52
 8000564:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000566:	4b2b      	ldr	r3, [pc, #172]	; (8000614 <MX_GPIO_Init+0x15c>)
 8000568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	4619      	mov	r1, r3
 8000574:	4825      	ldr	r0, [pc, #148]	; (800060c <MX_GPIO_Init+0x154>)
 8000576:	f002 f8bd 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SC_ON_Pin;
 800057a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800057e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SC_ON_GPIO_Port, &GPIO_InitStruct);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4619      	mov	r1, r3
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f002 f8ad 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800059a:	2328      	movs	r3, #40	; 0x28
 800059c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800059e:	2303      	movs	r3, #3
 80005a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	4619      	mov	r1, r3
 80005ac:	4817      	ldr	r0, [pc, #92]	; (800060c <MX_GPIO_Init+0x154>)
 80005ae:	f002 f8a1 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FC_DECHARGING_Pin;
 80005b2:	2380      	movs	r3, #128	; 0x80
 80005b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FC_DECHARGING_GPIO_Port, &GPIO_InitStruct);
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	4619      	mov	r1, r3
 80005c8:	4810      	ldr	r0, [pc, #64]	; (800060c <MX_GPIO_Init+0x154>)
 80005ca:	f002 f893 	bl	80026f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 3, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2103      	movs	r1, #3
 80005d2:	2007      	movs	r0, #7
 80005d4:	f001 fd5f 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80005d8:	2007      	movs	r0, #7
 80005da:	f001 fd78 	bl	80020ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2103      	movs	r1, #3
 80005e2:	200a      	movs	r0, #10
 80005e4:	f001 fd57 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80005e8:	200a      	movs	r0, #10
 80005ea:	f001 fd70 	bl	80020ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2101      	movs	r1, #1
 80005f2:	2017      	movs	r0, #23
 80005f4:	f001 fd4f 	bl	8002096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005f8:	2017      	movs	r0, #23
 80005fa:	f001 fd68 	bl	80020ce <HAL_NVIC_EnableIRQ>

}
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000
 800060c:	48000400 	.word	0x48000400
 8000610:	48001400 	.word	0x48001400
 8000614:	10210000 	.word	0x10210000

08000618 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_IWDG_Init+0x34>)
 800061e:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <MX_IWDG_Init+0x38>)
 8000620:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_IWDG_Init+0x34>)
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 2000;
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_IWDG_Init+0x34>)
 800062a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800062e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 1500;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_IWDG_Init+0x34>)
 8000632:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000636:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_IWDG_Init+0x34>)
 800063a:	f002 f9fd 	bl	8002a38 <HAL_IWDG_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000644:	f000 f880 	bl	8000748 <Error_Handler>
  }

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000128 	.word	0x20000128
 8000650:	40003000 	.word	0x40003000

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000658:	f000 fd6c 	bl	8001134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065c:	f000 f819 	bl	8000692 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f7ff ff2a 	bl	80004b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000664:	f7ff fef2 	bl	800044c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000668:	f000 fc8a 	bl	8000f80 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 800066c:	f7ff fdac 	bl	80001c8 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000670:	f000 f92e 	bl	80008d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000674:	f000 f9d8 	bl	8000a28 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000678:	f000 fa4c 	bl	8000b14 <MX_TIM3_Init>
  MX_CRC_Init();
 800067c:	f7ff fe9e 	bl	80003bc <MX_CRC_Init>
  MX_IWDG_Init();
 8000680:	f7ff ffca 	bl	8000618 <MX_IWDG_Init>
  MX_TIM6_Init();
 8000684:	f000 fabc 	bl	8000c00 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000688:	f000 faf0 	bl	8000c6c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  hydrogreen_main();
 800068c:	f006 fa34 	bl	8006af8 <hydrogreen_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000690:	e7fe      	b.n	8000690 <main+0x3c>

08000692 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b096      	sub	sp, #88	; 0x58
 8000696:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000698:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800069c:	2228      	movs	r2, #40	; 0x28
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f007 f813 	bl	80076cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
 80006c4:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006c6:	230a      	movs	r3, #10
 80006c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ca:	2301      	movs	r3, #1
 80006cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ce:	2310      	movs	r3, #16
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006d2:	2301      	movs	r3, #1
 80006d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006da:	2300      	movs	r3, #0
 80006dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006de:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80006e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 f9fb 	bl	8002ae4 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006f4:	f000 f828 	bl	8000748 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	2102      	movs	r1, #2
 8000714:	4618      	mov	r0, r3
 8000716:	f003 f8ed 	bl	80038f4 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000720:	f000 f812 	bl	8000748 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4618      	mov	r0, r3
 8000732:	f003 fb15 	bl	8003d60 <HAL_RCCEx_PeriphCLKConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800073c:	f000 f804 	bl	8000748 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3758      	adds	r7, #88	; 0x58
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	hydrogreen_hardFault();
 800074c:	f006 f9f6 	bl	8006b3c <hydrogreen_hardFault>
  /* USER CODE END Error_Handler_Debug */
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_MspInit+0x44>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <HAL_MspInit+0x44>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6193      	str	r3, [r2, #24]
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_MspInit+0x44>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_MspInit+0x44>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	4a08      	ldr	r2, [pc, #32]	; (8000798 <HAL_MspInit+0x44>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	61d3      	str	r3, [r2, #28]
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_MspInit+0x44>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <NMI_Handler+0x4>

080007a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <HardFault_Handler+0x4>

080007a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <MemManage_Handler+0x4>

080007ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <BusFault_Handler+0x4>

080007b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <UsageFault_Handler+0x4>

080007ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_SYSTICK_Callback();
 80007e8:	f006 fe44 	bl	8007474 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ec:	f000 fce8 	bl	80011c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80007f8:	2002      	movs	r0, #2
 80007fa:	f002 f905 	bl	8002a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}

08000802 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000806:	2010      	movs	r0, #16
 8000808:	f002 f8fe 	bl	8002a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <DMA1_Channel2_IRQHandler+0x10>)
 8000816:	f001 fe7c 	bl	8002512 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000138 	.word	0x20000138

08000824 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <DMA1_Channel4_IRQHandler+0x10>)
 800082a:	f001 fe72 	bl	8002512 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000c0 	.word	0x200000c0

08000838 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <DMA1_Channel5_IRQHandler+0x10>)
 800083e:	f001 fe68 	bl	8002512 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000017c 	.word	0x2000017c

0800084c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <DMA1_Channel6_IRQHandler+0x10>)
 8000852:	f001 fe5e 	bl	8002512 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000033c 	.word	0x2000033c

08000860 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000864:	2040      	movs	r0, #64	; 0x40
 8000866:	f002 f8cf 	bl	8002a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <USART2_IRQHandler+0x10>)
 8000876:	f005 f8fd 	bl	8005a74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000380 	.word	0x20000380

08000884 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <TIM6_DAC1_IRQHandler+0x10>)
 800088a:	f003 ff8f 	bl	80047ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000020c 	.word	0x2000020c

08000898 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <TIM7_DAC2_IRQHandler+0x10>)
 800089e:	f003 ff85 	bl	80047ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200002f0 	.word	0x200002f0

080008ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <SystemInit+0x20>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <SystemInit+0x20>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch1;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b09a      	sub	sp, #104	; 0x68
 80008d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
 8000900:	615a      	str	r2, [r3, #20]
 8000902:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	222c      	movs	r2, #44	; 0x2c
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f006 fede 	bl	80076cc <memset>

  htim1.Instance = TIM1;
 8000910:	4b43      	ldr	r3, [pc, #268]	; (8000a20 <MX_TIM1_Init+0x150>)
 8000912:	4a44      	ldr	r2, [pc, #272]	; (8000a24 <MX_TIM1_Init+0x154>)
 8000914:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8000916:	4b42      	ldr	r3, [pc, #264]	; (8000a20 <MX_TIM1_Init+0x150>)
 8000918:	2209      	movs	r2, #9
 800091a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091c:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <MX_TIM1_Init+0x150>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000922:	4b3f      	ldr	r3, [pc, #252]	; (8000a20 <MX_TIM1_Init+0x150>)
 8000924:	22ff      	movs	r2, #255	; 0xff
 8000926:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000928:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <MX_TIM1_Init+0x150>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800092e:	4b3c      	ldr	r3, [pc, #240]	; (8000a20 <MX_TIM1_Init+0x150>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000934:	4b3a      	ldr	r3, [pc, #232]	; (8000a20 <MX_TIM1_Init+0x150>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800093a:	4839      	ldr	r0, [pc, #228]	; (8000a20 <MX_TIM1_Init+0x150>)
 800093c:	f003 fb36 	bl	8003fac <HAL_TIM_Base_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000946:	f7ff feff 	bl	8000748 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000950:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000954:	4619      	mov	r1, r3
 8000956:	4832      	ldr	r0, [pc, #200]	; (8000a20 <MX_TIM1_Init+0x150>)
 8000958:	f004 f958 	bl	8004c0c <HAL_TIM_ConfigClockSource>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000962:	f7ff fef1 	bl	8000748 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000966:	482e      	ldr	r0, [pc, #184]	; (8000a20 <MX_TIM1_Init+0x150>)
 8000968:	f003 fbd4 	bl	8004114 <HAL_TIM_PWM_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000972:	f7ff fee9 	bl	8000748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000976:	2300      	movs	r3, #0
 8000978:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000982:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000986:	4619      	mov	r1, r3
 8000988:	4825      	ldr	r0, [pc, #148]	; (8000a20 <MX_TIM1_Init+0x150>)
 800098a:	f004 fee3 	bl	8005754 <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000994:	f7ff fed8 	bl	8000748 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000998:	2360      	movs	r3, #96	; 0x60
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a0:	2300      	movs	r3, #0
 80009a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009a4:	2300      	movs	r3, #0
 80009a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009b8:	2200      	movs	r2, #0
 80009ba:	4619      	mov	r1, r3
 80009bc:	4818      	ldr	r0, [pc, #96]	; (8000a20 <MX_TIM1_Init+0x150>)
 80009be:	f004 f815 	bl	80049ec <HAL_TIM_PWM_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80009c8:	f7ff febe 	bl	8000748 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	4619      	mov	r1, r3
 8000a00:	4807      	ldr	r0, [pc, #28]	; (8000a20 <MX_TIM1_Init+0x150>)
 8000a02:	f004 ff15 	bl	8005830 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000a0c:	f7ff fe9c 	bl	8000748 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <MX_TIM1_Init+0x150>)
 8000a12:	f000 fa35 	bl	8000e80 <HAL_TIM_MspPostInit>

}
 8000a16:	bf00      	nop
 8000a18:	3768      	adds	r7, #104	; 0x68
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000258 	.word	0x20000258
 8000a24:	40012c00 	.word	0x40012c00

08000a28 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08e      	sub	sp, #56	; 0x38
 8000a2c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a48:	463b      	mov	r3, r7
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]
 8000a56:	615a      	str	r2, [r3, #20]
 8000a58:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000a5a:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000a5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8000a62:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000a64:	221f      	movs	r2, #31
 8000a66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a68:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000a6e:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000a70:	2263      	movs	r2, #99	; 0x63
 8000a72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a74:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7a:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a80:	4823      	ldr	r0, [pc, #140]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000a82:	f003 fa93 	bl	8003fac <HAL_TIM_Base_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a8c:	f7ff fe5c 	bl	8000748 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	481c      	ldr	r0, [pc, #112]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000a9e:	f004 f8b5 	bl	8004c0c <HAL_TIM_ConfigClockSource>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000aa8:	f7ff fe4e 	bl	8000748 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000aac:	4818      	ldr	r0, [pc, #96]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000aae:	f003 fb31 	bl	8004114 <HAL_TIM_PWM_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ab8:	f7ff fe46 	bl	8000748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4811      	ldr	r0, [pc, #68]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000acc:	f004 fe42 	bl	8005754 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000ad6:	f7ff fe37 	bl	8000748 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ada:	2360      	movs	r3, #96	; 0x60
 8000adc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 99;
 8000ade:	2363      	movs	r3, #99	; 0x63
 8000ae0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aea:	463b      	mov	r3, r7
 8000aec:	2200      	movs	r2, #0
 8000aee:	4619      	mov	r1, r3
 8000af0:	4807      	ldr	r0, [pc, #28]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000af2:	f003 ff7b 	bl	80049ec <HAL_TIM_PWM_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000afc:	f7ff fe24 	bl	8000748 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <MX_TIM2_Init+0xe8>)
 8000b02:	f000 f9bd 	bl	8000e80 <HAL_TIM_MspPostInit>

}
 8000b06:	bf00      	nop
 8000b08:	3738      	adds	r7, #56	; 0x38
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200002a4 	.word	0x200002a4

08000b14 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08e      	sub	sp, #56	; 0x38
 8000b18:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b34:	463b      	mov	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]
 8000b42:	615a      	str	r2, [r3, #20]
 8000b44:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000b46:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000b48:	4a2c      	ldr	r2, [pc, #176]	; (8000bfc <MX_TIM3_Init+0xe8>)
 8000b4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000b4e:	221f      	movs	r2, #31
 8000b50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000b58:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000b5a:	2263      	movs	r2, #99	; 0x63
 8000b5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5e:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b64:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b6a:	4823      	ldr	r0, [pc, #140]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000b6c:	f003 fa1e 	bl	8003fac <HAL_TIM_Base_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b76:	f7ff fde7 	bl	8000748 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b84:	4619      	mov	r1, r3
 8000b86:	481c      	ldr	r0, [pc, #112]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000b88:	f004 f840 	bl	8004c0c <HAL_TIM_ConfigClockSource>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b92:	f7ff fdd9 	bl	8000748 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b96:	4818      	ldr	r0, [pc, #96]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000b98:	f003 fabc 	bl	8004114 <HAL_TIM_PWM_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ba2:	f7ff fdd1 	bl	8000748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4810      	ldr	r0, [pc, #64]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000bb6:	f004 fdcd 	bl	8005754 <HAL_TIMEx_MasterConfigSynchronization>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000bc0:	f7ff fdc2 	bl	8000748 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc4:	2360      	movs	r3, #96	; 0x60
 8000bc6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	2208      	movs	r2, #8
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000bdc:	f003 ff06 	bl	80049ec <HAL_TIM_PWM_ConfigChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000be6:	f7ff fdaf 	bl	8000748 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000bea:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <MX_TIM3_Init+0xe4>)
 8000bec:	f000 f948 	bl	8000e80 <HAL_TIM_MspPostInit>

}
 8000bf0:	bf00      	nop
 8000bf2:	3738      	adds	r7, #56	; 0x38
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200001c0 	.word	0x200001c0
 8000bfc:	40000400 	.word	0x40000400

08000c00 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_TIM6_Init+0x64>)
 8000c12:	4a15      	ldr	r2, [pc, #84]	; (8000c68 <MX_TIM6_Init+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64-1;
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_TIM6_Init+0x64>)
 8000c18:	223f      	movs	r2, #63	; 0x3f
 8000c1a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_TIM6_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <MX_TIM6_Init+0x64>)
 8000c24:	2263      	movs	r2, #99	; 0x63
 8000c26:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_TIM6_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c2e:	480d      	ldr	r0, [pc, #52]	; (8000c64 <MX_TIM6_Init+0x64>)
 8000c30:	f003 f9bc 	bl	8003fac <HAL_TIM_Base_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000c3a:	f7ff fd85 	bl	8000748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <MX_TIM6_Init+0x64>)
 8000c4c:	f004 fd82 	bl	8005754 <HAL_TIMEx_MasterConfigSynchronization>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000c56:	f7ff fd77 	bl	8000748 <Error_Handler>
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000020c 	.word	0x2000020c
 8000c68:	40001000 	.word	0x40001000

08000c6c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_TIM7_Init+0x64>)
 8000c7e:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <MX_TIM7_Init+0x68>)
 8000c80:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 64-1;
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_TIM7_Init+0x64>)
 8000c84:	223f      	movs	r2, #63	; 0x3f
 8000c86:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_TIM7_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10-1;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_TIM7_Init+0x64>)
 8000c90:	2209      	movs	r2, #9
 8000c92:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_TIM7_Init+0x64>)
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c9a:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <MX_TIM7_Init+0x64>)
 8000c9c:	f003 f986 	bl	8003fac <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000ca6:	f7ff fd4f 	bl	8000748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <MX_TIM7_Init+0x64>)
 8000cb8:	f004 fd4c 	bl	8005754 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000cc2:	f7ff fd41 	bl	8000748 <Error_Handler>
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200002f0 	.word	0x200002f0
 8000cd4:	40001400 	.word	0x40001400

08000cd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a5d      	ldr	r2, [pc, #372]	; (8000e5c <HAL_TIM_Base_MspInit+0x184>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d134      	bne.n	8000d54 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cea:	4b5d      	ldr	r3, [pc, #372]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4a5c      	ldr	r2, [pc, #368]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000cf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cf4:	6193      	str	r3, [r2, #24]
 8000cf6:	4b5a      	ldr	r3, [pc, #360]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cfe:	61fb      	str	r3, [r7, #28]
 8000d00:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000d02:	4b58      	ldr	r3, [pc, #352]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d04:	4a58      	ldr	r2, [pc, #352]	; (8000e68 <HAL_TIM_Base_MspInit+0x190>)
 8000d06:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d08:	4b56      	ldr	r3, [pc, #344]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0e:	4b55      	ldr	r3, [pc, #340]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d14:	4b53      	ldr	r3, [pc, #332]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d16:	2280      	movs	r2, #128	; 0x80
 8000d18:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d1a:	4b52      	ldr	r3, [pc, #328]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d20:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d22:	4b50      	ldr	r3, [pc, #320]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d28:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000d2a:	4b4e      	ldr	r3, [pc, #312]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d2c:	2220      	movs	r2, #32
 8000d2e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d30:	4b4c      	ldr	r3, [pc, #304]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000d36:	484b      	ldr	r0, [pc, #300]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d38:	f001 face 	bl	80022d8 <HAL_DMA_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000d42:	f7ff fd01 	bl	8000748 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a46      	ldr	r2, [pc, #280]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d4a:	625a      	str	r2, [r3, #36]	; 0x24
 8000d4c:	4a45      	ldr	r2, [pc, #276]	; (8000e64 <HAL_TIM_Base_MspInit+0x18c>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000d52:	e07e      	b.n	8000e52 <HAL_TIM_Base_MspInit+0x17a>
  else if(tim_baseHandle->Instance==TIM2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d5c:	d134      	bne.n	8000dc8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d5e:	4b40      	ldr	r3, [pc, #256]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	4a3f      	ldr	r2, [pc, #252]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	61d3      	str	r3, [r2, #28]
 8000d6a:	4b3d      	ldr	r3, [pc, #244]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	69bb      	ldr	r3, [r7, #24]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000d76:	4b3d      	ldr	r3, [pc, #244]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000d78:	4a3d      	ldr	r2, [pc, #244]	; (8000e70 <HAL_TIM_Base_MspInit+0x198>)
 8000d7a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d7c:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000d7e:	2210      	movs	r2, #16
 8000d80:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d82:	4b3a      	ldr	r3, [pc, #232]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d88:	4b38      	ldr	r3, [pc, #224]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000d8a:	2280      	movs	r2, #128	; 0x80
 8000d8c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d8e:	4b37      	ldr	r3, [pc, #220]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d94:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d9c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000d9e:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000da0:	2220      	movs	r2, #32
 8000da2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000da4:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000daa:	4830      	ldr	r0, [pc, #192]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000dac:	f001 fa94 	bl	80022d8 <HAL_DMA_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_TIM_Base_MspInit+0xe2>
      Error_Handler();
 8000db6:	f7ff fcc7 	bl	8000748 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a2b      	ldr	r2, [pc, #172]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000dbe:	625a      	str	r2, [r3, #36]	; 0x24
 8000dc0:	4a2a      	ldr	r2, [pc, #168]	; (8000e6c <HAL_TIM_Base_MspInit+0x194>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000dc6:	e044      	b.n	8000e52 <HAL_TIM_Base_MspInit+0x17a>
  else if(tim_baseHandle->Instance==TIM3)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a29      	ldr	r2, [pc, #164]	; (8000e74 <HAL_TIM_Base_MspInit+0x19c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d10c      	bne.n	8000dec <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dd2:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	61d3      	str	r3, [r2, #28]
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697b      	ldr	r3, [r7, #20]
}
 8000dea:	e032      	b.n	8000e52 <HAL_TIM_Base_MspInit+0x17a>
  else if(tim_baseHandle->Instance==TIM6)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a21      	ldr	r2, [pc, #132]	; (8000e78 <HAL_TIM_Base_MspInit+0x1a0>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d114      	bne.n	8000e20 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a19      	ldr	r2, [pc, #100]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000dfc:	f043 0310 	orr.w	r3, r3, #16
 8000e00:	61d3      	str	r3, [r2, #28]
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	f003 0310 	and.w	r3, r3, #16
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 1, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2101      	movs	r1, #1
 8000e12:	2036      	movs	r0, #54	; 0x36
 8000e14:	f001 f93f 	bl	8002096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000e18:	2036      	movs	r0, #54	; 0x36
 8000e1a:	f001 f958 	bl	80020ce <HAL_NVIC_EnableIRQ>
}
 8000e1e:	e018      	b.n	8000e52 <HAL_TIM_Base_MspInit+0x17a>
  else if(tim_baseHandle->Instance==TIM7)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a15      	ldr	r2, [pc, #84]	; (8000e7c <HAL_TIM_Base_MspInit+0x1a4>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d113      	bne.n	8000e52 <HAL_TIM_Base_MspInit+0x17a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	4a0c      	ldr	r2, [pc, #48]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000e30:	f043 0320 	orr.w	r3, r3, #32
 8000e34:	61d3      	str	r3, [r2, #28]
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_TIM_Base_MspInit+0x188>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	f003 0320 	and.w	r3, r3, #32
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 3, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2103      	movs	r1, #3
 8000e46:	2037      	movs	r0, #55	; 0x37
 8000e48:	f001 f925 	bl	8002096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8000e4c:	2037      	movs	r0, #55	; 0x37
 8000e4e:	f001 f93e 	bl	80020ce <HAL_NVIC_EnableIRQ>
}
 8000e52:	bf00      	nop
 8000e54:	3720      	adds	r7, #32
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40012c00 	.word	0x40012c00
 8000e60:	40021000 	.word	0x40021000
 8000e64:	20000138 	.word	0x20000138
 8000e68:	4002001c 	.word	0x4002001c
 8000e6c:	2000017c 	.word	0x2000017c
 8000e70:	40020058 	.word	0x40020058
 8000e74:	40000400 	.word	0x40000400
 8000e78:	40001000 	.word	0x40001000
 8000e7c:	40001400 	.word	0x40001400

08000e80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a34      	ldr	r2, [pc, #208]	; (8000f70 <HAL_TIM_MspPostInit+0xf0>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d11e      	bne.n	8000ee0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b34      	ldr	r3, [pc, #208]	; (8000f74 <HAL_TIM_MspPostInit+0xf4>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a33      	ldr	r2, [pc, #204]	; (8000f74 <HAL_TIM_MspPostInit+0xf4>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
 8000eae:	4b31      	ldr	r3, [pc, #196]	; (8000f74 <HAL_TIM_MspPostInit+0xf4>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = FAN_PWM_TIM_Pin;
 8000eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000ecc:	2306      	movs	r3, #6
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_PWM_TIM_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eda:	f001 fc0b 	bl	80026f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ede:	e043      	b.n	8000f68 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM2)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee8:	d11d      	bne.n	8000f26 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <HAL_TIM_MspPostInit+0xf4>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	4a21      	ldr	r2, [pc, #132]	; (8000f74 <HAL_TIM_MspPostInit+0xf4>)
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	6153      	str	r3, [r2, #20]
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <HAL_TIM_MspPostInit+0xf4>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8000f02:	2301      	movs	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f12:	2301      	movs	r3, #1
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f001 fbe8 	bl	80026f4 <HAL_GPIO_Init>
}
 8000f24:	e020      	b.n	8000f68 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM3)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <HAL_TIM_MspPostInit+0xf8>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d11b      	bne.n	8000f68 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_TIM_MspPostInit+0xf4>)
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <HAL_TIM_MspPostInit+0xf4>)
 8000f36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3a:	6153      	str	r3, [r2, #20]
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <HAL_TIM_MspPostInit+0xf4>)
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FC_MOSFET_PWM_TIM_Pin;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FC_MOSFET_PWM_TIM_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <HAL_TIM_MspPostInit+0xfc>)
 8000f64:	f001 fbc6 	bl	80026f4 <HAL_GPIO_Init>
}
 8000f68:	bf00      	nop
 8000f6a:	3728      	adds	r7, #40	; 0x28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40012c00 	.word	0x40012c00
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40000400 	.word	0x40000400
 8000f7c:	48000400 	.word	0x48000400

08000f80 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000f86:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <MX_USART2_UART_Init+0x70>)
 8000f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000f8c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000fb2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fb6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000fba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fbe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000fc2:	2230      	movs	r2, #48	; 0x30
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000fc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fcc:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000fd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_USART2_UART_Init+0x6c>)
 8000fd8:	f004 fcc0 	bl	800595c <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USART2_UART_Init+0x66>
  {
    Error_Handler();
 8000fe2:	f7ff fbb1 	bl	8000748 <Error_Handler>
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000380 	.word	0x20000380
 8000ff0:	40004400 	.word	0x40004400

08000ff4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a2f      	ldr	r2, [pc, #188]	; (80010d0 <HAL_UART_MspInit+0xdc>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d157      	bne.n	80010c6 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001016:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <HAL_UART_MspInit+0xe0>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a2e      	ldr	r2, [pc, #184]	; (80010d4 <HAL_UART_MspInit+0xe0>)
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	61d3      	str	r3, [r2, #28]
 8001022:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <HAL_UART_MspInit+0xe0>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <HAL_UART_MspInit+0xe0>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	4a28      	ldr	r2, [pc, #160]	; (80010d4 <HAL_UART_MspInit+0xe0>)
 8001034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001038:	6153      	str	r3, [r2, #20]
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <HAL_UART_MspInit+0xe0>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = RS_TX_Pin|RS_RX_Pin;
 8001046:	230c      	movs	r3, #12
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001056:	2307      	movs	r3, #7
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001064:	f001 fb46 	bl	80026f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <HAL_UART_MspInit+0xe8>)
 800106c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 8001094:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001098:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800109a:	480f      	ldr	r0, [pc, #60]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 800109c:	f001 f91c 	bl	80022d8 <HAL_DMA_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80010a6:	f7ff fb4f 	bl	8000748 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 80010ae:	671a      	str	r2, [r3, #112]	; 0x70
 80010b0:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2101      	movs	r1, #1
 80010ba:	2026      	movs	r0, #38	; 0x26
 80010bc:	f000 ffeb 	bl	8002096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010c0:	2026      	movs	r0, #38	; 0x26
 80010c2:	f001 f804 	bl	80020ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40004400 	.word	0x40004400
 80010d4:	40021000 	.word	0x40021000
 80010d8:	2000033c 	.word	0x2000033c
 80010dc:	4002006c 	.word	0x4002006c

080010e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001118 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <LoopForever+0x6>)
  ldr r1, =_edata
 80010e6:	490e      	ldr	r1, [pc, #56]	; (8001120 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e8:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <LoopForever+0xe>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010fc:	4c0b      	ldr	r4, [pc, #44]	; (800112c <LoopForever+0x16>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800110a:	f7ff fbcf 	bl	80008ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110e:	f006 fab9 	bl	8007684 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001112:	f7ff fa9f 	bl	8000654 <main>

08001116 <LoopForever>:

LoopForever:
    b LoopForever
 8001116:	e7fe      	b.n	8001116 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001118:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001120:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001124:	08007734 	.word	0x08007734
  ldr r2, =_sbss
 8001128:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800112c:	200004d0 	.word	0x200004d0

08001130 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <ADC1_2_IRQHandler>
	...

08001134 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_Init+0x28>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a07      	ldr	r2, [pc, #28]	; (800115c <HAL_Init+0x28>)
 800113e:	f043 0310 	orr.w	r3, r3, #16
 8001142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001144:	2003      	movs	r0, #3
 8001146:	f000 ff9b 	bl	8002080 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114a:	2000      	movs	r0, #0
 800114c:	f000 f808 	bl	8001160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001150:	f7ff fb00 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40022000 	.word	0x40022000

08001160 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_InitTick+0x54>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_InitTick+0x58>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	fbb3 f3f1 	udiv	r3, r3, r1
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f000 ffb3 	bl	80020ea <HAL_SYSTICK_Config>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e00e      	b.n	80011ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b0f      	cmp	r3, #15
 8001192:	d80a      	bhi.n	80011aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001194:	2200      	movs	r2, #0
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f000 ff7b 	bl	8002096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a0:	4a06      	ldr	r2, [pc, #24]	; (80011bc <HAL_InitTick+0x5c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e000      	b.n	80011ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000000 	.word	0x20000000
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000004 	.word	0x20000004

080011c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000404 	.word	0x20000404

080011e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000404 	.word	0x20000404

08001200 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b09a      	sub	sp, #104	; 0x68
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e172      	b.n	8001542 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	2b00      	cmp	r3, #0
 800126c:	d176      	bne.n	800135c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	2b00      	cmp	r3, #0
 8001274:	d152      	bne.n	800131c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff f821 	bl	80002d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d13b      	bne.n	800131c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 fdbb 	bl	8001e20 <ADC_Disable>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d12f      	bne.n	800131c <HAL_ADC_Init+0xe0>
 80012bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d12b      	bne.n	800131c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012cc:	f023 0302 	bic.w	r3, r3, #2
 80012d0:	f043 0202 	orr.w	r2, r3, #2
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012e6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012f6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012f8:	4b94      	ldr	r3, [pc, #592]	; (800154c <HAL_ADC_Init+0x310>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a94      	ldr	r2, [pc, #592]	; (8001550 <HAL_ADC_Init+0x314>)
 80012fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001302:	0c9a      	lsrs	r2, r3, #18
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800130e:	e002      	b.n	8001316 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3b01      	subs	r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f9      	bne.n	8001310 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d007      	beq.n	800133a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001338:	d110      	bne.n	800135c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f023 0312 	bic.w	r3, r3, #18
 8001342:	f043 0210 	orr.w	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f043 0201 	orr.w	r2, r3, #1
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	2b00      	cmp	r3, #0
 8001366:	f040 80df 	bne.w	8001528 <HAL_ADC_Init+0x2ec>
 800136a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800136e:	2b00      	cmp	r3, #0
 8001370:	f040 80da 	bne.w	8001528 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 80d2 	bne.w	8001528 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800138c:	f043 0202 	orr.w	r2, r3, #2
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001394:	4b6f      	ldr	r3, [pc, #444]	; (8001554 <HAL_ADC_Init+0x318>)
 8001396:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013a0:	d102      	bne.n	80013a8 <HAL_ADC_Init+0x16c>
 80013a2:	4b6d      	ldr	r3, [pc, #436]	; (8001558 <HAL_ADC_Init+0x31c>)
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	e002      	b.n	80013ae <HAL_ADC_Init+0x172>
 80013a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013ac:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d108      	bne.n	80013ce <HAL_ADC_Init+0x192>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d101      	bne.n	80013ce <HAL_ADC_Init+0x192>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_ADC_Init+0x194>
 80013ce:	2300      	movs	r3, #0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d11c      	bne.n	800140e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013d4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d010      	beq.n	80013fc <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d107      	bne.n	80013f6 <HAL_ADC_Init+0x1ba>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <HAL_ADC_Init+0x1ba>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_ADC_Init+0x1bc>
 80013f6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d108      	bne.n	800140e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80013fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	431a      	orrs	r2, r3
 800140a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800140c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7e5b      	ldrb	r3, [r3, #25]
 8001412:	035b      	lsls	r3, r3, #13
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001418:	2a01      	cmp	r2, #1
 800141a:	d002      	beq.n	8001422 <HAL_ADC_Init+0x1e6>
 800141c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001420:	e000      	b.n	8001424 <HAL_ADC_Init+0x1e8>
 8001422:	2200      	movs	r2, #0
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	4313      	orrs	r3, r2
 8001432:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001434:	4313      	orrs	r3, r2
 8001436:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d11b      	bne.n	800147a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7e5b      	ldrb	r3, [r3, #25]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d109      	bne.n	800145e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	3b01      	subs	r3, #1
 8001450:	045a      	lsls	r2, r3, #17
 8001452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001454:	4313      	orrs	r3, r2
 8001456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145a:	663b      	str	r3, [r7, #96]	; 0x60
 800145c:	e00d      	b.n	800147a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001466:	f043 0220 	orr.w	r2, r3, #32
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	2b01      	cmp	r3, #1
 8001480:	d007      	beq.n	8001492 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	4313      	orrs	r3, r2
 800148c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800148e:	4313      	orrs	r3, r2
 8001490:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b00      	cmp	r3, #0
 800149e:	d114      	bne.n	80014ca <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014ae:	f023 0302 	bic.w	r3, r3, #2
 80014b2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7e1b      	ldrb	r3, [r3, #24]
 80014b8:	039a      	lsls	r2, r3, #14
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4313      	orrs	r3, r2
 80014c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014c6:	4313      	orrs	r3, r2
 80014c8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <HAL_ADC_Init+0x320>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80014da:	430b      	orrs	r3, r1
 80014dc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d10c      	bne.n	8001500 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	f023 010f 	bic.w	r1, r3, #15
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	1e5a      	subs	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	631a      	str	r2, [r3, #48]	; 0x30
 80014fe:	e007      	b.n	8001510 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 020f 	bic.w	r2, r2, #15
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f023 0303 	bic.w	r3, r3, #3
 800151e:	f043 0201 	orr.w	r2, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	641a      	str	r2, [r3, #64]	; 0x40
 8001526:	e00a      	b.n	800153e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f023 0312 	bic.w	r3, r3, #18
 8001530:	f043 0210 	orr.w	r2, r3, #16
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001538:	2301      	movs	r3, #1
 800153a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800153e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001542:	4618      	mov	r0, r3
 8001544:	3768      	adds	r7, #104	; 0x68
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000000 	.word	0x20000000
 8001550:	431bde83 	.word	0x431bde83
 8001554:	50000300 	.word	0x50000300
 8001558:	50000100 	.word	0x50000100
 800155c:	fff0c007 	.word	0xfff0c007

08001560 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	2b00      	cmp	r3, #0
 800157c:	f040 80b9 	bne.w	80016f2 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001586:	2b01      	cmp	r3, #1
 8001588:	d101      	bne.n	800158e <HAL_ADC_Start_DMA+0x2e>
 800158a:	2302      	movs	r3, #2
 800158c:	e0b4      	b.n	80016f8 <HAL_ADC_Start_DMA+0x198>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001596:	4b5a      	ldr	r3, [pc, #360]	; (8001700 <HAL_ADC_Start_DMA+0x1a0>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f040 80a0 	bne.w	80016e4 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f000 fbdd 	bl	8001d64 <ADC_Enable>
 80015aa:	4603      	mov	r3, r0
 80015ac:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f040 8092 	bne.w	80016da <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015ca:	4b4d      	ldr	r3, [pc, #308]	; (8001700 <HAL_ADC_Start_DMA+0x1a0>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 031f 	and.w	r3, r3, #31
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d004      	beq.n	80015e0 <HAL_ADC_Start_DMA+0x80>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015de:	d115      	bne.n	800160c <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d027      	beq.n	800164a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001602:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800160a:	e01e      	b.n	800164a <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001620:	d004      	beq.n	800162c <HAL_ADC_Start_DMA+0xcc>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a37      	ldr	r2, [pc, #220]	; (8001704 <HAL_ADC_Start_DMA+0x1a4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d10e      	bne.n	800164a <HAL_ADC_Start_DMA+0xea>
 800162c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001642:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001656:	d106      	bne.n	8001666 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	f023 0206 	bic.w	r2, r3, #6
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	645a      	str	r2, [r3, #68]	; 0x44
 8001664:	e002      	b.n	800166c <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001678:	4a23      	ldr	r2, [pc, #140]	; (8001708 <HAL_ADC_Start_DMA+0x1a8>)
 800167a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001680:	4a22      	ldr	r2, [pc, #136]	; (800170c <HAL_ADC_Start_DMA+0x1ac>)
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001688:	4a21      	ldr	r2, [pc, #132]	; (8001710 <HAL_ADC_Start_DMA+0x1b0>)
 800168a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	221c      	movs	r2, #28
 8001692:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0210 	orr.w	r2, r2, #16
 80016a2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3340      	adds	r3, #64	; 0x40
 80016be:	4619      	mov	r1, r3
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f000 fe4f 	bl	8002366 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0204 	orr.w	r2, r2, #4
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	e00d      	b.n	80016f6 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80016e2:	e008      	b.n	80016f6 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80016f0:	e001      	b.n	80016f6 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016f2:	2302      	movs	r3, #2
 80016f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	50000300 	.word	0x50000300
 8001704:	50000100 	.word	0x50000100
 8001708:	08001c99 	.word	0x08001c99
 800170c:	08001d13 	.word	0x08001d13
 8001710:	08001d2f 	.word	0x08001d2f

08001714 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001714:	b480      	push	{r7}
 8001716:	b09b      	sub	sp, #108	; 0x6c
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x22>
 8001732:	2302      	movs	r3, #2
 8001734:	e2a5      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x56e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	f040 8289 	bne.w	8001c60 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b04      	cmp	r3, #4
 8001754:	d81c      	bhi.n	8001790 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	461a      	mov	r2, r3
 800176a:	231f      	movs	r3, #31
 800176c:	4093      	lsls	r3, r2
 800176e:	43db      	mvns	r3, r3
 8001770:	4019      	ands	r1, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa00 f203 	lsl.w	r2, r0, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	631a      	str	r2, [r3, #48]	; 0x30
 800178e:	e063      	b.n	8001858 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b09      	cmp	r3, #9
 8001796:	d81e      	bhi.n	80017d6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	3b1e      	subs	r3, #30
 80017ac:	221f      	movs	r2, #31
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	4019      	ands	r1, r3
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4413      	add	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	3b1e      	subs	r3, #30
 80017c8:	fa00 f203 	lsl.w	r2, r0, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	635a      	str	r2, [r3, #52]	; 0x34
 80017d4:	e040      	b.n	8001858 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b0e      	cmp	r3, #14
 80017dc:	d81e      	bhi.n	800181c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	3b3c      	subs	r3, #60	; 0x3c
 80017f2:	221f      	movs	r2, #31
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4019      	ands	r1, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	3b3c      	subs	r3, #60	; 0x3c
 800180e:	fa00 f203 	lsl.w	r2, r0, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	639a      	str	r2, [r3, #56]	; 0x38
 800181a:	e01d      	b.n	8001858 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	3b5a      	subs	r3, #90	; 0x5a
 8001830:	221f      	movs	r2, #31
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	4019      	ands	r1, r3
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	3b5a      	subs	r3, #90	; 0x5a
 800184c:	fa00 f203 	lsl.w	r2, r0, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 80e5 	bne.w	8001a32 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b09      	cmp	r3, #9
 800186e:	d91c      	bls.n	80018aa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6999      	ldr	r1, [r3, #24]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	3b1e      	subs	r3, #30
 8001882:	2207      	movs	r2, #7
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	4019      	ands	r1, r3
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	6898      	ldr	r0, [r3, #8]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	3b1e      	subs	r3, #30
 800189c:	fa00 f203 	lsl.w	r2, r0, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	619a      	str	r2, [r3, #24]
 80018a8:	e019      	b.n	80018de <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6959      	ldr	r1, [r3, #20]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	2207      	movs	r2, #7
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	4019      	ands	r1, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	6898      	ldr	r0, [r3, #8]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	fa00 f203 	lsl.w	r2, r0, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	08db      	lsrs	r3, r3, #3
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d84f      	bhi.n	80019a0 <HAL_ADC_ConfigChannel+0x28c>
 8001900:	a201      	add	r2, pc, #4	; (adr r2, 8001908 <HAL_ADC_ConfigChannel+0x1f4>)
 8001902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001906:	bf00      	nop
 8001908:	08001919 	.word	0x08001919
 800190c:	0800193b 	.word	0x0800193b
 8001910:	0800195d 	.word	0x0800195d
 8001914:	0800197f 	.word	0x0800197f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800191e:	4b9e      	ldr	r3, [pc, #632]	; (8001b98 <HAL_ADC_ConfigChannel+0x484>)
 8001920:	4013      	ands	r3, r2
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	0691      	lsls	r1, r2, #26
 8001928:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800192a:	430a      	orrs	r2, r1
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001936:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001938:	e07e      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001940:	4b95      	ldr	r3, [pc, #596]	; (8001b98 <HAL_ADC_ConfigChannel+0x484>)
 8001942:	4013      	ands	r3, r2
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	0691      	lsls	r1, r2, #26
 800194a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800194c:	430a      	orrs	r2, r1
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001958:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800195a:	e06d      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001962:	4b8d      	ldr	r3, [pc, #564]	; (8001b98 <HAL_ADC_ConfigChannel+0x484>)
 8001964:	4013      	ands	r3, r2
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	0691      	lsls	r1, r2, #26
 800196c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800196e:	430a      	orrs	r2, r1
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800197a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800197c:	e05c      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001984:	4b84      	ldr	r3, [pc, #528]	; (8001b98 <HAL_ADC_ConfigChannel+0x484>)
 8001986:	4013      	ands	r3, r2
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	0691      	lsls	r1, r2, #26
 800198e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001990:	430a      	orrs	r2, r1
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800199c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800199e:	e04b      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	069b      	lsls	r3, r3, #26
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d107      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019c2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	069b      	lsls	r3, r3, #26
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d107      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019e6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	069b      	lsls	r3, r3, #26
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d107      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a0a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	069b      	lsls	r3, r3, #26
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d10a      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a2e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001a30:	e001      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001a32:	bf00      	nop
 8001a34:	e000      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001a36:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d108      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x344>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x344>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x346>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 810b 	bne.w	8001c76 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d00f      	beq.n	8001a88 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2201      	movs	r2, #1
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	400a      	ands	r2, r1
 8001a82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a86:	e049      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2201      	movs	r2, #1
 8001a96:	409a      	lsls	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b09      	cmp	r3, #9
 8001aa8:	d91c      	bls.n	8001ae4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6999      	ldr	r1, [r3, #24]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	3b1b      	subs	r3, #27
 8001abc:	2207      	movs	r2, #7
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	4019      	ands	r1, r3
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	6898      	ldr	r0, [r3, #8]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3b1b      	subs	r3, #27
 8001ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	619a      	str	r2, [r3, #24]
 8001ae2:	e01b      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6959      	ldr	r1, [r3, #20]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	2207      	movs	r2, #7
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	4019      	ands	r1, r3
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	6898      	ldr	r0, [r3, #8]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	fa00 f203 	lsl.w	r2, r0, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <HAL_ADC_ConfigChannel+0x488>)
 8001b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b10      	cmp	r3, #16
 8001b26:	d105      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d015      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b38:	2b11      	cmp	r3, #17
 8001b3a:	d105      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00b      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b4c:	2b12      	cmp	r3, #18
 8001b4e:	f040 8092 	bne.w	8001c76 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f040 808b 	bne.w	8001c76 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b68:	d102      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x45c>
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_ADC_ConfigChannel+0x48c>)
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	e002      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x462>
 8001b70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b74:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d10f      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x490>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d108      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x490>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e007      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x492>
 8001b96:	bf00      	nop
 8001b98:	83fff000 	.word	0x83fff000
 8001b9c:	50000300 	.word	0x50000300
 8001ba0:	50000100 	.word	0x50000100
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d150      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001baa:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d010      	beq.n	8001bd2 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d107      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x4b8>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x4b8>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <HAL_ADC_ConfigChannel+0x4ba>
 8001bcc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d13c      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d11d      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x502>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be2:	d118      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bee:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bf0:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <HAL_ADC_ConfigChannel+0x57c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a27      	ldr	r2, [pc, #156]	; (8001c94 <HAL_ADC_ConfigChannel+0x580>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	0c9a      	lsrs	r2, r3, #18
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c06:	e002      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f9      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c14:	e02e      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b11      	cmp	r3, #17
 8001c1c:	d10b      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x522>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c26:	d106      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c32:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c34:	e01e      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b12      	cmp	r3, #18
 8001c3c:	d11a      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c48:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c4a:	e013      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f043 0220 	orr.w	r2, r3, #32
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c5e:	e00a      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	f043 0220 	orr.w	r2, r3, #32
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c72:	e000      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c74:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	376c      	adds	r7, #108	; 0x6c
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000000 	.word	0x20000000
 8001c94:	431bde83 	.word	0x431bde83

08001c98 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d126      	bne.n	8001d00 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d115      	bne.n	8001cf8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d111      	bne.n	8001cf8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f043 0201 	orr.w	r2, r3, #1
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f7ff fa81 	bl	8001200 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001cfe:	e004      	b.n	8001d0a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f7ff fa77 	bl	8001214 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	f043 0204 	orr.w	r2, r3, #4
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f7ff fa67 	bl	8001228 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d108      	bne.n	8001d90 <ADC_Enable+0x2c>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <ADC_Enable+0x2c>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <ADC_Enable+0x2e>
 8001d90:	2300      	movs	r3, #0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d13c      	bne.n	8001e10 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <ADC_Enable+0xb8>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00d      	beq.n	8001dc0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f043 0210 	orr.w	r2, r3, #16
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db4:	f043 0201 	orr.w	r2, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e028      	b.n	8001e12 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001dd0:	f7ff fa0a 	bl	80011e8 <HAL_GetTick>
 8001dd4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001dd6:	e014      	b.n	8001e02 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001dd8:	f7ff fa06 	bl	80011e8 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d90d      	bls.n	8001e02 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f043 0210 	orr.w	r2, r3, #16
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e007      	b.n	8001e12 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d1e3      	bne.n	8001dd8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	8000003f 	.word	0x8000003f

08001e20 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d108      	bne.n	8001e4c <ADC_Disable+0x2c>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <ADC_Disable+0x2c>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <ADC_Disable+0x2e>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d040      	beq.n	8001ed4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 030d 	and.w	r3, r3, #13
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d10f      	bne.n	8001e80 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0202 	orr.w	r2, r2, #2
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2203      	movs	r2, #3
 8001e76:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001e78:	f7ff f9b6 	bl	80011e8 <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e7e:	e022      	b.n	8001ec6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f043 0210 	orr.w	r2, r3, #16
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e90:	f043 0201 	orr.w	r2, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e01c      	b.n	8001ed6 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e9c:	f7ff f9a4 	bl	80011e8 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d90d      	bls.n	8001ec6 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f043 0210 	orr.w	r2, r3, #16
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f043 0201 	orr.w	r2, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e007      	b.n	8001ed6 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d0e3      	beq.n	8001e9c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001efc:	4013      	ands	r3, r2
 8001efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f12:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	60d3      	str	r3, [r2, #12]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <__NVIC_GetPriorityGrouping+0x18>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	f003 0307 	and.w	r3, r3, #7
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	db0b      	blt.n	8001f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	f003 021f 	and.w	r2, r3, #31
 8001f5c:	4907      	ldr	r1, [pc, #28]	; (8001f7c <__NVIC_EnableIRQ+0x38>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	2001      	movs	r0, #1
 8001f66:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000e100 	.word	0xe000e100

08001f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	6039      	str	r1, [r7, #0]
 8001f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	db0a      	blt.n	8001faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	490c      	ldr	r1, [pc, #48]	; (8001fcc <__NVIC_SetPriority+0x4c>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	0112      	lsls	r2, r2, #4
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa8:	e00a      	b.n	8001fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4908      	ldr	r1, [pc, #32]	; (8001fd0 <__NVIC_SetPriority+0x50>)
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	3b04      	subs	r3, #4
 8001fb8:	0112      	lsls	r2, r2, #4
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	761a      	strb	r2, [r3, #24]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000e100 	.word	0xe000e100
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	; 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f1c3 0307 	rsb	r3, r3, #7
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	bf28      	it	cs
 8001ff2:	2304      	movcs	r3, #4
 8001ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	2b06      	cmp	r3, #6
 8001ffc:	d902      	bls.n	8002004 <NVIC_EncodePriority+0x30>
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3b03      	subs	r3, #3
 8002002:	e000      	b.n	8002006 <NVIC_EncodePriority+0x32>
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	f04f 32ff 	mov.w	r2, #4294967295
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43da      	mvns	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	401a      	ands	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800201c:	f04f 31ff 	mov.w	r1, #4294967295
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	43d9      	mvns	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	4313      	orrs	r3, r2
         );
}
 800202e:	4618      	mov	r0, r3
 8002030:	3724      	adds	r7, #36	; 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3b01      	subs	r3, #1
 8002048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800204c:	d301      	bcc.n	8002052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800204e:	2301      	movs	r3, #1
 8002050:	e00f      	b.n	8002072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002052:	4a0a      	ldr	r2, [pc, #40]	; (800207c <SysTick_Config+0x40>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3b01      	subs	r3, #1
 8002058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800205a:	210f      	movs	r1, #15
 800205c:	f04f 30ff 	mov.w	r0, #4294967295
 8002060:	f7ff ff8e 	bl	8001f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <SysTick_Config+0x40>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206a:	4b04      	ldr	r3, [pc, #16]	; (800207c <SysTick_Config+0x40>)
 800206c:	2207      	movs	r2, #7
 800206e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	e000e010 	.word	0xe000e010

08002080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff29 	bl	8001ee0 <__NVIC_SetPriorityGrouping>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b086      	sub	sp, #24
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a8:	f7ff ff3e 	bl	8001f28 <__NVIC_GetPriorityGrouping>
 80020ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	6978      	ldr	r0, [r7, #20]
 80020b4:	f7ff ff8e 	bl	8001fd4 <NVIC_EncodePriority>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff5d 	bl	8001f80 <__NVIC_SetPriority>
}
 80020c6:	bf00      	nop
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff31 	bl	8001f44 <__NVIC_EnableIRQ>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ffa2 	bl	800203c <SysTick_Config>
 80020f8:	4603      	mov	r3, r0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e054      	b.n	80021c0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7f5b      	ldrb	r3, [r3, #29]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d105      	bne.n	800212c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7fe f970 	bl	800040c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	791b      	ldrb	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10c      	bne.n	8002154 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a22      	ldr	r2, [pc, #136]	; (80021c8 <HAL_CRC_Init+0xc4>)
 8002140:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0218 	bic.w	r2, r2, #24
 8002150:	609a      	str	r2, [r3, #8]
 8002152:	e00c      	b.n	800216e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6899      	ldr	r1, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	461a      	mov	r2, r3
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f834 	bl	80021cc <HAL_CRCEx_Polynomial_Set>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e028      	b.n	80021c0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	795b      	ldrb	r3, [r3, #5]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d105      	bne.n	8002182 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f04f 32ff 	mov.w	r2, #4294967295
 800217e:	611a      	str	r2, [r3, #16]
 8002180:	e004      	b.n	800218c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6912      	ldr	r2, [r2, #16]
 800218a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695a      	ldr	r2, [r3, #20]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699a      	ldr	r2, [r3, #24]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	04c11db7 	.word	0x04c11db7

080021cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80021dc:	231f      	movs	r3, #31
 80021de:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80021e0:	bf00      	nop
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1e5a      	subs	r2, r3, #1
 80021e6:	613a      	str	r2, [r7, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d009      	beq.n	8002200 <HAL_CRCEx_Polynomial_Set+0x34>
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b18      	cmp	r3, #24
 8002204:	d846      	bhi.n	8002294 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002206:	a201      	add	r2, pc, #4	; (adr r2, 800220c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220c:	0800229b 	.word	0x0800229b
 8002210:	08002295 	.word	0x08002295
 8002214:	08002295 	.word	0x08002295
 8002218:	08002295 	.word	0x08002295
 800221c:	08002295 	.word	0x08002295
 8002220:	08002295 	.word	0x08002295
 8002224:	08002295 	.word	0x08002295
 8002228:	08002295 	.word	0x08002295
 800222c:	08002289 	.word	0x08002289
 8002230:	08002295 	.word	0x08002295
 8002234:	08002295 	.word	0x08002295
 8002238:	08002295 	.word	0x08002295
 800223c:	08002295 	.word	0x08002295
 8002240:	08002295 	.word	0x08002295
 8002244:	08002295 	.word	0x08002295
 8002248:	08002295 	.word	0x08002295
 800224c:	0800227d 	.word	0x0800227d
 8002250:	08002295 	.word	0x08002295
 8002254:	08002295 	.word	0x08002295
 8002258:	08002295 	.word	0x08002295
 800225c:	08002295 	.word	0x08002295
 8002260:	08002295 	.word	0x08002295
 8002264:	08002295 	.word	0x08002295
 8002268:	08002295 	.word	0x08002295
 800226c:	08002271 	.word	0x08002271
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	2b06      	cmp	r3, #6
 8002274:	d913      	bls.n	800229e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800227a:	e010      	b.n	800229e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	2b07      	cmp	r3, #7
 8002280:	d90f      	bls.n	80022a2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002286:	e00c      	b.n	80022a2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2b0f      	cmp	r3, #15
 800228c:	d90b      	bls.n	80022a6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002292:	e008      	b.n	80022a6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	75fb      	strb	r3, [r7, #23]
      break;
 8002298:	e006      	b.n	80022a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800229a:	bf00      	nop
 800229c:	e004      	b.n	80022a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800229e:	bf00      	nop
 80022a0:	e002      	b.n	80022a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022a2:	bf00      	nop
 80022a4:	e000      	b.n	80022a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022a6:	bf00      	nop
  }
  if (status == HAL_OK)
 80022a8:	7dfb      	ldrb	r3, [r7, #23]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10d      	bne.n	80022ca <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f023 0118 	bic.w	r1, r3, #24
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80022ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e037      	b.n	800235e <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2202      	movs	r2, #2
 80022f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002304:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002308:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002312:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4313      	orrs	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f9b7 	bl	80026b4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}  
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_DMA_Start_IT+0x20>
 8002382:	2302      	movs	r3, #2
 8002384:	e04a      	b.n	800241c <HAL_DMA_Start_IT+0xb6>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002394:	2b01      	cmp	r3, #1
 8002396:	d13a      	bne.n	800240e <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68b9      	ldr	r1, [r7, #8]
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f94b 	bl	8002658 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d008      	beq.n	80023dc <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 020e 	orr.w	r2, r2, #14
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	e00f      	b.n	80023fc <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 020a 	orr.w	r2, r2, #10
 80023ea:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0204 	bic.w	r2, r2, #4
 80023fa:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	e005      	b.n	800241a <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002416:	2302      	movs	r3, #2
 8002418:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800241a:	7dfb      	ldrb	r3, [r7, #23]
} 
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002432:	2b02      	cmp	r3, #2
 8002434:	d008      	beq.n	8002448 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2204      	movs	r2, #4
 800243a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e020      	b.n	800248a <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 020e 	bic.w	r2, r2, #14
 8002456:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002470:	2101      	movs	r1, #1
 8002472:	fa01 f202 	lsl.w	r2, r1, r2
 8002476:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d005      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2204      	movs	r2, #4
 80024b0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73fb      	strb	r3, [r7, #15]
 80024b6:	e027      	b.n	8002508 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 020e 	bic.w	r2, r2, #14
 80024c6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e0:	2101      	movs	r1, #1
 80024e2:	fa01 f202 	lsl.w	r2, r1, r2
 80024e6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	4798      	blx	r3
    } 
  }
  return status;
 8002508:	7bfb      	ldrb	r3, [r7, #15]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	2204      	movs	r2, #4
 8002530:	409a      	lsls	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d024      	beq.n	8002584 <HAL_DMA_IRQHandler+0x72>
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01f      	beq.n	8002584 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b00      	cmp	r3, #0
 8002550:	d107      	bne.n	8002562 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0204 	bic.w	r2, r2, #4
 8002560:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	2104      	movs	r1, #4
 800256c:	fa01 f202 	lsl.w	r2, r1, r2
 8002570:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	2b00      	cmp	r3, #0
 8002578:	d06a      	beq.n	8002650 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002582:	e065      	b.n	8002650 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	2202      	movs	r2, #2
 800258a:	409a      	lsls	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d02c      	beq.n	80025ee <HAL_DMA_IRQHandler+0xdc>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d027      	beq.n	80025ee <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10b      	bne.n	80025c4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 020a 	bic.w	r2, r2, #10
 80025ba:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025cc:	2102      	movs	r1, #2
 80025ce:	fa01 f202 	lsl.w	r2, r1, r2
 80025d2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d035      	beq.n	8002650 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80025ec:	e030      	b.n	8002650 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2208      	movs	r2, #8
 80025f4:	409a      	lsls	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d028      	beq.n	8002650 <HAL_DMA_IRQHandler+0x13e>
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d023      	beq.n	8002650 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 020e 	bic.w	r2, r2, #14
 8002616:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002620:	2101      	movs	r1, #1
 8002622:	fa01 f202 	lsl.w	r2, r1, r2
 8002626:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	2b00      	cmp	r3, #0
 8002644:	d004      	beq.n	8002650 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	4798      	blx	r3
    }
  }
}  
 800264e:	e7ff      	b.n	8002650 <HAL_DMA_IRQHandler+0x13e>
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266e:	2101      	movs	r1, #1
 8002670:	fa01 f202 	lsl.w	r2, r1, r2
 8002674:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b10      	cmp	r3, #16
 8002684:	d108      	bne.n	8002698 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002696:	e007      	b.n	80026a8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	60da      	str	r2, [r3, #12]
}
 80026a8:	bf00      	nop
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <DMA_CalcBaseAndBitshift+0x34>)
 80026c4:	4413      	add	r3, r2
 80026c6:	4a09      	ldr	r2, [pc, #36]	; (80026ec <DMA_CalcBaseAndBitshift+0x38>)
 80026c8:	fba2 2303 	umull	r2, r3, r2, r3
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	009a      	lsls	r2, r3, #2
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a06      	ldr	r2, [pc, #24]	; (80026f0 <DMA_CalcBaseAndBitshift+0x3c>)
 80026d8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	bffdfff8 	.word	0xbffdfff8
 80026ec:	cccccccd 	.word	0xcccccccd
 80026f0:	40020000 	.word	0x40020000

080026f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002702:	e14e      	b.n	80029a2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	2101      	movs	r1, #1
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	4013      	ands	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8140 	beq.w	800299c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d00b      	beq.n	800273c <HAL_GPIO_Init+0x48>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d007      	beq.n	800273c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002730:	2b11      	cmp	r3, #17
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b12      	cmp	r3, #18
 800273a:	d130      	bne.n	800279e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2203      	movs	r2, #3
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002772:	2201      	movs	r2, #1
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	091b      	lsrs	r3, r3, #4
 8002788:	f003 0201 	and.w	r2, r3, #1
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	2203      	movs	r2, #3
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0xea>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b12      	cmp	r3, #18
 80027dc:	d123      	bne.n	8002826 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	08da      	lsrs	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3208      	adds	r2, #8
 80027e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	220f      	movs	r2, #15
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4013      	ands	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	08da      	lsrs	r2, r3, #3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3208      	adds	r2, #8
 8002820:	6939      	ldr	r1, [r7, #16]
 8002822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	2203      	movs	r2, #3
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4013      	ands	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 0203 	and.w	r2, r3, #3
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 809a 	beq.w	800299c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002868:	4b55      	ldr	r3, [pc, #340]	; (80029c0 <HAL_GPIO_Init+0x2cc>)
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	4a54      	ldr	r2, [pc, #336]	; (80029c0 <HAL_GPIO_Init+0x2cc>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6193      	str	r3, [r2, #24]
 8002874:	4b52      	ldr	r3, [pc, #328]	; (80029c0 <HAL_GPIO_Init+0x2cc>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002880:	4a50      	ldr	r2, [pc, #320]	; (80029c4 <HAL_GPIO_Init+0x2d0>)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	089b      	lsrs	r3, r3, #2
 8002886:	3302      	adds	r3, #2
 8002888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	220f      	movs	r2, #15
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028aa:	d013      	beq.n	80028d4 <HAL_GPIO_Init+0x1e0>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a46      	ldr	r2, [pc, #280]	; (80029c8 <HAL_GPIO_Init+0x2d4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00d      	beq.n	80028d0 <HAL_GPIO_Init+0x1dc>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a45      	ldr	r2, [pc, #276]	; (80029cc <HAL_GPIO_Init+0x2d8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d007      	beq.n	80028cc <HAL_GPIO_Init+0x1d8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a44      	ldr	r2, [pc, #272]	; (80029d0 <HAL_GPIO_Init+0x2dc>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d101      	bne.n	80028c8 <HAL_GPIO_Init+0x1d4>
 80028c4:	2303      	movs	r3, #3
 80028c6:	e006      	b.n	80028d6 <HAL_GPIO_Init+0x1e2>
 80028c8:	2305      	movs	r3, #5
 80028ca:	e004      	b.n	80028d6 <HAL_GPIO_Init+0x1e2>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e002      	b.n	80028d6 <HAL_GPIO_Init+0x1e2>
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <HAL_GPIO_Init+0x1e2>
 80028d4:	2300      	movs	r3, #0
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	f002 0203 	and.w	r2, r2, #3
 80028dc:	0092      	lsls	r2, r2, #2
 80028de:	4093      	lsls	r3, r2
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028e6:	4937      	ldr	r1, [pc, #220]	; (80029c4 <HAL_GPIO_Init+0x2d0>)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	3302      	adds	r3, #2
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028f4:	4b37      	ldr	r3, [pc, #220]	; (80029d4 <HAL_GPIO_Init+0x2e0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002918:	4a2e      	ldr	r2, [pc, #184]	; (80029d4 <HAL_GPIO_Init+0x2e0>)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800291e:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_GPIO_Init+0x2e0>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	43db      	mvns	r3, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002942:	4a24      	ldr	r2, [pc, #144]	; (80029d4 <HAL_GPIO_Init+0x2e0>)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002948:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <HAL_GPIO_Init+0x2e0>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	43db      	mvns	r3, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800296c:	4a19      	ldr	r2, [pc, #100]	; (80029d4 <HAL_GPIO_Init+0x2e0>)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002972:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <HAL_GPIO_Init+0x2e0>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002996:	4a0f      	ldr	r2, [pc, #60]	; (80029d4 <HAL_GPIO_Init+0x2e0>)
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	3301      	adds	r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	fa22 f303 	lsr.w	r3, r2, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f47f aea9 	bne.w	8002704 <HAL_GPIO_Init+0x10>
  }
}
 80029b2:	bf00      	nop
 80029b4:	371c      	adds	r7, #28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40010000 	.word	0x40010000
 80029c8:	48000400 	.word	0x48000400
 80029cc:	48000800 	.word	0x48000800
 80029d0:	48000c00 	.word	0x48000c00
 80029d4:	40010400 	.word	0x40010400

080029d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	807b      	strh	r3, [r7, #2]
 80029e4:	4613      	mov	r3, r2
 80029e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029e8:	787b      	ldrb	r3, [r7, #1]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ee:	887a      	ldrh	r2, [r7, #2]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029f4:	e002      	b.n	80029fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029f6:	887a      	ldrh	r2, [r7, #2]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d006      	beq.n	8002a2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a1e:	4a05      	ldr	r2, [pc, #20]	; (8002a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f004 f818 	bl	8006a5c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40010400 	.word	0x40010400

08002a38 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e038      	b.n	8002abc <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002a52:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f245 5255 	movw	r2, #21845	; 0x5555
 8002a5c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6852      	ldr	r2, [r2, #4]
 8002a66:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6892      	ldr	r2, [r2, #8]
 8002a70:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002a72:	f7fe fbb9 	bl	80011e8 <HAL_GetTick>
 8002a76:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8002a78:	e008      	b.n	8002a8c <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002a7a:	f7fe fbb5 	bl	80011e8 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b26      	cmp	r3, #38	; 0x26
 8002a86:	d901      	bls.n	8002a8c <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e017      	b.n	8002abc <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f1      	bne.n	8002a7a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d005      	beq.n	8002ab0 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	68d2      	ldr	r2, [r2, #12]
 8002aac:	611a      	str	r2, [r3, #16]
 8002aae:	e004      	b.n	8002aba <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002ad4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	1d3b      	adds	r3, r7, #4
 8002aee:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	f000 bef4 	b.w	80038e6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 816a 	beq.w	8002de2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b0e:	4bb3      	ldr	r3, [pc, #716]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d00c      	beq.n	8002b34 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b1a:	4bb0      	ldr	r3, [pc, #704]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d159      	bne.n	8002bda <HAL_RCC_OscConfig+0xf6>
 8002b26:	4bad      	ldr	r3, [pc, #692]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b32:	d152      	bne.n	8002bda <HAL_RCC_OscConfig+0xf6>
 8002b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b38:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b48:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4c:	fab3 f383 	clz	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d102      	bne.n	8002b66 <HAL_RCC_OscConfig+0x82>
 8002b60:	4b9e      	ldr	r3, [pc, #632]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	e015      	b.n	8002b92 <HAL_RCC_OscConfig+0xae>
 8002b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b6a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b7e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b82:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002b8e:	4b93      	ldr	r3, [pc, #588]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b96:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002b9a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002b9e:	fa92 f2a2 	rbit	r2, r2
 8002ba2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002ba6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002baa:	fab2 f282 	clz	r2, r2
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f042 0220 	orr.w	r2, r2, #32
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	f002 021f 	and.w	r2, r2, #31
 8002bba:	2101      	movs	r1, #1
 8002bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 810c 	beq.w	8002de0 <HAL_RCC_OscConfig+0x2fc>
 8002bc8:	1d3b      	adds	r3, r7, #4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f040 8106 	bne.w	8002de0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	f000 be86 	b.w	80038e6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bda:	1d3b      	adds	r3, r7, #4
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be4:	d106      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x110>
 8002be6:	4b7d      	ldr	r3, [pc, #500]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a7c      	ldr	r2, [pc, #496]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e030      	b.n	8002c56 <HAL_RCC_OscConfig+0x172>
 8002bf4:	1d3b      	adds	r3, r7, #4
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x134>
 8002bfe:	4b77      	ldr	r3, [pc, #476]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a76      	ldr	r2, [pc, #472]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b74      	ldr	r3, [pc, #464]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a73      	ldr	r2, [pc, #460]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e01e      	b.n	8002c56 <HAL_RCC_OscConfig+0x172>
 8002c18:	1d3b      	adds	r3, r7, #4
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c22:	d10c      	bne.n	8002c3e <HAL_RCC_OscConfig+0x15a>
 8002c24:	4b6d      	ldr	r3, [pc, #436]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a6c      	ldr	r2, [pc, #432]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002c2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	4b6a      	ldr	r3, [pc, #424]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a69      	ldr	r2, [pc, #420]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	e00b      	b.n	8002c56 <HAL_RCC_OscConfig+0x172>
 8002c3e:	4b67      	ldr	r3, [pc, #412]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a66      	ldr	r2, [pc, #408]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	4b64      	ldr	r3, [pc, #400]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a63      	ldr	r2, [pc, #396]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c54:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c56:	4b61      	ldr	r3, [pc, #388]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	f023 020f 	bic.w	r2, r3, #15
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	495d      	ldr	r1, [pc, #372]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d059      	beq.n	8002d28 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7fe fab8 	bl	80011e8 <HAL_GetTick>
 8002c78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7c:	e00a      	b.n	8002c94 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c7e:	f7fe fab3 	bl	80011e8 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d902      	bls.n	8002c94 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	f000 be29 	b.w	80038e6 <HAL_RCC_OscConfig+0xe02>
 8002c94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c98:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002ca0:	fa93 f3a3 	rbit	r3, r3
 8002ca4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002ca8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cac:	fab3 f383 	clz	r3, r3
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d102      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x1e2>
 8002cc0:	4b46      	ldr	r3, [pc, #280]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	e015      	b.n	8002cf2 <HAL_RCC_OscConfig+0x20e>
 8002cc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002cda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cde:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ce2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002cee:	4b3b      	ldr	r3, [pc, #236]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cf6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002cfa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002cfe:	fa92 f2a2 	rbit	r2, r2
 8002d02:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002d06:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002d0a:	fab2 f282 	clz	r2, r2
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	f042 0220 	orr.w	r2, r2, #32
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	f002 021f 	and.w	r2, r2, #31
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0ab      	beq.n	8002c7e <HAL_RCC_OscConfig+0x19a>
 8002d26:	e05c      	b.n	8002de2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7fe fa5e 	bl	80011e8 <HAL_GetTick>
 8002d2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d32:	f7fe fa59 	bl	80011e8 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b64      	cmp	r3, #100	; 0x64
 8002d40:	d902      	bls.n	8002d48 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	f000 bdcf 	b.w	80038e6 <HAL_RCC_OscConfig+0xe02>
 8002d48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d4c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002d5c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d60:	fab3 f383 	clz	r3, r3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d102      	bne.n	8002d7a <HAL_RCC_OscConfig+0x296>
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	e015      	b.n	8002da6 <HAL_RCC_OscConfig+0x2c2>
 8002d7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d7e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002d8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d92:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002d96:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002da2:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <HAL_RCC_OscConfig+0x2f8>)
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002daa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002dae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002db2:	fa92 f2a2 	rbit	r2, r2
 8002db6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002dba:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002dbe:	fab2 f282 	clz	r2, r2
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	f042 0220 	orr.w	r2, r2, #32
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	f002 021f 	and.w	r2, r2, #31
 8002dce:	2101      	movs	r1, #1
 8002dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1ab      	bne.n	8002d32 <HAL_RCC_OscConfig+0x24e>
 8002dda:	e002      	b.n	8002de2 <HAL_RCC_OscConfig+0x2fe>
 8002ddc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 816f 	beq.w	80030d0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002df2:	4bd0      	ldr	r3, [pc, #832]	; (8003134 <HAL_RCC_OscConfig+0x650>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002dfe:	4bcd      	ldr	r3, [pc, #820]	; (8003134 <HAL_RCC_OscConfig+0x650>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d16c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x400>
 8002e0a:	4bca      	ldr	r3, [pc, #808]	; (8003134 <HAL_RCC_OscConfig+0x650>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d166      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x400>
 8002e16:	2302      	movs	r3, #2
 8002e18:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002e28:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d102      	bne.n	8002e46 <HAL_RCC_OscConfig+0x362>
 8002e40:	4bbc      	ldr	r3, [pc, #752]	; (8003134 <HAL_RCC_OscConfig+0x650>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	e013      	b.n	8002e6e <HAL_RCC_OscConfig+0x38a>
 8002e46:	2302      	movs	r3, #2
 8002e48:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e58:	2302      	movs	r3, #2
 8002e5a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002e6a:	4bb2      	ldr	r3, [pc, #712]	; (8003134 <HAL_RCC_OscConfig+0x650>)
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002e74:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002e78:	fa92 f2a2 	rbit	r2, r2
 8002e7c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002e80:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002e84:	fab2 f282 	clz	r2, r2
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	f042 0220 	orr.w	r2, r2, #32
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	f002 021f 	and.w	r2, r2, #31
 8002e94:	2101      	movs	r1, #1
 8002e96:	fa01 f202 	lsl.w	r2, r1, r2
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x3cc>
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d002      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f000 bd1b 	b.w	80038e6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb0:	4ba0      	ldr	r3, [pc, #640]	; (8003134 <HAL_RCC_OscConfig+0x650>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb8:	1d3b      	adds	r3, r7, #4
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	21f8      	movs	r1, #248	; 0xf8
 8002ec0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002ec8:	fa91 f1a1 	rbit	r1, r1
 8002ecc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002ed0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002ed4:	fab1 f181 	clz	r1, r1
 8002ed8:	b2c9      	uxtb	r1, r1
 8002eda:	408b      	lsls	r3, r1
 8002edc:	4995      	ldr	r1, [pc, #596]	; (8003134 <HAL_RCC_OscConfig+0x650>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee2:	e0f5      	b.n	80030d0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ee4:	1d3b      	adds	r3, r7, #4
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8085 	beq.w	8002ffa <HAL_RCC_OscConfig+0x516>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002f02:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	461a      	mov	r2, r3
 8002f18:	2301      	movs	r3, #1
 8002f1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7fe f964 	bl	80011e8 <HAL_GetTick>
 8002f20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f24:	e00a      	b.n	8002f3c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f26:	f7fe f95f 	bl	80011e8 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d902      	bls.n	8002f3c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	f000 bcd5 	b.w	80038e6 <HAL_RCC_OscConfig+0xe02>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002f46:	fa93 f3a3 	rbit	r3, r3
 8002f4a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002f4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f52:	fab3 f383 	clz	r3, r3
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	095b      	lsrs	r3, r3, #5
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d102      	bne.n	8002f6c <HAL_RCC_OscConfig+0x488>
 8002f66:	4b73      	ldr	r3, [pc, #460]	; (8003134 <HAL_RCC_OscConfig+0x650>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	e013      	b.n	8002f94 <HAL_RCC_OscConfig+0x4b0>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f7e:	2302      	movs	r3, #2
 8002f80:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f84:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002f88:	fa93 f3a3 	rbit	r3, r3
 8002f8c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002f90:	4b68      	ldr	r3, [pc, #416]	; (8003134 <HAL_RCC_OscConfig+0x650>)
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	2202      	movs	r2, #2
 8002f96:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002f9a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f9e:	fa92 f2a2 	rbit	r2, r2
 8002fa2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002fa6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002faa:	fab2 f282 	clz	r2, r2
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	f042 0220 	orr.w	r2, r2, #32
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	f002 021f 	and.w	r2, r2, #31
 8002fba:	2101      	movs	r1, #1
 8002fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0af      	beq.n	8002f26 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc6:	4b5b      	ldr	r3, [pc, #364]	; (8003134 <HAL_RCC_OscConfig+0x650>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fce:	1d3b      	adds	r3, r7, #4
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	21f8      	movs	r1, #248	; 0xf8
 8002fd6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002fde:	fa91 f1a1 	rbit	r1, r1
 8002fe2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002fe6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002fea:	fab1 f181 	clz	r1, r1
 8002fee:	b2c9      	uxtb	r1, r1
 8002ff0:	408b      	lsls	r3, r1
 8002ff2:	4950      	ldr	r1, [pc, #320]	; (8003134 <HAL_RCC_OscConfig+0x650>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	600b      	str	r3, [r1, #0]
 8002ff8:	e06a      	b.n	80030d0 <HAL_RCC_OscConfig+0x5ec>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003004:	fa93 f3a3 	rbit	r3, r3
 8003008:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800300c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003010:	fab3 f383 	clz	r3, r3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800301a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	461a      	mov	r2, r3
 8003022:	2300      	movs	r3, #0
 8003024:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003026:	f7fe f8df 	bl	80011e8 <HAL_GetTick>
 800302a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	e00a      	b.n	8003046 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003030:	f7fe f8da 	bl	80011e8 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d902      	bls.n	8003046 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	f000 bc50 	b.w	80038e6 <HAL_RCC_OscConfig+0xe02>
 8003046:	2302      	movs	r3, #2
 8003048:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	b2db      	uxtb	r3, r3
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	d102      	bne.n	8003076 <HAL_RCC_OscConfig+0x592>
 8003070:	4b30      	ldr	r3, [pc, #192]	; (8003134 <HAL_RCC_OscConfig+0x650>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	e013      	b.n	800309e <HAL_RCC_OscConfig+0x5ba>
 8003076:	2302      	movs	r3, #2
 8003078:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003088:	2302      	movs	r3, #2
 800308a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800308e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800309a:	4b26      	ldr	r3, [pc, #152]	; (8003134 <HAL_RCC_OscConfig+0x650>)
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	2202      	movs	r2, #2
 80030a0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80030a4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80030a8:	fa92 f2a2 	rbit	r2, r2
 80030ac:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80030b0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80030b4:	fab2 f282 	clz	r2, r2
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	f042 0220 	orr.w	r2, r2, #32
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	f002 021f 	and.w	r2, r2, #31
 80030c4:	2101      	movs	r1, #1
 80030c6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1af      	bne.n	8003030 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d0:	1d3b      	adds	r3, r7, #4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80da 	beq.w	8003294 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030e0:	1d3b      	adds	r3, r7, #4
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d069      	beq.n	80031be <HAL_RCC_OscConfig+0x6da>
 80030ea:	2301      	movs	r3, #1
 80030ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80030fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003100:	fab3 f383 	clz	r3, r3
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_OscConfig+0x654>)
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	461a      	mov	r2, r3
 8003110:	2301      	movs	r3, #1
 8003112:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003114:	f7fe f868 	bl	80011e8 <HAL_GetTick>
 8003118:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311c:	e00e      	b.n	800313c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800311e:	f7fe f863 	bl	80011e8 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d906      	bls.n	800313c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e3d9      	b.n	80038e6 <HAL_RCC_OscConfig+0xe02>
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000
 8003138:	10908120 	.word	0x10908120
 800313c:	2302      	movs	r3, #2
 800313e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800314e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003152:	2202      	movs	r2, #2
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	fa93 f2a3 	rbit	r2, r3
 8003160:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800316a:	2202      	movs	r2, #2
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	fa93 f2a3 	rbit	r2, r3
 8003178:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800317c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317e:	4ba5      	ldr	r3, [pc, #660]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 8003180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003182:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003186:	2102      	movs	r1, #2
 8003188:	6019      	str	r1, [r3, #0]
 800318a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	fa93 f1a3 	rbit	r1, r3
 8003194:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003198:	6019      	str	r1, [r3, #0]
  return result;
 800319a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	fab3 f383 	clz	r3, r3
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f003 031f 	and.w	r3, r3, #31
 80031b0:	2101      	movs	r1, #1
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0b0      	beq.n	800311e <HAL_RCC_OscConfig+0x63a>
 80031bc:	e06a      	b.n	8003294 <HAL_RCC_OscConfig+0x7b0>
 80031be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	fa93 f2a3 	rbit	r2, r3
 80031d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80031d4:	601a      	str	r2, [r3, #0]
  return result;
 80031d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80031da:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	4b8c      	ldr	r3, [pc, #560]	; (8003418 <HAL_RCC_OscConfig+0x934>)
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	461a      	mov	r2, r3
 80031ec:	2300      	movs	r3, #0
 80031ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f0:	f7fd fffa 	bl	80011e8 <HAL_GetTick>
 80031f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f8:	e009      	b.n	800320e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031fa:	f7fd fff5 	bl	80011e8 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e36b      	b.n	80038e6 <HAL_RCC_OscConfig+0xe02>
 800320e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003212:	2202      	movs	r2, #2
 8003214:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	fa93 f2a3 	rbit	r2, r3
 8003220:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800322a:	2202      	movs	r2, #2
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	fa93 f2a3 	rbit	r2, r3
 8003238:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003242:	2202      	movs	r2, #2
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fa93 f2a3 	rbit	r2, r3
 8003250:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003254:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003256:	4b6f      	ldr	r3, [pc, #444]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 8003258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800325a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800325e:	2102      	movs	r1, #2
 8003260:	6019      	str	r1, [r3, #0]
 8003262:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	fa93 f1a3 	rbit	r1, r3
 800326c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003270:	6019      	str	r1, [r3, #0]
  return result;
 8003272:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	fab3 f383 	clz	r3, r3
 800327c:	b2db      	uxtb	r3, r3
 800327e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003282:	b2db      	uxtb	r3, r3
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	2101      	movs	r1, #1
 800328a:	fa01 f303 	lsl.w	r3, r1, r3
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1b2      	bne.n	80031fa <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003294:	1d3b      	adds	r3, r7, #4
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 8158 	beq.w	8003554 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032aa:	4b5a      	ldr	r3, [pc, #360]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d112      	bne.n	80032dc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	4b57      	ldr	r3, [pc, #348]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	4a56      	ldr	r2, [pc, #344]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 80032bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c0:	61d3      	str	r3, [r2, #28]
 80032c2:	4b54      	ldr	r3, [pc, #336]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80032ca:	f107 0308 	add.w	r3, r7, #8
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	f107 0308 	add.w	r3, r7, #8
 80032d4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032dc:	4b4f      	ldr	r3, [pc, #316]	; (800341c <HAL_RCC_OscConfig+0x938>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d11a      	bne.n	800331e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e8:	4b4c      	ldr	r3, [pc, #304]	; (800341c <HAL_RCC_OscConfig+0x938>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a4b      	ldr	r2, [pc, #300]	; (800341c <HAL_RCC_OscConfig+0x938>)
 80032ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f4:	f7fd ff78 	bl	80011e8 <HAL_GetTick>
 80032f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fc:	e009      	b.n	8003312 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fe:	f7fd ff73 	bl	80011e8 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b64      	cmp	r3, #100	; 0x64
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e2e9      	b.n	80038e6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003312:	4b42      	ldr	r3, [pc, #264]	; (800341c <HAL_RCC_OscConfig+0x938>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0ef      	beq.n	80032fe <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d106      	bne.n	8003336 <HAL_RCC_OscConfig+0x852>
 8003328:	4b3a      	ldr	r3, [pc, #232]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	4a39      	ldr	r2, [pc, #228]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6213      	str	r3, [r2, #32]
 8003334:	e02f      	b.n	8003396 <HAL_RCC_OscConfig+0x8b2>
 8003336:	1d3b      	adds	r3, r7, #4
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10c      	bne.n	800335a <HAL_RCC_OscConfig+0x876>
 8003340:	4b34      	ldr	r3, [pc, #208]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4a33      	ldr	r2, [pc, #204]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 8003346:	f023 0301 	bic.w	r3, r3, #1
 800334a:	6213      	str	r3, [r2, #32]
 800334c:	4b31      	ldr	r3, [pc, #196]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	4a30      	ldr	r2, [pc, #192]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 8003352:	f023 0304 	bic.w	r3, r3, #4
 8003356:	6213      	str	r3, [r2, #32]
 8003358:	e01d      	b.n	8003396 <HAL_RCC_OscConfig+0x8b2>
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	2b05      	cmp	r3, #5
 8003362:	d10c      	bne.n	800337e <HAL_RCC_OscConfig+0x89a>
 8003364:	4b2b      	ldr	r3, [pc, #172]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	4a2a      	ldr	r2, [pc, #168]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 800336a:	f043 0304 	orr.w	r3, r3, #4
 800336e:	6213      	str	r3, [r2, #32]
 8003370:	4b28      	ldr	r3, [pc, #160]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	4a27      	ldr	r2, [pc, #156]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6213      	str	r3, [r2, #32]
 800337c:	e00b      	b.n	8003396 <HAL_RCC_OscConfig+0x8b2>
 800337e:	4b25      	ldr	r3, [pc, #148]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	4a24      	ldr	r2, [pc, #144]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 8003384:	f023 0301 	bic.w	r3, r3, #1
 8003388:	6213      	str	r3, [r2, #32]
 800338a:	4b22      	ldr	r3, [pc, #136]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	4a21      	ldr	r2, [pc, #132]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 8003390:	f023 0304 	bic.w	r3, r3, #4
 8003394:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003396:	1d3b      	adds	r3, r7, #4
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d06b      	beq.n	8003478 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a0:	f7fd ff22 	bl	80011e8 <HAL_GetTick>
 80033a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a8:	e00b      	b.n	80033c2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033aa:	f7fd ff1d 	bl	80011e8 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e291      	b.n	80038e6 <HAL_RCC_OscConfig+0xe02>
 80033c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80033c6:	2202      	movs	r2, #2
 80033c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	fa93 f2a3 	rbit	r2, r3
 80033d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80033de:	2202      	movs	r2, #2
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	fa93 f2a3 	rbit	r2, r3
 80033ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80033f0:	601a      	str	r2, [r3, #0]
  return result;
 80033f2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80033f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f8:	fab3 f383 	clz	r3, r3
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f043 0302 	orr.w	r3, r3, #2
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d109      	bne.n	8003420 <HAL_RCC_OscConfig+0x93c>
 800340c:	4b01      	ldr	r3, [pc, #4]	; (8003414 <HAL_RCC_OscConfig+0x930>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	e014      	b.n	800343c <HAL_RCC_OscConfig+0x958>
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000
 8003418:	10908120 	.word	0x10908120
 800341c:	40007000 	.word	0x40007000
 8003420:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003424:	2202      	movs	r2, #2
 8003426:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003428:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	fa93 f2a3 	rbit	r2, r3
 8003432:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	4bbb      	ldr	r3, [pc, #748]	; (8003728 <HAL_RCC_OscConfig+0xc44>)
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003440:	2102      	movs	r1, #2
 8003442:	6011      	str	r1, [r2, #0]
 8003444:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	fa92 f1a2 	rbit	r1, r2
 800344e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003452:	6011      	str	r1, [r2, #0]
  return result;
 8003454:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	fab2 f282 	clz	r2, r2
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	f002 021f 	and.w	r2, r2, #31
 800346a:	2101      	movs	r1, #1
 800346c:	fa01 f202 	lsl.w	r2, r1, r2
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d099      	beq.n	80033aa <HAL_RCC_OscConfig+0x8c6>
 8003476:	e063      	b.n	8003540 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003478:	f7fd feb6 	bl	80011e8 <HAL_GetTick>
 800347c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003480:	e00b      	b.n	800349a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fd feb1 	bl	80011e8 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003492:	4293      	cmp	r3, r2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e225      	b.n	80038e6 <HAL_RCC_OscConfig+0xe02>
 800349a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800349e:	2202      	movs	r2, #2
 80034a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	fa93 f2a3 	rbit	r2, r3
 80034ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80034b6:	2202      	movs	r2, #2
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	fa93 f2a3 	rbit	r2, r3
 80034c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80034c8:	601a      	str	r2, [r3, #0]
  return result;
 80034ca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80034ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d0:	fab3 f383 	clz	r3, r3
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	f043 0302 	orr.w	r3, r3, #2
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d102      	bne.n	80034ea <HAL_RCC_OscConfig+0xa06>
 80034e4:	4b90      	ldr	r3, [pc, #576]	; (8003728 <HAL_RCC_OscConfig+0xc44>)
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	e00d      	b.n	8003506 <HAL_RCC_OscConfig+0xa22>
 80034ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80034ee:	2202      	movs	r2, #2
 80034f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	fa93 f2a3 	rbit	r2, r3
 80034fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	4b89      	ldr	r3, [pc, #548]	; (8003728 <HAL_RCC_OscConfig+0xc44>)
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800350a:	2102      	movs	r1, #2
 800350c:	6011      	str	r1, [r2, #0]
 800350e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	fa92 f1a2 	rbit	r1, r2
 8003518:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800351c:	6011      	str	r1, [r2, #0]
  return result;
 800351e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	fab2 f282 	clz	r2, r2
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	f002 021f 	and.w	r2, r2, #31
 8003534:	2101      	movs	r1, #1
 8003536:	fa01 f202 	lsl.w	r2, r1, r2
 800353a:	4013      	ands	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1a0      	bne.n	8003482 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003540:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003544:	2b01      	cmp	r3, #1
 8003546:	d105      	bne.n	8003554 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003548:	4b77      	ldr	r3, [pc, #476]	; (8003728 <HAL_RCC_OscConfig+0xc44>)
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	4a76      	ldr	r2, [pc, #472]	; (8003728 <HAL_RCC_OscConfig+0xc44>)
 800354e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003552:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003554:	1d3b      	adds	r3, r7, #4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 81c2 	beq.w	80038e4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003560:	4b71      	ldr	r3, [pc, #452]	; (8003728 <HAL_RCC_OscConfig+0xc44>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 030c 	and.w	r3, r3, #12
 8003568:	2b08      	cmp	r3, #8
 800356a:	f000 819c 	beq.w	80038a6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800356e:	1d3b      	adds	r3, r7, #4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	2b02      	cmp	r3, #2
 8003576:	f040 8114 	bne.w	80037a2 <HAL_RCC_OscConfig+0xcbe>
 800357a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800357e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003582:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003584:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	fa93 f2a3 	rbit	r2, r3
 800358e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003592:	601a      	str	r2, [r3, #0]
  return result;
 8003594:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003598:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359a:	fab3 f383 	clz	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	461a      	mov	r2, r3
 80035ac:	2300      	movs	r3, #0
 80035ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fd fe1a 	bl	80011e8 <HAL_GetTick>
 80035b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b8:	e009      	b.n	80035ce <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ba:	f7fd fe15 	bl	80011e8 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e18b      	b.n	80038e6 <HAL_RCC_OscConfig+0xe02>
 80035ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80035d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	fa93 f2a3 	rbit	r2, r3
 80035e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80035e6:	601a      	str	r2, [r3, #0]
  return result;
 80035e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80035ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	095b      	lsrs	r3, r3, #5
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d102      	bne.n	8003608 <HAL_RCC_OscConfig+0xb24>
 8003602:	4b49      	ldr	r3, [pc, #292]	; (8003728 <HAL_RCC_OscConfig+0xc44>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	e01b      	b.n	8003640 <HAL_RCC_OscConfig+0xb5c>
 8003608:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800360c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003612:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	fa93 f2a3 	rbit	r2, r3
 800361c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003626:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	fa93 f2a3 	rbit	r2, r3
 8003636:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	4b3a      	ldr	r3, [pc, #232]	; (8003728 <HAL_RCC_OscConfig+0xc44>)
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003644:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003648:	6011      	str	r1, [r2, #0]
 800364a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	fa92 f1a2 	rbit	r1, r2
 8003654:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003658:	6011      	str	r1, [r2, #0]
  return result;
 800365a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	fab2 f282 	clz	r2, r2
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	f042 0220 	orr.w	r2, r2, #32
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	f002 021f 	and.w	r2, r2, #31
 8003670:	2101      	movs	r1, #1
 8003672:	fa01 f202 	lsl.w	r2, r1, r2
 8003676:	4013      	ands	r3, r2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d19e      	bne.n	80035ba <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800367c:	4b2a      	ldr	r3, [pc, #168]	; (8003728 <HAL_RCC_OscConfig+0xc44>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003684:	1d3b      	adds	r3, r7, #4
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	430b      	orrs	r3, r1
 8003692:	4925      	ldr	r1, [pc, #148]	; (8003728 <HAL_RCC_OscConfig+0xc44>)
 8003694:	4313      	orrs	r3, r2
 8003696:	604b      	str	r3, [r1, #4]
 8003698:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800369c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	fa93 f2a3 	rbit	r2, r3
 80036ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80036b0:	601a      	str	r2, [r3, #0]
  return result;
 80036b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80036b6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b8:	fab3 f383 	clz	r3, r3
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	461a      	mov	r2, r3
 80036ca:	2301      	movs	r3, #1
 80036cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ce:	f7fd fd8b 	bl	80011e8 <HAL_GetTick>
 80036d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d6:	e009      	b.n	80036ec <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d8:	f7fd fd86 	bl	80011e8 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e0fc      	b.n	80038e6 <HAL_RCC_OscConfig+0xe02>
 80036ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80036f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	fa93 f2a3 	rbit	r2, r3
 8003700:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003704:	601a      	str	r2, [r3, #0]
  return result;
 8003706:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800370a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800370c:	fab3 f383 	clz	r3, r3
 8003710:	b2db      	uxtb	r3, r3
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	d105      	bne.n	800372c <HAL_RCC_OscConfig+0xc48>
 8003720:	4b01      	ldr	r3, [pc, #4]	; (8003728 <HAL_RCC_OscConfig+0xc44>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	e01e      	b.n	8003764 <HAL_RCC_OscConfig+0xc80>
 8003726:	bf00      	nop
 8003728:	40021000 	.word	0x40021000
 800372c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003730:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	fa93 f2a3 	rbit	r2, r3
 8003740:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800374a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	fa93 f2a3 	rbit	r2, r3
 800375a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	4b63      	ldr	r3, [pc, #396]	; (80038f0 <HAL_RCC_OscConfig+0xe0c>)
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003768:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800376c:	6011      	str	r1, [r2, #0]
 800376e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	fa92 f1a2 	rbit	r1, r2
 8003778:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800377c:	6011      	str	r1, [r2, #0]
  return result;
 800377e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	fab2 f282 	clz	r2, r2
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	f042 0220 	orr.w	r2, r2, #32
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	f002 021f 	and.w	r2, r2, #31
 8003794:	2101      	movs	r1, #1
 8003796:	fa01 f202 	lsl.w	r2, r1, r2
 800379a:	4013      	ands	r3, r2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d09b      	beq.n	80036d8 <HAL_RCC_OscConfig+0xbf4>
 80037a0:	e0a0      	b.n	80038e4 <HAL_RCC_OscConfig+0xe00>
 80037a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	fa93 f2a3 	rbit	r2, r3
 80037b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ba:	601a      	str	r2, [r3, #0]
  return result;
 80037bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037c0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	461a      	mov	r2, r3
 80037d4:	2300      	movs	r3, #0
 80037d6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d8:	f7fd fd06 	bl	80011e8 <HAL_GetTick>
 80037dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e0:	e009      	b.n	80037f6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e2:	f7fd fd01 	bl	80011e8 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e077      	b.n	80038e6 <HAL_RCC_OscConfig+0xe02>
 80037f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	fa93 f2a3 	rbit	r2, r3
 800380a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800380e:	601a      	str	r2, [r3, #0]
  return result;
 8003810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003814:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b01      	cmp	r3, #1
 8003828:	d102      	bne.n	8003830 <HAL_RCC_OscConfig+0xd4c>
 800382a:	4b31      	ldr	r3, [pc, #196]	; (80038f0 <HAL_RCC_OscConfig+0xe0c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	e01b      	b.n	8003868 <HAL_RCC_OscConfig+0xd84>
 8003830:	f107 0320 	add.w	r3, r7, #32
 8003834:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	f107 0320 	add.w	r3, r7, #32
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	fa93 f2a3 	rbit	r2, r3
 8003844:	f107 031c 	add.w	r3, r7, #28
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	f107 0318 	add.w	r3, r7, #24
 800384e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	f107 0318 	add.w	r3, r7, #24
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	fa93 f2a3 	rbit	r2, r3
 800385e:	f107 0314 	add.w	r3, r7, #20
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	4b22      	ldr	r3, [pc, #136]	; (80038f0 <HAL_RCC_OscConfig+0xe0c>)
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	f107 0210 	add.w	r2, r7, #16
 800386c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003870:	6011      	str	r1, [r2, #0]
 8003872:	f107 0210 	add.w	r2, r7, #16
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	fa92 f1a2 	rbit	r1, r2
 800387c:	f107 020c 	add.w	r2, r7, #12
 8003880:	6011      	str	r1, [r2, #0]
  return result;
 8003882:	f107 020c 	add.w	r2, r7, #12
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	fab2 f282 	clz	r2, r2
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	f042 0220 	orr.w	r2, r2, #32
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	f002 021f 	and.w	r2, r2, #31
 8003898:	2101      	movs	r1, #1
 800389a:	fa01 f202 	lsl.w	r2, r1, r2
 800389e:	4013      	ands	r3, r2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d19e      	bne.n	80037e2 <HAL_RCC_OscConfig+0xcfe>
 80038a4:	e01e      	b.n	80038e4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038a6:	1d3b      	adds	r3, r7, #4
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e018      	b.n	80038e6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038b4:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <HAL_RCC_OscConfig+0xe0c>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038bc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038c4:	1d3b      	adds	r3, r7, #4
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d108      	bne.n	80038e0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80038ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038d6:	1d3b      	adds	r3, r7, #4
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40021000 	.word	0x40021000

080038f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b09e      	sub	sp, #120	; 0x78
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e162      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800390c:	4b90      	ldr	r3, [pc, #576]	; (8003b50 <HAL_RCC_ClockConfig+0x25c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d910      	bls.n	800393c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391a:	4b8d      	ldr	r3, [pc, #564]	; (8003b50 <HAL_RCC_ClockConfig+0x25c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 0207 	bic.w	r2, r3, #7
 8003922:	498b      	ldr	r1, [pc, #556]	; (8003b50 <HAL_RCC_ClockConfig+0x25c>)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	4313      	orrs	r3, r2
 8003928:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392a:	4b89      	ldr	r3, [pc, #548]	; (8003b50 <HAL_RCC_ClockConfig+0x25c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d001      	beq.n	800393c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e14a      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003948:	4b82      	ldr	r3, [pc, #520]	; (8003b54 <HAL_RCC_ClockConfig+0x260>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	497f      	ldr	r1, [pc, #508]	; (8003b54 <HAL_RCC_ClockConfig+0x260>)
 8003956:	4313      	orrs	r3, r2
 8003958:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80dc 	beq.w	8003b20 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d13c      	bne.n	80039ea <HAL_RCC_ClockConfig+0xf6>
 8003970:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003974:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003978:	fa93 f3a3 	rbit	r3, r3
 800397c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800397e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003980:	fab3 f383 	clz	r3, r3
 8003984:	b2db      	uxtb	r3, r3
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d102      	bne.n	800399a <HAL_RCC_ClockConfig+0xa6>
 8003994:	4b6f      	ldr	r3, [pc, #444]	; (8003b54 <HAL_RCC_ClockConfig+0x260>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	e00f      	b.n	80039ba <HAL_RCC_ClockConfig+0xc6>
 800399a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800399e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039a2:	fa93 f3a3 	rbit	r3, r3
 80039a6:	667b      	str	r3, [r7, #100]	; 0x64
 80039a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039ac:	663b      	str	r3, [r7, #96]	; 0x60
 80039ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039b0:	fa93 f3a3 	rbit	r3, r3
 80039b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039b6:	4b67      	ldr	r3, [pc, #412]	; (8003b54 <HAL_RCC_ClockConfig+0x260>)
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039be:	65ba      	str	r2, [r7, #88]	; 0x58
 80039c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039c2:	fa92 f2a2 	rbit	r2, r2
 80039c6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80039c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039ca:	fab2 f282 	clz	r2, r2
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	f042 0220 	orr.w	r2, r2, #32
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	f002 021f 	and.w	r2, r2, #31
 80039da:	2101      	movs	r1, #1
 80039dc:	fa01 f202 	lsl.w	r2, r1, r2
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d17b      	bne.n	8003ade <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e0f3      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d13c      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x178>
 80039f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039fa:	fa93 f3a3 	rbit	r3, r3
 80039fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	095b      	lsrs	r3, r3, #5
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d102      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x128>
 8003a16:	4b4f      	ldr	r3, [pc, #316]	; (8003b54 <HAL_RCC_ClockConfig+0x260>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	e00f      	b.n	8003a3c <HAL_RCC_ClockConfig+0x148>
 8003a1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a24:	fa93 f3a3 	rbit	r3, r3
 8003a28:	647b      	str	r3, [r7, #68]	; 0x44
 8003a2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a2e:	643b      	str	r3, [r7, #64]	; 0x40
 8003a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a32:	fa93 f3a3 	rbit	r3, r3
 8003a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a38:	4b46      	ldr	r3, [pc, #280]	; (8003b54 <HAL_RCC_ClockConfig+0x260>)
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a40:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a44:	fa92 f2a2 	rbit	r2, r2
 8003a48:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a4c:	fab2 f282 	clz	r2, r2
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	f042 0220 	orr.w	r2, r2, #32
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	f002 021f 	and.w	r2, r2, #31
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d13a      	bne.n	8003ade <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0b2      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x2de>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	fa93 f3a3 	rbit	r3, r3
 8003a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7a:	fab3 f383 	clz	r3, r3
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	095b      	lsrs	r3, r3, #5
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d102      	bne.n	8003a94 <HAL_RCC_ClockConfig+0x1a0>
 8003a8e:	4b31      	ldr	r3, [pc, #196]	; (8003b54 <HAL_RCC_ClockConfig+0x260>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	e00d      	b.n	8003ab0 <HAL_RCC_ClockConfig+0x1bc>
 8003a94:	2302      	movs	r3, #2
 8003a96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9a:	fa93 f3a3 	rbit	r3, r3
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	623b      	str	r3, [r7, #32]
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	fa93 f3a3 	rbit	r3, r3
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	4b29      	ldr	r3, [pc, #164]	; (8003b54 <HAL_RCC_ClockConfig+0x260>)
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	61ba      	str	r2, [r7, #24]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	fa92 f2a2 	rbit	r2, r2
 8003aba:	617a      	str	r2, [r7, #20]
  return result;
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	fab2 f282 	clz	r2, r2
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	f042 0220 	orr.w	r2, r2, #32
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	f002 021f 	and.w	r2, r2, #31
 8003ace:	2101      	movs	r1, #1
 8003ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e079      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ade:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <HAL_RCC_ClockConfig+0x260>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f023 0203 	bic.w	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	491a      	ldr	r1, [pc, #104]	; (8003b54 <HAL_RCC_ClockConfig+0x260>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af0:	f7fd fb7a 	bl	80011e8 <HAL_GetTick>
 8003af4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	e00a      	b.n	8003b0e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af8:	f7fd fb76 	bl	80011e8 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e061      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0e:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <HAL_RCC_ClockConfig+0x260>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 020c 	and.w	r2, r3, #12
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d1eb      	bne.n	8003af8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b20:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <HAL_RCC_ClockConfig+0x25c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d214      	bcs.n	8003b58 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2e:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <HAL_RCC_ClockConfig+0x25c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f023 0207 	bic.w	r2, r3, #7
 8003b36:	4906      	ldr	r1, [pc, #24]	; (8003b50 <HAL_RCC_ClockConfig+0x25c>)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3e:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <HAL_RCC_ClockConfig+0x25c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e040      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x2de>
 8003b50:	40022000 	.word	0x40022000
 8003b54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b64:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <HAL_RCC_ClockConfig+0x2e8>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	491a      	ldr	r1, [pc, #104]	; (8003bdc <HAL_RCC_ClockConfig+0x2e8>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b82:	4b16      	ldr	r3, [pc, #88]	; (8003bdc <HAL_RCC_ClockConfig+0x2e8>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4912      	ldr	r1, [pc, #72]	; (8003bdc <HAL_RCC_ClockConfig+0x2e8>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b96:	f000 f829 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003b9a:	4601      	mov	r1, r0
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <HAL_RCC_ClockConfig+0x2e8>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba4:	22f0      	movs	r2, #240	; 0xf0
 8003ba6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	fa92 f2a2 	rbit	r2, r2
 8003bae:	60fa      	str	r2, [r7, #12]
  return result;
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	fab2 f282 	clz	r2, r2
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	40d3      	lsrs	r3, r2
 8003bba:	4a09      	ldr	r2, [pc, #36]	; (8003be0 <HAL_RCC_ClockConfig+0x2ec>)
 8003bbc:	5cd3      	ldrb	r3, [r2, r3]
 8003bbe:	fa21 f303 	lsr.w	r3, r1, r3
 8003bc2:	4a08      	ldr	r2, [pc, #32]	; (8003be4 <HAL_RCC_ClockConfig+0x2f0>)
 8003bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003bc6:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <HAL_RCC_ClockConfig+0x2f4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fd fac8 	bl	8001160 <HAL_InitTick>
  
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3778      	adds	r7, #120	; 0x78
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	080076f4 	.word	0x080076f4
 8003be4:	20000000 	.word	0x20000000
 8003be8:	20000004 	.word	0x20000004

08003bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b08b      	sub	sp, #44	; 0x2c
 8003bf0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61bb      	str	r3, [r7, #24]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c06:	4b29      	ldr	r3, [pc, #164]	; (8003cac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d002      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0x30>
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d003      	beq.n	8003c22 <HAL_RCC_GetSysClockFreq+0x36>
 8003c1a:	e03c      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c1c:	4b24      	ldr	r3, [pc, #144]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c1e:	623b      	str	r3, [r7, #32]
      break;
 8003c20:	e03c      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c28:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003c2c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	fa92 f2a2 	rbit	r2, r2
 8003c34:	607a      	str	r2, [r7, #4]
  return result;
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	fab2 f282 	clz	r2, r2
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	40d3      	lsrs	r3, r2
 8003c40:	4a1c      	ldr	r2, [pc, #112]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c42:	5cd3      	ldrb	r3, [r2, r3]
 8003c44:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003c46:	4b19      	ldr	r3, [pc, #100]	; (8003cac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	220f      	movs	r2, #15
 8003c50:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	fa92 f2a2 	rbit	r2, r2
 8003c58:	60fa      	str	r2, [r7, #12]
  return result;
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	fab2 f282 	clz	r2, r2
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	40d3      	lsrs	r3, r2
 8003c64:	4a14      	ldr	r2, [pc, #80]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c66:	5cd3      	ldrb	r3, [r2, r3]
 8003c68:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c74:	4a0e      	ldr	r2, [pc, #56]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	fb02 f303 	mul.w	r3, r2, r3
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
 8003c84:	e004      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	4a0c      	ldr	r2, [pc, #48]	; (8003cbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c8a:	fb02 f303 	mul.w	r3, r2, r3
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	623b      	str	r3, [r7, #32]
      break;
 8003c94:	e002      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c96:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c98:	623b      	str	r3, [r7, #32]
      break;
 8003c9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	372c      	adds	r7, #44	; 0x2c
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	007a1200 	.word	0x007a1200
 8003cb4:	0800770c 	.word	0x0800770c
 8003cb8:	0800771c 	.word	0x0800771c
 8003cbc:	003d0900 	.word	0x003d0900

08003cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cc4:	4b03      	ldr	r3, [pc, #12]	; (8003cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	20000000 	.word	0x20000000

08003cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003cde:	f7ff ffef 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 8003ce2:	4601      	mov	r1, r0
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003cf0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	fa92 f2a2 	rbit	r2, r2
 8003cf8:	603a      	str	r2, [r7, #0]
  return result;
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	fab2 f282 	clz	r2, r2
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	40d3      	lsrs	r3, r2
 8003d04:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d06:	5cd3      	ldrb	r3, [r2, r3]
 8003d08:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000
 8003d18:	08007704 	.word	0x08007704

08003d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d22:	f7ff ffcd 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 8003d26:	4601      	mov	r1, r0
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003d30:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003d34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	fa92 f2a2 	rbit	r2, r2
 8003d3c:	603a      	str	r2, [r7, #0]
  return result;
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	fab2 f282 	clz	r2, r2
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	40d3      	lsrs	r3, r2
 8003d48:	4a04      	ldr	r2, [pc, #16]	; (8003d5c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003d4a:	5cd3      	ldrb	r3, [r2, r3]
 8003d4c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	08007704 	.word	0x08007704

08003d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b092      	sub	sp, #72	; 0x48
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d70:	2300      	movs	r3, #0
 8003d72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 80cd 	beq.w	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d84:	4b86      	ldr	r3, [pc, #536]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10e      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d90:	4b83      	ldr	r3, [pc, #524]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	4a82      	ldr	r2, [pc, #520]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	61d3      	str	r3, [r2, #28]
 8003d9c:	4b80      	ldr	r3, [pc, #512]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dae:	4b7d      	ldr	r3, [pc, #500]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d118      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dba:	4b7a      	ldr	r3, [pc, #488]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a79      	ldr	r2, [pc, #484]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc6:	f7fd fa0f 	bl	80011e8 <HAL_GetTick>
 8003dca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dcc:	e008      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dce:	f7fd fa0b 	bl	80011e8 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b64      	cmp	r3, #100	; 0x64
 8003dda:	d901      	bls.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e0db      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de0:	4b70      	ldr	r3, [pc, #448]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dec:	4b6c      	ldr	r3, [pc, #432]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d07d      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d076      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e0a:	4b65      	ldr	r3, [pc, #404]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e18:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1c:	fa93 f3a3 	rbit	r3, r3
 8003e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e24:	fab3 f383 	clz	r3, r3
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4b5e      	ldr	r3, [pc, #376]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	461a      	mov	r2, r3
 8003e34:	2301      	movs	r3, #1
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e40:	fa93 f3a3 	rbit	r3, r3
 8003e44:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e48:	fab3 f383 	clz	r3, r3
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	4b55      	ldr	r3, [pc, #340]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	461a      	mov	r2, r3
 8003e58:	2300      	movs	r3, #0
 8003e5a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e5c:	4a50      	ldr	r2, [pc, #320]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e60:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d045      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6c:	f7fd f9bc 	bl	80011e8 <HAL_GetTick>
 8003e70:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e72:	e00a      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e74:	f7fd f9b8 	bl	80011e8 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e086      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e90:	fa93 f3a3 	rbit	r3, r3
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
 8003e96:	2302      	movs	r3, #2
 8003e98:	623b      	str	r3, [r7, #32]
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	fa93 f3a3 	rbit	r3, r3
 8003ea0:	61fb      	str	r3, [r7, #28]
  return result;
 8003ea2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea4:	fab3 f383 	clz	r3, r3
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	f043 0302 	orr.w	r3, r3, #2
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d102      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003eb8:	4b39      	ldr	r3, [pc, #228]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	e007      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	fa93 f3a3 	rbit	r3, r3
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	4b35      	ldr	r3, [pc, #212]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	2202      	movs	r2, #2
 8003ed0:	613a      	str	r2, [r7, #16]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	fa92 f2a2 	rbit	r2, r2
 8003ed8:	60fa      	str	r2, [r7, #12]
  return result;
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	fab2 f282 	clz	r2, r2
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	f002 021f 	and.w	r2, r2, #31
 8003eec:	2101      	movs	r1, #1
 8003eee:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0bd      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003ef8:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	4926      	ldr	r1, [pc, #152]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d105      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f12:	4b23      	ldr	r3, [pc, #140]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	4a22      	ldr	r2, [pc, #136]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d008      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f2a:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	f023 0203 	bic.w	r2, r3, #3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	491a      	ldr	r1, [pc, #104]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f48:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	f023 0210 	bic.w	r2, r3, #16
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4912      	ldr	r1, [pc, #72]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d008      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f66:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	490b      	ldr	r1, [pc, #44]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d008      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	4903      	ldr	r1, [pc, #12]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3748      	adds	r7, #72	; 0x48
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40007000 	.word	0x40007000
 8003fa8:	10908100 	.word	0x10908100

08003fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e049      	b.n	8004052 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fc fe80 	bl	8000cd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4610      	mov	r0, r2
 8003fec:	f000 ffd4 	bl	8004f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	d001      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e040      	b.n	80040f6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1c      	ldr	r2, [pc, #112]	; (8004104 <HAL_TIM_Base_Start_IT+0xa8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00e      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x58>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409e:	d009      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x58>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a18      	ldr	r2, [pc, #96]	; (8004108 <HAL_TIM_Base_Start_IT+0xac>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x58>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a17      	ldr	r2, [pc, #92]	; (800410c <HAL_TIM_Base_Start_IT+0xb0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d115      	bne.n	80040e0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	4b15      	ldr	r3, [pc, #84]	; (8004110 <HAL_TIM_Base_Start_IT+0xb4>)
 80040bc:	4013      	ands	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b06      	cmp	r3, #6
 80040c4:	d015      	beq.n	80040f2 <HAL_TIM_Base_Start_IT+0x96>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040cc:	d011      	beq.n	80040f2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f042 0201 	orr.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040de:	e008      	b.n	80040f2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	e000      	b.n	80040f4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40012c00 	.word	0x40012c00
 8004108:	40000400 	.word	0x40000400
 800410c:	40014000 	.word	0x40014000
 8004110:	00010007 	.word	0x00010007

08004114 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e049      	b.n	80041ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f841 	bl	80041c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3304      	adds	r3, #4
 8004150:	4619      	mov	r1, r3
 8004152:	4610      	mov	r0, r2
 8004154:	f000 ff20 	bl	8004f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <HAL_TIM_PWM_Start+0x24>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	bf14      	ite	ne
 80041f4:	2301      	movne	r3, #1
 80041f6:	2300      	moveq	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	e03c      	b.n	8004276 <HAL_TIM_PWM_Start+0x9e>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d109      	bne.n	8004216 <HAL_TIM_PWM_Start+0x3e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	bf14      	ite	ne
 800420e:	2301      	movne	r3, #1
 8004210:	2300      	moveq	r3, #0
 8004212:	b2db      	uxtb	r3, r3
 8004214:	e02f      	b.n	8004276 <HAL_TIM_PWM_Start+0x9e>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d109      	bne.n	8004230 <HAL_TIM_PWM_Start+0x58>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	bf14      	ite	ne
 8004228:	2301      	movne	r3, #1
 800422a:	2300      	moveq	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	e022      	b.n	8004276 <HAL_TIM_PWM_Start+0x9e>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b0c      	cmp	r3, #12
 8004234:	d109      	bne.n	800424a <HAL_TIM_PWM_Start+0x72>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b01      	cmp	r3, #1
 8004240:	bf14      	ite	ne
 8004242:	2301      	movne	r3, #1
 8004244:	2300      	moveq	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	e015      	b.n	8004276 <HAL_TIM_PWM_Start+0x9e>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b10      	cmp	r3, #16
 800424e:	d109      	bne.n	8004264 <HAL_TIM_PWM_Start+0x8c>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	bf14      	ite	ne
 800425c:	2301      	movne	r3, #1
 800425e:	2300      	moveq	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	e008      	b.n	8004276 <HAL_TIM_PWM_Start+0x9e>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b01      	cmp	r3, #1
 800426e:	bf14      	ite	ne
 8004270:	2301      	movne	r3, #1
 8004272:	2300      	moveq	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e088      	b.n	8004390 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d104      	bne.n	800428e <HAL_TIM_PWM_Start+0xb6>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800428c:	e023      	b.n	80042d6 <HAL_TIM_PWM_Start+0xfe>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b04      	cmp	r3, #4
 8004292:	d104      	bne.n	800429e <HAL_TIM_PWM_Start+0xc6>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800429c:	e01b      	b.n	80042d6 <HAL_TIM_PWM_Start+0xfe>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_PWM_Start+0xd6>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ac:	e013      	b.n	80042d6 <HAL_TIM_PWM_Start+0xfe>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b0c      	cmp	r3, #12
 80042b2:	d104      	bne.n	80042be <HAL_TIM_PWM_Start+0xe6>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042bc:	e00b      	b.n	80042d6 <HAL_TIM_PWM_Start+0xfe>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d104      	bne.n	80042ce <HAL_TIM_PWM_Start+0xf6>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042cc:	e003      	b.n	80042d6 <HAL_TIM_PWM_Start+0xfe>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2202      	movs	r2, #2
 80042d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2201      	movs	r2, #1
 80042dc:	6839      	ldr	r1, [r7, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f001 fa12 	bl	8005708 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a2b      	ldr	r2, [pc, #172]	; (8004398 <HAL_TIM_PWM_Start+0x1c0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00e      	beq.n	800430c <HAL_TIM_PWM_Start+0x134>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a2a      	ldr	r2, [pc, #168]	; (800439c <HAL_TIM_PWM_Start+0x1c4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d009      	beq.n	800430c <HAL_TIM_PWM_Start+0x134>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a28      	ldr	r2, [pc, #160]	; (80043a0 <HAL_TIM_PWM_Start+0x1c8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d004      	beq.n	800430c <HAL_TIM_PWM_Start+0x134>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a27      	ldr	r2, [pc, #156]	; (80043a4 <HAL_TIM_PWM_Start+0x1cc>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d101      	bne.n	8004310 <HAL_TIM_PWM_Start+0x138>
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <HAL_TIM_PWM_Start+0x13a>
 8004310:	2300      	movs	r3, #0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004324:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a1b      	ldr	r2, [pc, #108]	; (8004398 <HAL_TIM_PWM_Start+0x1c0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00e      	beq.n	800434e <HAL_TIM_PWM_Start+0x176>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004338:	d009      	beq.n	800434e <HAL_TIM_PWM_Start+0x176>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a1a      	ldr	r2, [pc, #104]	; (80043a8 <HAL_TIM_PWM_Start+0x1d0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d004      	beq.n	800434e <HAL_TIM_PWM_Start+0x176>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a14      	ldr	r2, [pc, #80]	; (800439c <HAL_TIM_PWM_Start+0x1c4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d115      	bne.n	800437a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	4b15      	ldr	r3, [pc, #84]	; (80043ac <HAL_TIM_PWM_Start+0x1d4>)
 8004356:	4013      	ands	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b06      	cmp	r3, #6
 800435e:	d015      	beq.n	800438c <HAL_TIM_PWM_Start+0x1b4>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004366:	d011      	beq.n	800438c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004378:	e008      	b.n	800438c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0201 	orr.w	r2, r2, #1
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	e000      	b.n	800438e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800438c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40012c00 	.word	0x40012c00
 800439c:	40014000 	.word	0x40014000
 80043a0:	40014400 	.word	0x40014400
 80043a4:	40014800 	.word	0x40014800
 80043a8:	40000400 	.word	0x40000400
 80043ac:	00010007 	.word	0x00010007

080043b0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d109      	bne.n	80043d8 <HAL_TIM_PWM_Start_DMA+0x28>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	bf0c      	ite	eq
 80043d0:	2301      	moveq	r3, #1
 80043d2:	2300      	movne	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	e03c      	b.n	8004452 <HAL_TIM_PWM_Start_DMA+0xa2>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d109      	bne.n	80043f2 <HAL_TIM_PWM_Start_DMA+0x42>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	bf0c      	ite	eq
 80043ea:	2301      	moveq	r3, #1
 80043ec:	2300      	movne	r3, #0
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	e02f      	b.n	8004452 <HAL_TIM_PWM_Start_DMA+0xa2>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d109      	bne.n	800440c <HAL_TIM_PWM_Start_DMA+0x5c>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	bf0c      	ite	eq
 8004404:	2301      	moveq	r3, #1
 8004406:	2300      	movne	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	e022      	b.n	8004452 <HAL_TIM_PWM_Start_DMA+0xa2>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b0c      	cmp	r3, #12
 8004410:	d109      	bne.n	8004426 <HAL_TIM_PWM_Start_DMA+0x76>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	bf0c      	ite	eq
 800441e:	2301      	moveq	r3, #1
 8004420:	2300      	movne	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	e015      	b.n	8004452 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b10      	cmp	r3, #16
 800442a:	d109      	bne.n	8004440 <HAL_TIM_PWM_Start_DMA+0x90>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	bf0c      	ite	eq
 8004438:	2301      	moveq	r3, #1
 800443a:	2300      	movne	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	e008      	b.n	8004452 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	bf0c      	ite	eq
 800444c:	2301      	moveq	r3, #1
 800444e:	2300      	movne	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8004456:	2302      	movs	r3, #2
 8004458:	e192      	b.n	8004780 <HAL_TIM_PWM_Start_DMA+0x3d0>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d109      	bne.n	8004474 <HAL_TIM_PWM_Start_DMA+0xc4>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	bf0c      	ite	eq
 800446c:	2301      	moveq	r3, #1
 800446e:	2300      	movne	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	e03c      	b.n	80044ee <HAL_TIM_PWM_Start_DMA+0x13e>
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b04      	cmp	r3, #4
 8004478:	d109      	bne.n	800448e <HAL_TIM_PWM_Start_DMA+0xde>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	bf0c      	ite	eq
 8004486:	2301      	moveq	r3, #1
 8004488:	2300      	movne	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	e02f      	b.n	80044ee <HAL_TIM_PWM_Start_DMA+0x13e>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b08      	cmp	r3, #8
 8004492:	d109      	bne.n	80044a8 <HAL_TIM_PWM_Start_DMA+0xf8>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	bf0c      	ite	eq
 80044a0:	2301      	moveq	r3, #1
 80044a2:	2300      	movne	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	e022      	b.n	80044ee <HAL_TIM_PWM_Start_DMA+0x13e>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b0c      	cmp	r3, #12
 80044ac:	d109      	bne.n	80044c2 <HAL_TIM_PWM_Start_DMA+0x112>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	bf0c      	ite	eq
 80044ba:	2301      	moveq	r3, #1
 80044bc:	2300      	movne	r3, #0
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	e015      	b.n	80044ee <HAL_TIM_PWM_Start_DMA+0x13e>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d109      	bne.n	80044dc <HAL_TIM_PWM_Start_DMA+0x12c>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	bf0c      	ite	eq
 80044d4:	2301      	moveq	r3, #1
 80044d6:	2300      	movne	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	e008      	b.n	80044ee <HAL_TIM_PWM_Start_DMA+0x13e>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	bf0c      	ite	eq
 80044e8:	2301      	moveq	r3, #1
 80044ea:	2300      	movne	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d034      	beq.n	800455c <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d104      	bne.n	8004502 <HAL_TIM_PWM_Start_DMA+0x152>
 80044f8:	887b      	ldrh	r3, [r7, #2]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e13e      	b.n	8004780 <HAL_TIM_PWM_Start_DMA+0x3d0>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d104      	bne.n	8004512 <HAL_TIM_PWM_Start_DMA+0x162>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004510:	e026      	b.n	8004560 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b04      	cmp	r3, #4
 8004516:	d104      	bne.n	8004522 <HAL_TIM_PWM_Start_DMA+0x172>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004520:	e01e      	b.n	8004560 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d104      	bne.n	8004532 <HAL_TIM_PWM_Start_DMA+0x182>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004530:	e016      	b.n	8004560 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b0c      	cmp	r3, #12
 8004536:	d104      	bne.n	8004542 <HAL_TIM_PWM_Start_DMA+0x192>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004540:	e00e      	b.n	8004560 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b10      	cmp	r3, #16
 8004546:	d104      	bne.n	8004552 <HAL_TIM_PWM_Start_DMA+0x1a2>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004550:	e006      	b.n	8004560 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2202      	movs	r2, #2
 8004556:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800455a:	e001      	b.n	8004560 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e10f      	b.n	8004780 <HAL_TIM_PWM_Start_DMA+0x3d0>
  }

  switch (Channel)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b0c      	cmp	r3, #12
 8004564:	f200 80ae 	bhi.w	80046c4 <HAL_TIM_PWM_Start_DMA+0x314>
 8004568:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	080045a5 	.word	0x080045a5
 8004574:	080046c5 	.word	0x080046c5
 8004578:	080046c5 	.word	0x080046c5
 800457c:	080046c5 	.word	0x080046c5
 8004580:	080045ed 	.word	0x080045ed
 8004584:	080046c5 	.word	0x080046c5
 8004588:	080046c5 	.word	0x080046c5
 800458c:	080046c5 	.word	0x080046c5
 8004590:	08004635 	.word	0x08004635
 8004594:	080046c5 	.word	0x080046c5
 8004598:	080046c5 	.word	0x080046c5
 800459c:	080046c5 	.word	0x080046c5
 80045a0:	0800467d 	.word	0x0800467d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	4a77      	ldr	r2, [pc, #476]	; (8004788 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80045aa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	4a76      	ldr	r2, [pc, #472]	; (800478c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80045b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	4a75      	ldr	r2, [pc, #468]	; (8004790 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3334      	adds	r3, #52	; 0x34
 80045c8:	461a      	mov	r2, r3
 80045ca:	887b      	ldrh	r3, [r7, #2]
 80045cc:	f7fd fecb 	bl	8002366 <HAL_DMA_Start_IT>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e0d2      	b.n	8004780 <HAL_TIM_PWM_Start_DMA+0x3d0>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e8:	60da      	str	r2, [r3, #12]
      break;
 80045ea:	e06c      	b.n	80046c6 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	4a65      	ldr	r2, [pc, #404]	; (8004788 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80045f2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	4a64      	ldr	r2, [pc, #400]	; (800478c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80045fa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	4a63      	ldr	r2, [pc, #396]	; (8004790 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8004602:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3338      	adds	r3, #56	; 0x38
 8004610:	461a      	mov	r2, r3
 8004612:	887b      	ldrh	r3, [r7, #2]
 8004614:	f7fd fea7 	bl	8002366 <HAL_DMA_Start_IT>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e0ae      	b.n	8004780 <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004630:	60da      	str	r2, [r3, #12]
      break;
 8004632:	e048      	b.n	80046c6 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	4a53      	ldr	r2, [pc, #332]	; (8004788 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800463a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	4a52      	ldr	r2, [pc, #328]	; (800478c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004642:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	4a51      	ldr	r2, [pc, #324]	; (8004790 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800464a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	333c      	adds	r3, #60	; 0x3c
 8004658:	461a      	mov	r2, r3
 800465a:	887b      	ldrh	r3, [r7, #2]
 800465c:	f7fd fe83 	bl	8002366 <HAL_DMA_Start_IT>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e08a      	b.n	8004780 <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004678:	60da      	str	r2, [r3, #12]
      break;
 800467a:	e024      	b.n	80046c6 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	4a41      	ldr	r2, [pc, #260]	; (8004788 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004682:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	4a40      	ldr	r2, [pc, #256]	; (800478c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800468a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	4a3f      	ldr	r2, [pc, #252]	; (8004790 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8004692:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3340      	adds	r3, #64	; 0x40
 80046a0:	461a      	mov	r2, r3
 80046a2:	887b      	ldrh	r3, [r7, #2]
 80046a4:	f7fd fe5f 	bl	8002366 <HAL_DMA_Start_IT>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e066      	b.n	8004780 <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046c0:	60da      	str	r2, [r3, #12]
      break;
 80046c2:	e000      	b.n	80046c6 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 80046c4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2201      	movs	r2, #1
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 f81a 	bl	8005708 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2e      	ldr	r2, [pc, #184]	; (8004794 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00e      	beq.n	80046fc <HAL_TIM_PWM_Start_DMA+0x34c>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2d      	ldr	r2, [pc, #180]	; (8004798 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d009      	beq.n	80046fc <HAL_TIM_PWM_Start_DMA+0x34c>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a2b      	ldr	r2, [pc, #172]	; (800479c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d004      	beq.n	80046fc <HAL_TIM_PWM_Start_DMA+0x34c>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a2a      	ldr	r2, [pc, #168]	; (80047a0 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d101      	bne.n	8004700 <HAL_TIM_PWM_Start_DMA+0x350>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <HAL_TIM_PWM_Start_DMA+0x352>
 8004700:	2300      	movs	r3, #0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d007      	beq.n	8004716 <HAL_TIM_PWM_Start_DMA+0x366>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004714:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a1e      	ldr	r2, [pc, #120]	; (8004794 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00e      	beq.n	800473e <HAL_TIM_PWM_Start_DMA+0x38e>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004728:	d009      	beq.n	800473e <HAL_TIM_PWM_Start_DMA+0x38e>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1d      	ldr	r2, [pc, #116]	; (80047a4 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d004      	beq.n	800473e <HAL_TIM_PWM_Start_DMA+0x38e>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a17      	ldr	r2, [pc, #92]	; (8004798 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d115      	bne.n	800476a <HAL_TIM_PWM_Start_DMA+0x3ba>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	4b18      	ldr	r3, [pc, #96]	; (80047a8 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004746:	4013      	ands	r3, r2
 8004748:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2b06      	cmp	r3, #6
 800474e:	d015      	beq.n	800477c <HAL_TIM_PWM_Start_DMA+0x3cc>
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004756:	d011      	beq.n	800477c <HAL_TIM_PWM_Start_DMA+0x3cc>
    {
      __HAL_TIM_ENABLE(htim);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004768:	e008      	b.n	800477c <HAL_TIM_PWM_Start_DMA+0x3cc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	e000      	b.n	800477e <HAL_TIM_PWM_Start_DMA+0x3ce>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	08004e89 	.word	0x08004e89
 800478c:	08004f31 	.word	0x08004f31
 8004790:	08004df7 	.word	0x08004df7
 8004794:	40012c00 	.word	0x40012c00
 8004798:	40014000 	.word	0x40014000
 800479c:	40014400 	.word	0x40014400
 80047a0:	40014800 	.word	0x40014800
 80047a4:	40000400 	.word	0x40000400
 80047a8:	00010007 	.word	0x00010007

080047ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d122      	bne.n	8004808 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d11b      	bne.n	8004808 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0202 	mvn.w	r2, #2
 80047d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 facf 	bl	8004d92 <HAL_TIM_IC_CaptureCallback>
 80047f4:	e005      	b.n	8004802 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fac1 	bl	8004d7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fad2 	bl	8004da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b04      	cmp	r3, #4
 8004814:	d122      	bne.n	800485c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b04      	cmp	r3, #4
 8004822:	d11b      	bne.n	800485c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0204 	mvn.w	r2, #4
 800482c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 faa5 	bl	8004d92 <HAL_TIM_IC_CaptureCallback>
 8004848:	e005      	b.n	8004856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fa97 	bl	8004d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 faa8 	bl	8004da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b08      	cmp	r3, #8
 8004868:	d122      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b08      	cmp	r3, #8
 8004876:	d11b      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0208 	mvn.w	r2, #8
 8004880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2204      	movs	r2, #4
 8004886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fa7b 	bl	8004d92 <HAL_TIM_IC_CaptureCallback>
 800489c:	e005      	b.n	80048aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fa6d 	bl	8004d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 fa7e 	bl	8004da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0310 	and.w	r3, r3, #16
 80048ba:	2b10      	cmp	r3, #16
 80048bc:	d122      	bne.n	8004904 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0310 	and.w	r3, r3, #16
 80048c8:	2b10      	cmp	r3, #16
 80048ca:	d11b      	bne.n	8004904 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0210 	mvn.w	r2, #16
 80048d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2208      	movs	r2, #8
 80048da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fa51 	bl	8004d92 <HAL_TIM_IC_CaptureCallback>
 80048f0:	e005      	b.n	80048fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fa43 	bl	8004d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fa54 	bl	8004da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b01      	cmp	r3, #1
 8004910:	d10e      	bne.n	8004930 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b01      	cmp	r3, #1
 800491e:	d107      	bne.n	8004930 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0201 	mvn.w	r2, #1
 8004928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f002 fda8 	bl	8007480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493a:	2b80      	cmp	r3, #128	; 0x80
 800493c:	d10e      	bne.n	800495c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004948:	2b80      	cmp	r3, #128	; 0x80
 800494a:	d107      	bne.n	800495c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 ffec 	bl	8005934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800496a:	d10e      	bne.n	800498a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004976:	2b80      	cmp	r3, #128	; 0x80
 8004978:	d107      	bne.n	800498a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 ffdf 	bl	8005948 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004994:	2b40      	cmp	r3, #64	; 0x40
 8004996:	d10e      	bne.n	80049b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a2:	2b40      	cmp	r3, #64	; 0x40
 80049a4:	d107      	bne.n	80049b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fa0c 	bl	8004dce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	d10e      	bne.n	80049e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b20      	cmp	r3, #32
 80049d0:	d107      	bne.n	80049e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f06f 0220 	mvn.w	r2, #32
 80049da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 ff9f 	bl	8005920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e0fd      	b.n	8004c02 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b14      	cmp	r3, #20
 8004a12:	f200 80f0 	bhi.w	8004bf6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004a16:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1c:	08004a71 	.word	0x08004a71
 8004a20:	08004bf7 	.word	0x08004bf7
 8004a24:	08004bf7 	.word	0x08004bf7
 8004a28:	08004bf7 	.word	0x08004bf7
 8004a2c:	08004ab1 	.word	0x08004ab1
 8004a30:	08004bf7 	.word	0x08004bf7
 8004a34:	08004bf7 	.word	0x08004bf7
 8004a38:	08004bf7 	.word	0x08004bf7
 8004a3c:	08004af3 	.word	0x08004af3
 8004a40:	08004bf7 	.word	0x08004bf7
 8004a44:	08004bf7 	.word	0x08004bf7
 8004a48:	08004bf7 	.word	0x08004bf7
 8004a4c:	08004b33 	.word	0x08004b33
 8004a50:	08004bf7 	.word	0x08004bf7
 8004a54:	08004bf7 	.word	0x08004bf7
 8004a58:	08004bf7 	.word	0x08004bf7
 8004a5c:	08004b75 	.word	0x08004b75
 8004a60:	08004bf7 	.word	0x08004bf7
 8004a64:	08004bf7 	.word	0x08004bf7
 8004a68:	08004bf7 	.word	0x08004bf7
 8004a6c:	08004bb5 	.word	0x08004bb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fb06 	bl	8005088 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0208 	orr.w	r2, r2, #8
 8004a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0204 	bic.w	r2, r2, #4
 8004a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6999      	ldr	r1, [r3, #24]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	619a      	str	r2, [r3, #24]
      break;
 8004aae:	e0a3      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fb6c 	bl	8005194 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6999      	ldr	r1, [r3, #24]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	021a      	lsls	r2, r3, #8
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	619a      	str	r2, [r3, #24]
      break;
 8004af0:	e082      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fbcb 	bl	8005294 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0208 	orr.w	r2, r2, #8
 8004b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69da      	ldr	r2, [r3, #28]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0204 	bic.w	r2, r2, #4
 8004b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69d9      	ldr	r1, [r3, #28]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	61da      	str	r2, [r3, #28]
      break;
 8004b30:	e062      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fc29 	bl	8005390 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69d9      	ldr	r1, [r3, #28]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	021a      	lsls	r2, r3, #8
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	61da      	str	r2, [r3, #28]
      break;
 8004b72:	e041      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fc6c 	bl	8005458 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0208 	orr.w	r2, r2, #8
 8004b8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0204 	bic.w	r2, r2, #4
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	691a      	ldr	r2, [r3, #16]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bb2:	e021      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fcaa 	bl	8005514 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	021a      	lsls	r2, r3, #8
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bf4:	e000      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004bf6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop

08004c0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_TIM_ConfigClockSource+0x18>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e0a8      	b.n	8004d76 <HAL_TIM_ConfigClockSource+0x16a>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b40      	cmp	r3, #64	; 0x40
 8004c5e:	d067      	beq.n	8004d30 <HAL_TIM_ConfigClockSource+0x124>
 8004c60:	2b40      	cmp	r3, #64	; 0x40
 8004c62:	d80b      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x70>
 8004c64:	2b10      	cmp	r3, #16
 8004c66:	d073      	beq.n	8004d50 <HAL_TIM_ConfigClockSource+0x144>
 8004c68:	2b10      	cmp	r3, #16
 8004c6a:	d802      	bhi.n	8004c72 <HAL_TIM_ConfigClockSource+0x66>
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d06f      	beq.n	8004d50 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c70:	e078      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	d06c      	beq.n	8004d50 <HAL_TIM_ConfigClockSource+0x144>
 8004c76:	2b30      	cmp	r3, #48	; 0x30
 8004c78:	d06a      	beq.n	8004d50 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004c7a:	e073      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004c7c:	2b70      	cmp	r3, #112	; 0x70
 8004c7e:	d00d      	beq.n	8004c9c <HAL_TIM_ConfigClockSource+0x90>
 8004c80:	2b70      	cmp	r3, #112	; 0x70
 8004c82:	d804      	bhi.n	8004c8e <HAL_TIM_ConfigClockSource+0x82>
 8004c84:	2b50      	cmp	r3, #80	; 0x50
 8004c86:	d033      	beq.n	8004cf0 <HAL_TIM_ConfigClockSource+0xe4>
 8004c88:	2b60      	cmp	r3, #96	; 0x60
 8004c8a:	d041      	beq.n	8004d10 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004c8c:	e06a      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c92:	d066      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x156>
 8004c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c98:	d017      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004c9a:	e063      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	6899      	ldr	r1, [r3, #8]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f000 fd0c 	bl	80056c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	609a      	str	r2, [r3, #8]
      break;
 8004cc8:	e04c      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6899      	ldr	r1, [r3, #8]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f000 fcf5 	bl	80056c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cec:	609a      	str	r2, [r3, #8]
      break;
 8004cee:	e039      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	6859      	ldr	r1, [r3, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f000 fc69 	bl	80055d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2150      	movs	r1, #80	; 0x50
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fcc2 	bl	8005692 <TIM_ITRx_SetConfig>
      break;
 8004d0e:	e029      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	6859      	ldr	r1, [r3, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	f000 fc88 	bl	8005632 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2160      	movs	r1, #96	; 0x60
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fcb2 	bl	8005692 <TIM_ITRx_SetConfig>
      break;
 8004d2e:	e019      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	6859      	ldr	r1, [r3, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	f000 fc49 	bl	80055d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2140      	movs	r1, #64	; 0x40
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 fca2 	bl	8005692 <TIM_ITRx_SetConfig>
      break;
 8004d4e:	e009      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	f000 fc99 	bl	8005692 <TIM_ITRx_SetConfig>
        break;
 8004d60:	e000      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004d62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d107      	bne.n	8004e1e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e1c:	e02a      	b.n	8004e74 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d107      	bne.n	8004e38 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e36:	e01d      	b.n	8004e74 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d107      	bne.n	8004e52 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2204      	movs	r2, #4
 8004e46:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e50:	e010      	b.n	8004e74 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d107      	bne.n	8004e6c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2208      	movs	r2, #8
 8004e60:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e6a:	e003      	b.n	8004e74 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f7ff ffb4 	bl	8004de2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	771a      	strb	r2, [r3, #28]
}
 8004e80:	bf00      	nop
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d10b      	bne.n	8004eb8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d136      	bne.n	8004f1c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eb6:	e031      	b.n	8004f1c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d10b      	bne.n	8004eda <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d125      	bne.n	8004f1c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ed8:	e020      	b.n	8004f1c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d10b      	bne.n	8004efc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2204      	movs	r2, #4
 8004ee8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d114      	bne.n	8004f1c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004efa:	e00f      	b.n	8004f1c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d10a      	bne.n	8004f1c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2208      	movs	r2, #8
 8004f0a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d103      	bne.n	8004f1c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f7ff ff42 	bl	8004da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	771a      	strb	r2, [r3, #28]
}
 8004f28:	bf00      	nop
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d103      	bne.n	8004f50 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	771a      	strb	r2, [r3, #28]
 8004f4e:	e019      	b.n	8004f84 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d103      	bne.n	8004f62 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	771a      	strb	r2, [r3, #28]
 8004f60:	e010      	b.n	8004f84 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d103      	bne.n	8004f74 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2204      	movs	r2, #4
 8004f70:	771a      	strb	r2, [r3, #28]
 8004f72:	e007      	b.n	8004f84 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d102      	bne.n	8004f84 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2208      	movs	r2, #8
 8004f82:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f7ff ff18 	bl	8004dba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	771a      	strb	r2, [r3, #28]
}
 8004f90:	bf00      	nop
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a32      	ldr	r2, [pc, #200]	; (8005074 <TIM_Base_SetConfig+0xdc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d007      	beq.n	8004fc0 <TIM_Base_SetConfig+0x28>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb6:	d003      	beq.n	8004fc0 <TIM_Base_SetConfig+0x28>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a2f      	ldr	r2, [pc, #188]	; (8005078 <TIM_Base_SetConfig+0xe0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d108      	bne.n	8004fd2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a27      	ldr	r2, [pc, #156]	; (8005074 <TIM_Base_SetConfig+0xdc>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d013      	beq.n	8005002 <TIM_Base_SetConfig+0x6a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe0:	d00f      	beq.n	8005002 <TIM_Base_SetConfig+0x6a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a24      	ldr	r2, [pc, #144]	; (8005078 <TIM_Base_SetConfig+0xe0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00b      	beq.n	8005002 <TIM_Base_SetConfig+0x6a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a23      	ldr	r2, [pc, #140]	; (800507c <TIM_Base_SetConfig+0xe4>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d007      	beq.n	8005002 <TIM_Base_SetConfig+0x6a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a22      	ldr	r2, [pc, #136]	; (8005080 <TIM_Base_SetConfig+0xe8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d003      	beq.n	8005002 <TIM_Base_SetConfig+0x6a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a21      	ldr	r2, [pc, #132]	; (8005084 <TIM_Base_SetConfig+0xec>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d108      	bne.n	8005014 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4313      	orrs	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a0e      	ldr	r2, [pc, #56]	; (8005074 <TIM_Base_SetConfig+0xdc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00b      	beq.n	8005058 <TIM_Base_SetConfig+0xc0>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a0e      	ldr	r2, [pc, #56]	; (800507c <TIM_Base_SetConfig+0xe4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d007      	beq.n	8005058 <TIM_Base_SetConfig+0xc0>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a0d      	ldr	r2, [pc, #52]	; (8005080 <TIM_Base_SetConfig+0xe8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d003      	beq.n	8005058 <TIM_Base_SetConfig+0xc0>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a0c      	ldr	r2, [pc, #48]	; (8005084 <TIM_Base_SetConfig+0xec>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d103      	bne.n	8005060 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	615a      	str	r2, [r3, #20]
}
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40012c00 	.word	0x40012c00
 8005078:	40000400 	.word	0x40000400
 800507c:	40014000 	.word	0x40014000
 8005080:	40014400 	.word	0x40014400
 8005084:	40014800 	.word	0x40014800

08005088 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f023 0201 	bic.w	r2, r3, #1
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0303 	bic.w	r3, r3, #3
 80050c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f023 0302 	bic.w	r3, r3, #2
 80050d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4313      	orrs	r3, r2
 80050de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a28      	ldr	r2, [pc, #160]	; (8005184 <TIM_OC1_SetConfig+0xfc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00b      	beq.n	8005100 <TIM_OC1_SetConfig+0x78>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a27      	ldr	r2, [pc, #156]	; (8005188 <TIM_OC1_SetConfig+0x100>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d007      	beq.n	8005100 <TIM_OC1_SetConfig+0x78>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a26      	ldr	r2, [pc, #152]	; (800518c <TIM_OC1_SetConfig+0x104>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d003      	beq.n	8005100 <TIM_OC1_SetConfig+0x78>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a25      	ldr	r2, [pc, #148]	; (8005190 <TIM_OC1_SetConfig+0x108>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d10c      	bne.n	800511a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f023 0308 	bic.w	r3, r3, #8
 8005106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f023 0304 	bic.w	r3, r3, #4
 8005118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a19      	ldr	r2, [pc, #100]	; (8005184 <TIM_OC1_SetConfig+0xfc>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00b      	beq.n	800513a <TIM_OC1_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a18      	ldr	r2, [pc, #96]	; (8005188 <TIM_OC1_SetConfig+0x100>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d007      	beq.n	800513a <TIM_OC1_SetConfig+0xb2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a17      	ldr	r2, [pc, #92]	; (800518c <TIM_OC1_SetConfig+0x104>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d003      	beq.n	800513a <TIM_OC1_SetConfig+0xb2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a16      	ldr	r2, [pc, #88]	; (8005190 <TIM_OC1_SetConfig+0x108>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d111      	bne.n	800515e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	621a      	str	r2, [r3, #32]
}
 8005178:	bf00      	nop
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40014000 	.word	0x40014000
 800518c:	40014400 	.word	0x40014400
 8005190:	40014800 	.word	0x40014800

08005194 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	f023 0210 	bic.w	r2, r3, #16
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	021b      	lsls	r3, r3, #8
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4313      	orrs	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f023 0320 	bic.w	r3, r3, #32
 80051e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a24      	ldr	r2, [pc, #144]	; (8005284 <TIM_OC2_SetConfig+0xf0>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d10d      	bne.n	8005214 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005212:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <TIM_OC2_SetConfig+0xf0>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00b      	beq.n	8005234 <TIM_OC2_SetConfig+0xa0>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a1a      	ldr	r2, [pc, #104]	; (8005288 <TIM_OC2_SetConfig+0xf4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d007      	beq.n	8005234 <TIM_OC2_SetConfig+0xa0>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a19      	ldr	r2, [pc, #100]	; (800528c <TIM_OC2_SetConfig+0xf8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_OC2_SetConfig+0xa0>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a18      	ldr	r2, [pc, #96]	; (8005290 <TIM_OC2_SetConfig+0xfc>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d113      	bne.n	800525c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800523a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005242:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40012c00 	.word	0x40012c00
 8005288:	40014000 	.word	0x40014000
 800528c:	40014400 	.word	0x40014400
 8005290:	40014800 	.word	0x40014800

08005294 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0303 	bic.w	r3, r3, #3
 80052ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a23      	ldr	r2, [pc, #140]	; (8005380 <TIM_OC3_SetConfig+0xec>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d10d      	bne.n	8005312 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	4313      	orrs	r3, r2
 8005308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005310:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a1a      	ldr	r2, [pc, #104]	; (8005380 <TIM_OC3_SetConfig+0xec>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00b      	beq.n	8005332 <TIM_OC3_SetConfig+0x9e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a19      	ldr	r2, [pc, #100]	; (8005384 <TIM_OC3_SetConfig+0xf0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d007      	beq.n	8005332 <TIM_OC3_SetConfig+0x9e>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a18      	ldr	r2, [pc, #96]	; (8005388 <TIM_OC3_SetConfig+0xf4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d003      	beq.n	8005332 <TIM_OC3_SetConfig+0x9e>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a17      	ldr	r2, [pc, #92]	; (800538c <TIM_OC3_SetConfig+0xf8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d113      	bne.n	800535a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	621a      	str	r2, [r3, #32]
}
 8005374:	bf00      	nop
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	40012c00 	.word	0x40012c00
 8005384:	40014000 	.word	0x40014000
 8005388:	40014400 	.word	0x40014400
 800538c:	40014800 	.word	0x40014800

08005390 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	031b      	lsls	r3, r3, #12
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a16      	ldr	r2, [pc, #88]	; (8005448 <TIM_OC4_SetConfig+0xb8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00b      	beq.n	800540c <TIM_OC4_SetConfig+0x7c>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a15      	ldr	r2, [pc, #84]	; (800544c <TIM_OC4_SetConfig+0xbc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d007      	beq.n	800540c <TIM_OC4_SetConfig+0x7c>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a14      	ldr	r2, [pc, #80]	; (8005450 <TIM_OC4_SetConfig+0xc0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d003      	beq.n	800540c <TIM_OC4_SetConfig+0x7c>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a13      	ldr	r2, [pc, #76]	; (8005454 <TIM_OC4_SetConfig+0xc4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d109      	bne.n	8005420 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005412:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	019b      	lsls	r3, r3, #6
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40012c00 	.word	0x40012c00
 800544c:	40014000 	.word	0x40014000
 8005450:	40014400 	.word	0x40014400
 8005454:	40014800 	.word	0x40014800

08005458 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800549c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	041b      	lsls	r3, r3, #16
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a15      	ldr	r2, [pc, #84]	; (8005504 <TIM_OC5_SetConfig+0xac>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00b      	beq.n	80054ca <TIM_OC5_SetConfig+0x72>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a14      	ldr	r2, [pc, #80]	; (8005508 <TIM_OC5_SetConfig+0xb0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d007      	beq.n	80054ca <TIM_OC5_SetConfig+0x72>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a13      	ldr	r2, [pc, #76]	; (800550c <TIM_OC5_SetConfig+0xb4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d003      	beq.n	80054ca <TIM_OC5_SetConfig+0x72>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a12      	ldr	r2, [pc, #72]	; (8005510 <TIM_OC5_SetConfig+0xb8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d109      	bne.n	80054de <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	021b      	lsls	r3, r3, #8
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	621a      	str	r2, [r3, #32]
}
 80054f8:	bf00      	nop
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	40012c00 	.word	0x40012c00
 8005508:	40014000 	.word	0x40014000
 800550c:	40014400 	.word	0x40014400
 8005510:	40014800 	.word	0x40014800

08005514 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800555a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	051b      	lsls	r3, r3, #20
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a16      	ldr	r2, [pc, #88]	; (80055c4 <TIM_OC6_SetConfig+0xb0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00b      	beq.n	8005588 <TIM_OC6_SetConfig+0x74>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <TIM_OC6_SetConfig+0xb4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d007      	beq.n	8005588 <TIM_OC6_SetConfig+0x74>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a14      	ldr	r2, [pc, #80]	; (80055cc <TIM_OC6_SetConfig+0xb8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <TIM_OC6_SetConfig+0x74>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a13      	ldr	r2, [pc, #76]	; (80055d0 <TIM_OC6_SetConfig+0xbc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d109      	bne.n	800559c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800558e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	029b      	lsls	r3, r3, #10
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	621a      	str	r2, [r3, #32]
}
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40012c00 	.word	0x40012c00
 80055c8:	40014000 	.word	0x40014000
 80055cc:	40014400 	.word	0x40014400
 80055d0:	40014800 	.word	0x40014800

080055d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f023 0201 	bic.w	r2, r3, #1
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f023 030a 	bic.w	r3, r3, #10
 8005610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	621a      	str	r2, [r3, #32]
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005632:	b480      	push	{r7}
 8005634:	b087      	sub	sp, #28
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f023 0210 	bic.w	r2, r3, #16
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800565c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	031b      	lsls	r3, r3, #12
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	4313      	orrs	r3, r2
 8005666:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800566e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	621a      	str	r2, [r3, #32]
}
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005692:	b480      	push	{r7}
 8005694:	b085      	sub	sp, #20
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f043 0307 	orr.w	r3, r3, #7
 80056b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	609a      	str	r2, [r3, #8]
}
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	021a      	lsls	r2, r3, #8
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	609a      	str	r2, [r3, #8]
}
 80056fc:	bf00      	nop
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	2201      	movs	r2, #1
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a1a      	ldr	r2, [r3, #32]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	43db      	mvns	r3, r3
 800572a:	401a      	ands	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a1a      	ldr	r2, [r3, #32]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f003 031f 	and.w	r3, r3, #31
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	fa01 f303 	lsl.w	r3, r1, r3
 8005740:	431a      	orrs	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	621a      	str	r2, [r3, #32]
}
 8005746:	bf00      	nop
 8005748:	371c      	adds	r7, #28
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
	...

08005754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005768:	2302      	movs	r3, #2
 800576a:	e054      	b.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a24      	ldr	r2, [pc, #144]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d108      	bne.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800579c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a17      	ldr	r2, [pc, #92]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00e      	beq.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d4:	d009      	beq.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a13      	ldr	r2, [pc, #76]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d004      	beq.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a11      	ldr	r2, [pc, #68]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d10c      	bne.n	8005804 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40000400 	.word	0x40000400
 800582c:	40014000 	.word	0x40014000

08005830 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005848:	2302      	movs	r3, #2
 800584a:	e060      	b.n	800590e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	4313      	orrs	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	4313      	orrs	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	041b      	lsls	r3, r3, #16
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a14      	ldr	r2, [pc, #80]	; (800591c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d115      	bne.n	80058fc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	051b      	lsls	r3, r3, #20
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40012c00 	.word	0x40012c00

08005920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e040      	b.n	80059f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fb fb38 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2224      	movs	r2, #36	; 0x24
 8005988:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0201 	bic.w	r2, r2, #1
 8005998:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fa94 	bl	8005ec8 <UART_SetConfig>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e022      	b.n	80059f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fbc0 	bl	8006138 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fc47 	bl	800627c <UART_CheckIdleState>
 80059ee:	4603      	mov	r3, r0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	4613      	mov	r3, r2
 8005a04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	d12c      	bne.n	8005a68 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <HAL_UART_Receive_DMA+0x22>
 8005a14:	88fb      	ldrh	r3, [r7, #6]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e025      	b.n	8005a6a <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_UART_Receive_DMA+0x34>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e01e      	b.n	8005a6a <HAL_UART_Receive_DMA+0x72>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d007      	beq.n	8005a58 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005a56:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005a58:	88fb      	ldrh	r3, [r7, #6]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68b9      	ldr	r1, [r7, #8]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fcd2 	bl	8006408 <UART_Start_Receive_DMA>
 8005a64:	4603      	mov	r3, r0
 8005a66:	e000      	b.n	8005a6a <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005a68:	2302      	movs	r3, #2
  }
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b088      	sub	sp, #32
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a94:	69fa      	ldr	r2, [r7, #28]
 8005a96:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d113      	bne.n	8005acc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00e      	beq.n	8005acc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	f003 0320 	and.w	r3, r3, #32
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d009      	beq.n	8005acc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 81cd 	beq.w	8005e5c <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	4798      	blx	r3
      }
      return;
 8005aca:	e1c7      	b.n	8005e5c <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 80e3 	beq.w	8005c9a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d105      	bne.n	8005aea <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	4ba5      	ldr	r3, [pc, #660]	; (8005d78 <HAL_UART_IRQHandler+0x304>)
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 80d8 	beq.w	8005c9a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d010      	beq.n	8005b16 <HAL_UART_IRQHandler+0xa2>
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00b      	beq.n	8005b16 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2201      	movs	r2, #1
 8005b04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b0c:	f043 0201 	orr.w	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d010      	beq.n	8005b42 <HAL_UART_IRQHandler+0xce>
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00b      	beq.n	8005b42 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b38:	f043 0204 	orr.w	r2, r3, #4
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d010      	beq.n	8005b6e <HAL_UART_IRQHandler+0xfa>
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00b      	beq.n	8005b6e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2204      	movs	r2, #4
 8005b5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b64:	f043 0202 	orr.w	r2, r3, #2
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d015      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d104      	bne.n	8005b8c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00b      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2208      	movs	r2, #8
 8005b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b9a:	f043 0208 	orr.w	r2, r3, #8
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d011      	beq.n	8005bd2 <HAL_UART_IRQHandler+0x15e>
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00c      	beq.n	8005bd2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bc8:	f043 0220 	orr.w	r2, r3, #32
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 8141 	beq.w	8005e60 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	f003 0320 	and.w	r3, r3, #32
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00c      	beq.n	8005c02 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d007      	beq.n	8005c02 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c08:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c14:	2b40      	cmp	r3, #64	; 0x40
 8005c16:	d004      	beq.n	8005c22 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d031      	beq.n	8005c86 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fc71 	bl	800650a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c32:	2b40      	cmp	r3, #64	; 0x40
 8005c34:	d123      	bne.n	8005c7e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c44:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d013      	beq.n	8005c76 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c52:	4a4a      	ldr	r2, [pc, #296]	; (8005d7c <HAL_UART_IRQHandler+0x308>)
 8005c54:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fc fc1b 	bl	8002496 <HAL_DMA_Abort_IT>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d017      	beq.n	8005c96 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005c70:	4610      	mov	r0, r2
 8005c72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c74:	e00f      	b.n	8005c96 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f910 	bl	8005e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c7c:	e00b      	b.n	8005c96 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f90c 	bl	8005e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c84:	e007      	b.n	8005c96 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f908 	bl	8005e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005c94:	e0e4      	b.n	8005e60 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c96:	bf00      	nop
    return;
 8005c98:	e0e2      	b.n	8005e60 <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	f040 80a7 	bne.w	8005df2 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f003 0310 	and.w	r3, r3, #16
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 80a1 	beq.w	8005df2 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	f003 0310 	and.w	r3, r3, #16
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 809b 	beq.w	8005df2 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2210      	movs	r2, #16
 8005cc2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cce:	2b40      	cmp	r3, #64	; 0x40
 8005cd0:	d156      	bne.n	8005d80 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005cdc:	893b      	ldrh	r3, [r7, #8]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 80c0 	beq.w	8005e64 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cea:	893a      	ldrh	r2, [r7, #8]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	f080 80b9 	bcs.w	8005e64 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	893a      	ldrh	r2, [r7, #8]
 8005cf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	2b20      	cmp	r3, #32
 8005d02:	d02a      	beq.n	8005d5a <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d12:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0201 	bic.w	r2, r2, #1
 8005d22:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d32:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0210 	bic.w	r2, r2, #16
 8005d4e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fc fb65 	bl	8002424 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f89e 	bl	8005eb0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005d74:	e076      	b.n	8005e64 <HAL_UART_IRQHandler+0x3f0>
 8005d76:	bf00      	nop
 8005d78:	04000120 	.word	0x04000120
 8005d7c:	080066af 	.word	0x080066af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d064      	beq.n	8005e68 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 8005d9e:	897b      	ldrh	r3, [r7, #10]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d061      	beq.n	8005e68 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005db2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0201 	bic.w	r2, r2, #1
 8005dc2:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0210 	bic.w	r2, r2, #16
 8005de4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005de6:	897b      	ldrh	r3, [r7, #10]
 8005de8:	4619      	mov	r1, r3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f860 	bl	8005eb0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005df0:	e03a      	b.n	8005e68 <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00d      	beq.n	8005e18 <HAL_UART_IRQHandler+0x3a4>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d008      	beq.n	8005e18 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fc7b 	bl	800670c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e16:	e02a      	b.n	8005e6e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00d      	beq.n	8005e3e <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d008      	beq.n	8005e3e <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01b      	beq.n	8005e6c <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	4798      	blx	r3
    }
    return;
 8005e3c:	e016      	b.n	8005e6c <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d012      	beq.n	8005e6e <HAL_UART_IRQHandler+0x3fa>
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00d      	beq.n	8005e6e <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fc41 	bl	80066da <UART_EndTransmit_IT>
    return;
 8005e58:	bf00      	nop
 8005e5a:	e008      	b.n	8005e6e <HAL_UART_IRQHandler+0x3fa>
      return;
 8005e5c:	bf00      	nop
 8005e5e:	e006      	b.n	8005e6e <HAL_UART_IRQHandler+0x3fa>
    return;
 8005e60:	bf00      	nop
 8005e62:	e004      	b.n	8005e6e <HAL_UART_IRQHandler+0x3fa>
      return;
 8005e64:	bf00      	nop
 8005e66:	e002      	b.n	8005e6e <HAL_UART_IRQHandler+0x3fa>
      return;
 8005e68:	bf00      	nop
 8005e6a:	e000      	b.n	8005e6e <HAL_UART_IRQHandler+0x3fa>
    return;
 8005e6c:	bf00      	nop
  }

}
 8005e6e:	3720      	adds	r7, #32
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	4b8b      	ldr	r3, [pc, #556]	; (8006120 <UART_SetConfig+0x258>)
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6812      	ldr	r2, [r2, #0]
 8005efa:	6979      	ldr	r1, [r7, #20]
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a79      	ldr	r2, [pc, #484]	; (8006124 <UART_SetConfig+0x25c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d121      	bne.n	8005f88 <UART_SetConfig+0xc0>
 8005f44:	4b78      	ldr	r3, [pc, #480]	; (8006128 <UART_SetConfig+0x260>)
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	f003 0303 	and.w	r3, r3, #3
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d817      	bhi.n	8005f80 <UART_SetConfig+0xb8>
 8005f50:	a201      	add	r2, pc, #4	; (adr r2, 8005f58 <UART_SetConfig+0x90>)
 8005f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f56:	bf00      	nop
 8005f58:	08005f69 	.word	0x08005f69
 8005f5c:	08005f75 	.word	0x08005f75
 8005f60:	08005f7b 	.word	0x08005f7b
 8005f64:	08005f6f 	.word	0x08005f6f
 8005f68:	2300      	movs	r3, #0
 8005f6a:	77fb      	strb	r3, [r7, #31]
 8005f6c:	e01e      	b.n	8005fac <UART_SetConfig+0xe4>
 8005f6e:	2302      	movs	r3, #2
 8005f70:	77fb      	strb	r3, [r7, #31]
 8005f72:	e01b      	b.n	8005fac <UART_SetConfig+0xe4>
 8005f74:	2304      	movs	r3, #4
 8005f76:	77fb      	strb	r3, [r7, #31]
 8005f78:	e018      	b.n	8005fac <UART_SetConfig+0xe4>
 8005f7a:	2308      	movs	r3, #8
 8005f7c:	77fb      	strb	r3, [r7, #31]
 8005f7e:	e015      	b.n	8005fac <UART_SetConfig+0xe4>
 8005f80:	2310      	movs	r3, #16
 8005f82:	77fb      	strb	r3, [r7, #31]
 8005f84:	bf00      	nop
 8005f86:	e011      	b.n	8005fac <UART_SetConfig+0xe4>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a67      	ldr	r2, [pc, #412]	; (800612c <UART_SetConfig+0x264>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d102      	bne.n	8005f98 <UART_SetConfig+0xd0>
 8005f92:	2300      	movs	r3, #0
 8005f94:	77fb      	strb	r3, [r7, #31]
 8005f96:	e009      	b.n	8005fac <UART_SetConfig+0xe4>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a64      	ldr	r2, [pc, #400]	; (8006130 <UART_SetConfig+0x268>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d102      	bne.n	8005fa8 <UART_SetConfig+0xe0>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	77fb      	strb	r3, [r7, #31]
 8005fa6:	e001      	b.n	8005fac <UART_SetConfig+0xe4>
 8005fa8:	2310      	movs	r3, #16
 8005faa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb4:	d15c      	bne.n	8006070 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8005fb6:	7ffb      	ldrb	r3, [r7, #31]
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d828      	bhi.n	800600e <UART_SetConfig+0x146>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <UART_SetConfig+0xfc>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	08005fe9 	.word	0x08005fe9
 8005fc8:	08005ff1 	.word	0x08005ff1
 8005fcc:	08005ff9 	.word	0x08005ff9
 8005fd0:	0800600f 	.word	0x0800600f
 8005fd4:	08005fff 	.word	0x08005fff
 8005fd8:	0800600f 	.word	0x0800600f
 8005fdc:	0800600f 	.word	0x0800600f
 8005fe0:	0800600f 	.word	0x0800600f
 8005fe4:	08006007 	.word	0x08006007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fe8:	f7fd fe76 	bl	8003cd8 <HAL_RCC_GetPCLK1Freq>
 8005fec:	61b8      	str	r0, [r7, #24]
        break;
 8005fee:	e013      	b.n	8006018 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ff0:	f7fd fe94 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 8005ff4:	61b8      	str	r0, [r7, #24]
        break;
 8005ff6:	e00f      	b.n	8006018 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ff8:	4b4e      	ldr	r3, [pc, #312]	; (8006134 <UART_SetConfig+0x26c>)
 8005ffa:	61bb      	str	r3, [r7, #24]
        break;
 8005ffc:	e00c      	b.n	8006018 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ffe:	f7fd fdf5 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8006002:	61b8      	str	r0, [r7, #24]
        break;
 8006004:	e008      	b.n	8006018 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600a:	61bb      	str	r3, [r7, #24]
        break;
 800600c:	e004      	b.n	8006018 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	77bb      	strb	r3, [r7, #30]
        break;
 8006016:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d074      	beq.n	8006108 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	005a      	lsls	r2, r3, #1
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	085b      	lsrs	r3, r3, #1
 8006028:	441a      	add	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006032:	b29b      	uxth	r3, r3
 8006034:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	2b0f      	cmp	r3, #15
 800603a:	d916      	bls.n	800606a <UART_SetConfig+0x1a2>
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006042:	d212      	bcs.n	800606a <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	b29b      	uxth	r3, r3
 8006048:	f023 030f 	bic.w	r3, r3, #15
 800604c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	085b      	lsrs	r3, r3, #1
 8006052:	b29b      	uxth	r3, r3
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	b29a      	uxth	r2, r3
 800605a:	89fb      	ldrh	r3, [r7, #14]
 800605c:	4313      	orrs	r3, r2
 800605e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	89fa      	ldrh	r2, [r7, #14]
 8006066:	60da      	str	r2, [r3, #12]
 8006068:	e04e      	b.n	8006108 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	77bb      	strb	r3, [r7, #30]
 800606e:	e04b      	b.n	8006108 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006070:	7ffb      	ldrb	r3, [r7, #31]
 8006072:	2b08      	cmp	r3, #8
 8006074:	d827      	bhi.n	80060c6 <UART_SetConfig+0x1fe>
 8006076:	a201      	add	r2, pc, #4	; (adr r2, 800607c <UART_SetConfig+0x1b4>)
 8006078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607c:	080060a1 	.word	0x080060a1
 8006080:	080060a9 	.word	0x080060a9
 8006084:	080060b1 	.word	0x080060b1
 8006088:	080060c7 	.word	0x080060c7
 800608c:	080060b7 	.word	0x080060b7
 8006090:	080060c7 	.word	0x080060c7
 8006094:	080060c7 	.word	0x080060c7
 8006098:	080060c7 	.word	0x080060c7
 800609c:	080060bf 	.word	0x080060bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a0:	f7fd fe1a 	bl	8003cd8 <HAL_RCC_GetPCLK1Freq>
 80060a4:	61b8      	str	r0, [r7, #24]
        break;
 80060a6:	e013      	b.n	80060d0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060a8:	f7fd fe38 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 80060ac:	61b8      	str	r0, [r7, #24]
        break;
 80060ae:	e00f      	b.n	80060d0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060b0:	4b20      	ldr	r3, [pc, #128]	; (8006134 <UART_SetConfig+0x26c>)
 80060b2:	61bb      	str	r3, [r7, #24]
        break;
 80060b4:	e00c      	b.n	80060d0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060b6:	f7fd fd99 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 80060ba:	61b8      	str	r0, [r7, #24]
        break;
 80060bc:	e008      	b.n	80060d0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060c2:	61bb      	str	r3, [r7, #24]
        break;
 80060c4:	e004      	b.n	80060d0 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	77bb      	strb	r3, [r7, #30]
        break;
 80060ce:	bf00      	nop
    }

    if (pclk != 0U)
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d018      	beq.n	8006108 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	085a      	lsrs	r2, r3, #1
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	441a      	add	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	2b0f      	cmp	r3, #15
 80060f0:	d908      	bls.n	8006104 <UART_SetConfig+0x23c>
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f8:	d204      	bcs.n	8006104 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	60da      	str	r2, [r3, #12]
 8006102:	e001      	b.n	8006108 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006114:	7fbb      	ldrb	r3, [r7, #30]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3720      	adds	r7, #32
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	efff69f3 	.word	0xefff69f3
 8006124:	40013800 	.word	0x40013800
 8006128:	40021000 	.word	0x40021000
 800612c:	40004400 	.word	0x40004400
 8006130:	40004800 	.word	0x40004800
 8006134:	007a1200 	.word	0x007a1200

08006138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	f003 0308 	and.w	r3, r3, #8
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	f003 0320 	and.w	r3, r3, #32
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01a      	beq.n	800624e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006236:	d10a      	bne.n	800624e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	605a      	str	r2, [r3, #4]
  }
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af02      	add	r7, sp, #8
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800628c:	f7fa ffac 	bl	80011e8 <HAL_GetTick>
 8006290:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b08      	cmp	r3, #8
 800629e:	d10e      	bne.n	80062be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f82d 	bl	800630e <UART_WaitOnFlagUntilTimeout>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e023      	b.n	8006306 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d10e      	bne.n	80062ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f817 	bl	800630e <UART_WaitOnFlagUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e00d      	b.n	8006306 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	60f8      	str	r0, [r7, #12]
 8006316:	60b9      	str	r1, [r7, #8]
 8006318:	603b      	str	r3, [r7, #0]
 800631a:	4613      	mov	r3, r2
 800631c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800631e:	e05e      	b.n	80063de <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006326:	d05a      	beq.n	80063de <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006328:	f7fa ff5e 	bl	80011e8 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	429a      	cmp	r2, r3
 8006336:	d302      	bcc.n	800633e <UART_WaitOnFlagUntilTimeout+0x30>
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d11b      	bne.n	8006376 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800634c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0201 	bic.w	r2, r2, #1
 800635c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2220      	movs	r2, #32
 8006362:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2220      	movs	r2, #32
 8006368:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e043      	b.n	80063fe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0304 	and.w	r3, r3, #4
 8006380:	2b00      	cmp	r3, #0
 8006382:	d02c      	beq.n	80063de <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800638e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006392:	d124      	bne.n	80063de <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800639c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063ac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0201 	bic.w	r2, r2, #1
 80063bc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2220      	movs	r2, #32
 80063c2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2220      	movs	r2, #32
 80063c8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e00f      	b.n	80063fe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69da      	ldr	r2, [r3, #28]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	4013      	ands	r3, r2
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	bf0c      	ite	eq
 80063ee:	2301      	moveq	r3, #1
 80063f0:	2300      	movne	r3, #0
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	461a      	mov	r2, r3
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d091      	beq.n	8006320 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	4613      	mov	r3, r2
 8006414:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	88fa      	ldrh	r2, [r7, #6]
 8006420:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2222      	movs	r2, #34	; 0x22
 8006430:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006436:	2b00      	cmp	r3, #0
 8006438:	d02b      	beq.n	8006492 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643e:	4a25      	ldr	r2, [pc, #148]	; (80064d4 <UART_Start_Receive_DMA+0xcc>)
 8006440:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006446:	4a24      	ldr	r2, [pc, #144]	; (80064d8 <UART_Start_Receive_DMA+0xd0>)
 8006448:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644e:	4a23      	ldr	r2, [pc, #140]	; (80064dc <UART_Start_Receive_DMA+0xd4>)
 8006450:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006456:	2200      	movs	r2, #0
 8006458:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3324      	adds	r3, #36	; 0x24
 8006464:	4619      	mov	r1, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646a:	461a      	mov	r2, r3
 800646c:	88fb      	ldrh	r3, [r7, #6]
 800646e:	f7fb ff7a 	bl	8002366 <HAL_DMA_Start_IT>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00c      	beq.n	8006492 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2210      	movs	r2, #16
 800647c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2220      	movs	r2, #32
 800648c:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e01c      	b.n	80064cc <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064a8:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f042 0201 	orr.w	r2, r2, #1
 80064b8:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064c8:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	08006569 	.word	0x08006569
 80064d8:	080065fb 	.word	0x080065fb
 80064dc:	08006633 	.word	0x08006633

080064e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80064f6:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2220      	movs	r2, #32
 80064fc:	679a      	str	r2, [r3, #120]	; 0x78
}
 80064fe:	bf00      	nop
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006520:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0201 	bic.w	r2, r2, #1
 8006530:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006536:	2b01      	cmp	r3, #1
 8006538:	d107      	bne.n	800654a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 0210 	bic.w	r2, r2, #16
 8006548:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2220      	movs	r2, #32
 800654e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	2b20      	cmp	r3, #32
 800657c:	d02a      	beq.n	80065d4 <UART_DMAReceiveCplt+0x6c>
  {
    huart->RxXferCount = 0U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006594:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 0201 	bic.w	r2, r2, #1
 80065a4:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065b4:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2220      	movs	r2, #32
 80065ba:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d107      	bne.n	80065d4 <UART_DMAReceiveCplt+0x6c>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0210 	bic.w	r2, r2, #16
 80065d2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d107      	bne.n	80065ec <UART_DMAReceiveCplt+0x84>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80065e2:	4619      	mov	r1, r3
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f7ff fc63 	bl	8005eb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065ea:	e002      	b.n	80065f2 <UART_DMAReceiveCplt+0x8a>
    HAL_UART_RxCpltCallback(huart);
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 fd7b 	bl	80070e8 <HAL_UART_RxCpltCallback>
}
 80065f2:	bf00      	nop
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b084      	sub	sp, #16
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800660c:	2b01      	cmp	r3, #1
 800660e:	d109      	bne.n	8006624 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006616:	085b      	lsrs	r3, r3, #1
 8006618:	b29b      	uxth	r3, r3
 800661a:	4619      	mov	r1, r3
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f7ff fc47 	bl	8005eb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006622:	e002      	b.n	800662a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f7ff fc2f 	bl	8005e88 <HAL_UART_RxHalfCpltCallback>
}
 800662a:	bf00      	nop
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b086      	sub	sp, #24
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006644:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800664a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006656:	2b80      	cmp	r3, #128	; 0x80
 8006658:	d109      	bne.n	800666e <UART_DMAError+0x3c>
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	2b21      	cmp	r3, #33	; 0x21
 800665e:	d106      	bne.n	800666e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2200      	movs	r2, #0
 8006664:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006668:	6978      	ldr	r0, [r7, #20]
 800666a:	f7ff ff39 	bl	80064e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006678:	2b40      	cmp	r3, #64	; 0x40
 800667a:	d109      	bne.n	8006690 <UART_DMAError+0x5e>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2b22      	cmp	r3, #34	; 0x22
 8006680:	d106      	bne.n	8006690 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2200      	movs	r2, #0
 8006686:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800668a:	6978      	ldr	r0, [r7, #20]
 800668c:	f7ff ff3d 	bl	800650a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006696:	f043 0210 	orr.w	r2, r3, #16
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066a0:	6978      	ldr	r0, [r7, #20]
 80066a2:	f7ff fbfb 	bl	8005e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066a6:	bf00      	nop
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f7ff fbe5 	bl	8005e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066d2:	bf00      	nop
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b082      	sub	sp, #8
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066f0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2220      	movs	r2, #32
 80066f6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7ff fbb8 	bl	8005e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006704:	bf00      	nop
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <energyflow_init>:
EnergyFlow hydros;
static int sample = 0;
static uint8_t no = 0;

void energyflow_init(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
  hydros.charging = 0;
 8006724:	4b0a      	ldr	r3, [pc, #40]	; (8006750 <energyflow_init+0x30>)
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800672a:	2108      	movs	r1, #8
 800672c:	4809      	ldr	r0, [pc, #36]	; (8006754 <energyflow_init+0x34>)
 800672e:	f7fd fd53 	bl	80041d8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(SC_ON_GPIO_Port, SC_ON_Pin, RESET);
 8006732:	2200      	movs	r2, #0
 8006734:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800673c:	f7fc f94c 	bl	80029d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FC_DECHARGING_GPIO_Port, FC_DECHARGING_Pin, RESET);
 8006740:	2200      	movs	r2, #0
 8006742:	2180      	movs	r1, #128	; 0x80
 8006744:	4804      	ldr	r0, [pc, #16]	; (8006758 <energyflow_init+0x38>)
 8006746:	f7fc f947 	bl	80029d8 <HAL_GPIO_WritePin>
}
 800674a:	bf00      	nop
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	20000408 	.word	0x20000408
 8006754:	200001c0 	.word	0x200001c0
 8006758:	48000400 	.word	0x48000400

0800675c <energyflow_step>:

void energyflow_step(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0
  sample++;
 8006760:	4b25      	ldr	r3, [pc, #148]	; (80067f8 <energyflow_step+0x9c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3301      	adds	r3, #1
 8006766:	4a24      	ldr	r2, [pc, #144]	; (80067f8 <energyflow_step+0x9c>)
 8006768:	6013      	str	r3, [r2, #0]
  if (sample >= 5000 && no)
 800676a:	4b23      	ldr	r3, [pc, #140]	; (80067f8 <energyflow_step+0x9c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f241 3287 	movw	r2, #4999	; 0x1387
 8006772:	4293      	cmp	r3, r2
 8006774:	dd0c      	ble.n	8006790 <energyflow_step+0x34>
 8006776:	4b21      	ldr	r3, [pc, #132]	; (80067fc <energyflow_step+0xa0>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d008      	beq.n	8006790 <energyflow_step+0x34>
    {
      RS485_RX_VERIFIED_DATA.mode = 1;
 800677e:	4b20      	ldr	r3, [pc, #128]	; (8006800 <energyflow_step+0xa4>)
 8006780:	2201      	movs	r2, #1
 8006782:	705a      	strb	r2, [r3, #1]
      sample = 0;
 8006784:	4b1c      	ldr	r3, [pc, #112]	; (80067f8 <energyflow_step+0x9c>)
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]
      no = 0;
 800678a:	4b1c      	ldr	r3, [pc, #112]	; (80067fc <energyflow_step+0xa0>)
 800678c:	2200      	movs	r2, #0
 800678e:	701a      	strb	r2, [r3, #0]
    }
  if (sample >= 5000 && !no)
 8006790:	4b19      	ldr	r3, [pc, #100]	; (80067f8 <energyflow_step+0x9c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f241 3287 	movw	r2, #4999	; 0x1387
 8006798:	4293      	cmp	r3, r2
 800679a:	dd0c      	ble.n	80067b6 <energyflow_step+0x5a>
 800679c:	4b17      	ldr	r3, [pc, #92]	; (80067fc <energyflow_step+0xa0>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d108      	bne.n	80067b6 <energyflow_step+0x5a>
    {
      RS485_RX_VERIFIED_DATA.mode = 0;
 80067a4:	4b16      	ldr	r3, [pc, #88]	; (8006800 <energyflow_step+0xa4>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	705a      	strb	r2, [r3, #1]
      sample = 0;
 80067aa:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <energyflow_step+0x9c>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]
      no = 1;
 80067b0:	4b12      	ldr	r3, [pc, #72]	; (80067fc <energyflow_step+0xa0>)
 80067b2:	2201      	movs	r2, #1
 80067b4:	701a      	strb	r2, [r3, #0]
    }
  switch (RS485_RX_VERIFIED_DATA.mode)
 80067b6:	4b12      	ldr	r3, [pc, #72]	; (8006800 <energyflow_step+0xa4>)
 80067b8:	785b      	ldrb	r3, [r3, #1]
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	d816      	bhi.n	80067ec <energyflow_step+0x90>
 80067be:	a201      	add	r2, pc, #4	; (adr r2, 80067c4 <energyflow_step+0x68>)
 80067c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c4:	080067d5 	.word	0x080067d5
 80067c8:	080067db 	.word	0x080067db
 80067cc:	080067e1 	.word	0x080067e1
 80067d0:	080067e7 	.word	0x080067e7
    {
    case 0:
      energyflow_mode0();
 80067d4:	f000 f816 	bl	8006804 <energyflow_mode0>
    break;
 80067d8:	e00b      	b.n	80067f2 <energyflow_step+0x96>

    case 1:
      energyflow_preapre_to_race();
 80067da:	f000 f837 	bl	800684c <energyflow_preapre_to_race>
    break;
 80067de:	e008      	b.n	80067f2 <energyflow_step+0x96>

    case 2:
      energyflow_race();
 80067e0:	f000 f858 	bl	8006894 <energyflow_race>
    break;
 80067e4:	e005      	b.n	80067f2 <energyflow_step+0x96>

    case 3:
      energyflow_end_race();
 80067e6:	f000 f8cb 	bl	8006980 <energyflow_end_race>
    break;
 80067ea:	e002      	b.n	80067f2 <energyflow_step+0x96>

    default:
      energyflow_emergency();
 80067ec:	f000 f8da 	bl	80069a4 <energyflow_emergency>
    break;
 80067f0:	bf00      	nop
    }
}
 80067f2:	bf00      	nop
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20000028 	.word	0x20000028
 80067fc:	2000002c 	.word	0x2000002c
 8006800:	200004ac 	.word	0x200004ac

08006804 <energyflow_mode0>:

void energyflow_mode0()
{
 8006804:	b580      	push	{r7, lr}
 8006806:	af00      	add	r7, sp, #0
  FC_T_PID.setValue = 100;
 8006808:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <energyflow_mode0+0x34>)
 800680a:	4a0c      	ldr	r2, [pc, #48]	; (800683c <energyflow_mode0+0x38>)
 800680c:	601a      	str	r2, [r3, #0]
  hydros.charging = 0;
 800680e:	4b0c      	ldr	r3, [pc, #48]	; (8006840 <energyflow_mode0+0x3c>)
 8006810:	2200      	movs	r2, #0
 8006812:	601a      	str	r2, [r3, #0]
  TIM3->CCR3 = hydros.charging;
 8006814:	4a0b      	ldr	r2, [pc, #44]	; (8006844 <energyflow_mode0+0x40>)
 8006816:	4b0a      	ldr	r3, [pc, #40]	; (8006840 <energyflow_mode0+0x3c>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	63d3      	str	r3, [r2, #60]	; 0x3c
  HAL_GPIO_WritePin(SC_ON_GPIO_Port, SC_ON_Pin, RESET);
 800681c:	2200      	movs	r2, #0
 800681e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006826:	f7fc f8d7 	bl	80029d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FC_DECHARGING_GPIO_Port, FC_DECHARGING_Pin, RESET);
 800682a:	2200      	movs	r2, #0
 800682c:	2180      	movs	r1, #128	; 0x80
 800682e:	4806      	ldr	r0, [pc, #24]	; (8006848 <energyflow_mode0+0x44>)
 8006830:	f7fc f8d2 	bl	80029d8 <HAL_GPIO_WritePin>
}
 8006834:	bf00      	nop
 8006836:	bd80      	pop	{r7, pc}
 8006838:	2000045c 	.word	0x2000045c
 800683c:	42c80000 	.word	0x42c80000
 8006840:	20000408 	.word	0x20000408
 8006844:	40000400 	.word	0x40000400
 8006848:	48000400 	.word	0x48000400

0800684c <energyflow_preapre_to_race>:

void energyflow_preapre_to_race()
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
  FC_T_PID.setValue = 80;
 8006850:	4b0b      	ldr	r3, [pc, #44]	; (8006880 <energyflow_preapre_to_race+0x34>)
 8006852:	4a0c      	ldr	r2, [pc, #48]	; (8006884 <energyflow_preapre_to_race+0x38>)
 8006854:	601a      	str	r2, [r3, #0]
  hydros.charging =100;
 8006856:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <energyflow_preapre_to_race+0x3c>)
 8006858:	2264      	movs	r2, #100	; 0x64
 800685a:	601a      	str	r2, [r3, #0]
  TIM3->CCR3 = hydros.charging;
 800685c:	4a0b      	ldr	r2, [pc, #44]	; (800688c <energyflow_preapre_to_race+0x40>)
 800685e:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <energyflow_preapre_to_race+0x3c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	63d3      	str	r3, [r2, #60]	; 0x3c
  HAL_GPIO_WritePin(SC_ON_GPIO_Port, SC_ON_Pin, SET);
 8006864:	2201      	movs	r2, #1
 8006866:	f44f 7100 	mov.w	r1, #512	; 0x200
 800686a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800686e:	f7fc f8b3 	bl	80029d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FC_DECHARGING_GPIO_Port, FC_DECHARGING_Pin, RESET);
 8006872:	2200      	movs	r2, #0
 8006874:	2180      	movs	r1, #128	; 0x80
 8006876:	4806      	ldr	r0, [pc, #24]	; (8006890 <energyflow_preapre_to_race+0x44>)
 8006878:	f7fc f8ae 	bl	80029d8 <HAL_GPIO_WritePin>
}
 800687c:	bf00      	nop
 800687e:	bd80      	pop	{r7, pc}
 8006880:	2000045c 	.word	0x2000045c
 8006884:	42a00000 	.word	0x42a00000
 8006888:	20000408 	.word	0x20000408
 800688c:	40000400 	.word	0x40000400
 8006890:	48000400 	.word	0x48000400

08006894 <energyflow_race>:

void energyflow_race()
{
 8006894:	b580      	push	{r7, lr}
 8006896:	af00      	add	r7, sp, #0
  FC_T_PID.setValue = 60;
 8006898:	4b31      	ldr	r3, [pc, #196]	; (8006960 <energyflow_race+0xcc>)
 800689a:	4a32      	ldr	r2, [pc, #200]	; (8006964 <energyflow_race+0xd0>)
 800689c:	601a      	str	r2, [r3, #0]
  switch (RS485_RX_VERIFIED_DATA.scOn)
 800689e:	4b32      	ldr	r3, [pc, #200]	; (8006968 <energyflow_race+0xd4>)
 80068a0:	789b      	ldrb	r3, [r3, #2]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <energyflow_race+0x18>
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d008      	beq.n	80068bc <energyflow_race+0x28>
 80068aa:	e00f      	b.n	80068cc <energyflow_race+0x38>
    {
    case 0:
      HAL_GPIO_WritePin(SC_ON_GPIO_Port, SC_ON_Pin, RESET);
 80068ac:	2200      	movs	r2, #0
 80068ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80068b6:	f7fc f88f 	bl	80029d8 <HAL_GPIO_WritePin>
    break;
 80068ba:	e00a      	b.n	80068d2 <energyflow_race+0x3e>
    case 1:
      HAL_GPIO_WritePin(SC_ON_GPIO_Port, SC_ON_Pin, SET);
 80068bc:	2201      	movs	r2, #1
 80068be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80068c6:	f7fc f887 	bl	80029d8 <HAL_GPIO_WritePin>
    break;
 80068ca:	e002      	b.n	80068d2 <energyflow_race+0x3e>
    default:
      energyflow_emergency();
 80068cc:	f000 f86a 	bl	80069a4 <energyflow_emergency>
    break;
 80068d0:	bf00      	nop
    }
  if (VALUES.SC_C.value >= 1500)
 80068d2:	4b26      	ldr	r3, [pc, #152]	; (800696c <energyflow_race+0xd8>)
 80068d4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80068d8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8006970 <energyflow_race+0xdc>
 80068dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e4:	db07      	blt.n	80068f6 <energyflow_race+0x62>
    {
      hydros.charging = 50;
 80068e6:	4b23      	ldr	r3, [pc, #140]	; (8006974 <energyflow_race+0xe0>)
 80068e8:	2232      	movs	r2, #50	; 0x32
 80068ea:	601a      	str	r2, [r3, #0]
      TIM3->CCR3 = hydros.charging;
 80068ec:	4a22      	ldr	r2, [pc, #136]	; (8006978 <energyflow_race+0xe4>)
 80068ee:	4b21      	ldr	r3, [pc, #132]	; (8006974 <energyflow_race+0xe0>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80068f4:	e009      	b.n	800690a <energyflow_race+0x76>
    }
  else
    {
      hydros.charging = 100;
 80068f6:	4b1f      	ldr	r3, [pc, #124]	; (8006974 <energyflow_race+0xe0>)
 80068f8:	2264      	movs	r2, #100	; 0x64
 80068fa:	601a      	str	r2, [r3, #0]
      hydros.charging = 50;
 80068fc:	4b1d      	ldr	r3, [pc, #116]	; (8006974 <energyflow_race+0xe0>)
 80068fe:	2232      	movs	r2, #50	; 0x32
 8006900:	601a      	str	r2, [r3, #0]
      TIM3->CCR3 = hydros.charging;
 8006902:	4a1d      	ldr	r2, [pc, #116]	; (8006978 <energyflow_race+0xe4>)
 8006904:	4b1b      	ldr	r3, [pc, #108]	; (8006974 <energyflow_race+0xe0>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	63d3      	str	r3, [r2, #60]	; 0x3c
    }
  if (VALUES.SC_V.value >= 3500)
 800690a:	4b18      	ldr	r3, [pc, #96]	; (800696c <energyflow_race+0xd8>)
 800690c:	edd3 7a08 	vldr	s15, [r3, #32]
 8006910:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800697c <energyflow_race+0xe8>
 8006914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800691c:	db09      	blt.n	8006932 <energyflow_race+0x9e>
    {
      hydros.charging = 0;
 800691e:	4b15      	ldr	r3, [pc, #84]	; (8006974 <energyflow_race+0xe0>)
 8006920:	2200      	movs	r2, #0
 8006922:	601a      	str	r2, [r3, #0]
      hydros.charging = 50;
 8006924:	4b13      	ldr	r3, [pc, #76]	; (8006974 <energyflow_race+0xe0>)
 8006926:	2232      	movs	r2, #50	; 0x32
 8006928:	601a      	str	r2, [r3, #0]
      TIM3->CCR3 = hydros.charging;
 800692a:	4a13      	ldr	r2, [pc, #76]	; (8006978 <energyflow_race+0xe4>)
 800692c:	4b11      	ldr	r3, [pc, #68]	; (8006974 <energyflow_race+0xe0>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	63d3      	str	r3, [r2, #60]	; 0x3c
    }
  if (VALUES.FC_V.value <= 1500)
 8006932:	4b0e      	ldr	r3, [pc, #56]	; (800696c <energyflow_race+0xd8>)
 8006934:	edd3 7a04 	vldr	s15, [r3, #16]
 8006938:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8006970 <energyflow_race+0xdc>
 800693c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006944:	d900      	bls.n	8006948 <energyflow_race+0xb4>
    {
      hydros.charging = 0;
      hydros.charging = 50;
      TIM3->CCR3 = hydros.charging;
    }
}
 8006946:	e009      	b.n	800695c <energyflow_race+0xc8>
      hydros.charging = 0;
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <energyflow_race+0xe0>)
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]
      hydros.charging = 50;
 800694e:	4b09      	ldr	r3, [pc, #36]	; (8006974 <energyflow_race+0xe0>)
 8006950:	2232      	movs	r2, #50	; 0x32
 8006952:	601a      	str	r2, [r3, #0]
      TIM3->CCR3 = hydros.charging;
 8006954:	4a08      	ldr	r2, [pc, #32]	; (8006978 <energyflow_race+0xe4>)
 8006956:	4b07      	ldr	r3, [pc, #28]	; (8006974 <energyflow_race+0xe0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800695c:	bf00      	nop
 800695e:	bd80      	pop	{r7, pc}
 8006960:	2000045c 	.word	0x2000045c
 8006964:	42700000 	.word	0x42700000
 8006968:	200004ac 	.word	0x200004ac
 800696c:	20000414 	.word	0x20000414
 8006970:	44bb8000 	.word	0x44bb8000
 8006974:	20000408 	.word	0x20000408
 8006978:	40000400 	.word	0x40000400
 800697c:	455ac000 	.word	0x455ac000

08006980 <energyflow_end_race>:

void energyflow_end_race()
{
 8006980:	b580      	push	{r7, lr}
 8006982:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SC_ON_GPIO_Port, SC_ON_Pin, RESET);
 8006984:	2200      	movs	r2, #0
 8006986:	f44f 7100 	mov.w	r1, #512	; 0x200
 800698a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800698e:	f7fc f823 	bl	80029d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FC_DECHARGING_GPIO_Port, FC_DECHARGING_Pin, SET);
 8006992:	2201      	movs	r2, #1
 8006994:	2180      	movs	r1, #128	; 0x80
 8006996:	4802      	ldr	r0, [pc, #8]	; (80069a0 <energyflow_end_race+0x20>)
 8006998:	f7fc f81e 	bl	80029d8 <HAL_GPIO_WritePin>
}
 800699c:	bf00      	nop
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	48000400 	.word	0x48000400

080069a4 <energyflow_emergency>:

void energyflow_emergency()
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0

}
 80069a8:	bf00      	nop
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
	...

080069b4 <fans_init>:
FC_FANS FANS;

static void doCalculations(void);

void fans_init()
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, &FANS.controlValue, 1);
 80069b8:	2301      	movs	r3, #1
 80069ba:	4a03      	ldr	r2, [pc, #12]	; (80069c8 <fans_init+0x14>)
 80069bc:	2100      	movs	r1, #0
 80069be:	4803      	ldr	r0, [pc, #12]	; (80069cc <fans_init+0x18>)
 80069c0:	f7fd fcf6 	bl	80043b0 <HAL_TIM_PWM_Start_DMA>
}
 80069c4:	bf00      	nop
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	20000410 	.word	0x20000410
 80069cc:	20000258 	.word	0x20000258

080069d0 <fansStep>:
void fansStep(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	af00      	add	r7, sp, #0
  doCalculations();
 80069d4:	f000 f802 	bl	80069dc <doCalculations>
}
 80069d8:	bf00      	nop
 80069da:	bd80      	pop	{r7, pc}

080069dc <doCalculations>:

void doCalculations(void)   //co 150 ms
{
 80069dc:	b480      	push	{r7}
 80069de:	af00      	add	r7, sp, #0
  sampleTime++;
 80069e0:	4b1a      	ldr	r3, [pc, #104]	; (8006a4c <doCalculations+0x70>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	3301      	adds	r3, #1
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	4b18      	ldr	r3, [pc, #96]	; (8006a4c <doCalculations+0x70>)
 80069ea:	701a      	strb	r2, [r3, #0]
  if (sampleTime >= 150)	//oblicz predkosc obrotowa w rpm
 80069ec:	4b17      	ldr	r3, [pc, #92]	; (8006a4c <doCalculations+0x70>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b95      	cmp	r3, #149	; 0x95
 80069f2:	d926      	bls.n	8006a42 <doCalculations+0x66>
    {
      FANS.rpm_1 = pulses_1 * 200;
 80069f4:	4b16      	ldr	r3, [pc, #88]	; (8006a50 <doCalculations+0x74>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	461a      	mov	r2, r3
 80069fc:	0092      	lsls	r2, r2, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	461a      	mov	r2, r3
 8006a02:	0091      	lsls	r1, r2, #2
 8006a04:	461a      	mov	r2, r3
 8006a06:	460b      	mov	r3, r1
 8006a08:	4413      	add	r3, r2
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	4b11      	ldr	r3, [pc, #68]	; (8006a54 <doCalculations+0x78>)
 8006a10:	801a      	strh	r2, [r3, #0]
      FANS.rpm_2 = pulses_2 * 200; //200 dla 150 ms okresu
 8006a12:	4b11      	ldr	r3, [pc, #68]	; (8006a58 <doCalculations+0x7c>)
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	0092      	lsls	r2, r2, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	461a      	mov	r2, r3
 8006a20:	0091      	lsls	r1, r2, #2
 8006a22:	461a      	mov	r2, r3
 8006a24:	460b      	mov	r3, r1
 8006a26:	4413      	add	r3, r2
 8006a28:	00db      	lsls	r3, r3, #3
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	4b09      	ldr	r3, [pc, #36]	; (8006a54 <doCalculations+0x78>)
 8006a2e:	805a      	strh	r2, [r3, #2]
      pulses_1 = 0;		//zeruj impulsy
 8006a30:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <doCalculations+0x74>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	701a      	strb	r2, [r3, #0]
      pulses_2 = 0;
 8006a36:	4b08      	ldr	r3, [pc, #32]	; (8006a58 <doCalculations+0x7c>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	701a      	strb	r2, [r3, #0]
      sampleTime = 0;	//zeruj czas pomiaru
 8006a3c:	4b03      	ldr	r3, [pc, #12]	; (8006a4c <doCalculations+0x70>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	701a      	strb	r2, [r3, #0]
    }
}
 8006a42:	bf00      	nop
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	2000002d 	.word	0x2000002d
 8006a50:	2000002e 	.word	0x2000002e
 8006a54:	2000040c 	.word	0x2000040c
 8006a58:	2000002f 	.word	0x2000002f

08006a5c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	4603      	mov	r3, r0
 8006a64:	80fb      	strh	r3, [r7, #6]
  //Zlicza impulsy poszczegolnych wentylatorow
  switch (GPIO_Pin)
 8006a66:	88fb      	ldrh	r3, [r7, #6]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d009      	beq.n	8006a80 <HAL_GPIO_EXTI_Callback+0x24>
 8006a6c:	2b40      	cmp	r3, #64	; 0x40
 8006a6e:	d000      	beq.n	8006a72 <HAL_GPIO_EXTI_Callback+0x16>
    break;
    case fan_2_PIN:
      pulses_2++;
    break;
    default:
    break;
 8006a70:	e00d      	b.n	8006a8e <HAL_GPIO_EXTI_Callback+0x32>
      pulses_1++;
 8006a72:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <HAL_GPIO_EXTI_Callback+0x40>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	3301      	adds	r3, #1
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	4b08      	ldr	r3, [pc, #32]	; (8006a9c <HAL_GPIO_EXTI_Callback+0x40>)
 8006a7c:	701a      	strb	r2, [r3, #0]
    break;
 8006a7e:	e006      	b.n	8006a8e <HAL_GPIO_EXTI_Callback+0x32>
      pulses_2++;
 8006a80:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <HAL_GPIO_EXTI_Callback+0x44>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	3301      	adds	r3, #1
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <HAL_GPIO_EXTI_Callback+0x44>)
 8006a8a:	701a      	strb	r2, [r3, #0]
    break;
 8006a8c:	bf00      	nop
    }
}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	2000002e 	.word	0x2000002e
 8006aa0:	2000002f 	.word	0x2000002f

08006aa4 <hydrogreen_init>:
/**
 * @fn hydrogreen_init(void)
 * @brief Glowna funkcja inicjalizujaca, powinna zostac wywolana wewnatrz hydrogreen_main()
 */
static void hydrogreen_init(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
  watchdog_init();
 8006aa8:	f000 fd0e 	bl	80074c8 <watchdog_init>
  timers_init();
 8006aac:	f000 fc10 	bl	80072d0 <timers_init>
  rs485_init();
 8006ab0:	f000 fb0a 	bl	80070c8 <rs485_init>
  adc_init();
 8006ab4:	f000 f84a 	bl	8006b4c <adc_init>
  motor_init();
 8006ab8:	f000 f958 	bl	8006d6c <motor_init>
  energyflow_init();
 8006abc:	f7ff fe30 	bl	8006720 <energyflow_init>
  fans_init();
 8006ac0:	f7ff ff78 	bl	80069b4 <fans_init>
  PID_init();
 8006ac4:	f000 f962 	bl	8006d8c <PID_init>
}
 8006ac8:	bf00      	nop
 8006aca:	bd80      	pop	{r7, pc}

08006acc <hydrogreen_step1kHz>:
/**
 * @fn hydrogreen_step1kHz(void)
 * @brief Glowna funkcja wykonywana co T = 1ms, powinna zostac wywolana wewnatrz hydrogreen_main()
 */
static inline void hydrogreen_step1kHz(void)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
#ifdef HYDROGREEN_DEBUG
  HAL_GPIO_WritePin(GPIOA, DBG_Pin, GPIO_PIN_RESET);
#endif
  watchdog_step();
 8006ad0:	f000 fdce 	bl	8007670 <watchdog_step>
  energyflow_step();
 8006ad4:	f7ff fe42 	bl	800675c <energyflow_step>
  fansStep();
 8006ad8:	f7ff ff7a 	bl	80069d0 <fansStep>
  PIDstep();
 8006adc:	f000 f9b6 	bl	8006e4c <PIDstep>
  adc_step();
 8006ae0:	f000 f93c 	bl	8006d5c <adc_step>
#ifdef HYDROGREEN_DEBUG
  HAL_GPIO_WritePin(GPIOA, DBG_Pin, GPIO_PIN_SET);
#endif
}
 8006ae4:	bf00      	nop
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <hydrogreen_step10kHz>:
/**
 * @fn hydrogreen_step(void)
 * @brief Glowna funkcja wykonywana co T = 0,1ms, powinna zostac wywolana wewnatrz hydrogreen_main()
 */
static inline void hydrogreen_step10kHz(void)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
  //rs485_step();
}
 8006aec:	bf00      	nop
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
	...

08006af8 <hydrogreen_main>:
/**
 * @fn hydrogreen_main(void)
 * @brief Glowna funkcja programu, powinna zostac wywolana w pliku main.c, pomiedzy  USER CODE BEGIN 2 a USER CODE END 2
 */
void hydrogreen_main(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
  hydrogreen_init();
 8006afc:	f7ff ffd2 	bl	8006aa4 <hydrogreen_init>

  while (1)
    {
      //Sprawdz czy wystapil tick timera nastepujacy z f = 1kHz
      if (timers_tick1kHz)
 8006b00:	4b0c      	ldr	r3, [pc, #48]	; (8006b34 <hydrogreen_main+0x3c>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d008      	beq.n	8006b1c <hydrogreen_main+0x24>
	{
	  timers_beforeStep1kHz();
 8006b0a:	f000 fc3f 	bl	800738c <timers_beforeStep1kHz>

	  hydrogreen_step1kHz();
 8006b0e:	f7ff ffdd 	bl	8006acc <hydrogreen_step1kHz>

	  timers_afterStep1kHz();
 8006b12:	f000 fc47 	bl	80073a4 <timers_afterStep1kHz>

	  timers_tick1kHz = 0;
 8006b16:	4b07      	ldr	r3, [pc, #28]	; (8006b34 <hydrogreen_main+0x3c>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	701a      	strb	r2, [r3, #0]
	}

      //Sprawdz czy wystapil tick timera nastepujacy z f = 10kHz
      if (timers_tick10kHz)
 8006b1c:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <hydrogreen_main+0x40>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0ec      	beq.n	8006b00 <hydrogreen_main+0x8>
	{
	  hydrogreen_step10kHz();
 8006b26:	f7ff ffdf 	bl	8006ae8 <hydrogreen_step10kHz>
	  timers_tick10kHz = 0;
 8006b2a:	4b03      	ldr	r3, [pc, #12]	; (8006b38 <hydrogreen_main+0x40>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	701a      	strb	r2, [r3, #0]
      if (timers_tick1kHz)
 8006b30:	e7e6      	b.n	8006b00 <hydrogreen_main+0x8>
 8006b32:	bf00      	nop
 8006b34:	200004b4 	.word	0x200004b4
 8006b38:	200004b0 	.word	0x200004b0

08006b3c <hydrogreen_hardFault>:
/**
 * @fn hydrogreen_hardFault(void)
 * @brief Sygnalizacja wystapienia hard fault'a, wywolac w pliku main.c, w funkcji Error_Handler()
 */
void hydrogreen_hardFault(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  //HAL_GPIO_WritePin(GPIOB, LED_NUCLEO_Pin, GPIO_PIN_SET);
}
 8006b40:	bf00      	nop
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
	...

08006b4c <adc_init>:
static void averaging_Values(void);
/*
 * Inicjalizacja adc z dma oraz stałych filtrujących dla filtru
 */
void adc_init(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  HAL_ADC_Start_DMA(&adcChannel, (uint32_t*) adcDataToCalculate, 4);
 8006b50:	2204      	movs	r2, #4
 8006b52:	490a      	ldr	r1, [pc, #40]	; (8006b7c <adc_init+0x30>)
 8006b54:	480a      	ldr	r0, [pc, #40]	; (8006b80 <adc_init+0x34>)
 8006b56:	f7fa fd03 	bl	8001560 <HAL_ADC_Start_DMA>
  VALUES.FC_Temp_Const = 255;
 8006b5a:	4b0a      	ldr	r3, [pc, #40]	; (8006b84 <adc_init+0x38>)
 8006b5c:	22ff      	movs	r2, #255	; 0xff
 8006b5e:	731a      	strb	r2, [r3, #12]
  VALUES.FC_V_Const = 99;
 8006b60:	4b08      	ldr	r3, [pc, #32]	; (8006b84 <adc_init+0x38>)
 8006b62:	2263      	movs	r2, #99	; 0x63
 8006b64:	771a      	strb	r2, [r3, #28]
  VALUES.SC_C_Const = 225;
 8006b66:	4b07      	ldr	r3, [pc, #28]	; (8006b84 <adc_init+0x38>)
 8006b68:	22e1      	movs	r2, #225	; 0xe1
 8006b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  VALUES.SC_V_Const = 99;
 8006b6e:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <adc_init+0x38>)
 8006b70:	2263      	movs	r2, #99	; 0x63
 8006b72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8006b76:	bf00      	nop
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20000454 	.word	0x20000454
 8006b80:	20000070 	.word	0x20000070
 8006b84:	20000414 	.word	0x20000414

08006b88 <calculateValues>:
/*
 * Funkcja przelicza wartosci z ADC na wartosci uzyteczne
 */
static void calculateValues(void)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
  //Przelicza wartosci z ADC na temperature w stopniach Celsjusza, napiecie i prad
  VALUES.FC_Temp_to_average = (((4095.0f - (float) adcDataToCalculate[0]) * 20))
 8006b8c:	4b26      	ldr	r3, [pc, #152]	; (8006c28 <calculateValues+0xa0>)
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	ee07 3a90 	vmov	s15, r3
 8006b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b98:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8006c2c <calculateValues+0xa4>
 8006b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ba0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006ba4:	ee27 7a87 	vmul.f32	s14, s15, s14
      / 300.0f; //zależność wyznaczona eksperymentalnie w sali
 8006ba8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8006c30 <calculateValues+0xa8>
 8006bac:	eec7 7a26 	vdiv.f32	s15, s14, s13
  VALUES.FC_Temp_to_average = (((4095.0f - (float) adcDataToCalculate[0]) * 20))
 8006bb0:	4b20      	ldr	r3, [pc, #128]	; (8006c34 <calculateValues+0xac>)
 8006bb2:	edc3 7a02 	vstr	s15, [r3, #8]
  VALUES.SC_V_to_average = (((float) adcDataToCalculate[1]) * 65.2f) / 4095.0f;
 8006bb6:	4b1c      	ldr	r3, [pc, #112]	; (8006c28 <calculateValues+0xa0>)
 8006bb8:	885b      	ldrh	r3, [r3, #2]
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006c38 <calculateValues+0xb0>
 8006bc6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006bca:	eddf 6a18 	vldr	s13, [pc, #96]	; 8006c2c <calculateValues+0xa4>
 8006bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bd2:	4b18      	ldr	r3, [pc, #96]	; (8006c34 <calculateValues+0xac>)
 8006bd4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  // VALUES.SC_C_to_average = (((float) adcDataToCalculate[2]) / 4095.0f) * 5.0f;
  VALUES.SC_C_to_average =
      ((((float) adcDataToCalculate[2] * 5.22f) / 4095.0f));
 8006bd8:	4b13      	ldr	r3, [pc, #76]	; (8006c28 <calculateValues+0xa0>)
 8006bda:	889b      	ldrh	r3, [r3, #4]
 8006bdc:	ee07 3a90 	vmov	s15, r3
 8006be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006c3c <calculateValues+0xb4>
 8006be8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006bec:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8006c2c <calculateValues+0xa4>
 8006bf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
  VALUES.SC_C_to_average =
 8006bf4:	4b0f      	ldr	r3, [pc, #60]	; (8006c34 <calculateValues+0xac>)
 8006bf6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  VALUES.FC_V_to_average = (((float) adcDataToCalculate[3]) * 65.2f) / 4095.0f;
 8006bfa:	4b0b      	ldr	r3, [pc, #44]	; (8006c28 <calculateValues+0xa0>)
 8006bfc:	88db      	ldrh	r3, [r3, #6]
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c06:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006c38 <calculateValues+0xb0>
 8006c0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006c0e:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006c2c <calculateValues+0xa4>
 8006c12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c16:	4b07      	ldr	r3, [pc, #28]	; (8006c34 <calculateValues+0xac>)
 8006c18:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8006c1c:	bf00      	nop
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	20000454 	.word	0x20000454
 8006c2c:	457ff000 	.word	0x457ff000
 8006c30:	43960000 	.word	0x43960000
 8006c34:	20000414 	.word	0x20000414
 8006c38:	42826666 	.word	0x42826666
 8006c3c:	40a70a3d 	.word	0x40a70a3d

08006c40 <averaging_Values>:
/*
 * Funkcja filtrujaca pomiary
 */
static void averaging_Values(void)
{
 8006c40:	b480      	push	{r7}
 8006c42:	af00      	add	r7, sp, #0
  VALUES.FC_TEMP.value = (VALUES.prev_FC_Temp * (VALUES.FC_Temp_Const - 1)
 8006c44:	4b44      	ldr	r3, [pc, #272]	; (8006d58 <averaging_Values+0x118>)
 8006c46:	ed93 7a01 	vldr	s14, [r3, #4]
 8006c4a:	4b43      	ldr	r3, [pc, #268]	; (8006d58 <averaging_Values+0x118>)
 8006c4c:	7b1b      	ldrb	r3, [r3, #12]
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	ee07 3a90 	vmov	s15, r3
 8006c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c58:	ee27 7a27 	vmul.f32	s14, s14, s15
      + VALUES.FC_Temp_to_average) / VALUES.FC_Temp_Const;
 8006c5c:	4b3e      	ldr	r3, [pc, #248]	; (8006d58 <averaging_Values+0x118>)
 8006c5e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006c62:	ee77 6a27 	vadd.f32	s13, s14, s15
 8006c66:	4b3c      	ldr	r3, [pc, #240]	; (8006d58 <averaging_Values+0x118>)
 8006c68:	7b1b      	ldrb	r3, [r3, #12]
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
  VALUES.FC_TEMP.value = (VALUES.prev_FC_Temp * (VALUES.FC_Temp_Const - 1)
 8006c76:	4b38      	ldr	r3, [pc, #224]	; (8006d58 <averaging_Values+0x118>)
 8006c78:	edc3 7a00 	vstr	s15, [r3]
  VALUES.SC_V.value = (VALUES.prev_SC_V * (VALUES.SC_V_Const - 1)
 8006c7c:	4b36      	ldr	r3, [pc, #216]	; (8006d58 <averaging_Values+0x118>)
 8006c7e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8006c82:	4b35      	ldr	r3, [pc, #212]	; (8006d58 <averaging_Values+0x118>)
 8006c84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c92:	ee27 7a27 	vmul.f32	s14, s14, s15
      + VALUES.SC_V_to_average) / VALUES.SC_V_Const;
 8006c96:	4b30      	ldr	r3, [pc, #192]	; (8006d58 <averaging_Values+0x118>)
 8006c98:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006c9c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8006ca0:	4b2d      	ldr	r3, [pc, #180]	; (8006d58 <averaging_Values+0x118>)
 8006ca2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ca6:	ee07 3a90 	vmov	s15, r3
 8006caa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
  VALUES.SC_V.value = (VALUES.prev_SC_V * (VALUES.SC_V_Const - 1)
 8006cb2:	4b29      	ldr	r3, [pc, #164]	; (8006d58 <averaging_Values+0x118>)
 8006cb4:	edc3 7a08 	vstr	s15, [r3, #32]
  VALUES.SC_C.value = (VALUES.prev_SC_C * (VALUES.SC_C_Const - 1)
 8006cb8:	4b27      	ldr	r3, [pc, #156]	; (8006d58 <averaging_Values+0x118>)
 8006cba:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8006cbe:	4b26      	ldr	r3, [pc, #152]	; (8006d58 <averaging_Values+0x118>)
 8006cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	ee07 3a90 	vmov	s15, r3
 8006cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cce:	ee27 7a27 	vmul.f32	s14, s14, s15
      + VALUES.SC_C_to_average) / VALUES.SC_C_Const;
 8006cd2:	4b21      	ldr	r3, [pc, #132]	; (8006d58 <averaging_Values+0x118>)
 8006cd4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006cd8:	ee77 6a27 	vadd.f32	s13, s14, s15
 8006cdc:	4b1e      	ldr	r3, [pc, #120]	; (8006d58 <averaging_Values+0x118>)
 8006cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006cea:	eec6 7a87 	vdiv.f32	s15, s13, s14
  VALUES.SC_C.value = (VALUES.prev_SC_C * (VALUES.SC_C_Const - 1)
 8006cee:	4b1a      	ldr	r3, [pc, #104]	; (8006d58 <averaging_Values+0x118>)
 8006cf0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  VALUES.FC_V.value = (VALUES.prev_FC_V * (VALUES.FC_V_Const - 1)
 8006cf4:	4b18      	ldr	r3, [pc, #96]	; (8006d58 <averaging_Values+0x118>)
 8006cf6:	ed93 7a05 	vldr	s14, [r3, #20]
 8006cfa:	4b17      	ldr	r3, [pc, #92]	; (8006d58 <averaging_Values+0x118>)
 8006cfc:	7f1b      	ldrb	r3, [r3, #28]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	ee07 3a90 	vmov	s15, r3
 8006d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d08:	ee27 7a27 	vmul.f32	s14, s14, s15
      + VALUES.FC_V_to_average) / VALUES.FC_V_Const;
 8006d0c:	4b12      	ldr	r3, [pc, #72]	; (8006d58 <averaging_Values+0x118>)
 8006d0e:	edd3 7a06 	vldr	s15, [r3, #24]
 8006d12:	ee77 6a27 	vadd.f32	s13, s14, s15
 8006d16:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <averaging_Values+0x118>)
 8006d18:	7f1b      	ldrb	r3, [r3, #28]
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
  VALUES.FC_V.value = (VALUES.prev_FC_V * (VALUES.FC_V_Const - 1)
 8006d26:	4b0c      	ldr	r3, [pc, #48]	; (8006d58 <averaging_Values+0x118>)
 8006d28:	edc3 7a04 	vstr	s15, [r3, #16]
  VALUES.prev_FC_Temp = VALUES.FC_Temp_to_average;
 8006d2c:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <averaging_Values+0x118>)
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	4a09      	ldr	r2, [pc, #36]	; (8006d58 <averaging_Values+0x118>)
 8006d32:	6053      	str	r3, [r2, #4]
  VALUES.prev_FC_V = VALUES.FC_V_to_average;
 8006d34:	4b08      	ldr	r3, [pc, #32]	; (8006d58 <averaging_Values+0x118>)
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	4a07      	ldr	r2, [pc, #28]	; (8006d58 <averaging_Values+0x118>)
 8006d3a:	6153      	str	r3, [r2, #20]
  VALUES.prev_SC_C = VALUES.SC_C_to_average;
 8006d3c:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <averaging_Values+0x118>)
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d40:	4a05      	ldr	r2, [pc, #20]	; (8006d58 <averaging_Values+0x118>)
 8006d42:	6353      	str	r3, [r2, #52]	; 0x34
  VALUES.prev_SC_V = VALUES.SC_V_to_average;
 8006d44:	4b04      	ldr	r3, [pc, #16]	; (8006d58 <averaging_Values+0x118>)
 8006d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d48:	4a03      	ldr	r2, [pc, #12]	; (8006d58 <averaging_Values+0x118>)
 8006d4a:	6253      	str	r3, [r2, #36]	; 0x24
}
 8006d4c:	bf00      	nop
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	20000414 	.word	0x20000414

08006d5c <adc_step>:
void adc_step()
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	af00      	add	r7, sp, #0
  calculateValues();
 8006d60:	f7ff ff12 	bl	8006b88 <calculateValues>
  averaging_Values();
 8006d64:	f7ff ff6c 	bl	8006c40 <averaging_Values>
}
 8006d68:	bf00      	nop
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <motor_init>:

#include "tim.h"
#include "rs485.h"

void motor_init(void)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1,(uint32_t*) RS485_RX_VERIFIED_DATA.motorPWM, 1);
 8006d70:	4b04      	ldr	r3, [pc, #16]	; (8006d84 <motor_init+0x18>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	461a      	mov	r2, r3
 8006d76:	2301      	movs	r3, #1
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4803      	ldr	r0, [pc, #12]	; (8006d88 <motor_init+0x1c>)
 8006d7c:	f7fd fb18 	bl	80043b0 <HAL_TIM_PWM_Start_DMA>
}
 8006d80:	bf00      	nop
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	200004ac 	.word	0x200004ac
 8006d88:	200002a4 	.word	0x200002a4

08006d8c <PID_init>:
#include "fans.h"

PID_struct FC_T_PID;

void PID_init()
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	af00      	add	r7, sp, #0
  FC_T_PID.Kp = 1.9;
 8006d90:	4b25      	ldr	r3, [pc, #148]	; (8006e28 <PID_init+0x9c>)
 8006d92:	4a26      	ldr	r2, [pc, #152]	; (8006e2c <PID_init+0xa0>)
 8006d94:	61da      	str	r2, [r3, #28]
  FC_T_PID.Ki = 0.2;
 8006d96:	4b24      	ldr	r3, [pc, #144]	; (8006e28 <PID_init+0x9c>)
 8006d98:	4a25      	ldr	r2, [pc, #148]	; (8006e30 <PID_init+0xa4>)
 8006d9a:	621a      	str	r2, [r3, #32]
  FC_T_PID.Kd = 0.0002;
 8006d9c:	4b22      	ldr	r3, [pc, #136]	; (8006e28 <PID_init+0x9c>)
 8006d9e:	4a25      	ldr	r2, [pc, #148]	; (8006e34 <PID_init+0xa8>)
 8006da0:	625a      	str	r2, [r3, #36]	; 0x24
  FC_T_PID.controlValue = 0;
 8006da2:	4b21      	ldr	r3, [pc, #132]	; (8006e28 <PID_init+0x9c>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	64da      	str	r2, [r3, #76]	; 0x4c
  FC_T_PID.error = 0;
 8006da8:	4b1f      	ldr	r3, [pc, #124]	; (8006e28 <PID_init+0x9c>)
 8006daa:	f04f 0200 	mov.w	r2, #0
 8006dae:	60da      	str	r2, [r3, #12]
  FC_T_PID.iError = 0;
 8006db0:	4b1d      	ldr	r3, [pc, #116]	; (8006e28 <PID_init+0x9c>)
 8006db2:	f04f 0200 	mov.w	r2, #0
 8006db6:	611a      	str	r2, [r3, #16]
  FC_T_PID.dError = 0;
 8006db8:	4b1b      	ldr	r3, [pc, #108]	; (8006e28 <PID_init+0x9c>)
 8006dba:	f04f 0200 	mov.w	r2, #0
 8006dbe:	615a      	str	r2, [r3, #20]
  FC_T_PID.lastError = 0;
 8006dc0:	4b19      	ldr	r3, [pc, #100]	; (8006e28 <PID_init+0x9c>)
 8006dc2:	f04f 0200 	mov.w	r2, #0
 8006dc6:	619a      	str	r2, [r3, #24]
  FC_T_PID.setValue = 100; //Temperatura w st Celsjusza
 8006dc8:	4b17      	ldr	r3, [pc, #92]	; (8006e28 <PID_init+0x9c>)
 8006dca:	4a1b      	ldr	r2, [pc, #108]	; (8006e38 <PID_init+0xac>)
 8006dcc:	601a      	str	r2, [r3, #0]
  FC_T_PID.measurement = 0;
 8006dce:	4b16      	ldr	r3, [pc, #88]	; (8006e28 <PID_init+0x9c>)
 8006dd0:	f04f 0200 	mov.w	r2, #0
 8006dd4:	605a      	str	r2, [r3, #4]
  FC_T_PID.prevMeasurement = 0;
 8006dd6:	4b14      	ldr	r3, [pc, #80]	; (8006e28 <PID_init+0x9c>)
 8006dd8:	f04f 0200 	mov.w	r2, #0
 8006ddc:	609a      	str	r2, [r3, #8]
  FC_T_PID.proportional = 0;
 8006dde:	4b12      	ldr	r3, [pc, #72]	; (8006e28 <PID_init+0x9c>)
 8006de0:	f04f 0200 	mov.w	r2, #0
 8006de4:	629a      	str	r2, [r3, #40]	; 0x28
  FC_T_PID.integrator = 0;
 8006de6:	4b10      	ldr	r3, [pc, #64]	; (8006e28 <PID_init+0x9c>)
 8006de8:	f04f 0200 	mov.w	r2, #0
 8006dec:	62da      	str	r2, [r3, #44]	; 0x2c
  FC_T_PID.differentator = 0;
 8006dee:	4b0e      	ldr	r3, [pc, #56]	; (8006e28 <PID_init+0x9c>)
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	631a      	str	r2, [r3, #48]	; 0x30
  FC_T_PID.integratorMax = 150;
 8006df6:	4b0c      	ldr	r3, [pc, #48]	; (8006e28 <PID_init+0x9c>)
 8006df8:	4a10      	ldr	r2, [pc, #64]	; (8006e3c <PID_init+0xb0>)
 8006dfa:	635a      	str	r2, [r3, #52]	; 0x34
  FC_T_PID.integratorMin = -50;
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	; (8006e28 <PID_init+0x9c>)
 8006dfe:	4a10      	ldr	r2, [pc, #64]	; (8006e40 <PID_init+0xb4>)
 8006e00:	639a      	str	r2, [r3, #56]	; 0x38
  FC_T_PID.controlMax = 255;
 8006e02:	4b09      	ldr	r3, [pc, #36]	; (8006e28 <PID_init+0x9c>)
 8006e04:	4a0f      	ldr	r2, [pc, #60]	; (8006e44 <PID_init+0xb8>)
 8006e06:	63da      	str	r2, [r3, #60]	; 0x3c
  FC_T_PID.controlMin = 0;
 8006e08:	4b07      	ldr	r3, [pc, #28]	; (8006e28 <PID_init+0x9c>)
 8006e0a:	f04f 0200 	mov.w	r2, #0
 8006e0e:	641a      	str	r2, [r3, #64]	; 0x40
  FC_T_PID.PIDtime = 0.001; //Podstawa czasu z jaką wykonuje się funkcja PIDstep() w [s]
 8006e10:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <PID_init+0x9c>)
 8006e12:	4a0d      	ldr	r2, [pc, #52]	; (8006e48 <PID_init+0xbc>)
 8006e14:	645a      	str	r2, [r3, #68]	; 0x44
  FC_T_PID.PIDtimeFactor = 1; //Mnożnik podstawy czasu
 8006e16:	4b04      	ldr	r3, [pc, #16]	; (8006e28 <PID_init+0x9c>)
 8006e18:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006e1c:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006e1e:	bf00      	nop
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr
 8006e28:	2000045c 	.word	0x2000045c
 8006e2c:	3ff33333 	.word	0x3ff33333
 8006e30:	3e4ccccd 	.word	0x3e4ccccd
 8006e34:	3951b717 	.word	0x3951b717
 8006e38:	42c80000 	.word	0x42c80000
 8006e3c:	43160000 	.word	0x43160000
 8006e40:	c2480000 	.word	0xc2480000
 8006e44:	437f0000 	.word	0x437f0000
 8006e48:	3a83126f 	.word	0x3a83126f

08006e4c <PIDstep>:
void PIDstep()
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
  static uint8_t time = 0;
  if (time >= FC_T_PID.PIDtimeFactor)
 8006e50:	4b76      	ldr	r3, [pc, #472]	; (800702c <PIDstep+0x1e0>)
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	ee07 3a90 	vmov	s15, r3
 8006e58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e5c:	4b74      	ldr	r3, [pc, #464]	; (8007030 <PIDstep+0x1e4>)
 8006e5e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8006e62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e6a:	f2c0 80d4 	blt.w	8007016 <PIDstep+0x1ca>
    {
      FC_T_PID.measurement = VALUES.FC_TEMP.value;
 8006e6e:	4b71      	ldr	r3, [pc, #452]	; (8007034 <PIDstep+0x1e8>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a6f      	ldr	r2, [pc, #444]	; (8007030 <PIDstep+0x1e4>)
 8006e74:	6053      	str	r3, [r2, #4]

      /*
       * część proporcjonalna
       */

      FC_T_PID.error = FC_T_PID.measurement - FC_T_PID.setValue;
 8006e76:	4b6e      	ldr	r3, [pc, #440]	; (8007030 <PIDstep+0x1e4>)
 8006e78:	ed93 7a01 	vldr	s14, [r3, #4]
 8006e7c:	4b6c      	ldr	r3, [pc, #432]	; (8007030 <PIDstep+0x1e4>)
 8006e7e:	edd3 7a00 	vldr	s15, [r3]
 8006e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e86:	4b6a      	ldr	r3, [pc, #424]	; (8007030 <PIDstep+0x1e4>)
 8006e88:	edc3 7a03 	vstr	s15, [r3, #12]
      FC_T_PID.proportional = FC_T_PID.error * FC_T_PID.Kp;
 8006e8c:	4b68      	ldr	r3, [pc, #416]	; (8007030 <PIDstep+0x1e4>)
 8006e8e:	ed93 7a03 	vldr	s14, [r3, #12]
 8006e92:	4b67      	ldr	r3, [pc, #412]	; (8007030 <PIDstep+0x1e4>)
 8006e94:	edd3 7a07 	vldr	s15, [r3, #28]
 8006e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e9c:	4b64      	ldr	r3, [pc, #400]	; (8007030 <PIDstep+0x1e4>)
 8006e9e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

      /*
       * część całkująca
       */

      FC_T_PID.iError = FC_T_PID.iError
 8006ea2:	4b63      	ldr	r3, [pc, #396]	; (8007030 <PIDstep+0x1e4>)
 8006ea4:	ed93 7a04 	vldr	s14, [r3, #16]
	  + FC_T_PID.PIDtime * FC_T_PID.PIDtimeFactor * 0.5f
 8006ea8:	4b61      	ldr	r3, [pc, #388]	; (8007030 <PIDstep+0x1e4>)
 8006eaa:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8006eae:	4b60      	ldr	r3, [pc, #384]	; (8007030 <PIDstep+0x1e4>)
 8006eb0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8006eb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006eb8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006ebc:	ee67 6aa6 	vmul.f32	s13, s15, s13
	      * (FC_T_PID.error + FC_T_PID.lastError); //Metoda trapezów suma dwóch następnych błędów podzielona na 2 pomnożona razy czas w [s] (wysokość trapezu)
 8006ec0:	4b5b      	ldr	r3, [pc, #364]	; (8007030 <PIDstep+0x1e4>)
 8006ec2:	ed93 6a03 	vldr	s12, [r3, #12]
 8006ec6:	4b5a      	ldr	r3, [pc, #360]	; (8007030 <PIDstep+0x1e4>)
 8006ec8:	edd3 7a06 	vldr	s15, [r3, #24]
 8006ecc:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
	  + FC_T_PID.PIDtime * FC_T_PID.PIDtimeFactor * 0.5f
 8006ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
      FC_T_PID.iError = FC_T_PID.iError
 8006ed8:	4b55      	ldr	r3, [pc, #340]	; (8007030 <PIDstep+0x1e4>)
 8006eda:	edc3 7a04 	vstr	s15, [r3, #16]
      if (FC_T_PID.iError >= FC_T_PID.integratorMax)
 8006ede:	4b54      	ldr	r3, [pc, #336]	; (8007030 <PIDstep+0x1e4>)
 8006ee0:	ed93 7a04 	vldr	s14, [r3, #16]
 8006ee4:	4b52      	ldr	r3, [pc, #328]	; (8007030 <PIDstep+0x1e4>)
 8006ee6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006eea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ef2:	db04      	blt.n	8006efe <PIDstep+0xb2>
	{
	  FC_T_PID.iError = FC_T_PID.integratorMax;
 8006ef4:	4b4e      	ldr	r3, [pc, #312]	; (8007030 <PIDstep+0x1e4>)
 8006ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef8:	4a4d      	ldr	r2, [pc, #308]	; (8007030 <PIDstep+0x1e4>)
 8006efa:	6113      	str	r3, [r2, #16]
 8006efc:	e00e      	b.n	8006f1c <PIDstep+0xd0>
	}
      else if (FC_T_PID.iError <= FC_T_PID.integratorMin)
 8006efe:	4b4c      	ldr	r3, [pc, #304]	; (8007030 <PIDstep+0x1e4>)
 8006f00:	ed93 7a04 	vldr	s14, [r3, #16]
 8006f04:	4b4a      	ldr	r3, [pc, #296]	; (8007030 <PIDstep+0x1e4>)
 8006f06:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006f0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f12:	d803      	bhi.n	8006f1c <PIDstep+0xd0>
	{
	  FC_T_PID.iError = FC_T_PID.integratorMin;
 8006f14:	4b46      	ldr	r3, [pc, #280]	; (8007030 <PIDstep+0x1e4>)
 8006f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f18:	4a45      	ldr	r2, [pc, #276]	; (8007030 <PIDstep+0x1e4>)
 8006f1a:	6113      	str	r3, [r2, #16]
	}
      FC_T_PID.integrator = FC_T_PID.iError * FC_T_PID.Ki;
 8006f1c:	4b44      	ldr	r3, [pc, #272]	; (8007030 <PIDstep+0x1e4>)
 8006f1e:	ed93 7a04 	vldr	s14, [r3, #16]
 8006f22:	4b43      	ldr	r3, [pc, #268]	; (8007030 <PIDstep+0x1e4>)
 8006f24:	edd3 7a08 	vldr	s15, [r3, #32]
 8006f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f2c:	4b40      	ldr	r3, [pc, #256]	; (8007030 <PIDstep+0x1e4>)
 8006f2e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

      /*
       * część różniczkująca
       */

      FC_T_PID.dError = (FC_T_PID.measurement - FC_T_PID.prevMeasurement)
 8006f32:	4b3f      	ldr	r3, [pc, #252]	; (8007030 <PIDstep+0x1e4>)
 8006f34:	ed93 7a01 	vldr	s14, [r3, #4]
 8006f38:	4b3d      	ldr	r3, [pc, #244]	; (8007030 <PIDstep+0x1e4>)
 8006f3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8006f3e:	ee77 6a67 	vsub.f32	s13, s14, s15
	  / (FC_T_PID.PIDtime * FC_T_PID.PIDtimeFactor);
 8006f42:	4b3b      	ldr	r3, [pc, #236]	; (8007030 <PIDstep+0x1e4>)
 8006f44:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006f48:	4b39      	ldr	r3, [pc, #228]	; (8007030 <PIDstep+0x1e4>)
 8006f4a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8006f4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
      FC_T_PID.dError = (FC_T_PID.measurement - FC_T_PID.prevMeasurement)
 8006f56:	4b36      	ldr	r3, [pc, #216]	; (8007030 <PIDstep+0x1e4>)
 8006f58:	edc3 7a05 	vstr	s15, [r3, #20]
      FC_T_PID.differentator = FC_T_PID.dError * FC_T_PID.Kd;
 8006f5c:	4b34      	ldr	r3, [pc, #208]	; (8007030 <PIDstep+0x1e4>)
 8006f5e:	ed93 7a05 	vldr	s14, [r3, #20]
 8006f62:	4b33      	ldr	r3, [pc, #204]	; (8007030 <PIDstep+0x1e4>)
 8006f64:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6c:	4b30      	ldr	r3, [pc, #192]	; (8007030 <PIDstep+0x1e4>)
 8006f6e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

      /*
       * wartość sterująca
       */

      FC_T_PID.controlValue = FC_T_PID.proportional + FC_T_PID.integrator
 8006f72:	4b2f      	ldr	r3, [pc, #188]	; (8007030 <PIDstep+0x1e4>)
 8006f74:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8006f78:	4b2d      	ldr	r3, [pc, #180]	; (8007030 <PIDstep+0x1e4>)
 8006f7a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006f7e:	ee37 7a27 	vadd.f32	s14, s14, s15
	  + FC_T_PID.differentator;
 8006f82:	4b2b      	ldr	r3, [pc, #172]	; (8007030 <PIDstep+0x1e4>)
 8006f84:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006f88:	ee77 7a27 	vadd.f32	s15, s14, s15
      FC_T_PID.controlValue = FC_T_PID.proportional + FC_T_PID.integrator
 8006f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f90:	ee17 2a90 	vmov	r2, s15
 8006f94:	4b26      	ldr	r3, [pc, #152]	; (8007030 <PIDstep+0x1e4>)
 8006f96:	64da      	str	r2, [r3, #76]	; 0x4c
      if (FC_T_PID.controlValue >= FC_T_PID.controlMax)
 8006f98:	4b25      	ldr	r3, [pc, #148]	; (8007030 <PIDstep+0x1e4>)
 8006f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9c:	ee07 3a90 	vmov	s15, r3
 8006fa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fa4:	4b22      	ldr	r3, [pc, #136]	; (8007030 <PIDstep+0x1e4>)
 8006fa6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8006faa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb2:	db09      	blt.n	8006fc8 <PIDstep+0x17c>
	{
	  FC_T_PID.controlValue = FC_T_PID.controlMax;
 8006fb4:	4b1e      	ldr	r3, [pc, #120]	; (8007030 <PIDstep+0x1e4>)
 8006fb6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8006fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fbe:	ee17 2a90 	vmov	r2, s15
 8006fc2:	4b1b      	ldr	r3, [pc, #108]	; (8007030 <PIDstep+0x1e4>)
 8006fc4:	64da      	str	r2, [r3, #76]	; 0x4c
 8006fc6:	e016      	b.n	8006ff6 <PIDstep+0x1aa>
	}
      else if (FC_T_PID.controlValue <= FC_T_PID.controlMin)
 8006fc8:	4b19      	ldr	r3, [pc, #100]	; (8007030 <PIDstep+0x1e4>)
 8006fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fcc:	ee07 3a90 	vmov	s15, r3
 8006fd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fd4:	4b16      	ldr	r3, [pc, #88]	; (8007030 <PIDstep+0x1e4>)
 8006fd6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006fda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe2:	d808      	bhi.n	8006ff6 <PIDstep+0x1aa>
	{
	  FC_T_PID.controlValue = FC_T_PID.controlMin;
 8006fe4:	4b12      	ldr	r3, [pc, #72]	; (8007030 <PIDstep+0x1e4>)
 8006fe6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fee:	ee17 2a90 	vmov	r2, s15
 8006ff2:	4b0f      	ldr	r3, [pc, #60]	; (8007030 <PIDstep+0x1e4>)
 8006ff4:	64da      	str	r2, [r3, #76]	; 0x4c

      /*
       * Przepisanie
       */

      FANS.controlValue = FC_T_PID.controlValue;
 8006ff6:	4b0e      	ldr	r3, [pc, #56]	; (8007030 <PIDstep+0x1e4>)
 8006ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ffa:	4a0f      	ldr	r2, [pc, #60]	; (8007038 <PIDstep+0x1ec>)
 8006ffc:	6053      	str	r3, [r2, #4]
      FC_T_PID.lastError = FC_T_PID.error;
 8006ffe:	4b0c      	ldr	r3, [pc, #48]	; (8007030 <PIDstep+0x1e4>)
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	4a0b      	ldr	r2, [pc, #44]	; (8007030 <PIDstep+0x1e4>)
 8007004:	6193      	str	r3, [r2, #24]
      FC_T_PID.prevMeasurement = FC_T_PID.measurement;
 8007006:	4b0a      	ldr	r3, [pc, #40]	; (8007030 <PIDstep+0x1e4>)
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	4a09      	ldr	r2, [pc, #36]	; (8007030 <PIDstep+0x1e4>)
 800700c:	6093      	str	r3, [r2, #8]
      time = 0;
 800700e:	4b07      	ldr	r3, [pc, #28]	; (800702c <PIDstep+0x1e0>)
 8007010:	2200      	movs	r2, #0
 8007012:	701a      	strb	r2, [r3, #0]
    }
  else
    {
      time++;
    }
}
 8007014:	e005      	b.n	8007022 <PIDstep+0x1d6>
      time++;
 8007016:	4b05      	ldr	r3, [pc, #20]	; (800702c <PIDstep+0x1e0>)
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	3301      	adds	r3, #1
 800701c:	b2da      	uxtb	r2, r3
 800701e:	4b03      	ldr	r3, [pc, #12]	; (800702c <PIDstep+0x1e0>)
 8007020:	701a      	strb	r2, [r3, #0]
}
 8007022:	bf00      	nop
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	20000030 	.word	0x20000030
 8007030:	2000045c 	.word	0x2000045c
 8007034:	20000414 	.word	0x20000414
 8007038:	2000040c 	.word	0x2000040c

0800703c <crc_calc_TX>:
  return crcSumOnMCU;

}

uint8_t crc_calc_TX(void)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
  uint8_t crcSumOnMCUTX = 0xFF;
 8007042:	23ff      	movs	r3, #255	; 0xff
 8007044:	71fb      	strb	r3, [r7, #7]
  uint8_t xbit, data1 = 1;
 8007046:	2301      	movs	r3, #1
 8007048:	70fb      	strb	r3, [r7, #3]
#define polynomial 0x7;

  for (uint8_t l = 0; l < TX_FRAME_LENGHT - 1; l++)
 800704a:	2300      	movs	r3, #0
 800704c:	717b      	strb	r3, [r7, #5]
 800704e:	e02e      	b.n	80070ae <crc_calc_TX+0x72>
    {
      uint8_t data = dataToTx[l];
 8007050:	797b      	ldrb	r3, [r7, #5]
 8007052:	4a1c      	ldr	r2, [pc, #112]	; (80070c4 <crc_calc_TX+0x88>)
 8007054:	5cd3      	ldrb	r3, [r2, r3]
 8007056:	70bb      	strb	r3, [r7, #2]
      xbit = data1 << 7;
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	01db      	lsls	r3, r3, #7
 800705c:	71bb      	strb	r3, [r7, #6]
      for (uint8_t k = sizeof(TX_FRAME_LENGHT - 1) * 8; k > 0; --k) // obliczanie wartosci najbardziej znaczacego bitu
 800705e:	2320      	movs	r3, #32
 8007060:	713b      	strb	r3, [r7, #4]
 8007062:	e01e      	b.n	80070a2 <crc_calc_TX+0x66>
	{
	  if (crcSumOnMCUTX & 0x80)    //jesli najbardziej znaczacy bit = 1
 8007064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007068:	2b00      	cmp	r3, #0
 800706a:	da07      	bge.n	800707c <crc_calc_TX+0x40>
	    {
	      crcSumOnMCUTX = (crcSumOnMCUTX << 1) ^ polynomial
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	b25b      	sxtb	r3, r3
 8007072:	f083 0307 	eor.w	r3, r3, #7
 8007076:	b25b      	sxtb	r3, r3
 8007078:	71fb      	strb	r3, [r7, #7]
 800707a:	e002      	b.n	8007082 <crc_calc_TX+0x46>
	      ; //XOR i leftshift
	    }
	  else
	    { //jesli = 0
	      crcSumOnMCUTX = (crcSumOnMCUTX << 1); //leftshift
 800707c:	79fb      	ldrb	r3, [r7, #7]
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	71fb      	strb	r3, [r7, #7]
	    }
	  if (data & xbit)
 8007082:	78ba      	ldrb	r2, [r7, #2]
 8007084:	79bb      	ldrb	r3, [r7, #6]
 8007086:	4013      	ands	r3, r2
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <crc_calc_TX+0x5a>
	    {
	      crcSumOnMCUTX = crcSumOnMCUTX ^ polynomial
 800708e:	79fb      	ldrb	r3, [r7, #7]
 8007090:	f083 0307 	eor.w	r3, r3, #7
 8007094:	71fb      	strb	r3, [r7, #7]
	      ;
	    }
	  xbit >>= 1;
 8007096:	79bb      	ldrb	r3, [r7, #6]
 8007098:	085b      	lsrs	r3, r3, #1
 800709a:	71bb      	strb	r3, [r7, #6]
      for (uint8_t k = sizeof(TX_FRAME_LENGHT - 1) * 8; k > 0; --k) // obliczanie wartosci najbardziej znaczacego bitu
 800709c:	793b      	ldrb	r3, [r7, #4]
 800709e:	3b01      	subs	r3, #1
 80070a0:	713b      	strb	r3, [r7, #4]
 80070a2:	793b      	ldrb	r3, [r7, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1dd      	bne.n	8007064 <crc_calc_TX+0x28>
  for (uint8_t l = 0; l < TX_FRAME_LENGHT - 1; l++)
 80070a8:	797b      	ldrb	r3, [r7, #5]
 80070aa:	3301      	adds	r3, #1
 80070ac:	717b      	strb	r3, [r7, #5]
 80070ae:	797b      	ldrb	r3, [r7, #5]
 80070b0:	2b13      	cmp	r3, #19
 80070b2:	d9cd      	bls.n	8007050 <crc_calc_TX+0x14>
	}
    }
  return crcSumOnMCUTX;
 80070b4:	79fb      	ldrb	r3, [r7, #7]

}
 80070b6:	4618      	mov	r0, r3
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	20000040 	.word	0x20000040

080070c8 <rs485_init>:
void rs485_init(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  HAL_UART_Receive_DMA(&UART_PORT_RS485, &RS485_BUFF.rx, 1); //Rozpocznij nasluchiwanie
 80070cc:	2201      	movs	r2, #1
 80070ce:	4904      	ldr	r1, [pc, #16]	; (80070e0 <rs485_init+0x18>)
 80070d0:	4804      	ldr	r0, [pc, #16]	; (80070e4 <rs485_init+0x1c>)
 80070d2:	f7fe fc91 	bl	80059f8 <HAL_UART_Receive_DMA>
  prepareNewDataToSend();			//Przygotuj nowy pakiet danych
 80070d6:	f000 f83b 	bl	8007150 <prepareNewDataToSend>
}
 80070da:	bf00      	nop
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20000059 	.word	0x20000059
 80070e4:	20000380 	.word	0x20000380

080070e8 <HAL_UART_RxCpltCallback>:
      rs485_flt = RS485_NEW_DATA_TIMEOUT;
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_DMA(&UART_PORT_RS485, &RS485_BUFF.rx, 1); //Ponownie rozpocznij nasluchiwanie nasluchiwanie
 80070f0:	2201      	movs	r2, #1
 80070f2:	4911      	ldr	r1, [pc, #68]	; (8007138 <HAL_UART_RxCpltCallback+0x50>)
 80070f4:	4811      	ldr	r0, [pc, #68]	; (800713c <HAL_UART_RxCpltCallback+0x54>)
 80070f6:	f7fe fc7f 	bl	80059f8 <HAL_UART_Receive_DMA>

  intRxCplt = 1;	//Ustaw flage informujaca o otrzymaniu nowych danych
 80070fa:	4b11      	ldr	r3, [pc, #68]	; (8007140 <HAL_UART_RxCpltCallback+0x58>)
 80070fc:	2201      	movs	r2, #1
 80070fe:	701a      	strb	r2, [r3, #0]

  if (posInRxTab > RX_FRAME_LENGHT)
 8007100:	4b10      	ldr	r3, [pc, #64]	; (8007144 <HAL_UART_RxCpltCallback+0x5c>)
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b06      	cmp	r3, #6
 8007108:	d902      	bls.n	8007110 <HAL_UART_RxCpltCallback+0x28>
    posInRxTab = 0;	//Zabezpieczenie przed wyjsciem poza zakres tablicy
 800710a:	4b0e      	ldr	r3, [pc, #56]	; (8007144 <HAL_UART_RxCpltCallback+0x5c>)
 800710c:	2200      	movs	r2, #0
 800710e:	801a      	strh	r2, [r3, #0]

  dataFromRx[posInRxTab] = RS485_BUFF.rx;//Przypisz otrzymany bajt do analizowanej tablicy
 8007110:	4b0c      	ldr	r3, [pc, #48]	; (8007144 <HAL_UART_RxCpltCallback+0x5c>)
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29b      	uxth	r3, r3
 8007116:	461a      	mov	r2, r3
 8007118:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <HAL_UART_RxCpltCallback+0x60>)
 800711a:	7859      	ldrb	r1, [r3, #1]
 800711c:	4b0b      	ldr	r3, [pc, #44]	; (800714c <HAL_UART_RxCpltCallback+0x64>)
 800711e:	5499      	strb	r1, [r3, r2]
  posInRxTab++;
 8007120:	4b08      	ldr	r3, [pc, #32]	; (8007144 <HAL_UART_RxCpltCallback+0x5c>)
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	b29b      	uxth	r3, r3
 8007126:	3301      	adds	r3, #1
 8007128:	b29a      	uxth	r2, r3
 800712a:	4b06      	ldr	r3, [pc, #24]	; (8007144 <HAL_UART_RxCpltCallback+0x5c>)
 800712c:	801a      	strh	r2, [r3, #0]
}
 800712e:	bf00      	nop
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	20000059 	.word	0x20000059
 800713c:	20000380 	.word	0x20000380
 8007140:	2000003c 	.word	0x2000003c
 8007144:	2000003a 	.word	0x2000003a
 8007148:	20000058 	.word	0x20000058
 800714c:	20000034 	.word	0x20000034

08007150 <prepareNewDataToSend>:
/**
 * @fn prepareNewDataToSend(void)
 * @brief Funkcja przygotowujaca dane do wysylki, wykorzystana wewnatrz sendData(void)
 */
static void prepareNewDataToSend(void)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0

  uint8_t j = 0;
 8007156:	2300      	movs	r3, #0
 8007158:	71fb      	strb	r3, [r7, #7]
  dataToTx[j] = emergency;
 800715a:	79fb      	ldrb	r3, [r7, #7]
 800715c:	4a58      	ldr	r2, [pc, #352]	; (80072c0 <prepareNewDataToSend+0x170>)
 800715e:	7811      	ldrb	r1, [r2, #0]
 8007160:	4a58      	ldr	r2, [pc, #352]	; (80072c4 <prepareNewDataToSend+0x174>)
 8007162:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_V.array[0];
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	3301      	adds	r3, #1
 8007168:	71fb      	strb	r3, [r7, #7]
 800716a:	79fb      	ldrb	r3, [r7, #7]
 800716c:	4a56      	ldr	r2, [pc, #344]	; (80072c8 <prepareNewDataToSend+0x178>)
 800716e:	7c11      	ldrb	r1, [r2, #16]
 8007170:	4a54      	ldr	r2, [pc, #336]	; (80072c4 <prepareNewDataToSend+0x174>)
 8007172:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_V.array[1];
 8007174:	79fb      	ldrb	r3, [r7, #7]
 8007176:	3301      	adds	r3, #1
 8007178:	71fb      	strb	r3, [r7, #7]
 800717a:	79fb      	ldrb	r3, [r7, #7]
 800717c:	4a52      	ldr	r2, [pc, #328]	; (80072c8 <prepareNewDataToSend+0x178>)
 800717e:	7c51      	ldrb	r1, [r2, #17]
 8007180:	4a50      	ldr	r2, [pc, #320]	; (80072c4 <prepareNewDataToSend+0x174>)
 8007182:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_V.array[2];
 8007184:	79fb      	ldrb	r3, [r7, #7]
 8007186:	3301      	adds	r3, #1
 8007188:	71fb      	strb	r3, [r7, #7]
 800718a:	79fb      	ldrb	r3, [r7, #7]
 800718c:	4a4e      	ldr	r2, [pc, #312]	; (80072c8 <prepareNewDataToSend+0x178>)
 800718e:	7c91      	ldrb	r1, [r2, #18]
 8007190:	4a4c      	ldr	r2, [pc, #304]	; (80072c4 <prepareNewDataToSend+0x174>)
 8007192:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_V.array[3];
 8007194:	79fb      	ldrb	r3, [r7, #7]
 8007196:	3301      	adds	r3, #1
 8007198:	71fb      	strb	r3, [r7, #7]
 800719a:	79fb      	ldrb	r3, [r7, #7]
 800719c:	4a4a      	ldr	r2, [pc, #296]	; (80072c8 <prepareNewDataToSend+0x178>)
 800719e:	7cd1      	ldrb	r1, [r2, #19]
 80071a0:	4a48      	ldr	r2, [pc, #288]	; (80072c4 <prepareNewDataToSend+0x174>)
 80071a2:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_TEMP.array[0];
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	3301      	adds	r3, #1
 80071a8:	71fb      	strb	r3, [r7, #7]
 80071aa:	79fb      	ldrb	r3, [r7, #7]
 80071ac:	4a46      	ldr	r2, [pc, #280]	; (80072c8 <prepareNewDataToSend+0x178>)
 80071ae:	7811      	ldrb	r1, [r2, #0]
 80071b0:	4a44      	ldr	r2, [pc, #272]	; (80072c4 <prepareNewDataToSend+0x174>)
 80071b2:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_TEMP.array[1];
 80071b4:	79fb      	ldrb	r3, [r7, #7]
 80071b6:	3301      	adds	r3, #1
 80071b8:	71fb      	strb	r3, [r7, #7]
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	4a42      	ldr	r2, [pc, #264]	; (80072c8 <prepareNewDataToSend+0x178>)
 80071be:	7851      	ldrb	r1, [r2, #1]
 80071c0:	4a40      	ldr	r2, [pc, #256]	; (80072c4 <prepareNewDataToSend+0x174>)
 80071c2:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_TEMP.array[2];
 80071c4:	79fb      	ldrb	r3, [r7, #7]
 80071c6:	3301      	adds	r3, #1
 80071c8:	71fb      	strb	r3, [r7, #7]
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	4a3e      	ldr	r2, [pc, #248]	; (80072c8 <prepareNewDataToSend+0x178>)
 80071ce:	7891      	ldrb	r1, [r2, #2]
 80071d0:	4a3c      	ldr	r2, [pc, #240]	; (80072c4 <prepareNewDataToSend+0x174>)
 80071d2:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_TEMP.array[3];
 80071d4:	79fb      	ldrb	r3, [r7, #7]
 80071d6:	3301      	adds	r3, #1
 80071d8:	71fb      	strb	r3, [r7, #7]
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	4a3a      	ldr	r2, [pc, #232]	; (80072c8 <prepareNewDataToSend+0x178>)
 80071de:	78d1      	ldrb	r1, [r2, #3]
 80071e0:	4a38      	ldr	r2, [pc, #224]	; (80072c4 <prepareNewDataToSend+0x174>)
 80071e2:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_C.array[0];
 80071e4:	79fb      	ldrb	r3, [r7, #7]
 80071e6:	3301      	adds	r3, #1
 80071e8:	71fb      	strb	r3, [r7, #7]
 80071ea:	79fb      	ldrb	r3, [r7, #7]
 80071ec:	4a36      	ldr	r2, [pc, #216]	; (80072c8 <prepareNewDataToSend+0x178>)
 80071ee:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 80071f2:	4a34      	ldr	r2, [pc, #208]	; (80072c4 <prepareNewDataToSend+0x174>)
 80071f4:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_C.array[1];
 80071f6:	79fb      	ldrb	r3, [r7, #7]
 80071f8:	3301      	adds	r3, #1
 80071fa:	71fb      	strb	r3, [r7, #7]
 80071fc:	79fb      	ldrb	r3, [r7, #7]
 80071fe:	4a32      	ldr	r2, [pc, #200]	; (80072c8 <prepareNewDataToSend+0x178>)
 8007200:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 8007204:	4a2f      	ldr	r2, [pc, #188]	; (80072c4 <prepareNewDataToSend+0x174>)
 8007206:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_C.array[2];
 8007208:	79fb      	ldrb	r3, [r7, #7]
 800720a:	3301      	adds	r3, #1
 800720c:	71fb      	strb	r3, [r7, #7]
 800720e:	79fb      	ldrb	r3, [r7, #7]
 8007210:	4a2d      	ldr	r2, [pc, #180]	; (80072c8 <prepareNewDataToSend+0x178>)
 8007212:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
 8007216:	4a2b      	ldr	r2, [pc, #172]	; (80072c4 <prepareNewDataToSend+0x174>)
 8007218:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_C.array[3];
 800721a:	79fb      	ldrb	r3, [r7, #7]
 800721c:	3301      	adds	r3, #1
 800721e:	71fb      	strb	r3, [r7, #7]
 8007220:	79fb      	ldrb	r3, [r7, #7]
 8007222:	4a29      	ldr	r2, [pc, #164]	; (80072c8 <prepareNewDataToSend+0x178>)
 8007224:	f892 1033 	ldrb.w	r1, [r2, #51]	; 0x33
 8007228:	4a26      	ldr	r2, [pc, #152]	; (80072c4 <prepareNewDataToSend+0x174>)
 800722a:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_V.array[0];
 800722c:	79fb      	ldrb	r3, [r7, #7]
 800722e:	3301      	adds	r3, #1
 8007230:	71fb      	strb	r3, [r7, #7]
 8007232:	79fb      	ldrb	r3, [r7, #7]
 8007234:	4a24      	ldr	r2, [pc, #144]	; (80072c8 <prepareNewDataToSend+0x178>)
 8007236:	f892 1020 	ldrb.w	r1, [r2, #32]
 800723a:	4a22      	ldr	r2, [pc, #136]	; (80072c4 <prepareNewDataToSend+0x174>)
 800723c:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_V.array[1];
 800723e:	79fb      	ldrb	r3, [r7, #7]
 8007240:	3301      	adds	r3, #1
 8007242:	71fb      	strb	r3, [r7, #7]
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	4a20      	ldr	r2, [pc, #128]	; (80072c8 <prepareNewDataToSend+0x178>)
 8007248:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 800724c:	4a1d      	ldr	r2, [pc, #116]	; (80072c4 <prepareNewDataToSend+0x174>)
 800724e:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_V.array[2];
 8007250:	79fb      	ldrb	r3, [r7, #7]
 8007252:	3301      	adds	r3, #1
 8007254:	71fb      	strb	r3, [r7, #7]
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	4a1b      	ldr	r2, [pc, #108]	; (80072c8 <prepareNewDataToSend+0x178>)
 800725a:	f892 1022 	ldrb.w	r1, [r2, #34]	; 0x22
 800725e:	4a19      	ldr	r2, [pc, #100]	; (80072c4 <prepareNewDataToSend+0x174>)
 8007260:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_V.array[3];
 8007262:	79fb      	ldrb	r3, [r7, #7]
 8007264:	3301      	adds	r3, #1
 8007266:	71fb      	strb	r3, [r7, #7]
 8007268:	79fb      	ldrb	r3, [r7, #7]
 800726a:	4a17      	ldr	r2, [pc, #92]	; (80072c8 <prepareNewDataToSend+0x178>)
 800726c:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 8007270:	4a14      	ldr	r2, [pc, #80]	; (80072c4 <prepareNewDataToSend+0x174>)
 8007272:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = 2;
 8007274:	79fb      	ldrb	r3, [r7, #7]
 8007276:	3301      	adds	r3, #1
 8007278:	71fb      	strb	r3, [r7, #7]
 800727a:	79fb      	ldrb	r3, [r7, #7]
 800727c:	4a11      	ldr	r2, [pc, #68]	; (80072c4 <prepareNewDataToSend+0x174>)
 800727e:	2102      	movs	r1, #2
 8007280:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = 2;
 8007282:	79fb      	ldrb	r3, [r7, #7]
 8007284:	3301      	adds	r3, #1
 8007286:	71fb      	strb	r3, [r7, #7]
 8007288:	79fb      	ldrb	r3, [r7, #7]
 800728a:	4a0e      	ldr	r2, [pc, #56]	; (80072c4 <prepareNewDataToSend+0x174>)
 800728c:	2102      	movs	r1, #2
 800728e:	54d1      	strb	r1, [r2, r3]
   dataToTx[++j] = 16;
   dataToTx[++j] = 17;
   dataToTx[++j] = 18;
   dataToTx[++j] = 19;
   dataToTx[++j] = emergency;*/
  dataToTx[++j] = EOT_BYTE;
 8007290:	79fb      	ldrb	r3, [r7, #7]
 8007292:	3301      	adds	r3, #1
 8007294:	71fb      	strb	r3, [r7, #7]
 8007296:	79fb      	ldrb	r3, [r7, #7]
 8007298:	4a0a      	ldr	r2, [pc, #40]	; (80072c4 <prepareNewDataToSend+0x174>)
 800729a:	2117      	movs	r1, #23
 800729c:	54d1      	strb	r1, [r2, r3]
  //OBLICZ SUME KONTROLNA
  //uint8_t calculatedCrcSumOnMCU = HAL_CRC_Calculate(&hcrc, (uint32_t*)dataToTx, (TX_FRAME_LENGHT - 2) );
  uint8_t calculatedCrcSumOnMCU = crc_calc_TX();
 800729e:	f7ff fecd 	bl	800703c <crc_calc_TX>
 80072a2:	4603      	mov	r3, r0
 80072a4:	71bb      	strb	r3, [r7, #6]

  SumaKontrolnaBoKtosMimeczyDupe = crc_calc_TX();
 80072a6:	f7ff fec9 	bl	800703c <crc_calc_TX>
 80072aa:	4603      	mov	r3, r0
 80072ac:	461a      	mov	r2, r3
 80072ae:	4b07      	ldr	r3, [pc, #28]	; (80072cc <prepareNewDataToSend+0x17c>)
 80072b0:	701a      	strb	r2, [r3, #0]
  //Wrzuc obliczona sume kontrolna na koniec wysylanej tablicy
  dataToTx[TX_FRAME_LENGHT - 1] = calculatedCrcSumOnMCU;
 80072b2:	4a04      	ldr	r2, [pc, #16]	; (80072c4 <prepareNewDataToSend+0x174>)
 80072b4:	79bb      	ldrb	r3, [r7, #6]
 80072b6:	7513      	strb	r3, [r2, #20]
}
 80072b8:	bf00      	nop
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	20000055 	.word	0x20000055
 80072c4:	20000040 	.word	0x20000040
 80072c8:	20000414 	.word	0x20000414
 80072cc:	20000056 	.word	0x20000056

080072d0 <timers_init>:
/**
 * @fn timers_init(void)
 * @brief Funkcja inicjalizujaca timery
 */
void timers_init(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim6);			//Inicjalizuj TIM6 pracujacy z czestotliwoscia 10kHz
 80072d4:	4803      	ldr	r0, [pc, #12]	; (80072e4 <timers_init+0x14>)
 80072d6:	f7fc fec1 	bl	800405c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);			//Inicjalizuj TIM7 pracujacy z czestotliwoscia 100kHz
 80072da:	4803      	ldr	r0, [pc, #12]	; (80072e8 <timers_init+0x18>)
 80072dc:	f7fc febe 	bl	800405c <HAL_TIM_Base_Start_IT>
}
 80072e0:	bf00      	nop
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	2000020c 	.word	0x2000020c
 80072e8:	200002f0 	.word	0x200002f0

080072ec <timers_step>:
/**
 * @fn timers_main(void)
 * @brief Glowna funkcja odpowiadajaca za interwaly czasowe wykorzystywane w systemie
 */
static inline void timers_step(void)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
  timers_tick1kHz = 1;
 80072f0:	4b03      	ldr	r3, [pc, #12]	; (8007300 <timers_step+0x14>)
 80072f2:	2201      	movs	r2, #1
 80072f4:	701a      	strb	r2, [r3, #0]

  setSystemOperatingTime();
 80072f6:	f000 f805 	bl	8007304 <setSystemOperatingTime>
}
 80072fa:	bf00      	nop
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	200004b4 	.word	0x200004b4

08007304 <setSystemOperatingTime>:
/**
 * @fn setSystemOperatingTime(void)
 * @brief Funkcja przeliczajaca czas pracy systemu na milisekundy, sekundy, minuty oraz godziny
 */
static inline void setSystemOperatingTime(void)
{
 8007304:	b480      	push	{r7}
 8007306:	af00      	add	r7, sp, #0
  timers_mainTimeMiliseconds++;
 8007308:	4b1c      	ldr	r3, [pc, #112]	; (800737c <setSystemOperatingTime+0x78>)
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	b29b      	uxth	r3, r3
 800730e:	3301      	adds	r3, #1
 8007310:	b29a      	uxth	r2, r3
 8007312:	4b1a      	ldr	r3, [pc, #104]	; (800737c <setSystemOperatingTime+0x78>)
 8007314:	801a      	strh	r2, [r3, #0]

  //Sekundy
  if (timers_mainTimeMiliseconds >= PERIOD_1S)
 8007316:	4b19      	ldr	r3, [pc, #100]	; (800737c <setSystemOperatingTime+0x78>)
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	b29b      	uxth	r3, r3
 800731c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007320:	d309      	bcc.n	8007336 <setSystemOperatingTime+0x32>
    {
      timers_mainTimeMiliseconds = 0;
 8007322:	4b16      	ldr	r3, [pc, #88]	; (800737c <setSystemOperatingTime+0x78>)
 8007324:	2200      	movs	r2, #0
 8007326:	801a      	strh	r2, [r3, #0]
      timers_mainTimeSeconds++;
 8007328:	4b15      	ldr	r3, [pc, #84]	; (8007380 <setSystemOperatingTime+0x7c>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	3301      	adds	r3, #1
 8007330:	b2da      	uxtb	r2, r3
 8007332:	4b13      	ldr	r3, [pc, #76]	; (8007380 <setSystemOperatingTime+0x7c>)
 8007334:	701a      	strb	r2, [r3, #0]
    }

  //Minuty
  if (timers_mainTimeSeconds >= 60)
 8007336:	4b12      	ldr	r3, [pc, #72]	; (8007380 <setSystemOperatingTime+0x7c>)
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b3b      	cmp	r3, #59	; 0x3b
 800733e:	d909      	bls.n	8007354 <setSystemOperatingTime+0x50>
    {
      timers_mainTimeSeconds = 0;
 8007340:	4b0f      	ldr	r3, [pc, #60]	; (8007380 <setSystemOperatingTime+0x7c>)
 8007342:	2200      	movs	r2, #0
 8007344:	701a      	strb	r2, [r3, #0]
      timers_mainTimeMinutes++;
 8007346:	4b0f      	ldr	r3, [pc, #60]	; (8007384 <setSystemOperatingTime+0x80>)
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	3301      	adds	r3, #1
 800734e:	b2da      	uxtb	r2, r3
 8007350:	4b0c      	ldr	r3, [pc, #48]	; (8007384 <setSystemOperatingTime+0x80>)
 8007352:	701a      	strb	r2, [r3, #0]
    }

  //Godziny
  if (timers_mainTimeMinutes >= 60)
 8007354:	4b0b      	ldr	r3, [pc, #44]	; (8007384 <setSystemOperatingTime+0x80>)
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b3b      	cmp	r3, #59	; 0x3b
 800735c:	d909      	bls.n	8007372 <setSystemOperatingTime+0x6e>
    {
      timers_mainTimeMinutes = 0;
 800735e:	4b09      	ldr	r3, [pc, #36]	; (8007384 <setSystemOperatingTime+0x80>)
 8007360:	2200      	movs	r2, #0
 8007362:	701a      	strb	r2, [r3, #0]
      timers_mainTimeHours++;
 8007364:	4b08      	ldr	r3, [pc, #32]	; (8007388 <setSystemOperatingTime+0x84>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	3301      	adds	r3, #1
 800736c:	b2da      	uxtb	r2, r3
 800736e:	4b06      	ldr	r3, [pc, #24]	; (8007388 <setSystemOperatingTime+0x84>)
 8007370:	701a      	strb	r2, [r3, #0]
    }
}
 8007372:	bf00      	nop
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	200004b2 	.word	0x200004b2
 8007380:	200004c4 	.word	0x200004c4
 8007384:	200004bc 	.word	0x200004bc
 8007388:	200004b5 	.word	0x200004b5

0800738c <timers_beforeStep1kHz>:
/**
 * @fn timers_beforeStep1kHz(void)
 * @brief Funkcja sluzaca do obliczania czasu trwania petli hydrogreen_step(), wywolac przed hydrogreen_step()
 */
void timers_beforeStep1kHz(void)
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
  timers_sysCycle100kHzCnt = 0;
 8007390:	4b03      	ldr	r3, [pc, #12]	; (80073a0 <timers_beforeStep1kHz+0x14>)
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
}
 8007396:	bf00      	nop
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	2000005c 	.word	0x2000005c

080073a4 <timers_afterStep1kHz>:
/**
 * @fn timers_afterStep1kHz(void)
 * @brief Funkcja sluzaca do obliczania czasu trwania petli hydrogreen_step(), wywolac po hydrogreen_step()
 */
void timers_afterStep1kHz(void)
{
 80073a4:	b480      	push	{r7}
 80073a6:	af00      	add	r7, sp, #0
  static uint32_t actSysCyclePeriod;
  static uint32_t avgSysCyclePeriodSum;
  static uint16_t avgCnt;

  //Warunek wykorzystywany przy inicjalizacji systemu (tylko raz)
  if (!initFlag)
 80073a8:	4b2a      	ldr	r3, [pc, #168]	; (8007454 <timers_afterStep1kHz+0xb0>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10b      	bne.n	80073c8 <timers_afterStep1kHz+0x24>
    {
      timers_minSysCyclePeriod = 10 * timers_sysCycle100kHzCnt;
 80073b0:	4b29      	ldr	r3, [pc, #164]	; (8007458 <timers_afterStep1kHz+0xb4>)
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	005b      	lsls	r3, r3, #1
 80073bc:	461a      	mov	r2, r3
 80073be:	4b27      	ldr	r3, [pc, #156]	; (800745c <timers_afterStep1kHz+0xb8>)
 80073c0:	601a      	str	r2, [r3, #0]
      initFlag = 1;
 80073c2:	4b24      	ldr	r3, [pc, #144]	; (8007454 <timers_afterStep1kHz+0xb0>)
 80073c4:	2201      	movs	r2, #1
 80073c6:	701a      	strb	r2, [r3, #0]
    }

  actSysCyclePeriod = 10 * timers_sysCycle100kHzCnt; 			//Przeliczenie otrzymanej wartosci na mikrosekundy
 80073c8:	4b23      	ldr	r3, [pc, #140]	; (8007458 <timers_afterStep1kHz+0xb4>)
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	4613      	mov	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	461a      	mov	r2, r3
 80073d6:	4b22      	ldr	r3, [pc, #136]	; (8007460 <timers_afterStep1kHz+0xbc>)
 80073d8:	601a      	str	r2, [r3, #0]

  timers_sysCycle100kHzCnt = 0;
 80073da:	4b1f      	ldr	r3, [pc, #124]	; (8007458 <timers_afterStep1kHz+0xb4>)
 80073dc:	2200      	movs	r2, #0
 80073de:	601a      	str	r2, [r3, #0]

  //Oblicz sredni czas trwania cyklu ze 100 probek
  if (avgCnt <= 100)
 80073e0:	4b20      	ldr	r3, [pc, #128]	; (8007464 <timers_afterStep1kHz+0xc0>)
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	2b64      	cmp	r3, #100	; 0x64
 80073e6:	d80d      	bhi.n	8007404 <timers_afterStep1kHz+0x60>
    {
      avgSysCyclePeriodSum = avgSysCyclePeriodSum + actSysCyclePeriod;
 80073e8:	4b1f      	ldr	r3, [pc, #124]	; (8007468 <timers_afterStep1kHz+0xc4>)
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	4b1c      	ldr	r3, [pc, #112]	; (8007460 <timers_afterStep1kHz+0xbc>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4413      	add	r3, r2
 80073f2:	4a1d      	ldr	r2, [pc, #116]	; (8007468 <timers_afterStep1kHz+0xc4>)
 80073f4:	6013      	str	r3, [r2, #0]
      avgCnt++;
 80073f6:	4b1b      	ldr	r3, [pc, #108]	; (8007464 <timers_afterStep1kHz+0xc0>)
 80073f8:	881b      	ldrh	r3, [r3, #0]
 80073fa:	3301      	adds	r3, #1
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	4b19      	ldr	r3, [pc, #100]	; (8007464 <timers_afterStep1kHz+0xc0>)
 8007400:	801a      	strh	r2, [r3, #0]
 8007402:	e00d      	b.n	8007420 <timers_afterStep1kHz+0x7c>
    }
  else
    {
      timers_avgSysCyclePeriod = avgSysCyclePeriodSum / avgCnt;
 8007404:	4b18      	ldr	r3, [pc, #96]	; (8007468 <timers_afterStep1kHz+0xc4>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a16      	ldr	r2, [pc, #88]	; (8007464 <timers_afterStep1kHz+0xc0>)
 800740a:	8812      	ldrh	r2, [r2, #0]
 800740c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007410:	4a16      	ldr	r2, [pc, #88]	; (800746c <timers_afterStep1kHz+0xc8>)
 8007412:	6013      	str	r3, [r2, #0]
      avgSysCyclePeriodSum = 0;
 8007414:	4b14      	ldr	r3, [pc, #80]	; (8007468 <timers_afterStep1kHz+0xc4>)
 8007416:	2200      	movs	r2, #0
 8007418:	601a      	str	r2, [r3, #0]
      avgCnt = 0;
 800741a:	4b12      	ldr	r3, [pc, #72]	; (8007464 <timers_afterStep1kHz+0xc0>)
 800741c:	2200      	movs	r2, #0
 800741e:	801a      	strh	r2, [r3, #0]
    }

  //Najkrotszy czas trwania cyklu
  if (actSysCyclePeriod < timers_minSysCyclePeriod)
 8007420:	4b0f      	ldr	r3, [pc, #60]	; (8007460 <timers_afterStep1kHz+0xbc>)
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	4b0d      	ldr	r3, [pc, #52]	; (800745c <timers_afterStep1kHz+0xb8>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	429a      	cmp	r2, r3
 800742a:	d203      	bcs.n	8007434 <timers_afterStep1kHz+0x90>
    {
      timers_minSysCyclePeriod = actSysCyclePeriod;
 800742c:	4b0c      	ldr	r3, [pc, #48]	; (8007460 <timers_afterStep1kHz+0xbc>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a0a      	ldr	r2, [pc, #40]	; (800745c <timers_afterStep1kHz+0xb8>)
 8007432:	6013      	str	r3, [r2, #0]
    }

  //Najdluzszy czas trwania cyklu
  if (actSysCyclePeriod > timers_maxSysCyclePeriod)
 8007434:	4b0a      	ldr	r3, [pc, #40]	; (8007460 <timers_afterStep1kHz+0xbc>)
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	4b0d      	ldr	r3, [pc, #52]	; (8007470 <timers_afterStep1kHz+0xcc>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	429a      	cmp	r2, r3
 800743e:	d903      	bls.n	8007448 <timers_afterStep1kHz+0xa4>
    {
      timers_maxSysCyclePeriod = actSysCyclePeriod;
 8007440:	4b07      	ldr	r3, [pc, #28]	; (8007460 <timers_afterStep1kHz+0xbc>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a0a      	ldr	r2, [pc, #40]	; (8007470 <timers_afterStep1kHz+0xcc>)
 8007446:	6013      	str	r3, [r2, #0]
    }
}
 8007448:	bf00      	nop
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	20000060 	.word	0x20000060
 8007458:	2000005c 	.word	0x2000005c
 800745c:	200004c0 	.word	0x200004c0
 8007460:	20000064 	.word	0x20000064
 8007464:	20000068 	.word	0x20000068
 8007468:	2000006c 	.word	0x2000006c
 800746c:	200004c8 	.word	0x200004c8
 8007470:	200004b8 	.word	0x200004b8

08007474 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
  timers_step();
 8007478:	f7ff ff38 	bl	80072ec <timers_step>
}
 800747c:	bf00      	nop
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a0a      	ldr	r2, [pc, #40]	; (80074b8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d102      	bne.n	8007498 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
      timers_tick10kHz = 1;
 8007492:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8007494:	2201      	movs	r2, #1
 8007496:	701a      	strb	r2, [r3, #0]
    }

  if (htim->Instance == TIM7)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a08      	ldr	r2, [pc, #32]	; (80074c0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d104      	bne.n	80074ac <HAL_TIM_PeriodElapsedCallback+0x2c>
    {
      timers_sysCycle100kHzCnt++;
 80074a2:	4b08      	ldr	r3, [pc, #32]	; (80074c4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3301      	adds	r3, #1
 80074a8:	4a06      	ldr	r2, [pc, #24]	; (80074c4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80074aa:	6013      	str	r3, [r2, #0]
    }
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr
 80074b8:	40001000 	.word	0x40001000
 80074bc:	200004b0 	.word	0x200004b0
 80074c0:	40001400 	.word	0x40001400
 80074c4:	2000005c 	.word	0x2000005c

080074c8 <watchdog_init>:
/**
* @fn watchdog_init(void)
* @brief Funkcja sprawdzajaca przyczyne zresetowania systemu i inicjalizujaca watchdoga
*/
void watchdog_init(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b0a0      	sub	sp, #128	; 0x80
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80074d6:	fa93 f3a3 	rbit	r3, r3
 80074da:	67bb      	str	r3, [r7, #120]	; 0x78
 80074dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074e0:	677b      	str	r3, [r7, #116]	; 0x74
 80074e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074e4:	fa93 f3a3 	rbit	r3, r3
 80074e8:	673b      	str	r3, [r7, #112]	; 0x70
 80074ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f2:	fa93 f3a3 	rbit	r3, r3
 80074f6:	66bb      	str	r3, [r7, #104]	; 0x68
  //Warunek sprawdzajacy czy system zostal zresetowany z powodu zaniku zasilania
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET)
 80074f8:	4b5a      	ldr	r3, [pc, #360]	; (8007664 <watchdog_init+0x19c>)
 80074fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007500:	667b      	str	r3, [r7, #100]	; 0x64
 8007502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007504:	fa93 f3a3 	rbit	r3, r3
 8007508:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800750a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800750c:	fab3 f383 	clz	r3, r3
 8007510:	b2db      	uxtb	r3, r3
 8007512:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007516:	b2db      	uxtb	r3, r3
 8007518:	f003 031f 	and.w	r3, r3, #31
 800751c:	2101      	movs	r1, #1
 800751e:	fa01 f303 	lsl.w	r3, r1, r3
 8007522:	4013      	ands	r3, r2
 8007524:	2b00      	cmp	r3, #0
 8007526:	d003      	beq.n	8007530 <watchdog_init+0x68>
    {
      watchdog_flt = WATCHDOG_FLT_LPWRRST;
 8007528:	4b4f      	ldr	r3, [pc, #316]	; (8007668 <watchdog_init+0x1a0>)
 800752a:	2201      	movs	r2, #1
 800752c:	701a      	strb	r2, [r3, #0]
 800752e:	e091      	b.n	8007654 <watchdog_init+0x18c>
 8007530:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007534:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007538:	fa93 f3a3 	rbit	r3, r3
 800753c:	65bb      	str	r3, [r7, #88]	; 0x58
 800753e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007542:	657b      	str	r3, [r7, #84]	; 0x54
 8007544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007546:	fa93 f3a3 	rbit	r3, r3
 800754a:	653b      	str	r3, [r7, #80]	; 0x50
 800754c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007550:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007554:	fa93 f3a3 	rbit	r3, r3
 8007558:	64bb      	str	r3, [r7, #72]	; 0x48
    }

  //Warunek sprawdzajacy czy system zaczal prace po wykorzystaniu resetu przez uklad czuwajacy
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET)
 800755a:	4b42      	ldr	r3, [pc, #264]	; (8007664 <watchdog_init+0x19c>)
 800755c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800755e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007562:	647b      	str	r3, [r7, #68]	; 0x44
 8007564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007566:	fa93 f3a3 	rbit	r3, r3
 800756a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800756c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800756e:	fab3 f383 	clz	r3, r3
 8007572:	b2db      	uxtb	r3, r3
 8007574:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007578:	b2db      	uxtb	r3, r3
 800757a:	f003 031f 	and.w	r3, r3, #31
 800757e:	2101      	movs	r1, #1
 8007580:	fa01 f303 	lsl.w	r3, r1, r3
 8007584:	4013      	ands	r3, r2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d003      	beq.n	8007592 <watchdog_init+0xca>
    {
      watchdog_flt = WATCHDOG_FLT_IWDGRST;
 800758a:	4b37      	ldr	r3, [pc, #220]	; (8007668 <watchdog_init+0x1a0>)
 800758c:	2202      	movs	r2, #2
 800758e:	701a      	strb	r2, [r3, #0]
 8007590:	e060      	b.n	8007654 <watchdog_init+0x18c>
 8007592:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007596:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800759a:	fa93 f3a3 	rbit	r3, r3
 800759e:	63bb      	str	r3, [r7, #56]	; 0x38
 80075a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075a4:	637b      	str	r3, [r7, #52]	; 0x34
 80075a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a8:	fa93 f3a3 	rbit	r3, r3
 80075ac:	633b      	str	r3, [r7, #48]	; 0x30
 80075ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b6:	fa93 f3a3 	rbit	r3, r3
 80075ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }

  //Warunek sprawdzajacy czy reset systemu zostal wywolany w programie
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET)
 80075bc:	4b29      	ldr	r3, [pc, #164]	; (8007664 <watchdog_init+0x19c>)
 80075be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075c4:	627b      	str	r3, [r7, #36]	; 0x24
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	fa93 f3a3 	rbit	r3, r3
 80075cc:	623b      	str	r3, [r7, #32]
  return result;
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	fab3 f383 	clz	r3, r3
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	f003 031f 	and.w	r3, r3, #31
 80075e0:	2101      	movs	r1, #1
 80075e2:	fa01 f303 	lsl.w	r3, r1, r3
 80075e6:	4013      	ands	r3, r2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <watchdog_init+0x12c>
    {
      watchdog_flt = WATCHDOG_FLT_SFTRST;
 80075ec:	4b1e      	ldr	r3, [pc, #120]	; (8007668 <watchdog_init+0x1a0>)
 80075ee:	2203      	movs	r2, #3
 80075f0:	701a      	strb	r2, [r3, #0]
 80075f2:	e02f      	b.n	8007654 <watchdog_init+0x18c>
 80075f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	fa93 f3a3 	rbit	r3, r3
 8007600:	61bb      	str	r3, [r7, #24]
 8007602:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007606:	617b      	str	r3, [r7, #20]
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	fa93 f3a3 	rbit	r3, r3
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007614:	60fb      	str	r3, [r7, #12]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	fa93 f3a3 	rbit	r3, r3
 800761c:	60bb      	str	r3, [r7, #8]
    }

  //Warunek sprawdzajacy czy reset systemu nastapil poprzez wlaczenie badz odlaczenie zasilania
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800761e:	4b11      	ldr	r3, [pc, #68]	; (8007664 <watchdog_init+0x19c>)
 8007620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007622:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007626:	607b      	str	r3, [r7, #4]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	fa93 f3a3 	rbit	r3, r3
 800762e:	603b      	str	r3, [r7, #0]
  return result;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	fab3 f383 	clz	r3, r3
 8007636:	b2db      	uxtb	r3, r3
 8007638:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800763c:	b2db      	uxtb	r3, r3
 800763e:	f003 031f 	and.w	r3, r3, #31
 8007642:	2101      	movs	r1, #1
 8007644:	fa01 f303 	lsl.w	r3, r1, r3
 8007648:	4013      	ands	r3, r2
 800764a:	2b00      	cmp	r3, #0
 800764c:	d002      	beq.n	8007654 <watchdog_init+0x18c>
    {
      watchdog_flt = WATCHDOG_FLT_NONE;
 800764e:	4b06      	ldr	r3, [pc, #24]	; (8007668 <watchdog_init+0x1a0>)
 8007650:	2200      	movs	r2, #0
 8007652:	701a      	strb	r2, [r3, #0]
    }

  HAL_IWDG_Refresh(&hiwdg); 			//Przeladowanie IWDG
 8007654:	4805      	ldr	r0, [pc, #20]	; (800766c <watchdog_init+0x1a4>)
 8007656:	f7fb fa35 	bl	8002ac4 <HAL_IWDG_Refresh>
}
 800765a:	bf00      	nop
 800765c:	3780      	adds	r7, #128	; 0x80
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	40021000 	.word	0x40021000
 8007668:	200004cc 	.word	0x200004cc
 800766c:	20000128 	.word	0x20000128

08007670 <watchdog_step>:
/**
* @fn watchdog_step(void)
* @brief Funkcja przeladowujaca IWDG, powinna zostac wywolana wewnatrz hydrogreen_step()
*/
inline void watchdog_step(void)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	af00      	add	r7, sp, #0
  HAL_IWDG_Refresh(&hiwdg); 			//Przeladowanie IWDG
 8007674:	4802      	ldr	r0, [pc, #8]	; (8007680 <watchdog_step+0x10>)
 8007676:	f7fb fa25 	bl	8002ac4 <HAL_IWDG_Refresh>
}
 800767a:	bf00      	nop
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20000128 	.word	0x20000128

08007684 <__libc_init_array>:
 8007684:	b570      	push	{r4, r5, r6, lr}
 8007686:	4e0d      	ldr	r6, [pc, #52]	; (80076bc <__libc_init_array+0x38>)
 8007688:	4c0d      	ldr	r4, [pc, #52]	; (80076c0 <__libc_init_array+0x3c>)
 800768a:	1ba4      	subs	r4, r4, r6
 800768c:	10a4      	asrs	r4, r4, #2
 800768e:	2500      	movs	r5, #0
 8007690:	42a5      	cmp	r5, r4
 8007692:	d109      	bne.n	80076a8 <__libc_init_array+0x24>
 8007694:	4e0b      	ldr	r6, [pc, #44]	; (80076c4 <__libc_init_array+0x40>)
 8007696:	4c0c      	ldr	r4, [pc, #48]	; (80076c8 <__libc_init_array+0x44>)
 8007698:	f000 f820 	bl	80076dc <_init>
 800769c:	1ba4      	subs	r4, r4, r6
 800769e:	10a4      	asrs	r4, r4, #2
 80076a0:	2500      	movs	r5, #0
 80076a2:	42a5      	cmp	r5, r4
 80076a4:	d105      	bne.n	80076b2 <__libc_init_array+0x2e>
 80076a6:	bd70      	pop	{r4, r5, r6, pc}
 80076a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076ac:	4798      	blx	r3
 80076ae:	3501      	adds	r5, #1
 80076b0:	e7ee      	b.n	8007690 <__libc_init_array+0xc>
 80076b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076b6:	4798      	blx	r3
 80076b8:	3501      	adds	r5, #1
 80076ba:	e7f2      	b.n	80076a2 <__libc_init_array+0x1e>
 80076bc:	0800772c 	.word	0x0800772c
 80076c0:	0800772c 	.word	0x0800772c
 80076c4:	0800772c 	.word	0x0800772c
 80076c8:	08007730 	.word	0x08007730

080076cc <memset>:
 80076cc:	4402      	add	r2, r0
 80076ce:	4603      	mov	r3, r0
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d100      	bne.n	80076d6 <memset+0xa>
 80076d4:	4770      	bx	lr
 80076d6:	f803 1b01 	strb.w	r1, [r3], #1
 80076da:	e7f9      	b.n	80076d0 <memset+0x4>

080076dc <_init>:
 80076dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076de:	bf00      	nop
 80076e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076e2:	bc08      	pop	{r3}
 80076e4:	469e      	mov	lr, r3
 80076e6:	4770      	bx	lr

080076e8 <_fini>:
 80076e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ea:	bf00      	nop
 80076ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ee:	bc08      	pop	{r3}
 80076f0:	469e      	mov	lr, r3
 80076f2:	4770      	bx	lr
