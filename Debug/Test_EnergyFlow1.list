
Test_EnergyFlow1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d90  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007f18  08007f18  00017f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f50  08007f50  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08007f50  08007f50  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f50  08007f50  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f50  08007f50  00017f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f54  08007f54  00017f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000014  08007f6c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  08007f6c  00020474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169f8  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a6a  00000000  00000000  00036a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f0  00000000  00000000  0003a4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e8  00000000  00000000  0003b798  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e953  00000000  00000000  0003c880  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000167de  00000000  00000000  0005b1d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aa8de  00000000  00000000  000719b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c28f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a80  00000000  00000000  0011c30c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007f00 	.word	0x08007f00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08007f00 	.word	0x08007f00

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
 8000a18:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a1a:	4b3c      	ldr	r3, [pc, #240]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000a1c:	4a3c      	ldr	r2, [pc, #240]	; (8000b10 <MX_ADC2_Init+0x10c>)
 8000a1e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a20:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000a22:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a26:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a28:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a2e:	4b37      	ldr	r3, [pc, #220]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000a34:	4b35      	ldr	r3, [pc, #212]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a3a:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a42:	4b32      	ldr	r3, [pc, #200]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a48:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a4e:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000a54:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000a56:	2204      	movs	r2, #4
 8000a58:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a62:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000a64:	2204      	movs	r2, #4
 8000a66:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a68:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a6e:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a74:	4825      	ldr	r0, [pc, #148]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000a76:	f001 f805 	bl	8001a84 <HAL_ADC_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000a80:	f000 fa85 	bl	8000f8e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000a90:	2307      	movs	r3, #7
 8000a92:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481a      	ldr	r0, [pc, #104]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000aa2:	f001 fa5b 	bl	8001f5c <HAL_ADC_ConfigChannel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000aac:	f000 fa6f 	bl	8000f8e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ab8:	463b      	mov	r3, r7
 8000aba:	4619      	mov	r1, r3
 8000abc:	4813      	ldr	r0, [pc, #76]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000abe:	f001 fa4d 	bl	8001f5c <HAL_ADC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000ac8:	f000 fa61 	bl	8000f8e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000acc:	2303      	movs	r3, #3
 8000ace:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480c      	ldr	r0, [pc, #48]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000ada:	f001 fa3f 	bl	8001f5c <HAL_ADC_ConfigChannel>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8000ae4:	f000 fa53 	bl	8000f8e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000aec:	2304      	movs	r3, #4
 8000aee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000af0:	463b      	mov	r3, r7
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000af6:	f001 fa31 	bl	8001f5c <HAL_ADC_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8000b00:	f000 fa45 	bl	8000f8e <Error_Handler>
  }

}
 8000b04:	bf00      	nop
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000094 	.word	0x20000094
 8000b10:	50000100 	.word	0x50000100

08000b14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a2c      	ldr	r2, [pc, #176]	; (8000be4 <HAL_ADC_MspInit+0xd0>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d152      	bne.n	8000bdc <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b36:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <HAL_ADC_MspInit+0xd4>)
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	4a2b      	ldr	r2, [pc, #172]	; (8000be8 <HAL_ADC_MspInit+0xd4>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b40:	6153      	str	r3, [r2, #20]
 8000b42:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <HAL_ADC_MspInit+0xd4>)
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <HAL_ADC_MspInit+0xd4>)
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	4a25      	ldr	r2, [pc, #148]	; (8000be8 <HAL_ADC_MspInit+0xd4>)
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	6153      	str	r3, [r2, #20]
 8000b5a:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <HAL_ADC_MspInit+0xd4>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC2_IN1
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = SC_VOLTAGE_PIN_Pin|FC_VOLTAGE_PIN_Pin|FC_CURRENT_SENSOR_PIN_Pin|SC_CURRENT_SENSOR_PIN_Pin;
 8000b66:	23f0      	movs	r3, #240	; 0xf0
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7c:	f002 faf0 	bl	8003160 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel4;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <HAL_ADC_MspInit+0xd8>)
 8000b82:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <HAL_ADC_MspInit+0xdc>)
 8000b84:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <HAL_ADC_MspInit+0xd8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <HAL_ADC_MspInit+0xd8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_ADC_MspInit+0xd8>)
 8000b94:	2280      	movs	r2, #128	; 0x80
 8000b96:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_ADC_MspInit+0xd8>)
 8000b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b9e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_ADC_MspInit+0xd8>)
 8000ba2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ba6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_ADC_MspInit+0xd8>)
 8000baa:	2220      	movs	r2, #32
 8000bac:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_ADC_MspInit+0xd8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <HAL_ADC_MspInit+0xd8>)
 8000bb6:	f002 f8c5 	bl	8002d44 <HAL_DMA_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000bc0:	f000 f9e5 	bl	8000f8e <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_ADC2_DMA1_CH4);
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_ADC_MspInit+0xe0>)
 8000bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_ADC_MspInit+0xe0>)
 8000bca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000bce:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_ADC_MspInit+0xd8>)
 8000bd4:	639a      	str	r2, [r3, #56]	; 0x38
 8000bd6:	4a05      	ldr	r2, [pc, #20]	; (8000bec <HAL_ADC_MspInit+0xd8>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	; 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	50000100 	.word	0x50000100
 8000be8:	40021000 	.word	0x40021000
 8000bec:	200000e4 	.word	0x200000e4
 8000bf0:	40020044 	.word	0x40020044
 8000bf4:	40010000 	.word	0x40010000

08000bf8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_CRC_Init+0x48>)
 8000bfe:	4a11      	ldr	r2, [pc, #68]	; (8000c44 <MX_CRC_Init+0x4c>)
 8000c00:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_CRC_Init+0x48>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <MX_CRC_Init+0x48>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_CRC_Init+0x48>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <MX_CRC_Init+0x48>)
 8000c16:	2210      	movs	r2, #16
 8000c18:	60da      	str	r2, [r3, #12]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_CRC_Init+0x48>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <MX_CRC_Init+0x48>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_CRC_Init+0x48>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MX_CRC_Init+0x48>)
 8000c2e:	f001 fe8d 	bl	800294c <HAL_CRC_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_CRC_Init+0x44>
  {
    Error_Handler();
 8000c38:	f000 f9a9 	bl	8000f8e <Error_Handler>
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000128 	.word	0x20000128
 8000c44:	40023000 	.word	0x40023000

08000c48 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_CRC_MspInit+0x38>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d10b      	bne.n	8000c72 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_CRC_MspInit+0x3c>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <HAL_CRC_MspInit+0x3c>)
 8000c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c64:	6153      	str	r3, [r2, #20]
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <HAL_CRC_MspInit+0x3c>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023000 	.word	0x40023000
 8000c84:	40021000 	.word	0x40021000

08000c88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <MX_DMA_Init+0x68>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <MX_DMA_Init+0x68>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6153      	str	r3, [r2, #20]
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <MX_DMA_Init+0x68>)
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	200c      	movs	r0, #12
 8000cac:	f001 fe17 	bl	80028de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000cb0:	200c      	movs	r0, #12
 8000cb2:	f001 fe30 	bl	8002916 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	200e      	movs	r0, #14
 8000cbc:	f001 fe0f 	bl	80028de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000cc0:	200e      	movs	r0, #14
 8000cc2:	f001 fe28 	bl	8002916 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	200f      	movs	r0, #15
 8000ccc:	f001 fe07 	bl	80028de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000cd0:	200f      	movs	r0, #15
 8000cd2:	f001 fe20 	bl	8002916 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2010      	movs	r0, #16
 8000cdc:	f001 fdff 	bl	80028de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000ce0:	2010      	movs	r0, #16
 8000ce2:	f001 fe18 	bl	8002916 <HAL_NVIC_EnableIRQ>

}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0a:	4b4e      	ldr	r3, [pc, #312]	; (8000e44 <MX_GPIO_Init+0x150>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	4a4d      	ldr	r2, [pc, #308]	; (8000e44 <MX_GPIO_Init+0x150>)
 8000d10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d14:	6153      	str	r3, [r2, #20]
 8000d16:	4b4b      	ldr	r3, [pc, #300]	; (8000e44 <MX_GPIO_Init+0x150>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	4b48      	ldr	r3, [pc, #288]	; (8000e44 <MX_GPIO_Init+0x150>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	4a47      	ldr	r2, [pc, #284]	; (8000e44 <MX_GPIO_Init+0x150>)
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	6153      	str	r3, [r2, #20]
 8000d2e:	4b45      	ldr	r3, [pc, #276]	; (8000e44 <MX_GPIO_Init+0x150>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	4b42      	ldr	r3, [pc, #264]	; (8000e44 <MX_GPIO_Init+0x150>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	4a41      	ldr	r2, [pc, #260]	; (8000e44 <MX_GPIO_Init+0x150>)
 8000d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d44:	6153      	str	r3, [r2, #20]
 8000d46:	4b3f      	ldr	r3, [pc, #252]	; (8000e44 <MX_GPIO_Init+0x150>)
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SC_ON_GPIO_Port, SC_ON_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5c:	f002 fb72 	bl	8003444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FC_DECHARGING_GPIO_Port, FC_DECHARGING_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	4838      	ldr	r0, [pc, #224]	; (8000e48 <MX_GPIO_Init+0x154>)
 8000d66:	f002 fb6d 	bl	8003444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4833      	ldr	r0, [pc, #204]	; (8000e4c <MX_GPIO_Init+0x158>)
 8000d7e:	f002 f9ef 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000d82:	f649 4302 	movw	r3, #39938	; 0x9c02
 8000d86:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	4619      	mov	r1, r3
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9a:	f002 f9e1 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB4 PBPin */
  GPIO_InitStruct.Pin = FAN_2_GPIO_Pin|GPIO_PIN_4|FAN_1_GPIO_Pin;
 8000d9e:	2352      	movs	r3, #82	; 0x52
 8000da0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <MX_GPIO_Init+0x15c>)
 8000da4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	4825      	ldr	r0, [pc, #148]	; (8000e48 <MX_GPIO_Init+0x154>)
 8000db2:	f002 f9d5 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SC_ON_Pin;
 8000db6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SC_ON_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f002 f9c5 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000dd6:	2328      	movs	r3, #40	; 0x28
 8000dd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	4619      	mov	r1, r3
 8000de8:	4817      	ldr	r0, [pc, #92]	; (8000e48 <MX_GPIO_Init+0x154>)
 8000dea:	f002 f9b9 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FC_DECHARGING_Pin;
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FC_DECHARGING_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	4619      	mov	r1, r3
 8000e04:	4810      	ldr	r0, [pc, #64]	; (8000e48 <MX_GPIO_Init+0x154>)
 8000e06:	f002 f9ab 	bl	8003160 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 3, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	2007      	movs	r0, #7
 8000e10:	f001 fd65 	bl	80028de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e14:	2007      	movs	r0, #7
 8000e16:	f001 fd7e 	bl	8002916 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2103      	movs	r1, #3
 8000e1e:	200a      	movs	r0, #10
 8000e20:	f001 fd5d 	bl	80028de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000e24:	200a      	movs	r0, #10
 8000e26:	f001 fd76 	bl	8002916 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	2017      	movs	r0, #23
 8000e30:	f001 fd55 	bl	80028de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e34:	2017      	movs	r0, #23
 8000e36:	f001 fd6e 	bl	8002916 <HAL_NVIC_EnableIRQ>

}
 8000e3a:	bf00      	nop
 8000e3c:	3720      	adds	r7, #32
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40021000 	.word	0x40021000
 8000e48:	48000400 	.word	0x48000400
 8000e4c:	48001400 	.word	0x48001400
 8000e50:	10210000 	.word	0x10210000

08000e54 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_IWDG_Init+0x34>)
 8000e5a:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <MX_IWDG_Init+0x38>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <MX_IWDG_Init+0x34>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 2000;
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <MX_IWDG_Init+0x34>)
 8000e66:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e6a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 1500;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_IWDG_Init+0x34>)
 8000e6e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000e72:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_IWDG_Init+0x34>)
 8000e76:	f002 fb15 	bl	80034a4 <HAL_IWDG_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000e80:	f000 f885 	bl	8000f8e <Error_Handler>
  }

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	2000014c 	.word	0x2000014c
 8000e8c:	40003000 	.word	0x40003000

08000e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e94:	f000 fd72 	bl	800197c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e98:	f000 f81e 	bl	8000ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9c:	f7ff ff2a 	bl	8000cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea0:	f7ff fef2 	bl	8000c88 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ea4:	f000 fc90 	bl	80017c8 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000ea8:	f7ff fdac 	bl	8000a04 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000eac:	f000 f934 	bl	8001118 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000eb0:	f000 f9de 	bl	8001270 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eb4:	f000 fa52 	bl	800135c <MX_TIM3_Init>
  MX_CRC_Init();
 8000eb8:	f7ff fe9e 	bl	8000bf8 <MX_CRC_Init>
  MX_IWDG_Init();
 8000ebc:	f7ff ffca 	bl	8000e54 <MX_IWDG_Init>
  MX_TIM6_Init();
 8000ec0:	f000 fac2 	bl	8001448 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000ec4:	f000 faf6 	bl	80014b4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  a=1;
 8000ec8:	4b02      	ldr	r3, [pc, #8]	; (8000ed4 <main+0x44>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
  hydrogreen_main();
 8000ece:	f006 faab 	bl	8007428 <hydrogreen_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <main+0x42>
 8000ed4:	20000030 	.word	0x20000030

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b096      	sub	sp, #88	; 0x58
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ee2:	2228      	movs	r2, #40	; 0x28
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f007 f802 	bl	8007ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]
 8000f0a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000f0c:	230a      	movs	r3, #10
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f10:	2301      	movs	r3, #1
 8000f12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f14:	2310      	movs	r3, #16
 8000f16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f20:	2300      	movs	r3, #0
 8000f22:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f24:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f28:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 fb0e 	bl	8003550 <HAL_RCC_OscConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f3a:	f000 f828 	bl	8000f8e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3e:	230f      	movs	r3, #15
 8000f40:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f42:	2302      	movs	r3, #2
 8000f44:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 fa00 	bl	8004360 <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f66:	f000 f812 	bl	8000f8e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	4618      	mov	r0, r3
 8000f78:	f003 fc28 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f82:	f000 f804 	bl	8000f8e <Error_Handler>
  }
}
 8000f86:	bf00      	nop
 8000f88:	3758      	adds	r7, #88	; 0x58
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	hydrogreen_hardFault();
 8000f92:	f006 fa6b 	bl	800746c <hydrogreen_hardFault>
  /* USER CODE END Error_Handler_Debug */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <HAL_MspInit+0x44>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <HAL_MspInit+0x44>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6193      	str	r3, [r2, #24]
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <HAL_MspInit+0x44>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <HAL_MspInit+0x44>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <HAL_MspInit+0x44>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	61d3      	str	r3, [r2, #28]
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_MspInit+0x44>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <NMI_Handler+0x4>

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler+0x4>

08001002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_SYSTICK_Callback();
 8001030:	f006 fe32 	bl	8007c98 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001034:	f000 fce8 	bl	8001a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001040:	2002      	movs	r0, #2
 8001042:	f002 fa17 	bl	8003474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}

0800104a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800104e:	2010      	movs	r0, #16
 8001050:	f002 fa10 	bl	8003474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <DMA1_Channel2_IRQHandler+0x10>)
 800105e:	f001 ff8e 	bl	8002f7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000015c 	.word	0x2000015c

0800106c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <DMA1_Channel4_IRQHandler+0x10>)
 8001072:	f001 ff84 	bl	8002f7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200000e4 	.word	0x200000e4

08001080 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <DMA1_Channel5_IRQHandler+0x10>)
 8001086:	f001 ff7a 	bl	8002f7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200001a0 	.word	0x200001a0

08001094 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <DMA1_Channel6_IRQHandler+0x10>)
 800109a:	f001 ff70 	bl	8002f7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000360 	.word	0x20000360

080010a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80010ac:	2040      	movs	r0, #64	; 0x40
 80010ae:	f002 f9e1 	bl	8003474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <USART2_IRQHandler+0x10>)
 80010be:	f005 faa3 	bl	8006608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200003a4 	.word	0x200003a4

080010cc <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <TIM6_DAC1_IRQHandler+0x10>)
 80010d2:	f004 f8a1 	bl	8005218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000230 	.word	0x20000230

080010e0 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <TIM7_DAC2_IRQHandler+0x10>)
 80010e6:	f004 f897 	bl	8005218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000314 	.word	0x20000314

080010f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <SystemInit+0x20>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <SystemInit+0x20>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch1;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b09a      	sub	sp, #104	; 0x68
 800111c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001138:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
 8001148:	615a      	str	r2, [r3, #20]
 800114a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	222c      	movs	r2, #44	; 0x2c
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f006 fecc 	bl	8007ef0 <memset>

  htim1.Instance = TIM1;
 8001158:	4b43      	ldr	r3, [pc, #268]	; (8001268 <MX_TIM1_Init+0x150>)
 800115a:	4a44      	ldr	r2, [pc, #272]	; (800126c <MX_TIM1_Init+0x154>)
 800115c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 800115e:	4b42      	ldr	r3, [pc, #264]	; (8001268 <MX_TIM1_Init+0x150>)
 8001160:	2209      	movs	r2, #9
 8001162:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001164:	4b40      	ldr	r3, [pc, #256]	; (8001268 <MX_TIM1_Init+0x150>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800116a:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <MX_TIM1_Init+0x150>)
 800116c:	22ff      	movs	r2, #255	; 0xff
 800116e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001170:	4b3d      	ldr	r3, [pc, #244]	; (8001268 <MX_TIM1_Init+0x150>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001176:	4b3c      	ldr	r3, [pc, #240]	; (8001268 <MX_TIM1_Init+0x150>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117c:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <MX_TIM1_Init+0x150>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001182:	4839      	ldr	r0, [pc, #228]	; (8001268 <MX_TIM1_Init+0x150>)
 8001184:	f003 fc48 	bl	8004a18 <HAL_TIM_Base_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800118e:	f7ff fefe 	bl	8000f8e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001196:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001198:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800119c:	4619      	mov	r1, r3
 800119e:	4832      	ldr	r0, [pc, #200]	; (8001268 <MX_TIM1_Init+0x150>)
 80011a0:	f004 fa6a 	bl	8005678 <HAL_TIM_ConfigClockSource>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011aa:	f7ff fef0 	bl	8000f8e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011ae:	482e      	ldr	r0, [pc, #184]	; (8001268 <MX_TIM1_Init+0x150>)
 80011b0:	f003 fce6 	bl	8004b80 <HAL_TIM_PWM_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011ba:	f7ff fee8 	bl	8000f8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011ce:	4619      	mov	r1, r3
 80011d0:	4825      	ldr	r0, [pc, #148]	; (8001268 <MX_TIM1_Init+0x150>)
 80011d2:	f004 fff5 	bl	80061c0 <HAL_TIMEx_MasterConfigSynchronization>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80011dc:	f7ff fed7 	bl	8000f8e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e0:	2360      	movs	r3, #96	; 0x60
 80011e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e8:	2300      	movs	r3, #0
 80011ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011ec:	2300      	movs	r3, #0
 80011ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011f4:	2300      	movs	r3, #0
 80011f6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	4818      	ldr	r0, [pc, #96]	; (8001268 <MX_TIM1_Init+0x150>)
 8001206:	f004 f927 	bl	8005458 <HAL_TIM_PWM_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001210:	f7ff febd 	bl	8000f8e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001236:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4807      	ldr	r0, [pc, #28]	; (8001268 <MX_TIM1_Init+0x150>)
 800124a:	f005 f827 	bl	800629c <HAL_TIMEx_ConfigBreakDeadTime>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001254:	f7ff fe9b 	bl	8000f8e <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001258:	4803      	ldr	r0, [pc, #12]	; (8001268 <MX_TIM1_Init+0x150>)
 800125a:	f000 fa35 	bl	80016c8 <HAL_TIM_MspPostInit>

}
 800125e:	bf00      	nop
 8001260:	3768      	adds	r7, #104	; 0x68
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000027c 	.word	0x2000027c
 800126c:	40012c00 	.word	0x40012c00

08001270 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08e      	sub	sp, #56	; 0x38
 8001274:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001290:	463b      	mov	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]
 800129e:	615a      	str	r2, [r3, #20]
 80012a0:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80012a2:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <MX_TIM2_Init+0xe8>)
 80012a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80012aa:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <MX_TIM2_Init+0xe8>)
 80012ac:	221f      	movs	r2, #31
 80012ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	4b29      	ldr	r3, [pc, #164]	; (8001358 <MX_TIM2_Init+0xe8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80012b6:	4b28      	ldr	r3, [pc, #160]	; (8001358 <MX_TIM2_Init+0xe8>)
 80012b8:	2263      	movs	r2, #99	; 0x63
 80012ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <MX_TIM2_Init+0xe8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c2:	4b25      	ldr	r3, [pc, #148]	; (8001358 <MX_TIM2_Init+0xe8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012c8:	4823      	ldr	r0, [pc, #140]	; (8001358 <MX_TIM2_Init+0xe8>)
 80012ca:	f003 fba5 	bl	8004a18 <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80012d4:	f7ff fe5b 	bl	8000f8e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e2:	4619      	mov	r1, r3
 80012e4:	481c      	ldr	r0, [pc, #112]	; (8001358 <MX_TIM2_Init+0xe8>)
 80012e6:	f004 f9c7 	bl	8005678 <HAL_TIM_ConfigClockSource>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80012f0:	f7ff fe4d 	bl	8000f8e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012f4:	4818      	ldr	r0, [pc, #96]	; (8001358 <MX_TIM2_Init+0xe8>)
 80012f6:	f003 fc43 	bl	8004b80 <HAL_TIM_PWM_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001300:	f7ff fe45 	bl	8000f8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	4811      	ldr	r0, [pc, #68]	; (8001358 <MX_TIM2_Init+0xe8>)
 8001314:	f004 ff54 	bl	80061c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800131e:	f7ff fe36 	bl	8000f8e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001322:	2360      	movs	r3, #96	; 0x60
 8001324:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 99;
 8001326:	2363      	movs	r3, #99	; 0x63
 8001328:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001332:	463b      	mov	r3, r7
 8001334:	2200      	movs	r2, #0
 8001336:	4619      	mov	r1, r3
 8001338:	4807      	ldr	r0, [pc, #28]	; (8001358 <MX_TIM2_Init+0xe8>)
 800133a:	f004 f88d 	bl	8005458 <HAL_TIM_PWM_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001344:	f7ff fe23 	bl	8000f8e <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <MX_TIM2_Init+0xe8>)
 800134a:	f000 f9bd 	bl	80016c8 <HAL_TIM_MspPostInit>

}
 800134e:	bf00      	nop
 8001350:	3738      	adds	r7, #56	; 0x38
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200002c8 	.word	0x200002c8

0800135c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08e      	sub	sp, #56	; 0x38
 8001360:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800137c:	463b      	mov	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]
 800138a:	615a      	str	r2, [r3, #20]
 800138c:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800138e:	4b2c      	ldr	r3, [pc, #176]	; (8001440 <MX_TIM3_Init+0xe4>)
 8001390:	4a2c      	ldr	r2, [pc, #176]	; (8001444 <MX_TIM3_Init+0xe8>)
 8001392:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8001394:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <MX_TIM3_Init+0xe4>)
 8001396:	221f      	movs	r2, #31
 8001398:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139a:	4b29      	ldr	r3, [pc, #164]	; (8001440 <MX_TIM3_Init+0xe4>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80013a0:	4b27      	ldr	r3, [pc, #156]	; (8001440 <MX_TIM3_Init+0xe4>)
 80013a2:	2263      	movs	r2, #99	; 0x63
 80013a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a6:	4b26      	ldr	r3, [pc, #152]	; (8001440 <MX_TIM3_Init+0xe4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ac:	4b24      	ldr	r3, [pc, #144]	; (8001440 <MX_TIM3_Init+0xe4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013b2:	4823      	ldr	r0, [pc, #140]	; (8001440 <MX_TIM3_Init+0xe4>)
 80013b4:	f003 fb30 	bl	8004a18 <HAL_TIM_Base_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80013be:	f7ff fde6 	bl	8000f8e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013cc:	4619      	mov	r1, r3
 80013ce:	481c      	ldr	r0, [pc, #112]	; (8001440 <MX_TIM3_Init+0xe4>)
 80013d0:	f004 f952 	bl	8005678 <HAL_TIM_ConfigClockSource>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80013da:	f7ff fdd8 	bl	8000f8e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013de:	4818      	ldr	r0, [pc, #96]	; (8001440 <MX_TIM3_Init+0xe4>)
 80013e0:	f003 fbce 	bl	8004b80 <HAL_TIM_PWM_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013ea:	f7ff fdd0 	bl	8000f8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4619      	mov	r1, r3
 80013fc:	4810      	ldr	r0, [pc, #64]	; (8001440 <MX_TIM3_Init+0xe4>)
 80013fe:	f004 fedf 	bl	80061c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001408:	f7ff fdc1 	bl	8000f8e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800140c:	2360      	movs	r3, #96	; 0x60
 800140e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800141c:	463b      	mov	r3, r7
 800141e:	2208      	movs	r2, #8
 8001420:	4619      	mov	r1, r3
 8001422:	4807      	ldr	r0, [pc, #28]	; (8001440 <MX_TIM3_Init+0xe4>)
 8001424:	f004 f818 	bl	8005458 <HAL_TIM_PWM_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800142e:	f7ff fdae 	bl	8000f8e <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001432:	4803      	ldr	r0, [pc, #12]	; (8001440 <MX_TIM3_Init+0xe4>)
 8001434:	f000 f948 	bl	80016c8 <HAL_TIM_MspPostInit>

}
 8001438:	bf00      	nop
 800143a:	3738      	adds	r7, #56	; 0x38
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200001e4 	.word	0x200001e4
 8001444:	40000400 	.word	0x40000400

08001448 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_TIM6_Init+0x64>)
 800145a:	4a15      	ldr	r2, [pc, #84]	; (80014b0 <MX_TIM6_Init+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64-1;
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_TIM6_Init+0x64>)
 8001460:	223f      	movs	r2, #63	; 0x3f
 8001462:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_TIM6_Init+0x64>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MX_TIM6_Init+0x64>)
 800146c:	2263      	movs	r2, #99	; 0x63
 800146e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_TIM6_Init+0x64>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001476:	480d      	ldr	r0, [pc, #52]	; (80014ac <MX_TIM6_Init+0x64>)
 8001478:	f003 face 	bl	8004a18 <HAL_TIM_Base_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001482:	f7ff fd84 	bl	8000f8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4619      	mov	r1, r3
 8001492:	4806      	ldr	r0, [pc, #24]	; (80014ac <MX_TIM6_Init+0x64>)
 8001494:	f004 fe94 	bl	80061c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800149e:	f7ff fd76 	bl	8000f8e <Error_Handler>
  }

}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000230 	.word	0x20000230
 80014b0:	40001000 	.word	0x40001000

080014b4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MX_TIM7_Init+0x64>)
 80014c6:	4a15      	ldr	r2, [pc, #84]	; (800151c <MX_TIM7_Init+0x68>)
 80014c8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 64-1;
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <MX_TIM7_Init+0x64>)
 80014cc:	223f      	movs	r2, #63	; 0x3f
 80014ce:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_TIM7_Init+0x64>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10-1;
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <MX_TIM7_Init+0x64>)
 80014d8:	2209      	movs	r2, #9
 80014da:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014dc:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_TIM7_Init+0x64>)
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80014e2:	480d      	ldr	r0, [pc, #52]	; (8001518 <MX_TIM7_Init+0x64>)
 80014e4:	f003 fa98 	bl	8004a18 <HAL_TIM_Base_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80014ee:	f7ff fd4e 	bl	8000f8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	4619      	mov	r1, r3
 80014fe:	4806      	ldr	r0, [pc, #24]	; (8001518 <MX_TIM7_Init+0x64>)
 8001500:	f004 fe5e 	bl	80061c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800150a:	f7ff fd40 	bl	8000f8e <Error_Handler>
  }

}
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000314 	.word	0x20000314
 800151c:	40001400 	.word	0x40001400

08001520 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a5d      	ldr	r2, [pc, #372]	; (80016a4 <HAL_TIM_Base_MspInit+0x184>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d134      	bne.n	800159c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001532:	4b5d      	ldr	r3, [pc, #372]	; (80016a8 <HAL_TIM_Base_MspInit+0x188>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	4a5c      	ldr	r2, [pc, #368]	; (80016a8 <HAL_TIM_Base_MspInit+0x188>)
 8001538:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800153c:	6193      	str	r3, [r2, #24]
 800153e:	4b5a      	ldr	r3, [pc, #360]	; (80016a8 <HAL_TIM_Base_MspInit+0x188>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800154a:	4b58      	ldr	r3, [pc, #352]	; (80016ac <HAL_TIM_Base_MspInit+0x18c>)
 800154c:	4a58      	ldr	r2, [pc, #352]	; (80016b0 <HAL_TIM_Base_MspInit+0x190>)
 800154e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001550:	4b56      	ldr	r3, [pc, #344]	; (80016ac <HAL_TIM_Base_MspInit+0x18c>)
 8001552:	2200      	movs	r2, #0
 8001554:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001556:	4b55      	ldr	r3, [pc, #340]	; (80016ac <HAL_TIM_Base_MspInit+0x18c>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800155c:	4b53      	ldr	r3, [pc, #332]	; (80016ac <HAL_TIM_Base_MspInit+0x18c>)
 800155e:	2280      	movs	r2, #128	; 0x80
 8001560:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001562:	4b52      	ldr	r3, [pc, #328]	; (80016ac <HAL_TIM_Base_MspInit+0x18c>)
 8001564:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001568:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800156a:	4b50      	ldr	r3, [pc, #320]	; (80016ac <HAL_TIM_Base_MspInit+0x18c>)
 800156c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001570:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001572:	4b4e      	ldr	r3, [pc, #312]	; (80016ac <HAL_TIM_Base_MspInit+0x18c>)
 8001574:	2220      	movs	r2, #32
 8001576:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001578:	4b4c      	ldr	r3, [pc, #304]	; (80016ac <HAL_TIM_Base_MspInit+0x18c>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800157e:	484b      	ldr	r0, [pc, #300]	; (80016ac <HAL_TIM_Base_MspInit+0x18c>)
 8001580:	f001 fbe0 	bl	8002d44 <HAL_DMA_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800158a:	f7ff fd00 	bl	8000f8e <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a46      	ldr	r2, [pc, #280]	; (80016ac <HAL_TIM_Base_MspInit+0x18c>)
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
 8001594:	4a45      	ldr	r2, [pc, #276]	; (80016ac <HAL_TIM_Base_MspInit+0x18c>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800159a:	e07e      	b.n	800169a <HAL_TIM_Base_MspInit+0x17a>
  else if(tim_baseHandle->Instance==TIM2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a4:	d134      	bne.n	8001610 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015a6:	4b40      	ldr	r3, [pc, #256]	; (80016a8 <HAL_TIM_Base_MspInit+0x188>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	4a3f      	ldr	r2, [pc, #252]	; (80016a8 <HAL_TIM_Base_MspInit+0x188>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	61d3      	str	r3, [r2, #28]
 80015b2:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <HAL_TIM_Base_MspInit+0x188>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	61bb      	str	r3, [r7, #24]
 80015bc:	69bb      	ldr	r3, [r7, #24]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80015be:	4b3d      	ldr	r3, [pc, #244]	; (80016b4 <HAL_TIM_Base_MspInit+0x194>)
 80015c0:	4a3d      	ldr	r2, [pc, #244]	; (80016b8 <HAL_TIM_Base_MspInit+0x198>)
 80015c2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015c4:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <HAL_TIM_Base_MspInit+0x194>)
 80015c6:	2210      	movs	r2, #16
 80015c8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ca:	4b3a      	ldr	r3, [pc, #232]	; (80016b4 <HAL_TIM_Base_MspInit+0x194>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80015d0:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <HAL_TIM_Base_MspInit+0x194>)
 80015d2:	2280      	movs	r2, #128	; 0x80
 80015d4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015d6:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <HAL_TIM_Base_MspInit+0x194>)
 80015d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015dc:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015de:	4b35      	ldr	r3, [pc, #212]	; (80016b4 <HAL_TIM_Base_MspInit+0x194>)
 80015e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015e4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80015e6:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <HAL_TIM_Base_MspInit+0x194>)
 80015e8:	2220      	movs	r2, #32
 80015ea:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80015ec:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <HAL_TIM_Base_MspInit+0x194>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80015f2:	4830      	ldr	r0, [pc, #192]	; (80016b4 <HAL_TIM_Base_MspInit+0x194>)
 80015f4:	f001 fba6 	bl	8002d44 <HAL_DMA_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_TIM_Base_MspInit+0xe2>
      Error_Handler();
 80015fe:	f7ff fcc6 	bl	8000f8e <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a2b      	ldr	r2, [pc, #172]	; (80016b4 <HAL_TIM_Base_MspInit+0x194>)
 8001606:	625a      	str	r2, [r3, #36]	; 0x24
 8001608:	4a2a      	ldr	r2, [pc, #168]	; (80016b4 <HAL_TIM_Base_MspInit+0x194>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800160e:	e044      	b.n	800169a <HAL_TIM_Base_MspInit+0x17a>
  else if(tim_baseHandle->Instance==TIM3)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a29      	ldr	r2, [pc, #164]	; (80016bc <HAL_TIM_Base_MspInit+0x19c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d10c      	bne.n	8001634 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800161a:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <HAL_TIM_Base_MspInit+0x188>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a22      	ldr	r2, [pc, #136]	; (80016a8 <HAL_TIM_Base_MspInit+0x188>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	61d3      	str	r3, [r2, #28]
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <HAL_TIM_Base_MspInit+0x188>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697b      	ldr	r3, [r7, #20]
}
 8001632:	e032      	b.n	800169a <HAL_TIM_Base_MspInit+0x17a>
  else if(tim_baseHandle->Instance==TIM6)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a21      	ldr	r2, [pc, #132]	; (80016c0 <HAL_TIM_Base_MspInit+0x1a0>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d114      	bne.n	8001668 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <HAL_TIM_Base_MspInit+0x188>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a19      	ldr	r2, [pc, #100]	; (80016a8 <HAL_TIM_Base_MspInit+0x188>)
 8001644:	f043 0310 	orr.w	r3, r3, #16
 8001648:	61d3      	str	r3, [r2, #28]
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HAL_TIM_Base_MspInit+0x188>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 1, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2101      	movs	r1, #1
 800165a:	2036      	movs	r0, #54	; 0x36
 800165c:	f001 f93f 	bl	80028de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001660:	2036      	movs	r0, #54	; 0x36
 8001662:	f001 f958 	bl	8002916 <HAL_NVIC_EnableIRQ>
}
 8001666:	e018      	b.n	800169a <HAL_TIM_Base_MspInit+0x17a>
  else if(tim_baseHandle->Instance==TIM7)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a15      	ldr	r2, [pc, #84]	; (80016c4 <HAL_TIM_Base_MspInit+0x1a4>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d113      	bne.n	800169a <HAL_TIM_Base_MspInit+0x17a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_TIM_Base_MspInit+0x188>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <HAL_TIM_Base_MspInit+0x188>)
 8001678:	f043 0320 	orr.w	r3, r3, #32
 800167c:	61d3      	str	r3, [r2, #28]
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_TIM_Base_MspInit+0x188>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f003 0320 	and.w	r3, r3, #32
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 3, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2103      	movs	r1, #3
 800168e:	2037      	movs	r0, #55	; 0x37
 8001690:	f001 f925 	bl	80028de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8001694:	2037      	movs	r0, #55	; 0x37
 8001696:	f001 f93e 	bl	8002916 <HAL_NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40012c00 	.word	0x40012c00
 80016a8:	40021000 	.word	0x40021000
 80016ac:	2000015c 	.word	0x2000015c
 80016b0:	4002001c 	.word	0x4002001c
 80016b4:	200001a0 	.word	0x200001a0
 80016b8:	40020058 	.word	0x40020058
 80016bc:	40000400 	.word	0x40000400
 80016c0:	40001000 	.word	0x40001000
 80016c4:	40001400 	.word	0x40001400

080016c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a34      	ldr	r2, [pc, #208]	; (80017b8 <HAL_TIM_MspPostInit+0xf0>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d11e      	bne.n	8001728 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	4b34      	ldr	r3, [pc, #208]	; (80017bc <HAL_TIM_MspPostInit+0xf4>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	4a33      	ldr	r2, [pc, #204]	; (80017bc <HAL_TIM_MspPostInit+0xf4>)
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f4:	6153      	str	r3, [r2, #20]
 80016f6:	4b31      	ldr	r3, [pc, #196]	; (80017bc <HAL_TIM_MspPostInit+0xf4>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = FAN_PWM_TIM_Pin;
 8001702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001714:	2306      	movs	r3, #6
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_PWM_TIM_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001722:	f001 fd1d 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001726:	e043      	b.n	80017b0 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001730:	d11d      	bne.n	800176e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	4b22      	ldr	r3, [pc, #136]	; (80017bc <HAL_TIM_MspPostInit+0xf4>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	4a21      	ldr	r2, [pc, #132]	; (80017bc <HAL_TIM_MspPostInit+0xf4>)
 8001738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173c:	6153      	str	r3, [r2, #20]
 800173e:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <HAL_TIM_MspPostInit+0xf4>)
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 800174a:	2301      	movs	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800175a:	2301      	movs	r3, #1
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001768:	f001 fcfa 	bl	8003160 <HAL_GPIO_Init>
}
 800176c:	e020      	b.n	80017b0 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM3)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <HAL_TIM_MspPostInit+0xf8>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d11b      	bne.n	80017b0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <HAL_TIM_MspPostInit+0xf4>)
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	4a0f      	ldr	r2, [pc, #60]	; (80017bc <HAL_TIM_MspPostInit+0xf4>)
 800177e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001782:	6153      	str	r3, [r2, #20]
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_TIM_MspPostInit+0xf4>)
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FC_MOSFET_PWM_TIM_Pin;
 8001790:	2301      	movs	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017a0:	2302      	movs	r3, #2
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FC_MOSFET_PWM_TIM_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4619      	mov	r1, r3
 80017aa:	4806      	ldr	r0, [pc, #24]	; (80017c4 <HAL_TIM_MspPostInit+0xfc>)
 80017ac:	f001 fcd8 	bl	8003160 <HAL_GPIO_Init>
}
 80017b0:	bf00      	nop
 80017b2:	3728      	adds	r7, #40	; 0x28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40012c00 	.word	0x40012c00
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40000400 	.word	0x40000400
 80017c4:	48000400 	.word	0x48000400

080017c8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <MX_USART2_UART_Init+0x6c>)
 80017ce:	4a1a      	ldr	r2, [pc, #104]	; (8001838 <MX_USART2_UART_Init+0x70>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <MX_USART2_UART_Init+0x6c>)
 80017d4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80017d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <MX_USART2_UART_Init+0x6c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <MX_USART2_UART_Init+0x6c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <MX_USART2_UART_Init+0x6c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_USART2_UART_Init+0x6c>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <MX_USART2_UART_Init+0x6c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_USART2_UART_Init+0x6c>)
 80017fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017fe:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_USART2_UART_Init+0x6c>)
 8001802:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001806:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <MX_USART2_UART_Init+0x6c>)
 800180a:	2230      	movs	r2, #48	; 0x30
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_USART2_UART_Init+0x6c>)
 8001810:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001814:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <MX_USART2_UART_Init+0x6c>)
 8001818:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800181c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_USART2_UART_Init+0x6c>)
 8001820:	f004 fdd2 	bl	80063c8 <HAL_UART_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_USART2_UART_Init+0x66>
  {
    Error_Handler();
 800182a:	f7ff fbb0 	bl	8000f8e <Error_Handler>
  }

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200003a4 	.word	0x200003a4
 8001838:	40004400 	.word	0x40004400

0800183c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a2f      	ldr	r2, [pc, #188]	; (8001918 <HAL_UART_MspInit+0xdc>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d157      	bne.n	800190e <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800185e:	4b2f      	ldr	r3, [pc, #188]	; (800191c <HAL_UART_MspInit+0xe0>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a2e      	ldr	r2, [pc, #184]	; (800191c <HAL_UART_MspInit+0xe0>)
 8001864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b2c      	ldr	r3, [pc, #176]	; (800191c <HAL_UART_MspInit+0xe0>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b29      	ldr	r3, [pc, #164]	; (800191c <HAL_UART_MspInit+0xe0>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	4a28      	ldr	r2, [pc, #160]	; (800191c <HAL_UART_MspInit+0xe0>)
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	6153      	str	r3, [r2, #20]
 8001882:	4b26      	ldr	r3, [pc, #152]	; (800191c <HAL_UART_MspInit+0xe0>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = RS_TX_Pin|RS_RX_Pin;
 800188e:	230c      	movs	r3, #12
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800189e:	2307      	movs	r3, #7
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ac:	f001 fc58 	bl	8003160 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_UART_MspInit+0xe4>)
 80018b2:	4a1c      	ldr	r2, [pc, #112]	; (8001924 <HAL_UART_MspInit+0xe8>)
 80018b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_UART_MspInit+0xe4>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <HAL_UART_MspInit+0xe4>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_UART_MspInit+0xe4>)
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_UART_MspInit+0xe4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <HAL_UART_MspInit+0xe4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_UART_MspInit+0xe4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_UART_MspInit+0xe4>)
 80018dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80018e2:	480f      	ldr	r0, [pc, #60]	; (8001920 <HAL_UART_MspInit+0xe4>)
 80018e4:	f001 fa2e 	bl	8002d44 <HAL_DMA_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80018ee:	f7ff fb4e 	bl	8000f8e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_UART_MspInit+0xe4>)
 80018f6:	671a      	str	r2, [r3, #112]	; 0x70
 80018f8:	4a09      	ldr	r2, [pc, #36]	; (8001920 <HAL_UART_MspInit+0xe4>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2101      	movs	r1, #1
 8001902:	2026      	movs	r0, #38	; 0x26
 8001904:	f000 ffeb 	bl	80028de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001908:	2026      	movs	r0, #38	; 0x26
 800190a:	f001 f804 	bl	8002916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40004400 	.word	0x40004400
 800191c:	40021000 	.word	0x40021000
 8001920:	20000360 	.word	0x20000360
 8001924:	4002006c 	.word	0x4002006c

08001928 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001960 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800192c:	480d      	ldr	r0, [pc, #52]	; (8001964 <LoopForever+0x6>)
  ldr r1, =_edata
 800192e:	490e      	ldr	r1, [pc, #56]	; (8001968 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <LoopForever+0xe>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001944:	4c0b      	ldr	r4, [pc, #44]	; (8001974 <LoopForever+0x16>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001952:	f7ff fbcf 	bl	80010f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001956:	f006 faa7 	bl	8007ea8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800195a:	f7ff fa99 	bl	8000e90 <main>

0800195e <LoopForever>:

LoopForever:
    b LoopForever
 800195e:	e7fe      	b.n	800195e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001960:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001968:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800196c:	08007f58 	.word	0x08007f58
  ldr r2, =_sbss
 8001970:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001974:	20000474 	.word	0x20000474

08001978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC1_2_IRQHandler>
	...

0800197c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <HAL_Init+0x28>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <HAL_Init+0x28>)
 8001986:	f043 0310 	orr.w	r3, r3, #16
 800198a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800198c:	2003      	movs	r0, #3
 800198e:	f000 ff9b 	bl	80028c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001992:	2000      	movs	r0, #0
 8001994:	f000 f808 	bl	80019a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001998:	f7ff fb00 	bl	8000f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40022000 	.word	0x40022000

080019a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_InitTick+0x54>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_InitTick+0x58>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019be:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 ffb3 	bl	8002932 <HAL_SYSTICK_Config>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00e      	b.n	80019f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b0f      	cmp	r3, #15
 80019da:	d80a      	bhi.n	80019f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019dc:	2200      	movs	r2, #0
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f000 ff7b 	bl	80028de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e8:	4a06      	ldr	r2, [pc, #24]	; (8001a04 <HAL_InitTick+0x5c>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e000      	b.n	80019f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000000 	.word	0x20000000
 8001a00:	20000008 	.word	0x20000008
 8001a04:	20000004 	.word	0x20000004

08001a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_IncTick+0x20>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_IncTick+0x24>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <HAL_IncTick+0x24>)
 8001a1a:	6013      	str	r3, [r2, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	20000428 	.word	0x20000428

08001a30 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <HAL_GetTick+0x14>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000428 	.word	0x20000428

08001a48 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b09a      	sub	sp, #104	; 0x68
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e172      	b.n	8001d8a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d176      	bne.n	8001ba4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d152      	bne.n	8001b64 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff f81b 	bl	8000b14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d13b      	bne.n	8001b64 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 fdbb 	bl	8002668 <ADC_Disable>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d12f      	bne.n	8001b64 <HAL_ADC_Init+0xe0>
 8001b04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d12b      	bne.n	8001b64 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b14:	f023 0302 	bic.w	r3, r3, #2
 8001b18:	f043 0202 	orr.w	r2, r3, #2
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b2e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b3e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b40:	4b94      	ldr	r3, [pc, #592]	; (8001d94 <HAL_ADC_Init+0x310>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a94      	ldr	r2, [pc, #592]	; (8001d98 <HAL_ADC_Init+0x314>)
 8001b46:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4a:	0c9a      	lsrs	r2, r3, #18
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b56:	e002      	b.n	8001b5e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f9      	bne.n	8001b58 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d007      	beq.n	8001b82 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b80:	d110      	bne.n	8001ba4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f023 0312 	bic.w	r3, r3, #18
 8001b8a:	f043 0210 	orr.w	r2, r3, #16
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f043 0201 	orr.w	r2, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f040 80df 	bne.w	8001d70 <HAL_ADC_Init+0x2ec>
 8001bb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f040 80da 	bne.w	8001d70 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f040 80d2 	bne.w	8001d70 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bd4:	f043 0202 	orr.w	r2, r3, #2
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bdc:	4b6f      	ldr	r3, [pc, #444]	; (8001d9c <HAL_ADC_Init+0x318>)
 8001bde:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be8:	d102      	bne.n	8001bf0 <HAL_ADC_Init+0x16c>
 8001bea:	4b6d      	ldr	r3, [pc, #436]	; (8001da0 <HAL_ADC_Init+0x31c>)
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e002      	b.n	8001bf6 <HAL_ADC_Init+0x172>
 8001bf0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bf4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d108      	bne.n	8001c16 <HAL_ADC_Init+0x192>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d101      	bne.n	8001c16 <HAL_ADC_Init+0x192>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_ADC_Init+0x194>
 8001c16:	2300      	movs	r3, #0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d11c      	bne.n	8001c56 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d010      	beq.n	8001c44 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d107      	bne.n	8001c3e <HAL_ADC_Init+0x1ba>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_ADC_Init+0x1ba>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <HAL_ADC_Init+0x1bc>
 8001c3e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d108      	bne.n	8001c56 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	431a      	orrs	r2, r3
 8001c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c54:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7e5b      	ldrb	r3, [r3, #25]
 8001c5a:	035b      	lsls	r3, r3, #13
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c60:	2a01      	cmp	r2, #1
 8001c62:	d002      	beq.n	8001c6a <HAL_ADC_Init+0x1e6>
 8001c64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c68:	e000      	b.n	8001c6c <HAL_ADC_Init+0x1e8>
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d11b      	bne.n	8001cc2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7e5b      	ldrb	r3, [r3, #25]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	3b01      	subs	r3, #1
 8001c98:	045a      	lsls	r2, r3, #17
 8001c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca2:	663b      	str	r3, [r7, #96]	; 0x60
 8001ca4:	e00d      	b.n	8001cc2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001cae:	f043 0220 	orr.w	r2, r3, #32
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	f043 0201 	orr.w	r2, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d007      	beq.n	8001cda <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d114      	bne.n	8001d12 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cf6:	f023 0302 	bic.w	r3, r3, #2
 8001cfa:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7e1b      	ldrb	r3, [r3, #24]
 8001d00:	039a      	lsls	r2, r3, #14
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <HAL_ADC_Init+0x320>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d22:	430b      	orrs	r3, r1
 8001d24:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d10c      	bne.n	8001d48 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	f023 010f 	bic.w	r1, r3, #15
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	1e5a      	subs	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	631a      	str	r2, [r3, #48]	; 0x30
 8001d46:	e007      	b.n	8001d58 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 020f 	bic.w	r2, r2, #15
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f023 0303 	bic.w	r3, r3, #3
 8001d66:	f043 0201 	orr.w	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d6e:	e00a      	b.n	8001d86 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	f023 0312 	bic.w	r3, r3, #18
 8001d78:	f043 0210 	orr.w	r2, r3, #16
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001d80:	2301      	movs	r3, #1
 8001d82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001d86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3768      	adds	r7, #104	; 0x68
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000000 	.word	0x20000000
 8001d98:	431bde83 	.word	0x431bde83
 8001d9c:	50000300 	.word	0x50000300
 8001da0:	50000100 	.word	0x50000100
 8001da4:	fff0c007 	.word	0xfff0c007

08001da8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 80b9 	bne.w	8001f3a <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_Start_DMA+0x2e>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e0b4      	b.n	8001f40 <HAL_ADC_Start_DMA+0x198>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001dde:	4b5a      	ldr	r3, [pc, #360]	; (8001f48 <HAL_ADC_Start_DMA+0x1a0>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 031f 	and.w	r3, r3, #31
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f040 80a0 	bne.w	8001f2c <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 fbdd 	bl	80025ac <ADC_Enable>
 8001df2:	4603      	mov	r3, r0
 8001df4:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f040 8092 	bne.w	8001f22 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e06:	f023 0301 	bic.w	r3, r3, #1
 8001e0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e12:	4b4d      	ldr	r3, [pc, #308]	; (8001f48 <HAL_ADC_Start_DMA+0x1a0>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 031f 	and.w	r3, r3, #31
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d004      	beq.n	8001e28 <HAL_ADC_Start_DMA+0x80>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e26:	d115      	bne.n	8001e54 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d027      	beq.n	8001e92 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e52:	e01e      	b.n	8001e92 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e68:	d004      	beq.n	8001e74 <HAL_ADC_Start_DMA+0xcc>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a37      	ldr	r2, [pc, #220]	; (8001f4c <HAL_ADC_Start_DMA+0x1a4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d10e      	bne.n	8001e92 <HAL_ADC_Start_DMA+0xea>
 8001e74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e9e:	d106      	bne.n	8001eae <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea4:	f023 0206 	bic.w	r2, r3, #6
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	645a      	str	r2, [r3, #68]	; 0x44
 8001eac:	e002      	b.n	8001eb4 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec0:	4a23      	ldr	r2, [pc, #140]	; (8001f50 <HAL_ADC_Start_DMA+0x1a8>)
 8001ec2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec8:	4a22      	ldr	r2, [pc, #136]	; (8001f54 <HAL_ADC_Start_DMA+0x1ac>)
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed0:	4a21      	ldr	r2, [pc, #132]	; (8001f58 <HAL_ADC_Start_DMA+0x1b0>)
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	221c      	movs	r2, #28
 8001eda:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0210 	orr.w	r2, r2, #16
 8001eea:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3340      	adds	r3, #64	; 0x40
 8001f06:	4619      	mov	r1, r3
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f000 ff61 	bl	8002dd2 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0204 	orr.w	r2, r2, #4
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	e00d      	b.n	8001f3e <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001f2a:	e008      	b.n	8001f3e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001f38:	e001      	b.n	8001f3e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	50000300 	.word	0x50000300
 8001f4c:	50000100 	.word	0x50000100
 8001f50:	080024e1 	.word	0x080024e1
 8001f54:	0800255b 	.word	0x0800255b
 8001f58:	08002577 	.word	0x08002577

08001f5c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b09b      	sub	sp, #108	; 0x6c
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x22>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e2a5      	b.n	80024ca <HAL_ADC_ConfigChannel+0x56e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f040 8289 	bne.w	80024a8 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d81c      	bhi.n	8001fd8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	231f      	movs	r3, #31
 8001fb4:	4093      	lsls	r3, r2
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	4019      	ands	r1, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	fa00 f203 	lsl.w	r2, r0, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8001fd6:	e063      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b09      	cmp	r3, #9
 8001fde:	d81e      	bhi.n	800201e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	3b1e      	subs	r3, #30
 8001ff4:	221f      	movs	r2, #31
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	4019      	ands	r1, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	3b1e      	subs	r3, #30
 8002010:	fa00 f203 	lsl.w	r2, r0, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	635a      	str	r2, [r3, #52]	; 0x34
 800201c:	e040      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b0e      	cmp	r3, #14
 8002024:	d81e      	bhi.n	8002064 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4413      	add	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	3b3c      	subs	r3, #60	; 0x3c
 800203a:	221f      	movs	r2, #31
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	4019      	ands	r1, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	3b3c      	subs	r3, #60	; 0x3c
 8002056:	fa00 f203 	lsl.w	r2, r0, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	639a      	str	r2, [r3, #56]	; 0x38
 8002062:	e01d      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	3b5a      	subs	r3, #90	; 0x5a
 8002078:	221f      	movs	r2, #31
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	4019      	ands	r1, r3
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	3b5a      	subs	r3, #90	; 0x5a
 8002094:	fa00 f203 	lsl.w	r2, r0, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 80e5 	bne.w	800227a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b09      	cmp	r3, #9
 80020b6:	d91c      	bls.n	80020f2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6999      	ldr	r1, [r3, #24]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4613      	mov	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4413      	add	r3, r2
 80020c8:	3b1e      	subs	r3, #30
 80020ca:	2207      	movs	r2, #7
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	4019      	ands	r1, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	6898      	ldr	r0, [r3, #8]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	3b1e      	subs	r3, #30
 80020e4:	fa00 f203 	lsl.w	r2, r0, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	619a      	str	r2, [r3, #24]
 80020f0:	e019      	b.n	8002126 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6959      	ldr	r1, [r3, #20]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	2207      	movs	r2, #7
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	4019      	ands	r1, r3
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	6898      	ldr	r0, [r3, #8]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	fa00 f203 	lsl.w	r2, r0, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	08db      	lsrs	r3, r3, #3
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	3b01      	subs	r3, #1
 8002144:	2b03      	cmp	r3, #3
 8002146:	d84f      	bhi.n	80021e8 <HAL_ADC_ConfigChannel+0x28c>
 8002148:	a201      	add	r2, pc, #4	; (adr r2, 8002150 <HAL_ADC_ConfigChannel+0x1f4>)
 800214a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214e:	bf00      	nop
 8002150:	08002161 	.word	0x08002161
 8002154:	08002183 	.word	0x08002183
 8002158:	080021a5 	.word	0x080021a5
 800215c:	080021c7 	.word	0x080021c7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002166:	4b9e      	ldr	r3, [pc, #632]	; (80023e0 <HAL_ADC_ConfigChannel+0x484>)
 8002168:	4013      	ands	r3, r2
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	0691      	lsls	r1, r2, #26
 8002170:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002172:	430a      	orrs	r2, r1
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800217e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002180:	e07e      	b.n	8002280 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002188:	4b95      	ldr	r3, [pc, #596]	; (80023e0 <HAL_ADC_ConfigChannel+0x484>)
 800218a:	4013      	ands	r3, r2
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	0691      	lsls	r1, r2, #26
 8002192:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002194:	430a      	orrs	r2, r1
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021a0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021a2:	e06d      	b.n	8002280 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021aa:	4b8d      	ldr	r3, [pc, #564]	; (80023e0 <HAL_ADC_ConfigChannel+0x484>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	0691      	lsls	r1, r2, #26
 80021b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021b6:	430a      	orrs	r2, r1
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021c2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021c4:	e05c      	b.n	8002280 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021cc:	4b84      	ldr	r3, [pc, #528]	; (80023e0 <HAL_ADC_ConfigChannel+0x484>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	0691      	lsls	r1, r2, #26
 80021d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021d8:	430a      	orrs	r2, r1
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021e4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021e6:	e04b      	b.n	8002280 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	069b      	lsls	r3, r3, #26
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d107      	bne.n	800220c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800220a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002212:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	069b      	lsls	r3, r3, #26
 800221c:	429a      	cmp	r2, r3
 800221e:	d107      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800222e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002236:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	069b      	lsls	r3, r3, #26
 8002240:	429a      	cmp	r2, r3
 8002242:	d107      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002252:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800225a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	069b      	lsls	r3, r3, #26
 8002264:	429a      	cmp	r2, r3
 8002266:	d10a      	bne.n	800227e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002276:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002278:	e001      	b.n	800227e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800227a:	bf00      	nop
 800227c:	e000      	b.n	8002280 <HAL_ADC_ConfigChannel+0x324>
      break;
 800227e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d108      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x344>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x344>
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x346>
 80022a0:	2300      	movs	r3, #0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f040 810b 	bne.w	80024be <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d00f      	beq.n	80022d0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2201      	movs	r2, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43da      	mvns	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	400a      	ands	r2, r1
 80022ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80022ce:	e049      	b.n	8002364 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2201      	movs	r2, #1
 80022de:	409a      	lsls	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b09      	cmp	r3, #9
 80022f0:	d91c      	bls.n	800232c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6999      	ldr	r1, [r3, #24]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	3b1b      	subs	r3, #27
 8002304:	2207      	movs	r2, #7
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	4019      	ands	r1, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6898      	ldr	r0, [r3, #8]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	3b1b      	subs	r3, #27
 800231e:	fa00 f203 	lsl.w	r2, r0, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	619a      	str	r2, [r3, #24]
 800232a:	e01b      	b.n	8002364 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6959      	ldr	r1, [r3, #20]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	2207      	movs	r2, #7
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	4019      	ands	r1, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	6898      	ldr	r0, [r3, #8]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	4613      	mov	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	fa00 f203 	lsl.w	r2, r0, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002364:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <HAL_ADC_ConfigChannel+0x488>)
 8002366:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b10      	cmp	r3, #16
 800236e:	d105      	bne.n	800237c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002378:	2b00      	cmp	r3, #0
 800237a:	d015      	beq.n	80023a8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002380:	2b11      	cmp	r3, #17
 8002382:	d105      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00b      	beq.n	80023a8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002394:	2b12      	cmp	r3, #18
 8002396:	f040 8092 	bne.w	80024be <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800239a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f040 808b 	bne.w	80024be <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023b0:	d102      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x45c>
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_ADC_ConfigChannel+0x48c>)
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	e002      	b.n	80023be <HAL_ADC_ConfigChannel+0x462>
 80023b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023bc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d10f      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x490>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d108      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x490>
 80023da:	2301      	movs	r3, #1
 80023dc:	e007      	b.n	80023ee <HAL_ADC_ConfigChannel+0x492>
 80023de:	bf00      	nop
 80023e0:	83fff000 	.word	0x83fff000
 80023e4:	50000300 	.word	0x50000300
 80023e8:	50000100 	.word	0x50000100
 80023ec:	2300      	movs	r3, #0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d150      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80023f2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d010      	beq.n	800241a <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b01      	cmp	r3, #1
 8002402:	d107      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x4b8>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x4b8>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_ADC_ConfigChannel+0x4ba>
 8002414:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002416:	2b00      	cmp	r3, #0
 8002418:	d13c      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b10      	cmp	r3, #16
 8002420:	d11d      	bne.n	800245e <HAL_ADC_ConfigChannel+0x502>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800242a:	d118      	bne.n	800245e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800242c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002436:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002438:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <HAL_ADC_ConfigChannel+0x57c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a27      	ldr	r2, [pc, #156]	; (80024dc <HAL_ADC_ConfigChannel+0x580>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	0c9a      	lsrs	r2, r3, #18
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800244e:	e002      	b.n	8002456 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	3b01      	subs	r3, #1
 8002454:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f9      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800245c:	e02e      	b.n	80024bc <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b11      	cmp	r3, #17
 8002464:	d10b      	bne.n	800247e <HAL_ADC_ConfigChannel+0x522>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800246e:	d106      	bne.n	800247e <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800247a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800247c:	e01e      	b.n	80024bc <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b12      	cmp	r3, #18
 8002484:	d11a      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800248e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002490:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002492:	e013      	b.n	80024bc <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f043 0220 	orr.w	r2, r3, #32
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80024a6:	e00a      	b.n	80024be <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f043 0220 	orr.w	r2, r3, #32
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80024ba:	e000      	b.n	80024be <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024bc:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80024c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	376c      	adds	r7, #108	; 0x6c
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000000 	.word	0x20000000
 80024dc:	431bde83 	.word	0x431bde83

080024e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d126      	bne.n	8002548 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002510:	2b00      	cmp	r3, #0
 8002512:	d115      	bne.n	8002540 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002518:	2b00      	cmp	r3, #0
 800251a:	d111      	bne.n	8002540 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d105      	bne.n	8002540 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	f043 0201 	orr.w	r2, r3, #1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f7ff fa81 	bl	8001a48 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002546:	e004      	b.n	8002552 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4798      	blx	r3
}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f7ff fa77 	bl	8001a5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002594:	f043 0204 	orr.w	r2, r3, #4
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f7ff fa67 	bl	8001a70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d108      	bne.n	80025d8 <ADC_Enable+0x2c>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <ADC_Enable+0x2c>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <ADC_Enable+0x2e>
 80025d8:	2300      	movs	r3, #0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d13c      	bne.n	8002658 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <ADC_Enable+0xb8>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00d      	beq.n	8002608 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f043 0210 	orr.w	r2, r3, #16
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	f043 0201 	orr.w	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e028      	b.n	800265a <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002618:	f7ff fa0a 	bl	8001a30 <HAL_GetTick>
 800261c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800261e:	e014      	b.n	800264a <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002620:	f7ff fa06 	bl	8001a30 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d90d      	bls.n	800264a <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f043 0210 	orr.w	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	f043 0201 	orr.w	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e007      	b.n	800265a <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b01      	cmp	r3, #1
 8002656:	d1e3      	bne.n	8002620 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	8000003f 	.word	0x8000003f

08002668 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d108      	bne.n	8002694 <ADC_Disable+0x2c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <ADC_Disable+0x2c>
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <ADC_Disable+0x2e>
 8002694:	2300      	movs	r3, #0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d040      	beq.n	800271c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 030d 	and.w	r3, r3, #13
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d10f      	bne.n	80026c8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0202 	orr.w	r2, r2, #2
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2203      	movs	r2, #3
 80026be:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80026c0:	f7ff f9b6 	bl	8001a30 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026c6:	e022      	b.n	800270e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f043 0210 	orr.w	r2, r3, #16
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d8:	f043 0201 	orr.w	r2, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e01c      	b.n	800271e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026e4:	f7ff f9a4 	bl	8001a30 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d90d      	bls.n	800270e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f043 0210 	orr.w	r2, r3, #16
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f043 0201 	orr.w	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e007      	b.n	800271e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	d0e3      	beq.n	80026e4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <__NVIC_SetPriorityGrouping+0x44>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002744:	4013      	ands	r3, r2
 8002746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275a:	4a04      	ldr	r2, [pc, #16]	; (800276c <__NVIC_SetPriorityGrouping+0x44>)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	60d3      	str	r3, [r2, #12]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <__NVIC_GetPriorityGrouping+0x18>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	f003 0307 	and.w	r3, r3, #7
}
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	2b00      	cmp	r3, #0
 800279c:	db0b      	blt.n	80027b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	f003 021f 	and.w	r2, r3, #31
 80027a4:	4907      	ldr	r1, [pc, #28]	; (80027c4 <__NVIC_EnableIRQ+0x38>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	2001      	movs	r0, #1
 80027ae:	fa00 f202 	lsl.w	r2, r0, r2
 80027b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	e000e100 	.word	0xe000e100

080027c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	6039      	str	r1, [r7, #0]
 80027d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	db0a      	blt.n	80027f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	490c      	ldr	r1, [pc, #48]	; (8002814 <__NVIC_SetPriority+0x4c>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	0112      	lsls	r2, r2, #4
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	440b      	add	r3, r1
 80027ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f0:	e00a      	b.n	8002808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4908      	ldr	r1, [pc, #32]	; (8002818 <__NVIC_SetPriority+0x50>)
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	3b04      	subs	r3, #4
 8002800:	0112      	lsls	r2, r2, #4
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	440b      	add	r3, r1
 8002806:	761a      	strb	r2, [r3, #24]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000e100 	.word	0xe000e100
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f1c3 0307 	rsb	r3, r3, #7
 8002836:	2b04      	cmp	r3, #4
 8002838:	bf28      	it	cs
 800283a:	2304      	movcs	r3, #4
 800283c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3304      	adds	r3, #4
 8002842:	2b06      	cmp	r3, #6
 8002844:	d902      	bls.n	800284c <NVIC_EncodePriority+0x30>
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3b03      	subs	r3, #3
 800284a:	e000      	b.n	800284e <NVIC_EncodePriority+0x32>
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	f04f 32ff 	mov.w	r2, #4294967295
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	401a      	ands	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002864:	f04f 31ff 	mov.w	r1, #4294967295
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa01 f303 	lsl.w	r3, r1, r3
 800286e:	43d9      	mvns	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002874:	4313      	orrs	r3, r2
         );
}
 8002876:	4618      	mov	r0, r3
 8002878:	3724      	adds	r7, #36	; 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002894:	d301      	bcc.n	800289a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002896:	2301      	movs	r3, #1
 8002898:	e00f      	b.n	80028ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289a:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <SysTick_Config+0x40>)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a2:	210f      	movs	r1, #15
 80028a4:	f04f 30ff 	mov.w	r0, #4294967295
 80028a8:	f7ff ff8e 	bl	80027c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <SysTick_Config+0x40>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b2:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <SysTick_Config+0x40>)
 80028b4:	2207      	movs	r2, #7
 80028b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	e000e010 	.word	0xe000e010

080028c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff ff29 	bl	8002728 <__NVIC_SetPriorityGrouping>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f0:	f7ff ff3e 	bl	8002770 <__NVIC_GetPriorityGrouping>
 80028f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	6978      	ldr	r0, [r7, #20]
 80028fc:	f7ff ff8e 	bl	800281c <NVIC_EncodePriority>
 8002900:	4602      	mov	r2, r0
 8002902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff5d 	bl	80027c8 <__NVIC_SetPriority>
}
 800290e:	bf00      	nop
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff31 	bl	800278c <__NVIC_EnableIRQ>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff ffa2 	bl	8002884 <SysTick_Config>
 8002940:	4603      	mov	r3, r0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e054      	b.n	8002a08 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	7f5b      	ldrb	r3, [r3, #29]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fe f96a 	bl	8000c48 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	791b      	ldrb	r3, [r3, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10c      	bne.n	800299c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a22      	ldr	r2, [pc, #136]	; (8002a10 <HAL_CRC_Init+0xc4>)
 8002988:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0218 	bic.w	r2, r2, #24
 8002998:	609a      	str	r2, [r3, #8]
 800299a:	e00c      	b.n	80029b6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6899      	ldr	r1, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	461a      	mov	r2, r3
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f946 	bl	8002c38 <HAL_CRCEx_Polynomial_Set>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e028      	b.n	8002a08 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	795b      	ldrb	r3, [r3, #5]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d105      	bne.n	80029ca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f04f 32ff 	mov.w	r2, #4294967295
 80029c6:	611a      	str	r2, [r3, #16]
 80029c8:	e004      	b.n	80029d4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6912      	ldr	r2, [r2, #16]
 80029d2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699a      	ldr	r2, [r3, #24]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	04c11db7 	.word	0x04c11db7

08002a14 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002a20:	2300      	movs	r3, #0
 8002a22:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2202      	movs	r2, #2
 8002a28:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0201 	orr.w	r2, r2, #1
 8002a38:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d022      	beq.n	8002a88 <HAL_CRC_Calculate+0x74>
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d002      	beq.n	8002a4c <HAL_CRC_Calculate+0x38>
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d017      	beq.n	8002a7a <HAL_CRC_Calculate+0x66>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002a4a:	e024      	b.n	8002a96 <HAL_CRC_Calculate+0x82>
      for (index = 0U; index < BufferLength; index++)
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	e00a      	b.n	8002a68 <HAL_CRC_Calculate+0x54>
        hcrc->Instance->DR = pBuffer[index];
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	441a      	add	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	3301      	adds	r3, #1
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d3f0      	bcc.n	8002a52 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	613b      	str	r3, [r7, #16]
      break;
 8002a78:	e00d      	b.n	8002a96 <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f811 	bl	8002aa6 <CRC_Handle_8>
 8002a84:	6138      	str	r0, [r7, #16]
      break;
 8002a86:	e006      	b.n	8002a96 <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f898 	bl	8002bc2 <CRC_Handle_16>
 8002a92:	6138      	str	r0, [r7, #16]
      break;
 8002a94:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002a9c:	693b      	ldr	r3, [r7, #16]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b089      	sub	sp, #36	; 0x24
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	e023      	b.n	8002b00 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	4413      	add	r3, r2
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	3301      	adds	r3, #1
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	440b      	add	r3, r1
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002ad2:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	3302      	adds	r3, #2
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	440b      	add	r3, r1
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002ae2:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	3303      	adds	r3, #3
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	440b      	add	r3, r1
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002af6:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002af8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3301      	adds	r3, #1
 8002afe:	61fb      	str	r3, [r7, #28]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	089b      	lsrs	r3, r3, #2
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d3d6      	bcc.n	8002ab8 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d04d      	beq.n	8002bb0 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d107      	bne.n	8002b2e <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	4413      	add	r3, r2
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d116      	bne.n	8002b66 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	4413      	add	r3, r2
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	021b      	lsls	r3, r3, #8
 8002b44:	b21a      	sxth	r2, r3
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	440b      	add	r3, r1
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b21b      	sxth	r3, r3
 8002b54:	4313      	orrs	r3, r2
 8002b56:	b21b      	sxth	r3, r3
 8002b58:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	8b7a      	ldrh	r2, [r7, #26]
 8002b64:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d11f      	bne.n	8002bb0 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	4413      	add	r3, r2
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	b21a      	sxth	r2, r3
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	3301      	adds	r3, #1
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	440b      	add	r3, r1
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	b21b      	sxth	r3, r3
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	b21b      	sxth	r3, r3
 8002b90:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	8b7a      	ldrh	r2, [r7, #26]
 8002b9c:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	3302      	adds	r3, #2
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3724      	adds	r7, #36	; 0x24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b087      	sub	sp, #28
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	e013      	b.n	8002bfc <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	4413      	add	r3, r2
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	041a      	lsls	r2, r3, #16
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	3302      	adds	r3, #2
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	440b      	add	r3, r1
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	4619      	mov	r1, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	085b      	lsrs	r3, r3, #1
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d3e6      	bcc.n	8002bd4 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d009      	beq.n	8002c24 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	881a      	ldrh	r2, [r3, #0]
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002c48:	231f      	movs	r3, #31
 8002c4a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002c4c:	bf00      	nop
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1e5a      	subs	r2, r3, #1
 8002c52:	613a      	str	r2, [r7, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d009      	beq.n	8002c6c <HAL_CRCEx_Polynomial_Set+0x34>
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b18      	cmp	r3, #24
 8002c70:	d846      	bhi.n	8002d00 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002c72:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c78:	08002d07 	.word	0x08002d07
 8002c7c:	08002d01 	.word	0x08002d01
 8002c80:	08002d01 	.word	0x08002d01
 8002c84:	08002d01 	.word	0x08002d01
 8002c88:	08002d01 	.word	0x08002d01
 8002c8c:	08002d01 	.word	0x08002d01
 8002c90:	08002d01 	.word	0x08002d01
 8002c94:	08002d01 	.word	0x08002d01
 8002c98:	08002cf5 	.word	0x08002cf5
 8002c9c:	08002d01 	.word	0x08002d01
 8002ca0:	08002d01 	.word	0x08002d01
 8002ca4:	08002d01 	.word	0x08002d01
 8002ca8:	08002d01 	.word	0x08002d01
 8002cac:	08002d01 	.word	0x08002d01
 8002cb0:	08002d01 	.word	0x08002d01
 8002cb4:	08002d01 	.word	0x08002d01
 8002cb8:	08002ce9 	.word	0x08002ce9
 8002cbc:	08002d01 	.word	0x08002d01
 8002cc0:	08002d01 	.word	0x08002d01
 8002cc4:	08002d01 	.word	0x08002d01
 8002cc8:	08002d01 	.word	0x08002d01
 8002ccc:	08002d01 	.word	0x08002d01
 8002cd0:	08002d01 	.word	0x08002d01
 8002cd4:	08002d01 	.word	0x08002d01
 8002cd8:	08002cdd 	.word	0x08002cdd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d913      	bls.n	8002d0a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002ce6:	e010      	b.n	8002d0a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2b07      	cmp	r3, #7
 8002cec:	d90f      	bls.n	8002d0e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002cf2:	e00c      	b.n	8002d0e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	2b0f      	cmp	r3, #15
 8002cf8:	d90b      	bls.n	8002d12 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002cfe:	e008      	b.n	8002d12 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	75fb      	strb	r3, [r7, #23]
      break;
 8002d04:	e006      	b.n	8002d14 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002d06:	bf00      	nop
 8002d08:	e004      	b.n	8002d14 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002d0a:	bf00      	nop
 8002d0c:	e002      	b.n	8002d14 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e000      	b.n	8002d14 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002d12:	bf00      	nop
  }
  if (status == HAL_OK)
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10d      	bne.n	8002d36 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 0118 	bic.w	r1, r3, #24
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	371c      	adds	r7, #28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e037      	b.n	8002dca <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d70:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d74:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f9b7 	bl	8003120 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}  
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b086      	sub	sp, #24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_DMA_Start_IT+0x20>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e04a      	b.n	8002e88 <HAL_DMA_Start_IT+0xb6>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d13a      	bne.n	8002e7a <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	68b9      	ldr	r1, [r7, #8]
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f94b 	bl	80030c4 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 020e 	orr.w	r2, r2, #14
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	e00f      	b.n	8002e68 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 020a 	orr.w	r2, r2, #10
 8002e56:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0204 	bic.w	r2, r2, #4
 8002e66:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	e005      	b.n	8002e86 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002e82:	2302      	movs	r3, #2
 8002e84:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002e86:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d008      	beq.n	8002eb4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e020      	b.n	8002ef6 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 020e 	bic.w	r2, r2, #14
 8002ec2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002edc:	2101      	movs	r1, #1
 8002ede:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d005      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
 8002f22:	e027      	b.n	8002f74 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 020e 	bic.w	r2, r2, #14
 8002f32:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f52:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	4798      	blx	r3
    } 
  }
  return status;
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d024      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x72>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01f      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d107      	bne.n	8002fce <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0204 	bic.w	r2, r2, #4
 8002fcc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd6:	2104      	movs	r1, #4
 8002fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fdc:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d06a      	beq.n	80030bc <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002fee:	e065      	b.n	80030bc <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d02c      	beq.n	800305a <HAL_DMA_IRQHandler+0xdc>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d027      	beq.n	800305a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10b      	bne.n	8003030 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 020a 	bic.w	r2, r2, #10
 8003026:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003038:	2102      	movs	r1, #2
 800303a:	fa01 f202 	lsl.w	r2, r1, r2
 800303e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	d035      	beq.n	80030bc <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003058:	e030      	b.n	80030bc <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	2208      	movs	r2, #8
 8003060:	409a      	lsls	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4013      	ands	r3, r2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d028      	beq.n	80030bc <HAL_DMA_IRQHandler+0x13e>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d023      	beq.n	80030bc <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 020e 	bic.w	r2, r2, #14
 8003082:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308c:	2101      	movs	r1, #1
 800308e:	fa01 f202 	lsl.w	r2, r1, r2
 8003092:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	4798      	blx	r3
    }
  }
}  
 80030ba:	e7ff      	b.n	80030bc <HAL_DMA_IRQHandler+0x13e>
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030da:	2101      	movs	r1, #1
 80030dc:	fa01 f202 	lsl.w	r2, r1, r2
 80030e0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b10      	cmp	r3, #16
 80030f0:	d108      	bne.n	8003104 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003102:	e007      	b.n	8003114 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	60da      	str	r2, [r3, #12]
}
 8003114:	bf00      	nop
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	4b09      	ldr	r3, [pc, #36]	; (8003154 <DMA_CalcBaseAndBitshift+0x34>)
 8003130:	4413      	add	r3, r2
 8003132:	4a09      	ldr	r2, [pc, #36]	; (8003158 <DMA_CalcBaseAndBitshift+0x38>)
 8003134:	fba2 2303 	umull	r2, r3, r2, r3
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	009a      	lsls	r2, r3, #2
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a06      	ldr	r2, [pc, #24]	; (800315c <DMA_CalcBaseAndBitshift+0x3c>)
 8003144:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	bffdfff8 	.word	0xbffdfff8
 8003158:	cccccccd 	.word	0xcccccccd
 800315c:	40020000 	.word	0x40020000

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800316e:	e14e      	b.n	800340e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	2101      	movs	r1, #1
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	fa01 f303 	lsl.w	r3, r1, r3
 800317c:	4013      	ands	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8140 	beq.w	8003408 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d00b      	beq.n	80031a8 <HAL_GPIO_Init+0x48>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d007      	beq.n	80031a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800319c:	2b11      	cmp	r3, #17
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b12      	cmp	r3, #18
 80031a6:	d130      	bne.n	800320a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	2203      	movs	r2, #3
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031de:	2201      	movs	r2, #1
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43db      	mvns	r3, r3
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4013      	ands	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	f003 0201 	and.w	r2, r3, #1
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	2203      	movs	r2, #3
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4013      	ands	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0xea>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b12      	cmp	r3, #18
 8003248:	d123      	bne.n	8003292 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	08da      	lsrs	r2, r3, #3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3208      	adds	r2, #8
 8003252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003256:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	220f      	movs	r2, #15
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	08da      	lsrs	r2, r3, #3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3208      	adds	r2, #8
 800328c:	6939      	ldr	r1, [r7, #16]
 800328e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	2203      	movs	r2, #3
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 0203 	and.w	r2, r3, #3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 809a 	beq.w	8003408 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d4:	4b55      	ldr	r3, [pc, #340]	; (800342c <HAL_GPIO_Init+0x2cc>)
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	4a54      	ldr	r2, [pc, #336]	; (800342c <HAL_GPIO_Init+0x2cc>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	6193      	str	r3, [r2, #24]
 80032e0:	4b52      	ldr	r3, [pc, #328]	; (800342c <HAL_GPIO_Init+0x2cc>)
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032ec:	4a50      	ldr	r2, [pc, #320]	; (8003430 <HAL_GPIO_Init+0x2d0>)
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	089b      	lsrs	r3, r3, #2
 80032f2:	3302      	adds	r3, #2
 80032f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	220f      	movs	r2, #15
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003316:	d013      	beq.n	8003340 <HAL_GPIO_Init+0x1e0>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a46      	ldr	r2, [pc, #280]	; (8003434 <HAL_GPIO_Init+0x2d4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00d      	beq.n	800333c <HAL_GPIO_Init+0x1dc>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a45      	ldr	r2, [pc, #276]	; (8003438 <HAL_GPIO_Init+0x2d8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d007      	beq.n	8003338 <HAL_GPIO_Init+0x1d8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a44      	ldr	r2, [pc, #272]	; (800343c <HAL_GPIO_Init+0x2dc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d101      	bne.n	8003334 <HAL_GPIO_Init+0x1d4>
 8003330:	2303      	movs	r3, #3
 8003332:	e006      	b.n	8003342 <HAL_GPIO_Init+0x1e2>
 8003334:	2305      	movs	r3, #5
 8003336:	e004      	b.n	8003342 <HAL_GPIO_Init+0x1e2>
 8003338:	2302      	movs	r3, #2
 800333a:	e002      	b.n	8003342 <HAL_GPIO_Init+0x1e2>
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <HAL_GPIO_Init+0x1e2>
 8003340:	2300      	movs	r3, #0
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	f002 0203 	and.w	r2, r2, #3
 8003348:	0092      	lsls	r2, r2, #2
 800334a:	4093      	lsls	r3, r2
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003352:	4937      	ldr	r1, [pc, #220]	; (8003430 <HAL_GPIO_Init+0x2d0>)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	3302      	adds	r3, #2
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003360:	4b37      	ldr	r3, [pc, #220]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	43db      	mvns	r3, r3
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003384:	4a2e      	ldr	r2, [pc, #184]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800338a:	4b2d      	ldr	r3, [pc, #180]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	43db      	mvns	r3, r3
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4013      	ands	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033ae:	4a24      	ldr	r2, [pc, #144]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033b4:	4b22      	ldr	r3, [pc, #136]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	43db      	mvns	r3, r3
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4013      	ands	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80033d8:	4a19      	ldr	r2, [pc, #100]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033de:	4b18      	ldr	r3, [pc, #96]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	43db      	mvns	r3, r3
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4013      	ands	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003402:	4a0f      	ldr	r2, [pc, #60]	; (8003440 <HAL_GPIO_Init+0x2e0>)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	3301      	adds	r3, #1
 800340c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	f47f aea9 	bne.w	8003170 <HAL_GPIO_Init+0x10>
  }
}
 800341e:	bf00      	nop
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000
 8003430:	40010000 	.word	0x40010000
 8003434:	48000400 	.word	0x48000400
 8003438:	48000800 	.word	0x48000800
 800343c:	48000c00 	.word	0x48000c00
 8003440:	40010400 	.word	0x40010400

08003444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	807b      	strh	r3, [r7, #2]
 8003450:	4613      	mov	r3, r2
 8003452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003454:	787b      	ldrb	r3, [r7, #1]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800345a:	887a      	ldrh	r2, [r7, #2]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003460:	e002      	b.n	8003468 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003462:	887a      	ldrh	r2, [r7, #2]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800347e:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d006      	beq.n	8003498 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800348a:	4a05      	ldr	r2, [pc, #20]	; (80034a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800348c:	88fb      	ldrh	r3, [r7, #6]
 800348e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	4618      	mov	r0, r3
 8003494:	f003 ff80 	bl	8007398 <HAL_GPIO_EXTI_Callback>
  }
}
 8003498:	bf00      	nop
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40010400 	.word	0x40010400

080034a4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e038      	b.n	8003528 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80034be:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f245 5255 	movw	r2, #21845	; 0x5555
 80034c8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6852      	ldr	r2, [r2, #4]
 80034d2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6892      	ldr	r2, [r2, #8]
 80034dc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80034de:	f7fe faa7 	bl	8001a30 <HAL_GetTick>
 80034e2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80034e4:	e008      	b.n	80034f8 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80034e6:	f7fe faa3 	bl	8001a30 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b26      	cmp	r3, #38	; 0x26
 80034f2:	d901      	bls.n	80034f8 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e017      	b.n	8003528 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f1      	bne.n	80034e6 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	429a      	cmp	r2, r3
 800350e:	d005      	beq.n	800351c <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	68d2      	ldr	r2, [r2, #12]
 8003518:	611a      	str	r2, [r3, #16]
 800351a:	e004      	b.n	8003526 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003524:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003540:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003556:	af00      	add	r7, sp, #0
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800355c:	1d3b      	adds	r3, r7, #4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d102      	bne.n	800356a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	f000 bef4 	b.w	8004352 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356a:	1d3b      	adds	r3, r7, #4
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 816a 	beq.w	800384e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800357a:	4bb3      	ldr	r3, [pc, #716]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b04      	cmp	r3, #4
 8003584:	d00c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003586:	4bb0      	ldr	r3, [pc, #704]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 030c 	and.w	r3, r3, #12
 800358e:	2b08      	cmp	r3, #8
 8003590:	d159      	bne.n	8003646 <HAL_RCC_OscConfig+0xf6>
 8003592:	4bad      	ldr	r3, [pc, #692]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800359e:	d152      	bne.n	8003646 <HAL_RCC_OscConfig+0xf6>
 80035a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035a4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035b4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d102      	bne.n	80035d2 <HAL_RCC_OscConfig+0x82>
 80035cc:	4b9e      	ldr	r3, [pc, #632]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	e015      	b.n	80035fe <HAL_RCC_OscConfig+0xae>
 80035d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035d6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80035de:	fa93 f3a3 	rbit	r3, r3
 80035e2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80035e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035ea:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80035ee:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80035fa:	4b93      	ldr	r3, [pc, #588]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003602:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003606:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800360a:	fa92 f2a2 	rbit	r2, r2
 800360e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003612:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003616:	fab2 f282 	clz	r2, r2
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	f042 0220 	orr.w	r2, r2, #32
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	f002 021f 	and.w	r2, r2, #31
 8003626:	2101      	movs	r1, #1
 8003628:	fa01 f202 	lsl.w	r2, r1, r2
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 810c 	beq.w	800384c <HAL_RCC_OscConfig+0x2fc>
 8003634:	1d3b      	adds	r3, r7, #4
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f040 8106 	bne.w	800384c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f000 be86 	b.w	8004352 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003646:	1d3b      	adds	r3, r7, #4
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003650:	d106      	bne.n	8003660 <HAL_RCC_OscConfig+0x110>
 8003652:	4b7d      	ldr	r3, [pc, #500]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a7c      	ldr	r2, [pc, #496]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 8003658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	e030      	b.n	80036c2 <HAL_RCC_OscConfig+0x172>
 8003660:	1d3b      	adds	r3, r7, #4
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0x134>
 800366a:	4b77      	ldr	r3, [pc, #476]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a76      	ldr	r2, [pc, #472]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 8003670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	4b74      	ldr	r3, [pc, #464]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a73      	ldr	r2, [pc, #460]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 800367c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e01e      	b.n	80036c2 <HAL_RCC_OscConfig+0x172>
 8003684:	1d3b      	adds	r3, r7, #4
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800368e:	d10c      	bne.n	80036aa <HAL_RCC_OscConfig+0x15a>
 8003690:	4b6d      	ldr	r3, [pc, #436]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a6c      	ldr	r2, [pc, #432]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 8003696:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	4b6a      	ldr	r3, [pc, #424]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a69      	ldr	r2, [pc, #420]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 80036a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	e00b      	b.n	80036c2 <HAL_RCC_OscConfig+0x172>
 80036aa:	4b67      	ldr	r3, [pc, #412]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a66      	ldr	r2, [pc, #408]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 80036b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b64      	ldr	r3, [pc, #400]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a63      	ldr	r2, [pc, #396]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 80036bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036c2:	4b61      	ldr	r3, [pc, #388]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	f023 020f 	bic.w	r2, r3, #15
 80036ca:	1d3b      	adds	r3, r7, #4
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	495d      	ldr	r1, [pc, #372]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d059      	beq.n	8003794 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7fe f9a6 	bl	8001a30 <HAL_GetTick>
 80036e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e8:	e00a      	b.n	8003700 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036ea:	f7fe f9a1 	bl	8001a30 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	; 0x64
 80036f8:	d902      	bls.n	8003700 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	f000 be29 	b.w	8004352 <HAL_RCC_OscConfig+0xe02>
 8003700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003704:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800370c:	fa93 f3a3 	rbit	r3, r3
 8003710:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003714:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003718:	fab3 f383 	clz	r3, r3
 800371c:	b2db      	uxtb	r3, r3
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	b2db      	uxtb	r3, r3
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	d102      	bne.n	8003732 <HAL_RCC_OscConfig+0x1e2>
 800372c:	4b46      	ldr	r3, [pc, #280]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	e015      	b.n	800375e <HAL_RCC_OscConfig+0x20e>
 8003732:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003736:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003746:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800374a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800374e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800375a:	4b3b      	ldr	r3, [pc, #236]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003762:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003766:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800376a:	fa92 f2a2 	rbit	r2, r2
 800376e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003772:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003776:	fab2 f282 	clz	r2, r2
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	f042 0220 	orr.w	r2, r2, #32
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	f002 021f 	and.w	r2, r2, #31
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f202 	lsl.w	r2, r1, r2
 800378c:	4013      	ands	r3, r2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0ab      	beq.n	80036ea <HAL_RCC_OscConfig+0x19a>
 8003792:	e05c      	b.n	800384e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003794:	f7fe f94c 	bl	8001a30 <HAL_GetTick>
 8003798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379c:	e00a      	b.n	80037b4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800379e:	f7fe f947 	bl	8001a30 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	; 0x64
 80037ac:	d902      	bls.n	80037b4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	f000 bdcf 	b.w	8004352 <HAL_RCC_OscConfig+0xe02>
 80037b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037b8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80037c0:	fa93 f3a3 	rbit	r3, r3
 80037c4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80037c8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037cc:	fab3 f383 	clz	r3, r3
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d102      	bne.n	80037e6 <HAL_RCC_OscConfig+0x296>
 80037e0:	4b19      	ldr	r3, [pc, #100]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	e015      	b.n	8003812 <HAL_RCC_OscConfig+0x2c2>
 80037e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037ea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80037fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037fe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003802:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003806:	fa93 f3a3 	rbit	r3, r3
 800380a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800380e:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <HAL_RCC_OscConfig+0x2f8>)
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003816:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800381a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800381e:	fa92 f2a2 	rbit	r2, r2
 8003822:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003826:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800382a:	fab2 f282 	clz	r2, r2
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	f042 0220 	orr.w	r2, r2, #32
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	f002 021f 	and.w	r2, r2, #31
 800383a:	2101      	movs	r1, #1
 800383c:	fa01 f202 	lsl.w	r2, r1, r2
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1ab      	bne.n	800379e <HAL_RCC_OscConfig+0x24e>
 8003846:	e002      	b.n	800384e <HAL_RCC_OscConfig+0x2fe>
 8003848:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800384e:	1d3b      	adds	r3, r7, #4
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 816f 	beq.w	8003b3c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800385e:	4bd0      	ldr	r3, [pc, #832]	; (8003ba0 <HAL_RCC_OscConfig+0x650>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800386a:	4bcd      	ldr	r3, [pc, #820]	; (8003ba0 <HAL_RCC_OscConfig+0x650>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	2b08      	cmp	r3, #8
 8003874:	d16c      	bne.n	8003950 <HAL_RCC_OscConfig+0x400>
 8003876:	4bca      	ldr	r3, [pc, #808]	; (8003ba0 <HAL_RCC_OscConfig+0x650>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d166      	bne.n	8003950 <HAL_RCC_OscConfig+0x400>
 8003882:	2302      	movs	r3, #2
 8003884:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003888:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800388c:	fa93 f3a3 	rbit	r3, r3
 8003890:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003894:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003898:	fab3 f383 	clz	r3, r3
 800389c:	b2db      	uxtb	r3, r3
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d102      	bne.n	80038b2 <HAL_RCC_OscConfig+0x362>
 80038ac:	4bbc      	ldr	r3, [pc, #752]	; (8003ba0 <HAL_RCC_OscConfig+0x650>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	e013      	b.n	80038da <HAL_RCC_OscConfig+0x38a>
 80038b2:	2302      	movs	r3, #2
 80038b4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80038bc:	fa93 f3a3 	rbit	r3, r3
 80038c0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80038c4:	2302      	movs	r3, #2
 80038c6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80038ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038ce:	fa93 f3a3 	rbit	r3, r3
 80038d2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80038d6:	4bb2      	ldr	r3, [pc, #712]	; (8003ba0 <HAL_RCC_OscConfig+0x650>)
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	2202      	movs	r2, #2
 80038dc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80038e0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80038e4:	fa92 f2a2 	rbit	r2, r2
 80038e8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80038ec:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80038f0:	fab2 f282 	clz	r2, r2
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	f042 0220 	orr.w	r2, r2, #32
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	f002 021f 	and.w	r2, r2, #31
 8003900:	2101      	movs	r1, #1
 8003902:	fa01 f202 	lsl.w	r2, r1, r2
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <HAL_RCC_OscConfig+0x3cc>
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d002      	beq.n	800391c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	f000 bd1b 	b.w	8004352 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391c:	4ba0      	ldr	r3, [pc, #640]	; (8003ba0 <HAL_RCC_OscConfig+0x650>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003924:	1d3b      	adds	r3, r7, #4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	21f8      	movs	r1, #248	; 0xf8
 800392c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003930:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003934:	fa91 f1a1 	rbit	r1, r1
 8003938:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800393c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003940:	fab1 f181 	clz	r1, r1
 8003944:	b2c9      	uxtb	r1, r1
 8003946:	408b      	lsls	r3, r1
 8003948:	4995      	ldr	r1, [pc, #596]	; (8003ba0 <HAL_RCC_OscConfig+0x650>)
 800394a:	4313      	orrs	r3, r2
 800394c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394e:	e0f5      	b.n	8003b3c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003950:	1d3b      	adds	r3, r7, #4
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 8085 	beq.w	8003a66 <HAL_RCC_OscConfig+0x516>
 800395c:	2301      	movs	r3, #1
 800395e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003966:	fa93 f3a3 	rbit	r3, r3
 800396a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800396e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003972:	fab3 f383 	clz	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800397c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	461a      	mov	r2, r3
 8003984:	2301      	movs	r3, #1
 8003986:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7fe f852 	bl	8001a30 <HAL_GetTick>
 800398c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003990:	e00a      	b.n	80039a8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003992:	f7fe f84d 	bl	8001a30 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d902      	bls.n	80039a8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	f000 bcd5 	b.w	8004352 <HAL_RCC_OscConfig+0xe02>
 80039a8:	2302      	movs	r3, #2
 80039aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80039b2:	fa93 f3a3 	rbit	r3, r3
 80039b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80039ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039be:	fab3 f383 	clz	r3, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d102      	bne.n	80039d8 <HAL_RCC_OscConfig+0x488>
 80039d2:	4b73      	ldr	r3, [pc, #460]	; (8003ba0 <HAL_RCC_OscConfig+0x650>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	e013      	b.n	8003a00 <HAL_RCC_OscConfig+0x4b0>
 80039d8:	2302      	movs	r3, #2
 80039da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80039e2:	fa93 f3a3 	rbit	r3, r3
 80039e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80039ea:	2302      	movs	r3, #2
 80039ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80039f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80039f4:	fa93 f3a3 	rbit	r3, r3
 80039f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80039fc:	4b68      	ldr	r3, [pc, #416]	; (8003ba0 <HAL_RCC_OscConfig+0x650>)
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	2202      	movs	r2, #2
 8003a02:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003a06:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003a0a:	fa92 f2a2 	rbit	r2, r2
 8003a0e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003a12:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003a16:	fab2 f282 	clz	r2, r2
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	f042 0220 	orr.w	r2, r2, #32
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	f002 021f 	and.w	r2, r2, #31
 8003a26:	2101      	movs	r1, #1
 8003a28:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0af      	beq.n	8003992 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a32:	4b5b      	ldr	r3, [pc, #364]	; (8003ba0 <HAL_RCC_OscConfig+0x650>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a3a:	1d3b      	adds	r3, r7, #4
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	21f8      	movs	r1, #248	; 0xf8
 8003a42:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003a4a:	fa91 f1a1 	rbit	r1, r1
 8003a4e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003a52:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003a56:	fab1 f181 	clz	r1, r1
 8003a5a:	b2c9      	uxtb	r1, r1
 8003a5c:	408b      	lsls	r3, r1
 8003a5e:	4950      	ldr	r1, [pc, #320]	; (8003ba0 <HAL_RCC_OscConfig+0x650>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]
 8003a64:	e06a      	b.n	8003b3c <HAL_RCC_OscConfig+0x5ec>
 8003a66:	2301      	movs	r3, #1
 8003a68:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003a70:	fa93 f3a3 	rbit	r3, r3
 8003a74:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003a78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7c:	fab3 f383 	clz	r3, r3
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2300      	movs	r3, #0
 8003a90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a92:	f7fd ffcd 	bl	8001a30 <HAL_GetTick>
 8003a96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a9c:	f7fd ffc8 	bl	8001a30 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d902      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	f000 bc50 	b.w	8004352 <HAL_RCC_OscConfig+0xe02>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003abc:	fa93 f3a3 	rbit	r3, r3
 8003ac0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac8:	fab3 f383 	clz	r3, r3
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d102      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x592>
 8003adc:	4b30      	ldr	r3, [pc, #192]	; (8003ba0 <HAL_RCC_OscConfig+0x650>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	e013      	b.n	8003b0a <HAL_RCC_OscConfig+0x5ba>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003aec:	fa93 f3a3 	rbit	r3, r3
 8003af0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003af4:	2302      	movs	r3, #2
 8003af6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003afa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003afe:	fa93 f3a3 	rbit	r3, r3
 8003b02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003b06:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <HAL_RCC_OscConfig+0x650>)
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003b10:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003b14:	fa92 f2a2 	rbit	r2, r2
 8003b18:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003b1c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003b20:	fab2 f282 	clz	r2, r2
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	f042 0220 	orr.w	r2, r2, #32
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	f002 021f 	and.w	r2, r2, #31
 8003b30:	2101      	movs	r1, #1
 8003b32:	fa01 f202 	lsl.w	r2, r1, r2
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1af      	bne.n	8003a9c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3c:	1d3b      	adds	r3, r7, #4
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 80da 	beq.w	8003d00 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b4c:	1d3b      	adds	r3, r7, #4
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d069      	beq.n	8003c2a <HAL_RCC_OscConfig+0x6da>
 8003b56:	2301      	movs	r3, #1
 8003b58:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003b60:	fa93 f3a3 	rbit	r3, r3
 8003b64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b6c:	fab3 f383 	clz	r3, r3
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	461a      	mov	r2, r3
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <HAL_RCC_OscConfig+0x654>)
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b80:	f7fd ff56 	bl	8001a30 <HAL_GetTick>
 8003b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b88:	e00e      	b.n	8003ba8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b8a:	f7fd ff51 	bl	8001a30 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d906      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e3d9      	b.n	8004352 <HAL_RCC_OscConfig+0xe02>
 8003b9e:	bf00      	nop
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	10908120 	.word	0x10908120
 8003ba8:	2302      	movs	r3, #2
 8003baa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003bb2:	fa93 f3a3 	rbit	r3, r3
 8003bb6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003bba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	fa93 f2a3 	rbit	r2, r3
 8003bcc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	fa93 f2a3 	rbit	r2, r3
 8003be4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003be8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bea:	4ba5      	ldr	r3, [pc, #660]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003bf2:	2102      	movs	r1, #2
 8003bf4:	6019      	str	r1, [r3, #0]
 8003bf6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	fa93 f1a3 	rbit	r1, r3
 8003c00:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003c04:	6019      	str	r1, [r3, #0]
  return result;
 8003c06:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	fab3 f383 	clz	r3, r3
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0b0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x63a>
 8003c28:	e06a      	b.n	8003d00 <HAL_RCC_OscConfig+0x7b0>
 8003c2a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003c2e:	2201      	movs	r2, #1
 8003c30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	fa93 f2a3 	rbit	r2, r3
 8003c3c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003c40:	601a      	str	r2, [r3, #0]
  return result;
 8003c42:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003c46:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c48:	fab3 f383 	clz	r3, r3
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	461a      	mov	r2, r3
 8003c50:	4b8c      	ldr	r3, [pc, #560]	; (8003e84 <HAL_RCC_OscConfig+0x934>)
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	461a      	mov	r2, r3
 8003c58:	2300      	movs	r3, #0
 8003c5a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5c:	f7fd fee8 	bl	8001a30 <HAL_GetTick>
 8003c60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c64:	e009      	b.n	8003c7a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c66:	f7fd fee3 	bl	8001a30 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e36b      	b.n	8004352 <HAL_RCC_OscConfig+0xe02>
 8003c7a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003c7e:	2202      	movs	r2, #2
 8003c80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	fa93 f2a3 	rbit	r2, r3
 8003c8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003c96:	2202      	movs	r2, #2
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	fa93 f2a3 	rbit	r2, r3
 8003ca4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003cae:	2202      	movs	r2, #2
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	fa93 f2a3 	rbit	r2, r3
 8003cbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003cc0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc2:	4b6f      	ldr	r3, [pc, #444]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cc6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003cca:	2102      	movs	r1, #2
 8003ccc:	6019      	str	r1, [r3, #0]
 8003cce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	fa93 f1a3 	rbit	r1, r3
 8003cd8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003cdc:	6019      	str	r1, [r3, #0]
  return result;
 8003cde:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	fab3 f383 	clz	r3, r3
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1b2      	bne.n	8003c66 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d00:	1d3b      	adds	r3, r7, #4
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 8158 	beq.w	8003fc0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d10:	2300      	movs	r3, #0
 8003d12:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d16:	4b5a      	ldr	r3, [pc, #360]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d112      	bne.n	8003d48 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d22:	4b57      	ldr	r3, [pc, #348]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	4a56      	ldr	r2, [pc, #344]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	61d3      	str	r3, [r2, #28]
 8003d2e:	4b54      	ldr	r3, [pc, #336]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003d36:	f107 0308 	add.w	r3, r7, #8
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	f107 0308 	add.w	r3, r7, #8
 8003d40:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003d42:	2301      	movs	r3, #1
 8003d44:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d48:	4b4f      	ldr	r3, [pc, #316]	; (8003e88 <HAL_RCC_OscConfig+0x938>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d11a      	bne.n	8003d8a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d54:	4b4c      	ldr	r3, [pc, #304]	; (8003e88 <HAL_RCC_OscConfig+0x938>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a4b      	ldr	r2, [pc, #300]	; (8003e88 <HAL_RCC_OscConfig+0x938>)
 8003d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d60:	f7fd fe66 	bl	8001a30 <HAL_GetTick>
 8003d64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d68:	e009      	b.n	8003d7e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6a:	f7fd fe61 	bl	8001a30 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	; 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e2e9      	b.n	8004352 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7e:	4b42      	ldr	r3, [pc, #264]	; (8003e88 <HAL_RCC_OscConfig+0x938>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0ef      	beq.n	8003d6a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d8a:	1d3b      	adds	r3, r7, #4
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d106      	bne.n	8003da2 <HAL_RCC_OscConfig+0x852>
 8003d94:	4b3a      	ldr	r3, [pc, #232]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	4a39      	ldr	r2, [pc, #228]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	6213      	str	r3, [r2, #32]
 8003da0:	e02f      	b.n	8003e02 <HAL_RCC_OscConfig+0x8b2>
 8003da2:	1d3b      	adds	r3, r7, #4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10c      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x876>
 8003dac:	4b34      	ldr	r3, [pc, #208]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	4a33      	ldr	r2, [pc, #204]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	6213      	str	r3, [r2, #32]
 8003db8:	4b31      	ldr	r3, [pc, #196]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	4a30      	ldr	r2, [pc, #192]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003dbe:	f023 0304 	bic.w	r3, r3, #4
 8003dc2:	6213      	str	r3, [r2, #32]
 8003dc4:	e01d      	b.n	8003e02 <HAL_RCC_OscConfig+0x8b2>
 8003dc6:	1d3b      	adds	r3, r7, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	2b05      	cmp	r3, #5
 8003dce:	d10c      	bne.n	8003dea <HAL_RCC_OscConfig+0x89a>
 8003dd0:	4b2b      	ldr	r3, [pc, #172]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	4a2a      	ldr	r2, [pc, #168]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003dd6:	f043 0304 	orr.w	r3, r3, #4
 8003dda:	6213      	str	r3, [r2, #32]
 8003ddc:	4b28      	ldr	r3, [pc, #160]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	4a27      	ldr	r2, [pc, #156]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6213      	str	r3, [r2, #32]
 8003de8:	e00b      	b.n	8003e02 <HAL_RCC_OscConfig+0x8b2>
 8003dea:	4b25      	ldr	r3, [pc, #148]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	4a24      	ldr	r2, [pc, #144]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	6213      	str	r3, [r2, #32]
 8003df6:	4b22      	ldr	r3, [pc, #136]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	4a21      	ldr	r2, [pc, #132]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e02:	1d3b      	adds	r3, r7, #4
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d06b      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0c:	f7fd fe10 	bl	8001a30 <HAL_GetTick>
 8003e10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e14:	e00b      	b.n	8003e2e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e16:	f7fd fe0b 	bl	8001a30 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e291      	b.n	8004352 <HAL_RCC_OscConfig+0xe02>
 8003e2e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003e32:	2202      	movs	r2, #2
 8003e34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	fa93 f2a3 	rbit	r2, r3
 8003e40:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	fa93 f2a3 	rbit	r2, r3
 8003e58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003e5c:	601a      	str	r2, [r3, #0]
  return result;
 8003e5e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003e62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e64:	fab3 f383 	clz	r3, r3
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	f043 0302 	orr.w	r3, r3, #2
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d109      	bne.n	8003e8c <HAL_RCC_OscConfig+0x93c>
 8003e78:	4b01      	ldr	r3, [pc, #4]	; (8003e80 <HAL_RCC_OscConfig+0x930>)
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	e014      	b.n	8003ea8 <HAL_RCC_OscConfig+0x958>
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000
 8003e84:	10908120 	.word	0x10908120
 8003e88:	40007000 	.word	0x40007000
 8003e8c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003e90:	2202      	movs	r2, #2
 8003e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	fa93 f2a3 	rbit	r2, r3
 8003e9e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	4bbb      	ldr	r3, [pc, #748]	; (8004194 <HAL_RCC_OscConfig+0xc44>)
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003eac:	2102      	movs	r1, #2
 8003eae:	6011      	str	r1, [r2, #0]
 8003eb0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003eb4:	6812      	ldr	r2, [r2, #0]
 8003eb6:	fa92 f1a2 	rbit	r1, r2
 8003eba:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003ebe:	6011      	str	r1, [r2, #0]
  return result;
 8003ec0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	fab2 f282 	clz	r2, r2
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	f002 021f 	and.w	r2, r2, #31
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d099      	beq.n	8003e16 <HAL_RCC_OscConfig+0x8c6>
 8003ee2:	e063      	b.n	8003fac <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee4:	f7fd fda4 	bl	8001a30 <HAL_GetTick>
 8003ee8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eec:	e00b      	b.n	8003f06 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eee:	f7fd fd9f 	bl	8001a30 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e225      	b.n	8004352 <HAL_RCC_OscConfig+0xe02>
 8003f06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	fa93 f2a3 	rbit	r2, r3
 8003f18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003f22:	2202      	movs	r2, #2
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	fa93 f2a3 	rbit	r2, r3
 8003f30:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003f34:	601a      	str	r2, [r3, #0]
  return result;
 8003f36:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003f3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3c:	fab3 f383 	clz	r3, r3
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f043 0302 	orr.w	r3, r3, #2
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d102      	bne.n	8003f56 <HAL_RCC_OscConfig+0xa06>
 8003f50:	4b90      	ldr	r3, [pc, #576]	; (8004194 <HAL_RCC_OscConfig+0xc44>)
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	e00d      	b.n	8003f72 <HAL_RCC_OscConfig+0xa22>
 8003f56:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	fa93 f2a3 	rbit	r2, r3
 8003f68:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	4b89      	ldr	r3, [pc, #548]	; (8004194 <HAL_RCC_OscConfig+0xc44>)
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003f76:	2102      	movs	r1, #2
 8003f78:	6011      	str	r1, [r2, #0]
 8003f7a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	fa92 f1a2 	rbit	r1, r2
 8003f84:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003f88:	6011      	str	r1, [r2, #0]
  return result;
 8003f8a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	fab2 f282 	clz	r2, r2
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	f002 021f 	and.w	r2, r2, #31
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1a0      	bne.n	8003eee <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fac:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d105      	bne.n	8003fc0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb4:	4b77      	ldr	r3, [pc, #476]	; (8004194 <HAL_RCC_OscConfig+0xc44>)
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	4a76      	ldr	r2, [pc, #472]	; (8004194 <HAL_RCC_OscConfig+0xc44>)
 8003fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fc0:	1d3b      	adds	r3, r7, #4
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 81c2 	beq.w	8004350 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fcc:	4b71      	ldr	r3, [pc, #452]	; (8004194 <HAL_RCC_OscConfig+0xc44>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 030c 	and.w	r3, r3, #12
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	f000 819c 	beq.w	8004312 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fda:	1d3b      	adds	r3, r7, #4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	f040 8114 	bne.w	800420e <HAL_RCC_OscConfig+0xcbe>
 8003fe6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003fea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	fa93 f2a3 	rbit	r2, r3
 8003ffa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003ffe:	601a      	str	r2, [r3, #0]
  return result;
 8004000:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004004:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004006:	fab3 f383 	clz	r3, r3
 800400a:	b2db      	uxtb	r3, r3
 800400c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004010:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	461a      	mov	r2, r3
 8004018:	2300      	movs	r3, #0
 800401a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401c:	f7fd fd08 	bl	8001a30 <HAL_GetTick>
 8004020:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004024:	e009      	b.n	800403a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004026:	f7fd fd03 	bl	8001a30 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e18b      	b.n	8004352 <HAL_RCC_OscConfig+0xe02>
 800403a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800403e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004042:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004044:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	fa93 f2a3 	rbit	r2, r3
 800404e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004052:	601a      	str	r2, [r3, #0]
  return result;
 8004054:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004058:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800405a:	fab3 f383 	clz	r3, r3
 800405e:	b2db      	uxtb	r3, r3
 8004060:	095b      	lsrs	r3, r3, #5
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f043 0301 	orr.w	r3, r3, #1
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b01      	cmp	r3, #1
 800406c:	d102      	bne.n	8004074 <HAL_RCC_OscConfig+0xb24>
 800406e:	4b49      	ldr	r3, [pc, #292]	; (8004194 <HAL_RCC_OscConfig+0xc44>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	e01b      	b.n	80040ac <HAL_RCC_OscConfig+0xb5c>
 8004074:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004078:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800407c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	fa93 f2a3 	rbit	r2, r3
 8004088:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004092:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	fa93 f2a3 	rbit	r2, r3
 80040a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	4b3a      	ldr	r3, [pc, #232]	; (8004194 <HAL_RCC_OscConfig+0xc44>)
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80040b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040b4:	6011      	str	r1, [r2, #0]
 80040b6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	fa92 f1a2 	rbit	r1, r2
 80040c0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80040c4:	6011      	str	r1, [r2, #0]
  return result;
 80040c6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	fab2 f282 	clz	r2, r2
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	f042 0220 	orr.w	r2, r2, #32
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	f002 021f 	and.w	r2, r2, #31
 80040dc:	2101      	movs	r1, #1
 80040de:	fa01 f202 	lsl.w	r2, r1, r2
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d19e      	bne.n	8004026 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e8:	4b2a      	ldr	r3, [pc, #168]	; (8004194 <HAL_RCC_OscConfig+0xc44>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80040f0:	1d3b      	adds	r3, r7, #4
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80040f6:	1d3b      	adds	r3, r7, #4
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	430b      	orrs	r3, r1
 80040fe:	4925      	ldr	r1, [pc, #148]	; (8004194 <HAL_RCC_OscConfig+0xc44>)
 8004100:	4313      	orrs	r3, r2
 8004102:	604b      	str	r3, [r1, #4]
 8004104:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004108:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800410c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	fa93 f2a3 	rbit	r2, r3
 8004118:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800411c:	601a      	str	r2, [r3, #0]
  return result;
 800411e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004122:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004124:	fab3 f383 	clz	r3, r3
 8004128:	b2db      	uxtb	r3, r3
 800412a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800412e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	461a      	mov	r2, r3
 8004136:	2301      	movs	r3, #1
 8004138:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413a:	f7fd fc79 	bl	8001a30 <HAL_GetTick>
 800413e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004142:	e009      	b.n	8004158 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004144:	f7fd fc74 	bl	8001a30 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e0fc      	b.n	8004352 <HAL_RCC_OscConfig+0xe02>
 8004158:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800415c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004162:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	fa93 f2a3 	rbit	r2, r3
 800416c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004170:	601a      	str	r2, [r3, #0]
  return result;
 8004172:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004176:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004178:	fab3 f383 	clz	r3, r3
 800417c:	b2db      	uxtb	r3, r3
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b01      	cmp	r3, #1
 800418a:	d105      	bne.n	8004198 <HAL_RCC_OscConfig+0xc48>
 800418c:	4b01      	ldr	r3, [pc, #4]	; (8004194 <HAL_RCC_OscConfig+0xc44>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	e01e      	b.n	80041d0 <HAL_RCC_OscConfig+0xc80>
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000
 8004198:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800419c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	fa93 f2a3 	rbit	r2, r3
 80041ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	fa93 f2a3 	rbit	r2, r3
 80041c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	4b63      	ldr	r3, [pc, #396]	; (800435c <HAL_RCC_OscConfig+0xe0c>)
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80041d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041d8:	6011      	str	r1, [r2, #0]
 80041da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	fa92 f1a2 	rbit	r1, r2
 80041e4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80041e8:	6011      	str	r1, [r2, #0]
  return result;
 80041ea:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	fab2 f282 	clz	r2, r2
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	f042 0220 	orr.w	r2, r2, #32
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	f002 021f 	and.w	r2, r2, #31
 8004200:	2101      	movs	r1, #1
 8004202:	fa01 f202 	lsl.w	r2, r1, r2
 8004206:	4013      	ands	r3, r2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d09b      	beq.n	8004144 <HAL_RCC_OscConfig+0xbf4>
 800420c:	e0a0      	b.n	8004350 <HAL_RCC_OscConfig+0xe00>
 800420e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004212:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004216:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	fa93 f2a3 	rbit	r2, r3
 8004222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004226:	601a      	str	r2, [r3, #0]
  return result;
 8004228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800422c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800422e:	fab3 f383 	clz	r3, r3
 8004232:	b2db      	uxtb	r3, r3
 8004234:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004238:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	461a      	mov	r2, r3
 8004240:	2300      	movs	r3, #0
 8004242:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004244:	f7fd fbf4 	bl	8001a30 <HAL_GetTick>
 8004248:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800424c:	e009      	b.n	8004262 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424e:	f7fd fbef 	bl	8001a30 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e077      	b.n	8004352 <HAL_RCC_OscConfig+0xe02>
 8004262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004266:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800426a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	fa93 f2a3 	rbit	r2, r3
 8004276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800427a:	601a      	str	r2, [r3, #0]
  return result;
 800427c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004280:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004282:	fab3 f383 	clz	r3, r3
 8004286:	b2db      	uxtb	r3, r3
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b01      	cmp	r3, #1
 8004294:	d102      	bne.n	800429c <HAL_RCC_OscConfig+0xd4c>
 8004296:	4b31      	ldr	r3, [pc, #196]	; (800435c <HAL_RCC_OscConfig+0xe0c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	e01b      	b.n	80042d4 <HAL_RCC_OscConfig+0xd84>
 800429c:	f107 0320 	add.w	r3, r7, #32
 80042a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a6:	f107 0320 	add.w	r3, r7, #32
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	fa93 f2a3 	rbit	r2, r3
 80042b0:	f107 031c 	add.w	r3, r7, #28
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	f107 0318 	add.w	r3, r7, #24
 80042ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	f107 0318 	add.w	r3, r7, #24
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	fa93 f2a3 	rbit	r2, r3
 80042ca:	f107 0314 	add.w	r3, r7, #20
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	4b22      	ldr	r3, [pc, #136]	; (800435c <HAL_RCC_OscConfig+0xe0c>)
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	f107 0210 	add.w	r2, r7, #16
 80042d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042dc:	6011      	str	r1, [r2, #0]
 80042de:	f107 0210 	add.w	r2, r7, #16
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	fa92 f1a2 	rbit	r1, r2
 80042e8:	f107 020c 	add.w	r2, r7, #12
 80042ec:	6011      	str	r1, [r2, #0]
  return result;
 80042ee:	f107 020c 	add.w	r2, r7, #12
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	fab2 f282 	clz	r2, r2
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	f042 0220 	orr.w	r2, r2, #32
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	f002 021f 	and.w	r2, r2, #31
 8004304:	2101      	movs	r1, #1
 8004306:	fa01 f202 	lsl.w	r2, r1, r2
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d19e      	bne.n	800424e <HAL_RCC_OscConfig+0xcfe>
 8004310:	e01e      	b.n	8004350 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004312:	1d3b      	adds	r3, r7, #4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e018      	b.n	8004352 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004320:	4b0e      	ldr	r3, [pc, #56]	; (800435c <HAL_RCC_OscConfig+0xe0c>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004328:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800432c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004330:	1d3b      	adds	r3, r7, #4
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	429a      	cmp	r2, r3
 8004338:	d108      	bne.n	800434c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800433a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800433e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004342:	1d3b      	adds	r3, r7, #4
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004348:	429a      	cmp	r2, r3
 800434a:	d001      	beq.n	8004350 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40021000 	.word	0x40021000

08004360 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b09e      	sub	sp, #120	; 0x78
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e162      	b.n	800463e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004378:	4b90      	ldr	r3, [pc, #576]	; (80045bc <HAL_RCC_ClockConfig+0x25c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d910      	bls.n	80043a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004386:	4b8d      	ldr	r3, [pc, #564]	; (80045bc <HAL_RCC_ClockConfig+0x25c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 0207 	bic.w	r2, r3, #7
 800438e:	498b      	ldr	r1, [pc, #556]	; (80045bc <HAL_RCC_ClockConfig+0x25c>)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004396:	4b89      	ldr	r3, [pc, #548]	; (80045bc <HAL_RCC_ClockConfig+0x25c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d001      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e14a      	b.n	800463e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b4:	4b82      	ldr	r3, [pc, #520]	; (80045c0 <HAL_RCC_ClockConfig+0x260>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	497f      	ldr	r1, [pc, #508]	; (80045c0 <HAL_RCC_ClockConfig+0x260>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 80dc 	beq.w	800458c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d13c      	bne.n	8004456 <HAL_RCC_ClockConfig+0xf6>
 80043dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043e4:	fa93 f3a3 	rbit	r3, r3
 80043e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80043ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ec:	fab3 f383 	clz	r3, r3
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d102      	bne.n	8004406 <HAL_RCC_ClockConfig+0xa6>
 8004400:	4b6f      	ldr	r3, [pc, #444]	; (80045c0 <HAL_RCC_ClockConfig+0x260>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	e00f      	b.n	8004426 <HAL_RCC_ClockConfig+0xc6>
 8004406:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800440a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800440e:	fa93 f3a3 	rbit	r3, r3
 8004412:	667b      	str	r3, [r7, #100]	; 0x64
 8004414:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004418:	663b      	str	r3, [r7, #96]	; 0x60
 800441a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800441c:	fa93 f3a3 	rbit	r3, r3
 8004420:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004422:	4b67      	ldr	r3, [pc, #412]	; (80045c0 <HAL_RCC_ClockConfig+0x260>)
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800442a:	65ba      	str	r2, [r7, #88]	; 0x58
 800442c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800442e:	fa92 f2a2 	rbit	r2, r2
 8004432:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004434:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004436:	fab2 f282 	clz	r2, r2
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	f042 0220 	orr.w	r2, r2, #32
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	f002 021f 	and.w	r2, r2, #31
 8004446:	2101      	movs	r1, #1
 8004448:	fa01 f202 	lsl.w	r2, r1, r2
 800444c:	4013      	ands	r3, r2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d17b      	bne.n	800454a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e0f3      	b.n	800463e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d13c      	bne.n	80044d8 <HAL_RCC_ClockConfig+0x178>
 800445e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004462:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004466:	fa93 f3a3 	rbit	r3, r3
 800446a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800446c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800446e:	fab3 f383 	clz	r3, r3
 8004472:	b2db      	uxtb	r3, r3
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	b2db      	uxtb	r3, r3
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b01      	cmp	r3, #1
 8004480:	d102      	bne.n	8004488 <HAL_RCC_ClockConfig+0x128>
 8004482:	4b4f      	ldr	r3, [pc, #316]	; (80045c0 <HAL_RCC_ClockConfig+0x260>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	e00f      	b.n	80044a8 <HAL_RCC_ClockConfig+0x148>
 8004488:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800448c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004490:	fa93 f3a3 	rbit	r3, r3
 8004494:	647b      	str	r3, [r7, #68]	; 0x44
 8004496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800449a:	643b      	str	r3, [r7, #64]	; 0x40
 800449c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800449e:	fa93 f3a3 	rbit	r3, r3
 80044a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a4:	4b46      	ldr	r3, [pc, #280]	; (80045c0 <HAL_RCC_ClockConfig+0x260>)
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80044ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044b0:	fa92 f2a2 	rbit	r2, r2
 80044b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80044b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044b8:	fab2 f282 	clz	r2, r2
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	f042 0220 	orr.w	r2, r2, #32
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	f002 021f 	and.w	r2, r2, #31
 80044c8:	2101      	movs	r1, #1
 80044ca:	fa01 f202 	lsl.w	r2, r1, r2
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d13a      	bne.n	800454a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0b2      	b.n	800463e <HAL_RCC_ClockConfig+0x2de>
 80044d8:	2302      	movs	r3, #2
 80044da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044de:	fa93 f3a3 	rbit	r3, r3
 80044e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80044e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e6:	fab3 f383 	clz	r3, r3
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	095b      	lsrs	r3, r3, #5
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d102      	bne.n	8004500 <HAL_RCC_ClockConfig+0x1a0>
 80044fa:	4b31      	ldr	r3, [pc, #196]	; (80045c0 <HAL_RCC_ClockConfig+0x260>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	e00d      	b.n	800451c <HAL_RCC_ClockConfig+0x1bc>
 8004500:	2302      	movs	r3, #2
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	fa93 f3a3 	rbit	r3, r3
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
 800450c:	2302      	movs	r3, #2
 800450e:	623b      	str	r3, [r7, #32]
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	fa93 f3a3 	rbit	r3, r3
 8004516:	61fb      	str	r3, [r7, #28]
 8004518:	4b29      	ldr	r3, [pc, #164]	; (80045c0 <HAL_RCC_ClockConfig+0x260>)
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	2202      	movs	r2, #2
 800451e:	61ba      	str	r2, [r7, #24]
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	fa92 f2a2 	rbit	r2, r2
 8004526:	617a      	str	r2, [r7, #20]
  return result;
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	fab2 f282 	clz	r2, r2
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	f042 0220 	orr.w	r2, r2, #32
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	f002 021f 	and.w	r2, r2, #31
 800453a:	2101      	movs	r1, #1
 800453c:	fa01 f202 	lsl.w	r2, r1, r2
 8004540:	4013      	ands	r3, r2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e079      	b.n	800463e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800454a:	4b1d      	ldr	r3, [pc, #116]	; (80045c0 <HAL_RCC_ClockConfig+0x260>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f023 0203 	bic.w	r2, r3, #3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	491a      	ldr	r1, [pc, #104]	; (80045c0 <HAL_RCC_ClockConfig+0x260>)
 8004558:	4313      	orrs	r3, r2
 800455a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800455c:	f7fd fa68 	bl	8001a30 <HAL_GetTick>
 8004560:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004562:	e00a      	b.n	800457a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004564:	f7fd fa64 	bl	8001a30 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004572:	4293      	cmp	r3, r2
 8004574:	d901      	bls.n	800457a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e061      	b.n	800463e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457a:	4b11      	ldr	r3, [pc, #68]	; (80045c0 <HAL_RCC_ClockConfig+0x260>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f003 020c 	and.w	r2, r3, #12
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	429a      	cmp	r2, r3
 800458a:	d1eb      	bne.n	8004564 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800458c:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <HAL_RCC_ClockConfig+0x25c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d214      	bcs.n	80045c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459a:	4b08      	ldr	r3, [pc, #32]	; (80045bc <HAL_RCC_ClockConfig+0x25c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f023 0207 	bic.w	r2, r3, #7
 80045a2:	4906      	ldr	r1, [pc, #24]	; (80045bc <HAL_RCC_ClockConfig+0x25c>)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045aa:	4b04      	ldr	r3, [pc, #16]	; (80045bc <HAL_RCC_ClockConfig+0x25c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d005      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e040      	b.n	800463e <HAL_RCC_ClockConfig+0x2de>
 80045bc:	40022000 	.word	0x40022000
 80045c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045d0:	4b1d      	ldr	r3, [pc, #116]	; (8004648 <HAL_RCC_ClockConfig+0x2e8>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	491a      	ldr	r1, [pc, #104]	; (8004648 <HAL_RCC_ClockConfig+0x2e8>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d009      	beq.n	8004602 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ee:	4b16      	ldr	r3, [pc, #88]	; (8004648 <HAL_RCC_ClockConfig+0x2e8>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4912      	ldr	r1, [pc, #72]	; (8004648 <HAL_RCC_ClockConfig+0x2e8>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004602:	f000 f829 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 8004606:	4601      	mov	r1, r0
 8004608:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <HAL_RCC_ClockConfig+0x2e8>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004610:	22f0      	movs	r2, #240	; 0xf0
 8004612:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	fa92 f2a2 	rbit	r2, r2
 800461a:	60fa      	str	r2, [r7, #12]
  return result;
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	fab2 f282 	clz	r2, r2
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	40d3      	lsrs	r3, r2
 8004626:	4a09      	ldr	r2, [pc, #36]	; (800464c <HAL_RCC_ClockConfig+0x2ec>)
 8004628:	5cd3      	ldrb	r3, [r2, r3]
 800462a:	fa21 f303 	lsr.w	r3, r1, r3
 800462e:	4a08      	ldr	r2, [pc, #32]	; (8004650 <HAL_RCC_ClockConfig+0x2f0>)
 8004630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004632:	4b08      	ldr	r3, [pc, #32]	; (8004654 <HAL_RCC_ClockConfig+0x2f4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7fd f9b6 	bl	80019a8 <HAL_InitTick>
  
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3778      	adds	r7, #120	; 0x78
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000
 800464c:	08007f18 	.word	0x08007f18
 8004650:	20000000 	.word	0x20000000
 8004654:	20000004 	.word	0x20000004

08004658 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004658:	b480      	push	{r7}
 800465a:	b08b      	sub	sp, #44	; 0x2c
 800465c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	61fb      	str	r3, [r7, #28]
 8004662:	2300      	movs	r3, #0
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	2300      	movs	r3, #0
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004672:	4b29      	ldr	r3, [pc, #164]	; (8004718 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 030c 	and.w	r3, r3, #12
 800467e:	2b04      	cmp	r3, #4
 8004680:	d002      	beq.n	8004688 <HAL_RCC_GetSysClockFreq+0x30>
 8004682:	2b08      	cmp	r3, #8
 8004684:	d003      	beq.n	800468e <HAL_RCC_GetSysClockFreq+0x36>
 8004686:	e03c      	b.n	8004702 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004688:	4b24      	ldr	r3, [pc, #144]	; (800471c <HAL_RCC_GetSysClockFreq+0xc4>)
 800468a:	623b      	str	r3, [r7, #32]
      break;
 800468c:	e03c      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004694:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004698:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	fa92 f2a2 	rbit	r2, r2
 80046a0:	607a      	str	r2, [r7, #4]
  return result;
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	fab2 f282 	clz	r2, r2
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	40d3      	lsrs	r3, r2
 80046ac:	4a1c      	ldr	r2, [pc, #112]	; (8004720 <HAL_RCC_GetSysClockFreq+0xc8>)
 80046ae:	5cd3      	ldrb	r3, [r2, r3]
 80046b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80046b2:	4b19      	ldr	r3, [pc, #100]	; (8004718 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	220f      	movs	r2, #15
 80046bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	fa92 f2a2 	rbit	r2, r2
 80046c4:	60fa      	str	r2, [r7, #12]
  return result;
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	fab2 f282 	clz	r2, r2
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	40d3      	lsrs	r3, r2
 80046d0:	4a14      	ldr	r2, [pc, #80]	; (8004724 <HAL_RCC_GetSysClockFreq+0xcc>)
 80046d2:	5cd3      	ldrb	r3, [r2, r3]
 80046d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046e0:	4a0e      	ldr	r2, [pc, #56]	; (800471c <HAL_RCC_GetSysClockFreq+0xc4>)
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	fb02 f303 	mul.w	r3, r2, r3
 80046ee:	627b      	str	r3, [r7, #36]	; 0x24
 80046f0:	e004      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	4a0c      	ldr	r2, [pc, #48]	; (8004728 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046f6:	fb02 f303 	mul.w	r3, r2, r3
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	623b      	str	r3, [r7, #32]
      break;
 8004700:	e002      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004702:	4b06      	ldr	r3, [pc, #24]	; (800471c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004704:	623b      	str	r3, [r7, #32]
      break;
 8004706:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004708:	6a3b      	ldr	r3, [r7, #32]
}
 800470a:	4618      	mov	r0, r3
 800470c:	372c      	adds	r7, #44	; 0x2c
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40021000 	.word	0x40021000
 800471c:	007a1200 	.word	0x007a1200
 8004720:	08007f30 	.word	0x08007f30
 8004724:	08007f40 	.word	0x08007f40
 8004728:	003d0900 	.word	0x003d0900

0800472c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004730:	4b03      	ldr	r3, [pc, #12]	; (8004740 <HAL_RCC_GetHCLKFreq+0x14>)
 8004732:	681b      	ldr	r3, [r3, #0]
}
 8004734:	4618      	mov	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	20000000 	.word	0x20000000

08004744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800474a:	f7ff ffef 	bl	800472c <HAL_RCC_GetHCLKFreq>
 800474e:	4601      	mov	r1, r0
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004758:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800475c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	fa92 f2a2 	rbit	r2, r2
 8004764:	603a      	str	r2, [r7, #0]
  return result;
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	fab2 f282 	clz	r2, r2
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	40d3      	lsrs	r3, r2
 8004770:	4a04      	ldr	r2, [pc, #16]	; (8004784 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004772:	5cd3      	ldrb	r3, [r2, r3]
 8004774:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40021000 	.word	0x40021000
 8004784:	08007f28 	.word	0x08007f28

08004788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800478e:	f7ff ffcd 	bl	800472c <HAL_RCC_GetHCLKFreq>
 8004792:	4601      	mov	r1, r0
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800479c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80047a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	fa92 f2a2 	rbit	r2, r2
 80047a8:	603a      	str	r2, [r7, #0]
  return result;
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	fab2 f282 	clz	r2, r2
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	40d3      	lsrs	r3, r2
 80047b4:	4a04      	ldr	r2, [pc, #16]	; (80047c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80047b6:	5cd3      	ldrb	r3, [r2, r3]
 80047b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80047bc:	4618      	mov	r0, r3
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40021000 	.word	0x40021000
 80047c8:	08007f28 	.word	0x08007f28

080047cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b092      	sub	sp, #72	; 0x48
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80047dc:	2300      	movs	r3, #0
 80047de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 80cd 	beq.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047f0:	4b86      	ldr	r3, [pc, #536]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10e      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047fc:	4b83      	ldr	r3, [pc, #524]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	4a82      	ldr	r2, [pc, #520]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004806:	61d3      	str	r3, [r2, #28]
 8004808:	4b80      	ldr	r3, [pc, #512]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004814:	2301      	movs	r3, #1
 8004816:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481a:	4b7d      	ldr	r3, [pc, #500]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004822:	2b00      	cmp	r3, #0
 8004824:	d118      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004826:	4b7a      	ldr	r3, [pc, #488]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a79      	ldr	r2, [pc, #484]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800482c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004830:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004832:	f7fd f8fd 	bl	8001a30 <HAL_GetTick>
 8004836:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004838:	e008      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800483a:	f7fd f8f9 	bl	8001a30 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b64      	cmp	r3, #100	; 0x64
 8004846:	d901      	bls.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e0db      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484c:	4b70      	ldr	r3, [pc, #448]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0f0      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004858:	4b6c      	ldr	r3, [pc, #432]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004860:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004864:	2b00      	cmp	r3, #0
 8004866:	d07d      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004870:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004872:	429a      	cmp	r2, r3
 8004874:	d076      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004876:	4b65      	ldr	r3, [pc, #404]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004884:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	fa93 f3a3 	rbit	r3, r3
 800488c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800488e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004890:	fab3 f383 	clz	r3, r3
 8004894:	b2db      	uxtb	r3, r3
 8004896:	461a      	mov	r2, r3
 8004898:	4b5e      	ldr	r3, [pc, #376]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	461a      	mov	r2, r3
 80048a0:	2301      	movs	r3, #1
 80048a2:	6013      	str	r3, [r2, #0]
 80048a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ac:	fa93 f3a3 	rbit	r3, r3
 80048b0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80048b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048b4:	fab3 f383 	clz	r3, r3
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	4b55      	ldr	r3, [pc, #340]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	461a      	mov	r2, r3
 80048c4:	2300      	movs	r3, #0
 80048c6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048c8:	4a50      	ldr	r2, [pc, #320]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048cc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d045      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d8:	f7fd f8aa 	bl	8001a30 <HAL_GetTick>
 80048dc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048de:	e00a      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e0:	f7fd f8a6 	bl	8001a30 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e086      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80048f6:	2302      	movs	r3, #2
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	fa93 f3a3 	rbit	r3, r3
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
 8004902:	2302      	movs	r3, #2
 8004904:	623b      	str	r3, [r7, #32]
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	fa93 f3a3 	rbit	r3, r3
 800490c:	61fb      	str	r3, [r7, #28]
  return result;
 800490e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004910:	fab3 f383 	clz	r3, r3
 8004914:	b2db      	uxtb	r3, r3
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	b2db      	uxtb	r3, r3
 800491a:	f043 0302 	orr.w	r3, r3, #2
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d102      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004924:	4b39      	ldr	r3, [pc, #228]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	e007      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800492a:	2302      	movs	r3, #2
 800492c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	fa93 f3a3 	rbit	r3, r3
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	4b35      	ldr	r3, [pc, #212]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	2202      	movs	r2, #2
 800493c:	613a      	str	r2, [r7, #16]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	fa92 f2a2 	rbit	r2, r2
 8004944:	60fa      	str	r2, [r7, #12]
  return result;
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	fab2 f282 	clz	r2, r2
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	f002 021f 	and.w	r2, r2, #31
 8004958:	2101      	movs	r1, #1
 800495a:	fa01 f202 	lsl.w	r2, r1, r2
 800495e:	4013      	ands	r3, r2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0bd      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004964:	4b29      	ldr	r3, [pc, #164]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	4926      	ldr	r1, [pc, #152]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004972:	4313      	orrs	r3, r2
 8004974:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004976:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800497a:	2b01      	cmp	r3, #1
 800497c:	d105      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800497e:	4b23      	ldr	r3, [pc, #140]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	4a22      	ldr	r2, [pc, #136]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004988:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d008      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004996:	4b1d      	ldr	r3, [pc, #116]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	f023 0203 	bic.w	r2, r3, #3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	491a      	ldr	r1, [pc, #104]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d008      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049b4:	4b15      	ldr	r3, [pc, #84]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	f023 0210 	bic.w	r2, r3, #16
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	4912      	ldr	r1, [pc, #72]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d008      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049d2:	4b0e      	ldr	r3, [pc, #56]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	490b      	ldr	r1, [pc, #44]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d008      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049f0:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	4903      	ldr	r1, [pc, #12]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3748      	adds	r7, #72	; 0x48
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	40007000 	.word	0x40007000
 8004a14:	10908100 	.word	0x10908100

08004a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e049      	b.n	8004abe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fc fd6e 	bl	8001520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3304      	adds	r3, #4
 8004a54:	4619      	mov	r1, r3
 8004a56:	4610      	mov	r0, r2
 8004a58:	f000 ffd4 	bl	8005a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d001      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e040      	b.n	8004b62 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1c      	ldr	r2, [pc, #112]	; (8004b70 <HAL_TIM_Base_Start_IT+0xa8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00e      	beq.n	8004b20 <HAL_TIM_Base_Start_IT+0x58>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0a:	d009      	beq.n	8004b20 <HAL_TIM_Base_Start_IT+0x58>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a18      	ldr	r2, [pc, #96]	; (8004b74 <HAL_TIM_Base_Start_IT+0xac>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d004      	beq.n	8004b20 <HAL_TIM_Base_Start_IT+0x58>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a17      	ldr	r2, [pc, #92]	; (8004b78 <HAL_TIM_Base_Start_IT+0xb0>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d115      	bne.n	8004b4c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	4b15      	ldr	r3, [pc, #84]	; (8004b7c <HAL_TIM_Base_Start_IT+0xb4>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b06      	cmp	r3, #6
 8004b30:	d015      	beq.n	8004b5e <HAL_TIM_Base_Start_IT+0x96>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b38:	d011      	beq.n	8004b5e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0201 	orr.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4a:	e008      	b.n	8004b5e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e000      	b.n	8004b60 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	40000400 	.word	0x40000400
 8004b78:	40014000 	.word	0x40014000
 8004b7c:	00010007 	.word	0x00010007

08004b80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e049      	b.n	8004c26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f841 	bl	8004c2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	f000 ff20 	bl	8005a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
	...

08004c44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d109      	bne.n	8004c68 <HAL_TIM_PWM_Start+0x24>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	bf14      	ite	ne
 8004c60:	2301      	movne	r3, #1
 8004c62:	2300      	moveq	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	e03c      	b.n	8004ce2 <HAL_TIM_PWM_Start+0x9e>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d109      	bne.n	8004c82 <HAL_TIM_PWM_Start+0x3e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	bf14      	ite	ne
 8004c7a:	2301      	movne	r3, #1
 8004c7c:	2300      	moveq	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	e02f      	b.n	8004ce2 <HAL_TIM_PWM_Start+0x9e>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d109      	bne.n	8004c9c <HAL_TIM_PWM_Start+0x58>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	bf14      	ite	ne
 8004c94:	2301      	movne	r3, #1
 8004c96:	2300      	moveq	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	e022      	b.n	8004ce2 <HAL_TIM_PWM_Start+0x9e>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2b0c      	cmp	r3, #12
 8004ca0:	d109      	bne.n	8004cb6 <HAL_TIM_PWM_Start+0x72>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	bf14      	ite	ne
 8004cae:	2301      	movne	r3, #1
 8004cb0:	2300      	moveq	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	e015      	b.n	8004ce2 <HAL_TIM_PWM_Start+0x9e>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	d109      	bne.n	8004cd0 <HAL_TIM_PWM_Start+0x8c>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	bf14      	ite	ne
 8004cc8:	2301      	movne	r3, #1
 8004cca:	2300      	moveq	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	e008      	b.n	8004ce2 <HAL_TIM_PWM_Start+0x9e>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	bf14      	ite	ne
 8004cdc:	2301      	movne	r3, #1
 8004cde:	2300      	moveq	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e088      	b.n	8004dfc <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d104      	bne.n	8004cfa <HAL_TIM_PWM_Start+0xb6>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cf8:	e023      	b.n	8004d42 <HAL_TIM_PWM_Start+0xfe>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d104      	bne.n	8004d0a <HAL_TIM_PWM_Start+0xc6>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d08:	e01b      	b.n	8004d42 <HAL_TIM_PWM_Start+0xfe>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d104      	bne.n	8004d1a <HAL_TIM_PWM_Start+0xd6>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d18:	e013      	b.n	8004d42 <HAL_TIM_PWM_Start+0xfe>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b0c      	cmp	r3, #12
 8004d1e:	d104      	bne.n	8004d2a <HAL_TIM_PWM_Start+0xe6>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d28:	e00b      	b.n	8004d42 <HAL_TIM_PWM_Start+0xfe>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b10      	cmp	r3, #16
 8004d2e:	d104      	bne.n	8004d3a <HAL_TIM_PWM_Start+0xf6>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d38:	e003      	b.n	8004d42 <HAL_TIM_PWM_Start+0xfe>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2201      	movs	r2, #1
 8004d48:	6839      	ldr	r1, [r7, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f001 fa12 	bl	8006174 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a2b      	ldr	r2, [pc, #172]	; (8004e04 <HAL_TIM_PWM_Start+0x1c0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00e      	beq.n	8004d78 <HAL_TIM_PWM_Start+0x134>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a2a      	ldr	r2, [pc, #168]	; (8004e08 <HAL_TIM_PWM_Start+0x1c4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d009      	beq.n	8004d78 <HAL_TIM_PWM_Start+0x134>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a28      	ldr	r2, [pc, #160]	; (8004e0c <HAL_TIM_PWM_Start+0x1c8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <HAL_TIM_PWM_Start+0x134>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a27      	ldr	r2, [pc, #156]	; (8004e10 <HAL_TIM_PWM_Start+0x1cc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d101      	bne.n	8004d7c <HAL_TIM_PWM_Start+0x138>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <HAL_TIM_PWM_Start+0x13a>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d007      	beq.n	8004d92 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1b      	ldr	r2, [pc, #108]	; (8004e04 <HAL_TIM_PWM_Start+0x1c0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00e      	beq.n	8004dba <HAL_TIM_PWM_Start+0x176>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da4:	d009      	beq.n	8004dba <HAL_TIM_PWM_Start+0x176>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a1a      	ldr	r2, [pc, #104]	; (8004e14 <HAL_TIM_PWM_Start+0x1d0>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d004      	beq.n	8004dba <HAL_TIM_PWM_Start+0x176>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a14      	ldr	r2, [pc, #80]	; (8004e08 <HAL_TIM_PWM_Start+0x1c4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d115      	bne.n	8004de6 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	4b15      	ldr	r3, [pc, #84]	; (8004e18 <HAL_TIM_PWM_Start+0x1d4>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b06      	cmp	r3, #6
 8004dca:	d015      	beq.n	8004df8 <HAL_TIM_PWM_Start+0x1b4>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd2:	d011      	beq.n	8004df8 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de4:	e008      	b.n	8004df8 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f042 0201 	orr.w	r2, r2, #1
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	e000      	b.n	8004dfa <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40012c00 	.word	0x40012c00
 8004e08:	40014000 	.word	0x40014000
 8004e0c:	40014400 	.word	0x40014400
 8004e10:	40014800 	.word	0x40014800
 8004e14:	40000400 	.word	0x40000400
 8004e18:	00010007 	.word	0x00010007

08004e1c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d109      	bne.n	8004e44 <HAL_TIM_PWM_Start_DMA+0x28>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	bf0c      	ite	eq
 8004e3c:	2301      	moveq	r3, #1
 8004e3e:	2300      	movne	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	e03c      	b.n	8004ebe <HAL_TIM_PWM_Start_DMA+0xa2>
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d109      	bne.n	8004e5e <HAL_TIM_PWM_Start_DMA+0x42>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	bf0c      	ite	eq
 8004e56:	2301      	moveq	r3, #1
 8004e58:	2300      	movne	r3, #0
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	e02f      	b.n	8004ebe <HAL_TIM_PWM_Start_DMA+0xa2>
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d109      	bne.n	8004e78 <HAL_TIM_PWM_Start_DMA+0x5c>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	bf0c      	ite	eq
 8004e70:	2301      	moveq	r3, #1
 8004e72:	2300      	movne	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	e022      	b.n	8004ebe <HAL_TIM_PWM_Start_DMA+0xa2>
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b0c      	cmp	r3, #12
 8004e7c:	d109      	bne.n	8004e92 <HAL_TIM_PWM_Start_DMA+0x76>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	bf0c      	ite	eq
 8004e8a:	2301      	moveq	r3, #1
 8004e8c:	2300      	movne	r3, #0
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	e015      	b.n	8004ebe <HAL_TIM_PWM_Start_DMA+0xa2>
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b10      	cmp	r3, #16
 8004e96:	d109      	bne.n	8004eac <HAL_TIM_PWM_Start_DMA+0x90>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	bf0c      	ite	eq
 8004ea4:	2301      	moveq	r3, #1
 8004ea6:	2300      	movne	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	e008      	b.n	8004ebe <HAL_TIM_PWM_Start_DMA+0xa2>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	bf0c      	ite	eq
 8004eb8:	2301      	moveq	r3, #1
 8004eba:	2300      	movne	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	e192      	b.n	80051ec <HAL_TIM_PWM_Start_DMA+0x3d0>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d109      	bne.n	8004ee0 <HAL_TIM_PWM_Start_DMA+0xc4>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	bf0c      	ite	eq
 8004ed8:	2301      	moveq	r3, #1
 8004eda:	2300      	movne	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	e03c      	b.n	8004f5a <HAL_TIM_PWM_Start_DMA+0x13e>
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d109      	bne.n	8004efa <HAL_TIM_PWM_Start_DMA+0xde>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	bf0c      	ite	eq
 8004ef2:	2301      	moveq	r3, #1
 8004ef4:	2300      	movne	r3, #0
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	e02f      	b.n	8004f5a <HAL_TIM_PWM_Start_DMA+0x13e>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d109      	bne.n	8004f14 <HAL_TIM_PWM_Start_DMA+0xf8>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	bf0c      	ite	eq
 8004f0c:	2301      	moveq	r3, #1
 8004f0e:	2300      	movne	r3, #0
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	e022      	b.n	8004f5a <HAL_TIM_PWM_Start_DMA+0x13e>
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b0c      	cmp	r3, #12
 8004f18:	d109      	bne.n	8004f2e <HAL_TIM_PWM_Start_DMA+0x112>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	bf0c      	ite	eq
 8004f26:	2301      	moveq	r3, #1
 8004f28:	2300      	movne	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	e015      	b.n	8004f5a <HAL_TIM_PWM_Start_DMA+0x13e>
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d109      	bne.n	8004f48 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	bf0c      	ite	eq
 8004f40:	2301      	moveq	r3, #1
 8004f42:	2300      	movne	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	e008      	b.n	8004f5a <HAL_TIM_PWM_Start_DMA+0x13e>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	bf0c      	ite	eq
 8004f54:	2301      	moveq	r3, #1
 8004f56:	2300      	movne	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d034      	beq.n	8004fc8 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d104      	bne.n	8004f6e <HAL_TIM_PWM_Start_DMA+0x152>
 8004f64:	887b      	ldrh	r3, [r7, #2]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e13e      	b.n	80051ec <HAL_TIM_PWM_Start_DMA+0x3d0>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d104      	bne.n	8004f7e <HAL_TIM_PWM_Start_DMA+0x162>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f7c:	e026      	b.n	8004fcc <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d104      	bne.n	8004f8e <HAL_TIM_PWM_Start_DMA+0x172>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f8c:	e01e      	b.n	8004fcc <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d104      	bne.n	8004f9e <HAL_TIM_PWM_Start_DMA+0x182>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f9c:	e016      	b.n	8004fcc <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b0c      	cmp	r3, #12
 8004fa2:	d104      	bne.n	8004fae <HAL_TIM_PWM_Start_DMA+0x192>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fac:	e00e      	b.n	8004fcc <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d104      	bne.n	8004fbe <HAL_TIM_PWM_Start_DMA+0x1a2>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fbc:	e006      	b.n	8004fcc <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fc6:	e001      	b.n	8004fcc <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e10f      	b.n	80051ec <HAL_TIM_PWM_Start_DMA+0x3d0>
  }

  switch (Channel)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b0c      	cmp	r3, #12
 8004fd0:	f200 80ae 	bhi.w	8005130 <HAL_TIM_PWM_Start_DMA+0x314>
 8004fd4:	a201      	add	r2, pc, #4	; (adr r2, 8004fdc <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8004fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fda:	bf00      	nop
 8004fdc:	08005011 	.word	0x08005011
 8004fe0:	08005131 	.word	0x08005131
 8004fe4:	08005131 	.word	0x08005131
 8004fe8:	08005131 	.word	0x08005131
 8004fec:	08005059 	.word	0x08005059
 8004ff0:	08005131 	.word	0x08005131
 8004ff4:	08005131 	.word	0x08005131
 8004ff8:	08005131 	.word	0x08005131
 8004ffc:	080050a1 	.word	0x080050a1
 8005000:	08005131 	.word	0x08005131
 8005004:	08005131 	.word	0x08005131
 8005008:	08005131 	.word	0x08005131
 800500c:	080050e9 	.word	0x080050e9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	4a77      	ldr	r2, [pc, #476]	; (80051f4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005016:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	4a76      	ldr	r2, [pc, #472]	; (80051f8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800501e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	4a75      	ldr	r2, [pc, #468]	; (80051fc <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8005026:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3334      	adds	r3, #52	; 0x34
 8005034:	461a      	mov	r2, r3
 8005036:	887b      	ldrh	r3, [r7, #2]
 8005038:	f7fd fecb 	bl	8002dd2 <HAL_DMA_Start_IT>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e0d2      	b.n	80051ec <HAL_TIM_PWM_Start_DMA+0x3d0>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005054:	60da      	str	r2, [r3, #12]
      break;
 8005056:	e06c      	b.n	8005132 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	4a65      	ldr	r2, [pc, #404]	; (80051f4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800505e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005064:	4a64      	ldr	r2, [pc, #400]	; (80051f8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005066:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506c:	4a63      	ldr	r2, [pc, #396]	; (80051fc <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800506e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3338      	adds	r3, #56	; 0x38
 800507c:	461a      	mov	r2, r3
 800507e:	887b      	ldrh	r3, [r7, #2]
 8005080:	f7fd fea7 	bl	8002dd2 <HAL_DMA_Start_IT>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e0ae      	b.n	80051ec <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800509c:	60da      	str	r2, [r3, #12]
      break;
 800509e:	e048      	b.n	8005132 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	4a53      	ldr	r2, [pc, #332]	; (80051f4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80050a6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	4a52      	ldr	r2, [pc, #328]	; (80051f8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80050ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	4a51      	ldr	r2, [pc, #324]	; (80051fc <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80050b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	333c      	adds	r3, #60	; 0x3c
 80050c4:	461a      	mov	r2, r3
 80050c6:	887b      	ldrh	r3, [r7, #2]
 80050c8:	f7fd fe83 	bl	8002dd2 <HAL_DMA_Start_IT>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e08a      	b.n	80051ec <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050e4:	60da      	str	r2, [r3, #12]
      break;
 80050e6:	e024      	b.n	8005132 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	4a41      	ldr	r2, [pc, #260]	; (80051f4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80050ee:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f4:	4a40      	ldr	r2, [pc, #256]	; (80051f8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80050f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fc:	4a3f      	ldr	r2, [pc, #252]	; (80051fc <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3340      	adds	r3, #64	; 0x40
 800510c:	461a      	mov	r2, r3
 800510e:	887b      	ldrh	r3, [r7, #2]
 8005110:	f7fd fe5f 	bl	8002dd2 <HAL_DMA_Start_IT>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e066      	b.n	80051ec <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800512c:	60da      	str	r2, [r3, #12]
      break;
 800512e:	e000      	b.n	8005132 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8005130:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2201      	movs	r2, #1
 8005138:	68b9      	ldr	r1, [r7, #8]
 800513a:	4618      	mov	r0, r3
 800513c:	f001 f81a 	bl	8006174 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a2e      	ldr	r2, [pc, #184]	; (8005200 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00e      	beq.n	8005168 <HAL_TIM_PWM_Start_DMA+0x34c>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2d      	ldr	r2, [pc, #180]	; (8005204 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d009      	beq.n	8005168 <HAL_TIM_PWM_Start_DMA+0x34c>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a2b      	ldr	r2, [pc, #172]	; (8005208 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d004      	beq.n	8005168 <HAL_TIM_PWM_Start_DMA+0x34c>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a2a      	ldr	r2, [pc, #168]	; (800520c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d101      	bne.n	800516c <HAL_TIM_PWM_Start_DMA+0x350>
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <HAL_TIM_PWM_Start_DMA+0x352>
 800516c:	2300      	movs	r3, #0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d007      	beq.n	8005182 <HAL_TIM_PWM_Start_DMA+0x366>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005180:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a1e      	ldr	r2, [pc, #120]	; (8005200 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00e      	beq.n	80051aa <HAL_TIM_PWM_Start_DMA+0x38e>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005194:	d009      	beq.n	80051aa <HAL_TIM_PWM_Start_DMA+0x38e>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a1d      	ldr	r2, [pc, #116]	; (8005210 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d004      	beq.n	80051aa <HAL_TIM_PWM_Start_DMA+0x38e>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a17      	ldr	r2, [pc, #92]	; (8005204 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d115      	bne.n	80051d6 <HAL_TIM_PWM_Start_DMA+0x3ba>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	4b18      	ldr	r3, [pc, #96]	; (8005214 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b06      	cmp	r3, #6
 80051ba:	d015      	beq.n	80051e8 <HAL_TIM_PWM_Start_DMA+0x3cc>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c2:	d011      	beq.n	80051e8 <HAL_TIM_PWM_Start_DMA+0x3cc>
    {
      __HAL_TIM_ENABLE(htim);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0201 	orr.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d4:	e008      	b.n	80051e8 <HAL_TIM_PWM_Start_DMA+0x3cc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0201 	orr.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	e000      	b.n	80051ea <HAL_TIM_PWM_Start_DMA+0x3ce>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	080058f5 	.word	0x080058f5
 80051f8:	0800599d 	.word	0x0800599d
 80051fc:	08005863 	.word	0x08005863
 8005200:	40012c00 	.word	0x40012c00
 8005204:	40014000 	.word	0x40014000
 8005208:	40014400 	.word	0x40014400
 800520c:	40014800 	.word	0x40014800
 8005210:	40000400 	.word	0x40000400
 8005214:	00010007 	.word	0x00010007

08005218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b02      	cmp	r3, #2
 800522c:	d122      	bne.n	8005274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b02      	cmp	r3, #2
 800523a:	d11b      	bne.n	8005274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0202 	mvn.w	r2, #2
 8005244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 facf 	bl	80057fe <HAL_TIM_IC_CaptureCallback>
 8005260:	e005      	b.n	800526e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fac1 	bl	80057ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fad2 	bl	8005812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b04      	cmp	r3, #4
 8005280:	d122      	bne.n	80052c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b04      	cmp	r3, #4
 800528e:	d11b      	bne.n	80052c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0204 	mvn.w	r2, #4
 8005298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2202      	movs	r2, #2
 800529e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 faa5 	bl	80057fe <HAL_TIM_IC_CaptureCallback>
 80052b4:	e005      	b.n	80052c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fa97 	bl	80057ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 faa8 	bl	8005812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d122      	bne.n	800531c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d11b      	bne.n	800531c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0208 	mvn.w	r2, #8
 80052ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2204      	movs	r2, #4
 80052f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fa7b 	bl	80057fe <HAL_TIM_IC_CaptureCallback>
 8005308:	e005      	b.n	8005316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fa6d 	bl	80057ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fa7e 	bl	8005812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b10      	cmp	r3, #16
 8005328:	d122      	bne.n	8005370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b10      	cmp	r3, #16
 8005336:	d11b      	bne.n	8005370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0210 	mvn.w	r2, #16
 8005340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2208      	movs	r2, #8
 8005346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fa51 	bl	80057fe <HAL_TIM_IC_CaptureCallback>
 800535c:	e005      	b.n	800536a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fa43 	bl	80057ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fa54 	bl	8005812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b01      	cmp	r3, #1
 800537c:	d10e      	bne.n	800539c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b01      	cmp	r3, #1
 800538a:	d107      	bne.n	800539c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0201 	mvn.w	r2, #1
 8005394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f002 fc84 	bl	8007ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a6:	2b80      	cmp	r3, #128	; 0x80
 80053a8:	d10e      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b4:	2b80      	cmp	r3, #128	; 0x80
 80053b6:	d107      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 ffec 	bl	80063a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d6:	d10e      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e2:	2b80      	cmp	r3, #128	; 0x80
 80053e4:	d107      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 ffdf 	bl	80063b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005400:	2b40      	cmp	r3, #64	; 0x40
 8005402:	d10e      	bne.n	8005422 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b40      	cmp	r3, #64	; 0x40
 8005410:	d107      	bne.n	8005422 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800541a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fa0c 	bl	800583a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b20      	cmp	r3, #32
 800542e:	d10e      	bne.n	800544e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b20      	cmp	r3, #32
 800543c:	d107      	bne.n	800544e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f06f 0220 	mvn.w	r2, #32
 8005446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 ff9f 	bl	800638c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800544e:	bf00      	nop
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800546e:	2302      	movs	r3, #2
 8005470:	e0fd      	b.n	800566e <HAL_TIM_PWM_ConfigChannel+0x216>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b14      	cmp	r3, #20
 800547e:	f200 80f0 	bhi.w	8005662 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005482:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	080054dd 	.word	0x080054dd
 800548c:	08005663 	.word	0x08005663
 8005490:	08005663 	.word	0x08005663
 8005494:	08005663 	.word	0x08005663
 8005498:	0800551d 	.word	0x0800551d
 800549c:	08005663 	.word	0x08005663
 80054a0:	08005663 	.word	0x08005663
 80054a4:	08005663 	.word	0x08005663
 80054a8:	0800555f 	.word	0x0800555f
 80054ac:	08005663 	.word	0x08005663
 80054b0:	08005663 	.word	0x08005663
 80054b4:	08005663 	.word	0x08005663
 80054b8:	0800559f 	.word	0x0800559f
 80054bc:	08005663 	.word	0x08005663
 80054c0:	08005663 	.word	0x08005663
 80054c4:	08005663 	.word	0x08005663
 80054c8:	080055e1 	.word	0x080055e1
 80054cc:	08005663 	.word	0x08005663
 80054d0:	08005663 	.word	0x08005663
 80054d4:	08005663 	.word	0x08005663
 80054d8:	08005621 	.word	0x08005621
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68b9      	ldr	r1, [r7, #8]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fb06 	bl	8005af4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699a      	ldr	r2, [r3, #24]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0208 	orr.w	r2, r2, #8
 80054f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0204 	bic.w	r2, r2, #4
 8005506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6999      	ldr	r1, [r3, #24]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	619a      	str	r2, [r3, #24]
      break;
 800551a:	e0a3      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68b9      	ldr	r1, [r7, #8]
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fb6c 	bl	8005c00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6999      	ldr	r1, [r3, #24]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	021a      	lsls	r2, r3, #8
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	619a      	str	r2, [r3, #24]
      break;
 800555c:	e082      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68b9      	ldr	r1, [r7, #8]
 8005564:	4618      	mov	r0, r3
 8005566:	f000 fbcb 	bl	8005d00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69da      	ldr	r2, [r3, #28]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0208 	orr.w	r2, r2, #8
 8005578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0204 	bic.w	r2, r2, #4
 8005588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69d9      	ldr	r1, [r3, #28]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	61da      	str	r2, [r3, #28]
      break;
 800559c:	e062      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 fc29 	bl	8005dfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69d9      	ldr	r1, [r3, #28]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	021a      	lsls	r2, r3, #8
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	61da      	str	r2, [r3, #28]
      break;
 80055de:	e041      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68b9      	ldr	r1, [r7, #8]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fc6c 	bl	8005ec4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0208 	orr.w	r2, r2, #8
 80055fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0204 	bic.w	r2, r2, #4
 800560a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800561e:	e021      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68b9      	ldr	r1, [r7, #8]
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fcaa 	bl	8005f80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800563a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800564a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	021a      	lsls	r2, r3, #8
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005660:	e000      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8005662:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop

08005678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <HAL_TIM_ConfigClockSource+0x18>
 800568c:	2302      	movs	r3, #2
 800568e:	e0a8      	b.n	80057e2 <HAL_TIM_ConfigClockSource+0x16a>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b40      	cmp	r3, #64	; 0x40
 80056ca:	d067      	beq.n	800579c <HAL_TIM_ConfigClockSource+0x124>
 80056cc:	2b40      	cmp	r3, #64	; 0x40
 80056ce:	d80b      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x70>
 80056d0:	2b10      	cmp	r3, #16
 80056d2:	d073      	beq.n	80057bc <HAL_TIM_ConfigClockSource+0x144>
 80056d4:	2b10      	cmp	r3, #16
 80056d6:	d802      	bhi.n	80056de <HAL_TIM_ConfigClockSource+0x66>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d06f      	beq.n	80057bc <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80056dc:	e078      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d06c      	beq.n	80057bc <HAL_TIM_ConfigClockSource+0x144>
 80056e2:	2b30      	cmp	r3, #48	; 0x30
 80056e4:	d06a      	beq.n	80057bc <HAL_TIM_ConfigClockSource+0x144>
      break;
 80056e6:	e073      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80056e8:	2b70      	cmp	r3, #112	; 0x70
 80056ea:	d00d      	beq.n	8005708 <HAL_TIM_ConfigClockSource+0x90>
 80056ec:	2b70      	cmp	r3, #112	; 0x70
 80056ee:	d804      	bhi.n	80056fa <HAL_TIM_ConfigClockSource+0x82>
 80056f0:	2b50      	cmp	r3, #80	; 0x50
 80056f2:	d033      	beq.n	800575c <HAL_TIM_ConfigClockSource+0xe4>
 80056f4:	2b60      	cmp	r3, #96	; 0x60
 80056f6:	d041      	beq.n	800577c <HAL_TIM_ConfigClockSource+0x104>
      break;
 80056f8:	e06a      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80056fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056fe:	d066      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0x156>
 8005700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005704:	d017      	beq.n	8005736 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005706:	e063      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	6899      	ldr	r1, [r3, #8]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f000 fd0c 	bl	8006134 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800572a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	609a      	str	r2, [r3, #8]
      break;
 8005734:	e04c      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	6899      	ldr	r1, [r3, #8]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f000 fcf5 	bl	8006134 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005758:	609a      	str	r2, [r3, #8]
      break;
 800575a:	e039      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	6859      	ldr	r1, [r3, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	461a      	mov	r2, r3
 800576a:	f000 fc69 	bl	8006040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2150      	movs	r1, #80	; 0x50
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fcc2 	bl	80060fe <TIM_ITRx_SetConfig>
      break;
 800577a:	e029      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	6859      	ldr	r1, [r3, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	461a      	mov	r2, r3
 800578a:	f000 fc88 	bl	800609e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2160      	movs	r1, #96	; 0x60
 8005794:	4618      	mov	r0, r3
 8005796:	f000 fcb2 	bl	80060fe <TIM_ITRx_SetConfig>
      break;
 800579a:	e019      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	6859      	ldr	r1, [r3, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	461a      	mov	r2, r3
 80057aa:	f000 fc49 	bl	8006040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2140      	movs	r1, #64	; 0x40
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fca2 	bl	80060fe <TIM_ITRx_SetConfig>
      break;
 80057ba:	e009      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4619      	mov	r1, r3
 80057c6:	4610      	mov	r0, r2
 80057c8:	f000 fc99 	bl	80060fe <TIM_ITRx_SetConfig>
        break;
 80057cc:	e000      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80057ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b084      	sub	sp, #16
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	429a      	cmp	r2, r3
 8005878:	d107      	bne.n	800588a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005888:	e02a      	b.n	80058e0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	d107      	bne.n	80058a4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2202      	movs	r2, #2
 8005898:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058a2:	e01d      	b.n	80058e0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d107      	bne.n	80058be <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2204      	movs	r2, #4
 80058b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058bc:	e010      	b.n	80058e0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d107      	bne.n	80058d8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2208      	movs	r2, #8
 80058cc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058d6:	e003      	b.n	80058e0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f7ff ffb4 	bl	800584e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	771a      	strb	r2, [r3, #28]
}
 80058ec:	bf00      	nop
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	429a      	cmp	r2, r3
 800590a:	d10b      	bne.n	8005924 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2201      	movs	r2, #1
 8005910:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d136      	bne.n	8005988 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005922:	e031      	b.n	8005988 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	429a      	cmp	r2, r3
 800592c:	d10b      	bne.n	8005946 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2202      	movs	r2, #2
 8005932:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d125      	bne.n	8005988 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005944:	e020      	b.n	8005988 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	429a      	cmp	r2, r3
 800594e:	d10b      	bne.n	8005968 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2204      	movs	r2, #4
 8005954:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d114      	bne.n	8005988 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005966:	e00f      	b.n	8005988 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	429a      	cmp	r2, r3
 8005970:	d10a      	bne.n	8005988 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2208      	movs	r2, #8
 8005976:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d103      	bne.n	8005988 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f7ff ff42 	bl	8005812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	771a      	strb	r2, [r3, #28]
}
 8005994:	bf00      	nop
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d103      	bne.n	80059bc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	771a      	strb	r2, [r3, #28]
 80059ba:	e019      	b.n	80059f0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d103      	bne.n	80059ce <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2202      	movs	r2, #2
 80059ca:	771a      	strb	r2, [r3, #28]
 80059cc:	e010      	b.n	80059f0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d103      	bne.n	80059e0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2204      	movs	r2, #4
 80059dc:	771a      	strb	r2, [r3, #28]
 80059de:	e007      	b.n	80059f0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d102      	bne.n	80059f0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2208      	movs	r2, #8
 80059ee:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f7ff ff18 	bl	8005826 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	771a      	strb	r2, [r3, #28]
}
 80059fc:	bf00      	nop
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a32      	ldr	r2, [pc, #200]	; (8005ae0 <TIM_Base_SetConfig+0xdc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d007      	beq.n	8005a2c <TIM_Base_SetConfig+0x28>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a22:	d003      	beq.n	8005a2c <TIM_Base_SetConfig+0x28>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a2f      	ldr	r2, [pc, #188]	; (8005ae4 <TIM_Base_SetConfig+0xe0>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d108      	bne.n	8005a3e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a27      	ldr	r2, [pc, #156]	; (8005ae0 <TIM_Base_SetConfig+0xdc>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d013      	beq.n	8005a6e <TIM_Base_SetConfig+0x6a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4c:	d00f      	beq.n	8005a6e <TIM_Base_SetConfig+0x6a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a24      	ldr	r2, [pc, #144]	; (8005ae4 <TIM_Base_SetConfig+0xe0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00b      	beq.n	8005a6e <TIM_Base_SetConfig+0x6a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a23      	ldr	r2, [pc, #140]	; (8005ae8 <TIM_Base_SetConfig+0xe4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d007      	beq.n	8005a6e <TIM_Base_SetConfig+0x6a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a22      	ldr	r2, [pc, #136]	; (8005aec <TIM_Base_SetConfig+0xe8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d003      	beq.n	8005a6e <TIM_Base_SetConfig+0x6a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a21      	ldr	r2, [pc, #132]	; (8005af0 <TIM_Base_SetConfig+0xec>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d108      	bne.n	8005a80 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a0e      	ldr	r2, [pc, #56]	; (8005ae0 <TIM_Base_SetConfig+0xdc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00b      	beq.n	8005ac4 <TIM_Base_SetConfig+0xc0>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a0e      	ldr	r2, [pc, #56]	; (8005ae8 <TIM_Base_SetConfig+0xe4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d007      	beq.n	8005ac4 <TIM_Base_SetConfig+0xc0>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a0d      	ldr	r2, [pc, #52]	; (8005aec <TIM_Base_SetConfig+0xe8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_Base_SetConfig+0xc0>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a0c      	ldr	r2, [pc, #48]	; (8005af0 <TIM_Base_SetConfig+0xec>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d103      	bne.n	8005acc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	615a      	str	r2, [r3, #20]
}
 8005ad2:	bf00      	nop
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40012c00 	.word	0x40012c00
 8005ae4:	40000400 	.word	0x40000400
 8005ae8:	40014000 	.word	0x40014000
 8005aec:	40014400 	.word	0x40014400
 8005af0:	40014800 	.word	0x40014800

08005af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f023 0201 	bic.w	r2, r3, #1
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0303 	bic.w	r3, r3, #3
 8005b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f023 0302 	bic.w	r3, r3, #2
 8005b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a28      	ldr	r2, [pc, #160]	; (8005bf0 <TIM_OC1_SetConfig+0xfc>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00b      	beq.n	8005b6c <TIM_OC1_SetConfig+0x78>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a27      	ldr	r2, [pc, #156]	; (8005bf4 <TIM_OC1_SetConfig+0x100>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d007      	beq.n	8005b6c <TIM_OC1_SetConfig+0x78>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a26      	ldr	r2, [pc, #152]	; (8005bf8 <TIM_OC1_SetConfig+0x104>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d003      	beq.n	8005b6c <TIM_OC1_SetConfig+0x78>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a25      	ldr	r2, [pc, #148]	; (8005bfc <TIM_OC1_SetConfig+0x108>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d10c      	bne.n	8005b86 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f023 0308 	bic.w	r3, r3, #8
 8005b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f023 0304 	bic.w	r3, r3, #4
 8005b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a19      	ldr	r2, [pc, #100]	; (8005bf0 <TIM_OC1_SetConfig+0xfc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00b      	beq.n	8005ba6 <TIM_OC1_SetConfig+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a18      	ldr	r2, [pc, #96]	; (8005bf4 <TIM_OC1_SetConfig+0x100>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d007      	beq.n	8005ba6 <TIM_OC1_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a17      	ldr	r2, [pc, #92]	; (8005bf8 <TIM_OC1_SetConfig+0x104>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d003      	beq.n	8005ba6 <TIM_OC1_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a16      	ldr	r2, [pc, #88]	; (8005bfc <TIM_OC1_SetConfig+0x108>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d111      	bne.n	8005bca <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	621a      	str	r2, [r3, #32]
}
 8005be4:	bf00      	nop
 8005be6:	371c      	adds	r7, #28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	40014000 	.word	0x40014000
 8005bf8:	40014400 	.word	0x40014400
 8005bfc:	40014800 	.word	0x40014800

08005c00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	f023 0210 	bic.w	r2, r3, #16
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	021b      	lsls	r3, r3, #8
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f023 0320 	bic.w	r3, r3, #32
 8005c4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a24      	ldr	r2, [pc, #144]	; (8005cf0 <TIM_OC2_SetConfig+0xf0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d10d      	bne.n	8005c80 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a1b      	ldr	r2, [pc, #108]	; (8005cf0 <TIM_OC2_SetConfig+0xf0>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00b      	beq.n	8005ca0 <TIM_OC2_SetConfig+0xa0>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a1a      	ldr	r2, [pc, #104]	; (8005cf4 <TIM_OC2_SetConfig+0xf4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d007      	beq.n	8005ca0 <TIM_OC2_SetConfig+0xa0>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a19      	ldr	r2, [pc, #100]	; (8005cf8 <TIM_OC2_SetConfig+0xf8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d003      	beq.n	8005ca0 <TIM_OC2_SetConfig+0xa0>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <TIM_OC2_SetConfig+0xfc>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d113      	bne.n	8005cc8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ca6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cae:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	621a      	str	r2, [r3, #32]
}
 8005ce2:	bf00      	nop
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40012c00 	.word	0x40012c00
 8005cf4:	40014000 	.word	0x40014000
 8005cf8:	40014400 	.word	0x40014400
 8005cfc:	40014800 	.word	0x40014800

08005d00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 0303 	bic.w	r3, r3, #3
 8005d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	021b      	lsls	r3, r3, #8
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a23      	ldr	r2, [pc, #140]	; (8005dec <TIM_OC3_SetConfig+0xec>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d10d      	bne.n	8005d7e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	021b      	lsls	r3, r3, #8
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d7c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a1a      	ldr	r2, [pc, #104]	; (8005dec <TIM_OC3_SetConfig+0xec>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00b      	beq.n	8005d9e <TIM_OC3_SetConfig+0x9e>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a19      	ldr	r2, [pc, #100]	; (8005df0 <TIM_OC3_SetConfig+0xf0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d007      	beq.n	8005d9e <TIM_OC3_SetConfig+0x9e>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a18      	ldr	r2, [pc, #96]	; (8005df4 <TIM_OC3_SetConfig+0xf4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d003      	beq.n	8005d9e <TIM_OC3_SetConfig+0x9e>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a17      	ldr	r2, [pc, #92]	; (8005df8 <TIM_OC3_SetConfig+0xf8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d113      	bne.n	8005dc6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	621a      	str	r2, [r3, #32]
}
 8005de0:	bf00      	nop
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	40012c00 	.word	0x40012c00
 8005df0:	40014000 	.word	0x40014000
 8005df4:	40014400 	.word	0x40014400
 8005df8:	40014800 	.word	0x40014800

08005dfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	021b      	lsls	r3, r3, #8
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	031b      	lsls	r3, r3, #12
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a16      	ldr	r2, [pc, #88]	; (8005eb4 <TIM_OC4_SetConfig+0xb8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00b      	beq.n	8005e78 <TIM_OC4_SetConfig+0x7c>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a15      	ldr	r2, [pc, #84]	; (8005eb8 <TIM_OC4_SetConfig+0xbc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d007      	beq.n	8005e78 <TIM_OC4_SetConfig+0x7c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a14      	ldr	r2, [pc, #80]	; (8005ebc <TIM_OC4_SetConfig+0xc0>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d003      	beq.n	8005e78 <TIM_OC4_SetConfig+0x7c>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a13      	ldr	r2, [pc, #76]	; (8005ec0 <TIM_OC4_SetConfig+0xc4>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d109      	bne.n	8005e8c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	019b      	lsls	r3, r3, #6
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	621a      	str	r2, [r3, #32]
}
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	40012c00 	.word	0x40012c00
 8005eb8:	40014000 	.word	0x40014000
 8005ebc:	40014400 	.word	0x40014400
 8005ec0:	40014800 	.word	0x40014800

08005ec4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	041b      	lsls	r3, r3, #16
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a15      	ldr	r2, [pc, #84]	; (8005f70 <TIM_OC5_SetConfig+0xac>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00b      	beq.n	8005f36 <TIM_OC5_SetConfig+0x72>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a14      	ldr	r2, [pc, #80]	; (8005f74 <TIM_OC5_SetConfig+0xb0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d007      	beq.n	8005f36 <TIM_OC5_SetConfig+0x72>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a13      	ldr	r2, [pc, #76]	; (8005f78 <TIM_OC5_SetConfig+0xb4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d003      	beq.n	8005f36 <TIM_OC5_SetConfig+0x72>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a12      	ldr	r2, [pc, #72]	; (8005f7c <TIM_OC5_SetConfig+0xb8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d109      	bne.n	8005f4a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	021b      	lsls	r3, r3, #8
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	621a      	str	r2, [r3, #32]
}
 8005f64:	bf00      	nop
 8005f66:	371c      	adds	r7, #28
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	40012c00 	.word	0x40012c00
 8005f74:	40014000 	.word	0x40014000
 8005f78:	40014400 	.word	0x40014400
 8005f7c:	40014800 	.word	0x40014800

08005f80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	021b      	lsls	r3, r3, #8
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	051b      	lsls	r3, r3, #20
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a16      	ldr	r2, [pc, #88]	; (8006030 <TIM_OC6_SetConfig+0xb0>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00b      	beq.n	8005ff4 <TIM_OC6_SetConfig+0x74>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a15      	ldr	r2, [pc, #84]	; (8006034 <TIM_OC6_SetConfig+0xb4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d007      	beq.n	8005ff4 <TIM_OC6_SetConfig+0x74>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a14      	ldr	r2, [pc, #80]	; (8006038 <TIM_OC6_SetConfig+0xb8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d003      	beq.n	8005ff4 <TIM_OC6_SetConfig+0x74>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a13      	ldr	r2, [pc, #76]	; (800603c <TIM_OC6_SetConfig+0xbc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d109      	bne.n	8006008 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	029b      	lsls	r3, r3, #10
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	621a      	str	r2, [r3, #32]
}
 8006022:	bf00      	nop
 8006024:	371c      	adds	r7, #28
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	40012c00 	.word	0x40012c00
 8006034:	40014000 	.word	0x40014000
 8006038:	40014400 	.word	0x40014400
 800603c:	40014800 	.word	0x40014800

08006040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f023 0201 	bic.w	r2, r3, #1
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800606a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f023 030a 	bic.w	r3, r3, #10
 800607c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	621a      	str	r2, [r3, #32]
}
 8006092:	bf00      	nop
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800609e:	b480      	push	{r7}
 80060a0:	b087      	sub	sp, #28
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	f023 0210 	bic.w	r2, r3, #16
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	031b      	lsls	r3, r3, #12
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	621a      	str	r2, [r3, #32]
}
 80060f2:	bf00      	nop
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060fe:	b480      	push	{r7}
 8006100:	b085      	sub	sp, #20
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006114:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4313      	orrs	r3, r2
 800611c:	f043 0307 	orr.w	r3, r3, #7
 8006120:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	609a      	str	r2, [r3, #8]
}
 8006128:	bf00      	nop
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800614e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	021a      	lsls	r2, r3, #8
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	431a      	orrs	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4313      	orrs	r3, r2
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	609a      	str	r2, [r3, #8]
}
 8006168:	bf00      	nop
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f003 031f 	and.w	r3, r3, #31
 8006186:	2201      	movs	r2, #1
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a1a      	ldr	r2, [r3, #32]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	43db      	mvns	r3, r3
 8006196:	401a      	ands	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a1a      	ldr	r2, [r3, #32]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f003 031f 	and.w	r3, r3, #31
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	fa01 f303 	lsl.w	r3, r1, r3
 80061ac:	431a      	orrs	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	621a      	str	r2, [r3, #32]
}
 80061b2:	bf00      	nop
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
	...

080061c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d101      	bne.n	80061d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061d4:	2302      	movs	r3, #2
 80061d6:	e054      	b.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a24      	ldr	r2, [pc, #144]	; (8006290 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d108      	bne.n	8006214 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006208:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a17      	ldr	r2, [pc, #92]	; (8006290 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00e      	beq.n	8006256 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006240:	d009      	beq.n	8006256 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a13      	ldr	r2, [pc, #76]	; (8006294 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d004      	beq.n	8006256 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a11      	ldr	r2, [pc, #68]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d10c      	bne.n	8006270 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800625c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	4313      	orrs	r3, r2
 8006266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	40012c00 	.word	0x40012c00
 8006294:	40000400 	.word	0x40000400
 8006298:	40014000 	.word	0x40014000

0800629c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d101      	bne.n	80062b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062b4:	2302      	movs	r3, #2
 80062b6:	e060      	b.n	800637a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	041b      	lsls	r3, r3, #16
 800632e:	4313      	orrs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a14      	ldr	r2, [pc, #80]	; (8006388 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d115      	bne.n	8006368 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006346:	051b      	lsls	r3, r3, #20
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	4313      	orrs	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	40012c00 	.word	0x40012c00

0800638c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e040      	b.n	800645c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d106      	bne.n	80063f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7fb fa26 	bl	800183c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2224      	movs	r2, #36	; 0x24
 80063f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0201 	bic.w	r2, r2, #1
 8006404:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fb28 	bl	8006a5c <UART_SetConfig>
 800640c:	4603      	mov	r3, r0
 800640e:	2b01      	cmp	r3, #1
 8006410:	d101      	bne.n	8006416 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e022      	b.n	800645c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fc54 	bl	8006ccc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006432:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006442:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0201 	orr.w	r2, r2, #1
 8006452:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fcdb 	bl	8006e10 <UART_CheckIdleState>
 800645a:	4603      	mov	r3, r0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08a      	sub	sp, #40	; 0x28
 8006468:	af02      	add	r7, sp, #8
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	603b      	str	r3, [r7, #0]
 8006470:	4613      	mov	r3, r2
 8006472:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006478:	2b20      	cmp	r3, #32
 800647a:	f040 8082 	bne.w	8006582 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <HAL_UART_Transmit+0x26>
 8006484:	88fb      	ldrh	r3, [r7, #6]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e07a      	b.n	8006584 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <HAL_UART_Transmit+0x38>
 8006498:	2302      	movs	r3, #2
 800649a:	e073      	b.n	8006584 <HAL_UART_Transmit+0x120>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2221      	movs	r2, #33	; 0x21
 80064b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064b2:	f7fb fabd 	bl	8001a30 <HAL_GetTick>
 80064b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	88fa      	ldrh	r2, [r7, #6]
 80064bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	88fa      	ldrh	r2, [r7, #6]
 80064c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d0:	d108      	bne.n	80064e4 <HAL_UART_Transmit+0x80>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d104      	bne.n	80064e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	e003      	b.n	80064ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80064f4:	e02d      	b.n	8006552 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2200      	movs	r2, #0
 80064fe:	2180      	movs	r1, #128	; 0x80
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 fcce 	bl	8006ea2 <UART_WaitOnFlagUntilTimeout>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e039      	b.n	8006584 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10b      	bne.n	800652e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	881a      	ldrh	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006522:	b292      	uxth	r2, r2
 8006524:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	3302      	adds	r3, #2
 800652a:	61bb      	str	r3, [r7, #24]
 800652c:	e008      	b.n	8006540 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	781a      	ldrb	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	b292      	uxth	r2, r2
 8006538:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	3301      	adds	r3, #1
 800653e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006546:	b29b      	uxth	r3, r3
 8006548:	3b01      	subs	r3, #1
 800654a:	b29a      	uxth	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006558:	b29b      	uxth	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1cb      	bne.n	80064f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2200      	movs	r2, #0
 8006566:	2140      	movs	r1, #64	; 0x40
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fc9a 	bl	8006ea2 <UART_WaitOnFlagUntilTimeout>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e005      	b.n	8006584 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2220      	movs	r2, #32
 800657c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	e000      	b.n	8006584 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006582:	2302      	movs	r3, #2
  }
}
 8006584:	4618      	mov	r0, r3
 8006586:	3720      	adds	r7, #32
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	4613      	mov	r3, r2
 8006598:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800659e:	2b20      	cmp	r3, #32
 80065a0:	d12c      	bne.n	80065fc <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <HAL_UART_Receive_DMA+0x22>
 80065a8:	88fb      	ldrh	r3, [r7, #6]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e025      	b.n	80065fe <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_UART_Receive_DMA+0x34>
 80065bc:	2302      	movs	r3, #2
 80065be:	e01e      	b.n	80065fe <HAL_UART_Receive_DMA+0x72>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d007      	beq.n	80065ec <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80065ea:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80065ec:	88fb      	ldrh	r3, [r7, #6]
 80065ee:	461a      	mov	r2, r3
 80065f0:	68b9      	ldr	r1, [r7, #8]
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 fcd2 	bl	8006f9c <UART_Start_Receive_DMA>
 80065f8:	4603      	mov	r3, r0
 80065fa:	e000      	b.n	80065fe <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 80065fc:	2302      	movs	r3, #2
  }
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006628:	69fa      	ldr	r2, [r7, #28]
 800662a:	f640 030f 	movw	r3, #2063	; 0x80f
 800662e:	4013      	ands	r3, r2
 8006630:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d113      	bne.n	8006660 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00e      	beq.n	8006660 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	f003 0320 	and.w	r3, r3, #32
 8006648:	2b00      	cmp	r3, #0
 800664a:	d009      	beq.n	8006660 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 81cd 	beq.w	80069f0 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	4798      	blx	r3
      }
      return;
 800665e:	e1c7      	b.n	80069f0 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 80e3 	beq.w	800682e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d105      	bne.n	800667e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	4ba5      	ldr	r3, [pc, #660]	; (800690c <HAL_UART_IRQHandler+0x304>)
 8006676:	4013      	ands	r3, r2
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 80d8 	beq.w	800682e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d010      	beq.n	80066aa <HAL_UART_IRQHandler+0xa2>
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00b      	beq.n	80066aa <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2201      	movs	r2, #1
 8006698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a0:	f043 0201 	orr.w	r2, r3, #1
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d010      	beq.n	80066d6 <HAL_UART_IRQHandler+0xce>
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00b      	beq.n	80066d6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2202      	movs	r2, #2
 80066c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066cc:	f043 0204 	orr.w	r2, r3, #4
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d010      	beq.n	8006702 <HAL_UART_IRQHandler+0xfa>
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00b      	beq.n	8006702 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2204      	movs	r2, #4
 80066f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f8:	f043 0202 	orr.w	r2, r3, #2
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	f003 0308 	and.w	r3, r3, #8
 8006708:	2b00      	cmp	r3, #0
 800670a:	d015      	beq.n	8006738 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	f003 0320 	and.w	r3, r3, #32
 8006712:	2b00      	cmp	r3, #0
 8006714:	d104      	bne.n	8006720 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00b      	beq.n	8006738 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2208      	movs	r2, #8
 8006726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800672e:	f043 0208 	orr.w	r2, r3, #8
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800673e:	2b00      	cmp	r3, #0
 8006740:	d011      	beq.n	8006766 <HAL_UART_IRQHandler+0x15e>
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00c      	beq.n	8006766 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006754:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800675c:	f043 0220 	orr.w	r2, r3, #32
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 8141 	beq.w	80069f4 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00c      	beq.n	8006796 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b00      	cmp	r3, #0
 8006784:	d007      	beq.n	8006796 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800679c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a8:	2b40      	cmp	r3, #64	; 0x40
 80067aa:	d004      	beq.n	80067b6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d031      	beq.n	800681a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fc71 	bl	800709e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c6:	2b40      	cmp	r3, #64	; 0x40
 80067c8:	d123      	bne.n	8006812 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067d8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d013      	beq.n	800680a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e6:	4a4a      	ldr	r2, [pc, #296]	; (8006910 <HAL_UART_IRQHandler+0x308>)
 80067e8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fc fb87 	bl	8002f02 <HAL_DMA_Abort_IT>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d017      	beq.n	800682a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006804:	4610      	mov	r0, r2
 8006806:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006808:	e00f      	b.n	800682a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f910 	bl	8006a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006810:	e00b      	b.n	800682a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f90c 	bl	8006a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006818:	e007      	b.n	800682a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f908 	bl	8006a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006828:	e0e4      	b.n	80069f4 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682a:	bf00      	nop
    return;
 800682c:	e0e2      	b.n	80069f4 <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006832:	2b01      	cmp	r3, #1
 8006834:	f040 80a7 	bne.w	8006986 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	f003 0310 	and.w	r3, r3, #16
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 80a1 	beq.w	8006986 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	f003 0310 	and.w	r3, r3, #16
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 809b 	beq.w	8006986 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2210      	movs	r2, #16
 8006856:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006862:	2b40      	cmp	r3, #64	; 0x40
 8006864:	d156      	bne.n	8006914 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8006870:	893b      	ldrh	r3, [r7, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 80c0 	beq.w	80069f8 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800687e:	893a      	ldrh	r2, [r7, #8]
 8006880:	429a      	cmp	r2, r3
 8006882:	f080 80b9 	bcs.w	80069f8 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	893a      	ldrh	r2, [r7, #8]
 800688a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	2b20      	cmp	r3, #32
 8006896:	d02a      	beq.n	80068ee <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068a6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689a      	ldr	r2, [r3, #8]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 0201 	bic.w	r2, r2, #1
 80068b6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2220      	movs	r2, #32
 80068cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0210 	bic.w	r2, r2, #16
 80068e2:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fc fad1 	bl	8002e90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	b29b      	uxth	r3, r3
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f89e 	bl	8006a44 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006908:	e076      	b.n	80069f8 <HAL_UART_IRQHandler+0x3f0>
 800690a:	bf00      	nop
 800690c:	04000120 	.word	0x04000120
 8006910:	08007243 	.word	0x08007243
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006920:	b29b      	uxth	r3, r3
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800692c:	b29b      	uxth	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d064      	beq.n	80069fc <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 8006932:	897b      	ldrh	r3, [r7, #10]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d061      	beq.n	80069fc <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006946:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0201 	bic.w	r2, r2, #1
 8006956:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2220      	movs	r2, #32
 800695c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0210 	bic.w	r2, r2, #16
 8006978:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800697a:	897b      	ldrh	r3, [r7, #10]
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f860 	bl	8006a44 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006984:	e03a      	b.n	80069fc <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00d      	beq.n	80069ac <HAL_UART_IRQHandler+0x3a4>
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d008      	beq.n	80069ac <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80069a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fc7b 	bl	80072a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069aa:	e02a      	b.n	8006a02 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00d      	beq.n	80069d2 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d008      	beq.n	80069d2 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d01b      	beq.n	8006a00 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	4798      	blx	r3
    }
    return;
 80069d0:	e016      	b.n	8006a00 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d012      	beq.n	8006a02 <HAL_UART_IRQHandler+0x3fa>
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00d      	beq.n	8006a02 <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fc41 	bl	800726e <UART_EndTransmit_IT>
    return;
 80069ec:	bf00      	nop
 80069ee:	e008      	b.n	8006a02 <HAL_UART_IRQHandler+0x3fa>
      return;
 80069f0:	bf00      	nop
 80069f2:	e006      	b.n	8006a02 <HAL_UART_IRQHandler+0x3fa>
    return;
 80069f4:	bf00      	nop
 80069f6:	e004      	b.n	8006a02 <HAL_UART_IRQHandler+0x3fa>
      return;
 80069f8:	bf00      	nop
 80069fa:	e002      	b.n	8006a02 <HAL_UART_IRQHandler+0x3fa>
      return;
 80069fc:	bf00      	nop
 80069fe:	e000      	b.n	8006a02 <HAL_UART_IRQHandler+0x3fa>
    return;
 8006a00:	bf00      	nop
  }

}
 8006a02:	3720      	adds	r7, #32
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b088      	sub	sp, #32
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	431a      	orrs	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	4b8b      	ldr	r3, [pc, #556]	; (8006cb4 <UART_SetConfig+0x258>)
 8006a88:	4013      	ands	r3, r2
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	6812      	ldr	r2, [r2, #0]
 8006a8e:	6979      	ldr	r1, [r7, #20]
 8006a90:	430b      	orrs	r3, r1
 8006a92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a79      	ldr	r2, [pc, #484]	; (8006cb8 <UART_SetConfig+0x25c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d121      	bne.n	8006b1c <UART_SetConfig+0xc0>
 8006ad8:	4b78      	ldr	r3, [pc, #480]	; (8006cbc <UART_SetConfig+0x260>)
 8006ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006adc:	f003 0303 	and.w	r3, r3, #3
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d817      	bhi.n	8006b14 <UART_SetConfig+0xb8>
 8006ae4:	a201      	add	r2, pc, #4	; (adr r2, 8006aec <UART_SetConfig+0x90>)
 8006ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aea:	bf00      	nop
 8006aec:	08006afd 	.word	0x08006afd
 8006af0:	08006b09 	.word	0x08006b09
 8006af4:	08006b0f 	.word	0x08006b0f
 8006af8:	08006b03 	.word	0x08006b03
 8006afc:	2300      	movs	r3, #0
 8006afe:	77fb      	strb	r3, [r7, #31]
 8006b00:	e01e      	b.n	8006b40 <UART_SetConfig+0xe4>
 8006b02:	2302      	movs	r3, #2
 8006b04:	77fb      	strb	r3, [r7, #31]
 8006b06:	e01b      	b.n	8006b40 <UART_SetConfig+0xe4>
 8006b08:	2304      	movs	r3, #4
 8006b0a:	77fb      	strb	r3, [r7, #31]
 8006b0c:	e018      	b.n	8006b40 <UART_SetConfig+0xe4>
 8006b0e:	2308      	movs	r3, #8
 8006b10:	77fb      	strb	r3, [r7, #31]
 8006b12:	e015      	b.n	8006b40 <UART_SetConfig+0xe4>
 8006b14:	2310      	movs	r3, #16
 8006b16:	77fb      	strb	r3, [r7, #31]
 8006b18:	bf00      	nop
 8006b1a:	e011      	b.n	8006b40 <UART_SetConfig+0xe4>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a67      	ldr	r2, [pc, #412]	; (8006cc0 <UART_SetConfig+0x264>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d102      	bne.n	8006b2c <UART_SetConfig+0xd0>
 8006b26:	2300      	movs	r3, #0
 8006b28:	77fb      	strb	r3, [r7, #31]
 8006b2a:	e009      	b.n	8006b40 <UART_SetConfig+0xe4>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a64      	ldr	r2, [pc, #400]	; (8006cc4 <UART_SetConfig+0x268>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d102      	bne.n	8006b3c <UART_SetConfig+0xe0>
 8006b36:	2300      	movs	r3, #0
 8006b38:	77fb      	strb	r3, [r7, #31]
 8006b3a:	e001      	b.n	8006b40 <UART_SetConfig+0xe4>
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b48:	d15c      	bne.n	8006c04 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8006b4a:	7ffb      	ldrb	r3, [r7, #31]
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d828      	bhi.n	8006ba2 <UART_SetConfig+0x146>
 8006b50:	a201      	add	r2, pc, #4	; (adr r2, 8006b58 <UART_SetConfig+0xfc>)
 8006b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b56:	bf00      	nop
 8006b58:	08006b7d 	.word	0x08006b7d
 8006b5c:	08006b85 	.word	0x08006b85
 8006b60:	08006b8d 	.word	0x08006b8d
 8006b64:	08006ba3 	.word	0x08006ba3
 8006b68:	08006b93 	.word	0x08006b93
 8006b6c:	08006ba3 	.word	0x08006ba3
 8006b70:	08006ba3 	.word	0x08006ba3
 8006b74:	08006ba3 	.word	0x08006ba3
 8006b78:	08006b9b 	.word	0x08006b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b7c:	f7fd fde2 	bl	8004744 <HAL_RCC_GetPCLK1Freq>
 8006b80:	61b8      	str	r0, [r7, #24]
        break;
 8006b82:	e013      	b.n	8006bac <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b84:	f7fd fe00 	bl	8004788 <HAL_RCC_GetPCLK2Freq>
 8006b88:	61b8      	str	r0, [r7, #24]
        break;
 8006b8a:	e00f      	b.n	8006bac <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b8c:	4b4e      	ldr	r3, [pc, #312]	; (8006cc8 <UART_SetConfig+0x26c>)
 8006b8e:	61bb      	str	r3, [r7, #24]
        break;
 8006b90:	e00c      	b.n	8006bac <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b92:	f7fd fd61 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 8006b96:	61b8      	str	r0, [r7, #24]
        break;
 8006b98:	e008      	b.n	8006bac <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b9e:	61bb      	str	r3, [r7, #24]
        break;
 8006ba0:	e004      	b.n	8006bac <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	77bb      	strb	r3, [r7, #30]
        break;
 8006baa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d074      	beq.n	8006c9c <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	005a      	lsls	r2, r3, #1
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	085b      	lsrs	r3, r3, #1
 8006bbc:	441a      	add	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b0f      	cmp	r3, #15
 8006bce:	d916      	bls.n	8006bfe <UART_SetConfig+0x1a2>
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd6:	d212      	bcs.n	8006bfe <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	f023 030f 	bic.w	r3, r3, #15
 8006be0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	085b      	lsrs	r3, r3, #1
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	89fb      	ldrh	r3, [r7, #14]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	89fa      	ldrh	r2, [r7, #14]
 8006bfa:	60da      	str	r2, [r3, #12]
 8006bfc:	e04e      	b.n	8006c9c <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	77bb      	strb	r3, [r7, #30]
 8006c02:	e04b      	b.n	8006c9c <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c04:	7ffb      	ldrb	r3, [r7, #31]
 8006c06:	2b08      	cmp	r3, #8
 8006c08:	d827      	bhi.n	8006c5a <UART_SetConfig+0x1fe>
 8006c0a:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <UART_SetConfig+0x1b4>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c35 	.word	0x08006c35
 8006c14:	08006c3d 	.word	0x08006c3d
 8006c18:	08006c45 	.word	0x08006c45
 8006c1c:	08006c5b 	.word	0x08006c5b
 8006c20:	08006c4b 	.word	0x08006c4b
 8006c24:	08006c5b 	.word	0x08006c5b
 8006c28:	08006c5b 	.word	0x08006c5b
 8006c2c:	08006c5b 	.word	0x08006c5b
 8006c30:	08006c53 	.word	0x08006c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c34:	f7fd fd86 	bl	8004744 <HAL_RCC_GetPCLK1Freq>
 8006c38:	61b8      	str	r0, [r7, #24]
        break;
 8006c3a:	e013      	b.n	8006c64 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c3c:	f7fd fda4 	bl	8004788 <HAL_RCC_GetPCLK2Freq>
 8006c40:	61b8      	str	r0, [r7, #24]
        break;
 8006c42:	e00f      	b.n	8006c64 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c44:	4b20      	ldr	r3, [pc, #128]	; (8006cc8 <UART_SetConfig+0x26c>)
 8006c46:	61bb      	str	r3, [r7, #24]
        break;
 8006c48:	e00c      	b.n	8006c64 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c4a:	f7fd fd05 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 8006c4e:	61b8      	str	r0, [r7, #24]
        break;
 8006c50:	e008      	b.n	8006c64 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c56:	61bb      	str	r3, [r7, #24]
        break;
 8006c58:	e004      	b.n	8006c64 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	77bb      	strb	r3, [r7, #30]
        break;
 8006c62:	bf00      	nop
    }

    if (pclk != 0U)
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d018      	beq.n	8006c9c <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	085a      	lsrs	r2, r3, #1
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	441a      	add	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	2b0f      	cmp	r3, #15
 8006c84:	d908      	bls.n	8006c98 <UART_SetConfig+0x23c>
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c8c:	d204      	bcs.n	8006c98 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	60da      	str	r2, [r3, #12]
 8006c96:	e001      	b.n	8006c9c <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006ca8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3720      	adds	r7, #32
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	efff69f3 	.word	0xefff69f3
 8006cb8:	40013800 	.word	0x40013800
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	40004400 	.word	0x40004400
 8006cc4:	40004800 	.word	0x40004800
 8006cc8:	007a1200 	.word	0x007a1200

08006ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00a      	beq.n	8006cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00a      	beq.n	8006d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	f003 0308 	and.w	r3, r3, #8
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00a      	beq.n	8006d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	f003 0310 	and.w	r3, r3, #16
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00a      	beq.n	8006d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00a      	beq.n	8006da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d01a      	beq.n	8006de2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dca:	d10a      	bne.n	8006de2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	605a      	str	r2, [r3, #4]
  }
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af02      	add	r7, sp, #8
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e20:	f7fa fe06 	bl	8001a30 <HAL_GetTick>
 8006e24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0308 	and.w	r3, r3, #8
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d10e      	bne.n	8006e52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f82d 	bl	8006ea2 <UART_WaitOnFlagUntilTimeout>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e023      	b.n	8006e9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0304 	and.w	r3, r3, #4
 8006e5c:	2b04      	cmp	r3, #4
 8006e5e:	d10e      	bne.n	8006e7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f817 	bl	8006ea2 <UART_WaitOnFlagUntilTimeout>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e00d      	b.n	8006e9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2220      	movs	r2, #32
 8006e82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2220      	movs	r2, #32
 8006e88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	603b      	str	r3, [r7, #0]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb2:	e05e      	b.n	8006f72 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eba:	d05a      	beq.n	8006f72 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ebc:	f7fa fdb8 	bl	8001a30 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d302      	bcc.n	8006ed2 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d11b      	bne.n	8006f0a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ee0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0201 	bic.w	r2, r2, #1
 8006ef0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2220      	movs	r2, #32
 8006efc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e043      	b.n	8006f92 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d02c      	beq.n	8006f72 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f26:	d124      	bne.n	8006f72 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f40:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 0201 	bic.w	r2, r2, #1
 8006f50:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2220      	movs	r2, #32
 8006f56:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e00f      	b.n	8006f92 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69da      	ldr	r2, [r3, #28]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	bf0c      	ite	eq
 8006f82:	2301      	moveq	r3, #1
 8006f84:	2300      	movne	r3, #0
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d091      	beq.n	8006eb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	88fa      	ldrh	r2, [r7, #6]
 8006fb4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2222      	movs	r2, #34	; 0x22
 8006fc4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d02b      	beq.n	8007026 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd2:	4a25      	ldr	r2, [pc, #148]	; (8007068 <UART_Start_Receive_DMA+0xcc>)
 8006fd4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fda:	4a24      	ldr	r2, [pc, #144]	; (800706c <UART_Start_Receive_DMA+0xd0>)
 8006fdc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe2:	4a23      	ldr	r2, [pc, #140]	; (8007070 <UART_Start_Receive_DMA+0xd4>)
 8006fe4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fea:	2200      	movs	r2, #0
 8006fec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3324      	adds	r3, #36	; 0x24
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffe:	461a      	mov	r2, r3
 8007000:	88fb      	ldrh	r3, [r7, #6]
 8007002:	f7fb fee6 	bl	8002dd2 <HAL_DMA_Start_IT>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00c      	beq.n	8007026 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2210      	movs	r2, #16
 8007010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2220      	movs	r2, #32
 8007020:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e01c      	b.n	8007060 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800703c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689a      	ldr	r2, [r3, #8]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f042 0201 	orr.w	r2, r2, #1
 800704c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800705c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	080070fd 	.word	0x080070fd
 800706c:	0800718f 	.word	0x0800718f
 8007070:	080071c7 	.word	0x080071c7

08007074 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800708a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2220      	movs	r2, #32
 8007090:	679a      	str	r2, [r3, #120]	; 0x78
}
 8007092:	bf00      	nop
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070b4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0201 	bic.w	r2, r2, #1
 80070c4:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d107      	bne.n	80070de <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 0210 	bic.w	r2, r2, #16
 80070dc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2220      	movs	r2, #32
 80070e2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	665a      	str	r2, [r3, #100]	; 0x64
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	2b20      	cmp	r3, #32
 8007110:	d02a      	beq.n	8007168 <UART_DMAReceiveCplt+0x6c>
  {
    huart->RxXferCount = 0U;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007128:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0201 	bic.w	r2, r2, #1
 8007138:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007148:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2220      	movs	r2, #32
 800714e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007154:	2b01      	cmp	r3, #1
 8007156:	d107      	bne.n	8007168 <UART_DMAReceiveCplt+0x6c>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0210 	bic.w	r2, r2, #16
 8007166:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800716c:	2b01      	cmp	r3, #1
 800716e:	d107      	bne.n	8007180 <UART_DMAReceiveCplt+0x84>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007176:	4619      	mov	r1, r3
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f7ff fc63 	bl	8006a44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800717e:	e002      	b.n	8007186 <UART_DMAReceiveCplt+0x8a>
    HAL_UART_RxCpltCallback(huart);
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f000 fb87 	bl	8007894 <HAL_UART_RxCpltCallback>
}
 8007186:	bf00      	nop
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b084      	sub	sp, #16
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d109      	bne.n	80071b8 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80071aa:	085b      	lsrs	r3, r3, #1
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	4619      	mov	r1, r3
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f7ff fc47 	bl	8006a44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071b6:	e002      	b.n	80071be <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f7ff fc2f 	bl	8006a1c <HAL_UART_RxHalfCpltCallback>
}
 80071be:	bf00      	nop
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b086      	sub	sp, #24
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071d8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ea:	2b80      	cmp	r3, #128	; 0x80
 80071ec:	d109      	bne.n	8007202 <UART_DMAError+0x3c>
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	2b21      	cmp	r3, #33	; 0x21
 80071f2:	d106      	bne.n	8007202 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80071fc:	6978      	ldr	r0, [r7, #20]
 80071fe:	f7ff ff39 	bl	8007074 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720c:	2b40      	cmp	r3, #64	; 0x40
 800720e:	d109      	bne.n	8007224 <UART_DMAError+0x5e>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2b22      	cmp	r3, #34	; 0x22
 8007214:	d106      	bne.n	8007224 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2200      	movs	r2, #0
 800721a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800721e:	6978      	ldr	r0, [r7, #20]
 8007220:	f7ff ff3d 	bl	800709e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800722a:	f043 0210 	orr.w	r2, r3, #16
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007234:	6978      	ldr	r0, [r7, #20]
 8007236:	f7ff fbfb 	bl	8006a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800723a:	bf00      	nop
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f7ff fbe5 	bl	8006a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007266:	bf00      	nop
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b082      	sub	sp, #8
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007284:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2220      	movs	r2, #32
 800728a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff fbb8 	bl	8006a08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007298:	bf00      	nop
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <energyflow_init>:
#include "measurements.h"

EnergyFlow hydros;

void energyflow_init(void)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	af00      	add	r7, sp, #0
	 hydros.charging=0;
 80072b8:	4b0a      	ldr	r3, [pc, #40]	; (80072e4 <energyflow_init+0x30>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]
	 HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80072be:	2108      	movs	r1, #8
 80072c0:	4809      	ldr	r0, [pc, #36]	; (80072e8 <energyflow_init+0x34>)
 80072c2:	f7fd fcbf 	bl	8004c44 <HAL_TIM_PWM_Start>
	 HAL_GPIO_WritePin(SC_ON_GPIO_Port, SC_ON_Pin, RESET);
 80072c6:	2200      	movs	r2, #0
 80072c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80072d0:	f7fc f8b8 	bl	8003444 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(FC_DECHARGING_GPIO_Port, FC_DECHARGING_Pin, RESET);
 80072d4:	2200      	movs	r2, #0
 80072d6:	2180      	movs	r1, #128	; 0x80
 80072d8:	4804      	ldr	r0, [pc, #16]	; (80072ec <energyflow_init+0x38>)
 80072da:	f7fc f8b3 	bl	8003444 <HAL_GPIO_WritePin>
}
 80072de:	bf00      	nop
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	2000042c 	.word	0x2000042c
 80072e8:	200001e4 	.word	0x200001e4
 80072ec:	48000400 	.word	0x48000400

080072f0 <fans_init>:
FC_FANS FANS;

static void doCalculations(void);

void fans_init()
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0
	 HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_1,&FANS.controlValue,1);
 80072f4:	2301      	movs	r3, #1
 80072f6:	4a03      	ldr	r2, [pc, #12]	; (8007304 <fans_init+0x14>)
 80072f8:	2100      	movs	r1, #0
 80072fa:	4803      	ldr	r0, [pc, #12]	; (8007308 <fans_init+0x18>)
 80072fc:	f7fd fd8e 	bl	8004e1c <HAL_TIM_PWM_Start_DMA>
}
 8007300:	bf00      	nop
 8007302:	bd80      	pop	{r7, pc}
 8007304:	20000434 	.word	0x20000434
 8007308:	2000027c 	.word	0x2000027c

0800730c <fansStep>:
void fansStep(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
	doCalculations();
 8007310:	f000 f802 	bl	8007318 <doCalculations>
}
 8007314:	bf00      	nop
 8007316:	bd80      	pop	{r7, pc}

08007318 <doCalculations>:

void doCalculations(void)   //co 150 ms
{
 8007318:	b480      	push	{r7}
 800731a:	af00      	add	r7, sp, #0
	sampleTime++;
 800731c:	4b1a      	ldr	r3, [pc, #104]	; (8007388 <doCalculations+0x70>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	3301      	adds	r3, #1
 8007322:	b2da      	uxtb	r2, r3
 8007324:	4b18      	ldr	r3, [pc, #96]	; (8007388 <doCalculations+0x70>)
 8007326:	701a      	strb	r2, [r3, #0]
	if (sampleTime>=150)
 8007328:	4b17      	ldr	r3, [pc, #92]	; (8007388 <doCalculations+0x70>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b95      	cmp	r3, #149	; 0x95
 800732e:	d926      	bls.n	800737e <doCalculations+0x66>
	{
	FANS.rpm_1=pulses_1*200;
 8007330:	4b16      	ldr	r3, [pc, #88]	; (800738c <doCalculations+0x74>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	b29b      	uxth	r3, r3
 8007336:	461a      	mov	r2, r3
 8007338:	0092      	lsls	r2, r2, #2
 800733a:	4413      	add	r3, r2
 800733c:	461a      	mov	r2, r3
 800733e:	0091      	lsls	r1, r2, #2
 8007340:	461a      	mov	r2, r3
 8007342:	460b      	mov	r3, r1
 8007344:	4413      	add	r3, r2
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	b29a      	uxth	r2, r3
 800734a:	4b11      	ldr	r3, [pc, #68]	; (8007390 <doCalculations+0x78>)
 800734c:	801a      	strh	r2, [r3, #0]
	FANS.rpm_2=pulses_2*200; //200 dla 150 ms okresu
 800734e:	4b11      	ldr	r3, [pc, #68]	; (8007394 <doCalculations+0x7c>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	b29b      	uxth	r3, r3
 8007354:	461a      	mov	r2, r3
 8007356:	0092      	lsls	r2, r2, #2
 8007358:	4413      	add	r3, r2
 800735a:	461a      	mov	r2, r3
 800735c:	0091      	lsls	r1, r2, #2
 800735e:	461a      	mov	r2, r3
 8007360:	460b      	mov	r3, r1
 8007362:	4413      	add	r3, r2
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	b29a      	uxth	r2, r3
 8007368:	4b09      	ldr	r3, [pc, #36]	; (8007390 <doCalculations+0x78>)
 800736a:	805a      	strh	r2, [r3, #2]
	pulses_1=0;
 800736c:	4b07      	ldr	r3, [pc, #28]	; (800738c <doCalculations+0x74>)
 800736e:	2200      	movs	r2, #0
 8007370:	701a      	strb	r2, [r3, #0]
	pulses_2=0;
 8007372:	4b08      	ldr	r3, [pc, #32]	; (8007394 <doCalculations+0x7c>)
 8007374:	2200      	movs	r2, #0
 8007376:	701a      	strb	r2, [r3, #0]
	sampleTime=0;
 8007378:	4b03      	ldr	r3, [pc, #12]	; (8007388 <doCalculations+0x70>)
 800737a:	2200      	movs	r2, #0
 800737c:	701a      	strb	r2, [r3, #0]
	}
}
 800737e:	bf00      	nop
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	20000031 	.word	0x20000031
 800738c:	20000032 	.word	0x20000032
 8007390:	20000430 	.word	0x20000430
 8007394:	20000033 	.word	0x20000033

08007398 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	4603      	mov	r3, r0
 80073a0:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 80073a2:	88fb      	ldrh	r3, [r7, #6]
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d009      	beq.n	80073bc <HAL_GPIO_EXTI_Callback+0x24>
 80073a8:	2b40      	cmp	r3, #64	; 0x40
 80073aa:	d000      	beq.n	80073ae <HAL_GPIO_EXTI_Callback+0x16>
	break;
	case fan_2_PIN:
		pulses_2++;
	break;
	default:
	break;
 80073ac:	e00d      	b.n	80073ca <HAL_GPIO_EXTI_Callback+0x32>
		pulses_1++;
 80073ae:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <HAL_GPIO_EXTI_Callback+0x40>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	3301      	adds	r3, #1
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	4b08      	ldr	r3, [pc, #32]	; (80073d8 <HAL_GPIO_EXTI_Callback+0x40>)
 80073b8:	701a      	strb	r2, [r3, #0]
	break;
 80073ba:	e006      	b.n	80073ca <HAL_GPIO_EXTI_Callback+0x32>
		pulses_2++;
 80073bc:	4b07      	ldr	r3, [pc, #28]	; (80073dc <HAL_GPIO_EXTI_Callback+0x44>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	3301      	adds	r3, #1
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	4b05      	ldr	r3, [pc, #20]	; (80073dc <HAL_GPIO_EXTI_Callback+0x44>)
 80073c6:	701a      	strb	r2, [r3, #0]
	break;
 80073c8:	bf00      	nop
	}
}
 80073ca:	bf00      	nop
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	20000032 	.word	0x20000032
 80073dc:	20000033 	.word	0x20000033

080073e0 <hydrogreen_init>:
/**
* @fn hydrogreen_init(void)
* @brief Glowna funkcja inicjalizujaca, powinna zostac wywolana wewnatrz hydrogreen_main()
*/
static void hydrogreen_init(void)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	af00      	add	r7, sp, #0
  watchdog_init();
 80073e4:	f000 fc82 	bl	8007cec <watchdog_init>
    timers_init();
 80073e8:	f000 fb84 	bl	8007af4 <timers_init>
    rs485_init();
 80073ec:	f000 f994 	bl	8007718 <rs485_init>
    adc_init();
 80073f0:	f000 f844 	bl	800747c <adc_init>
    motor_init();
 80073f4:	f000 f8d0 	bl	8007598 <motor_init>
    energyflow_init();
 80073f8:	f7ff ff5c 	bl	80072b4 <energyflow_init>
    fans_init();
 80073fc:	f7ff ff78 	bl	80072f0 <fans_init>
}
 8007400:	bf00      	nop
 8007402:	bd80      	pop	{r7, pc}

08007404 <hydrogreen_step1kHz>:
/**
* @fn hydrogreen_step1kHz(void)
* @brief Glowna funkcja wykonywana co T = 1ms, powinna zostac wywolana wewnatrz hydrogreen_main()
*/
static inline void hydrogreen_step1kHz(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	af00      	add	r7, sp, #0
#ifdef HYDROGREEN_DEBUG
  HAL_GPIO_WritePin(GPIOA, DBG_Pin, GPIO_PIN_RESET);
#endif
  watchdog_step();
 8007408:	f000 fd44 	bl	8007e94 <watchdog_step>
  fansStep();
 800740c:	f7ff ff7e 	bl	800730c <fansStep>
  PIDstep();
 8007410:	f000 f8d2 	bl	80075b8 <PIDstep>
  adc_step();
 8007414:	f000 f8ba 	bl	800758c <adc_step>
#ifdef HYDROGREEN_DEBUG
  HAL_GPIO_WritePin(GPIOA, DBG_Pin, GPIO_PIN_SET);
#endif
}
 8007418:	bf00      	nop
 800741a:	bd80      	pop	{r7, pc}

0800741c <hydrogreen_step10kHz>:
/**
* @fn hydrogreen_step(void)
* @brief Glowna funkcja wykonywana co T = 0,1ms, powinna zostac wywolana wewnatrz hydrogreen_main()
*/
static inline void hydrogreen_step10kHz(void)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
 rs485_step();
 8007420:	f000 f98a 	bl	8007738 <rs485_step>
}
 8007424:	bf00      	nop
 8007426:	bd80      	pop	{r7, pc}

08007428 <hydrogreen_main>:
/**
* @fn hydrogreen_main(void)
* @brief Glowna funkcja programu, powinna zostac wywolana w pliku main.c, pomiedzy  USER CODE BEGIN 2 a USER CODE END 2
*/
void hydrogreen_main(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
  hydrogreen_init();
 800742c:	f7ff ffd8 	bl	80073e0 <hydrogreen_init>

 while (1)
    {
      //Sprawdz czy wystapil tick timera nastepujacy z f = 1kHz
      if (timers_tick1kHz)
 8007430:	4b0c      	ldr	r3, [pc, #48]	; (8007464 <hydrogreen_main+0x3c>)
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d008      	beq.n	800744c <hydrogreen_main+0x24>
	{
	  timers_beforeStep1kHz();
 800743a:	f000 fbb9 	bl	8007bb0 <timers_beforeStep1kHz>

	  hydrogreen_step1kHz();
 800743e:	f7ff ffe1 	bl	8007404 <hydrogreen_step1kHz>

	  timers_afterStep1kHz();
 8007442:	f000 fbc1 	bl	8007bc8 <timers_afterStep1kHz>

	  timers_tick1kHz = 0;
 8007446:	4b07      	ldr	r3, [pc, #28]	; (8007464 <hydrogreen_main+0x3c>)
 8007448:	2200      	movs	r2, #0
 800744a:	701a      	strb	r2, [r3, #0]
	}

      //Sprawdz czy wystapil tick timera nastepujacy z f = 10kHz
      if (timers_tick10kHz)
 800744c:	4b06      	ldr	r3, [pc, #24]	; (8007468 <hydrogreen_main+0x40>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0ec      	beq.n	8007430 <hydrogreen_main+0x8>
	{
	  hydrogreen_step10kHz();
 8007456:	f7ff ffe1 	bl	800741c <hydrogreen_step10kHz>
	  timers_tick10kHz = 0;
 800745a:	4b03      	ldr	r3, [pc, #12]	; (8007468 <hydrogreen_main+0x40>)
 800745c:	2200      	movs	r2, #0
 800745e:	701a      	strb	r2, [r3, #0]
      if (timers_tick1kHz)
 8007460:	e7e6      	b.n	8007430 <hydrogreen_main+0x8>
 8007462:	bf00      	nop
 8007464:	20000458 	.word	0x20000458
 8007468:	20000454 	.word	0x20000454

0800746c <hydrogreen_hardFault>:
/**
* @fn hydrogreen_hardFault(void)
* @brief Sygnalizacja wystapienia hard fault'a, wywolac w pliku main.c, w funkcji Error_Handler()
*/
void hydrogreen_hardFault(void)
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
  //HAL_GPIO_WritePin(GPIOB, LED_NUCLEO_Pin, GPIO_PIN_SET);
}
 8007470:	bf00      	nop
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
	...

0800747c <adc_init>:
MEASUREMENTS VALUES;

static void calculateValues(void);

void adc_init(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
  HAL_ADC_Start_DMA(&adcChannel, (uint32_t*) adcDataToCalculate, 4);
 8007480:	2204      	movs	r2, #4
 8007482:	4903      	ldr	r1, [pc, #12]	; (8007490 <adc_init+0x14>)
 8007484:	4803      	ldr	r0, [pc, #12]	; (8007494 <adc_init+0x18>)
 8007486:	f7fa fc8f 	bl	8001da8 <HAL_ADC_Start_DMA>
}
 800748a:	bf00      	nop
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	20000448 	.word	0x20000448
 8007494:	20000094 	.word	0x20000094

08007498 <calculateValues>:

static void calculateValues(void)
{
 8007498:	b598      	push	{r3, r4, r7, lr}
 800749a:	af00      	add	r7, sp, #0
	VALUES.FC_TEMP.value=(((4095.0-(float)adcDataToCalculate[0])*20))/300;
 800749c:	4b36      	ldr	r3, [pc, #216]	; (8007578 <calculateValues+0xe0>)
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	ee07 3a90 	vmov	s15, r3
 80074a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a8:	ee17 0a90 	vmov	r0, s15
 80074ac:	f7f8 fff0 	bl	8000490 <__aeabi_f2d>
 80074b0:	4603      	mov	r3, r0
 80074b2:	460c      	mov	r4, r1
 80074b4:	461a      	mov	r2, r3
 80074b6:	4623      	mov	r3, r4
 80074b8:	a12b      	add	r1, pc, #172	; (adr r1, 8007568 <calculateValues+0xd0>)
 80074ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074be:	f7f8 fe87 	bl	80001d0 <__aeabi_dsub>
 80074c2:	4603      	mov	r3, r0
 80074c4:	460c      	mov	r4, r1
 80074c6:	4618      	mov	r0, r3
 80074c8:	4621      	mov	r1, r4
 80074ca:	f04f 0200 	mov.w	r2, #0
 80074ce:	4b2b      	ldr	r3, [pc, #172]	; (800757c <calculateValues+0xe4>)
 80074d0:	f7f9 f836 	bl	8000540 <__aeabi_dmul>
 80074d4:	4603      	mov	r3, r0
 80074d6:	460c      	mov	r4, r1
 80074d8:	4618      	mov	r0, r3
 80074da:	4621      	mov	r1, r4
 80074dc:	a324      	add	r3, pc, #144	; (adr r3, 8007570 <calculateValues+0xd8>)
 80074de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e2:	f7f9 f957 	bl	8000794 <__aeabi_ddiv>
 80074e6:	4603      	mov	r3, r0
 80074e8:	460c      	mov	r4, r1
 80074ea:	4618      	mov	r0, r3
 80074ec:	4621      	mov	r1, r4
 80074ee:	f7f9 fa39 	bl	8000964 <__aeabi_d2f>
 80074f2:	4602      	mov	r2, r0
 80074f4:	4b22      	ldr	r3, [pc, #136]	; (8007580 <calculateValues+0xe8>)
 80074f6:	601a      	str	r2, [r3, #0]
	VALUES.SC_V.value=((float)adcDataToCalculate[1]*60)/4095;
 80074f8:	4b1f      	ldr	r3, [pc, #124]	; (8007578 <calculateValues+0xe0>)
 80074fa:	885b      	ldrh	r3, [r3, #2]
 80074fc:	ee07 3a90 	vmov	s15, r3
 8007500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007504:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007584 <calculateValues+0xec>
 8007508:	ee27 7a87 	vmul.f32	s14, s15, s14
 800750c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8007588 <calculateValues+0xf0>
 8007510:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007514:	4b1a      	ldr	r3, [pc, #104]	; (8007580 <calculateValues+0xe8>)
 8007516:	edc3 7a02 	vstr	s15, [r3, #8]
	VALUES.SC_C.value=((float)adcDataToCalculate[2]*5)/4095;
 800751a:	4b17      	ldr	r3, [pc, #92]	; (8007578 <calculateValues+0xe0>)
 800751c:	889b      	ldrh	r3, [r3, #4]
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007526:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800752a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800752e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8007588 <calculateValues+0xf0>
 8007532:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007536:	4b12      	ldr	r3, [pc, #72]	; (8007580 <calculateValues+0xe8>)
 8007538:	edc3 7a03 	vstr	s15, [r3, #12]
	VALUES.FC_V.value=((float)adcDataToCalculate[3]*60)/4095;
 800753c:	4b0e      	ldr	r3, [pc, #56]	; (8007578 <calculateValues+0xe0>)
 800753e:	88db      	ldrh	r3, [r3, #6]
 8007540:	ee07 3a90 	vmov	s15, r3
 8007544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007548:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8007584 <calculateValues+0xec>
 800754c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007550:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8007588 <calculateValues+0xf0>
 8007554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007558:	4b09      	ldr	r3, [pc, #36]	; (8007580 <calculateValues+0xe8>)
 800755a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800755e:	bf00      	nop
 8007560:	bd98      	pop	{r3, r4, r7, pc}
 8007562:	bf00      	nop
 8007564:	f3af 8000 	nop.w
 8007568:	00000000 	.word	0x00000000
 800756c:	40affe00 	.word	0x40affe00
 8007570:	00000000 	.word	0x00000000
 8007574:	4072c000 	.word	0x4072c000
 8007578:	20000448 	.word	0x20000448
 800757c:	40340000 	.word	0x40340000
 8007580:	20000438 	.word	0x20000438
 8007584:	42700000 	.word	0x42700000
 8007588:	457ff000 	.word	0x457ff000

0800758c <adc_step>:
void adc_step()
{
 800758c:	b580      	push	{r7, lr}
 800758e:	af00      	add	r7, sp, #0
	calculateValues();
 8007590:	f7ff ff82 	bl	8007498 <calculateValues>
}
 8007594:	bf00      	nop
 8007596:	bd80      	pop	{r7, pc}

08007598 <motor_init>:

#include "tim.h"
#include "rs485.h"

void motor_init(void)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_1, (uint32_t*)RS485_RX_VERIFIED_DATA.motorPWM,1);
 800759c:	4b04      	ldr	r3, [pc, #16]	; (80075b0 <motor_init+0x18>)
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	461a      	mov	r2, r3
 80075a2:	2301      	movs	r3, #1
 80075a4:	2100      	movs	r1, #0
 80075a6:	4803      	ldr	r0, [pc, #12]	; (80075b4 <motor_init+0x1c>)
 80075a8:	f7fd fc38 	bl	8004e1c <HAL_TIM_PWM_Start_DMA>
}
 80075ac:	bf00      	nop
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	20000450 	.word	0x20000450
 80075b4:	200002c8 	.word	0x200002c8

080075b8 <PIDstep>:
 uint8_t Kd=2;
 static uint32_t value=0;


void PIDstep()
{
 80075b8:	b480      	push	{r7}
 80075ba:	af00      	add	r7, sp, #0
	//setTemp=RS485_RX_VERIFIED_DATA.fcPrepareToRaceMode;
	//setTemp=100;
	fcTemp=VALUES.FC_TEMP.value;
 80075bc:	4b48      	ldr	r3, [pc, #288]	; (80076e0 <PIDstep+0x128>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a48      	ldr	r2, [pc, #288]	; (80076e4 <PIDstep+0x12c>)
 80075c2:	6013      	str	r3, [r2, #0]
	error=fcTemp-setTemp;
 80075c4:	4b47      	ldr	r3, [pc, #284]	; (80076e4 <PIDstep+0x12c>)
 80075c6:	ed93 7a00 	vldr	s14, [r3]
 80075ca:	4b47      	ldr	r3, [pc, #284]	; (80076e8 <PIDstep+0x130>)
 80075cc:	edd3 7a00 	vldr	s15, [r3]
 80075d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075d4:	4b45      	ldr	r3, [pc, #276]	; (80076ec <PIDstep+0x134>)
 80075d6:	edc3 7a00 	vstr	s15, [r3]
	dError=error-lastError;
 80075da:	4b44      	ldr	r3, [pc, #272]	; (80076ec <PIDstep+0x134>)
 80075dc:	ed93 7a00 	vldr	s14, [r3]
 80075e0:	4b43      	ldr	r3, [pc, #268]	; (80076f0 <PIDstep+0x138>)
 80075e2:	edd3 7a00 	vldr	s15, [r3]
 80075e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075ea:	4b42      	ldr	r3, [pc, #264]	; (80076f4 <PIDstep+0x13c>)
 80075ec:	edc3 7a00 	vstr	s15, [r3]
	iError=iError+lastError;
 80075f0:	4b41      	ldr	r3, [pc, #260]	; (80076f8 <PIDstep+0x140>)
 80075f2:	ed93 7a00 	vldr	s14, [r3]
 80075f6:	4b3e      	ldr	r3, [pc, #248]	; (80076f0 <PIDstep+0x138>)
 80075f8:	edd3 7a00 	vldr	s15, [r3]
 80075fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007600:	4b3d      	ldr	r3, [pc, #244]	; (80076f8 <PIDstep+0x140>)
 8007602:	edc3 7a00 	vstr	s15, [r3]
	lastError=error;
 8007606:	4b39      	ldr	r3, [pc, #228]	; (80076ec <PIDstep+0x134>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a39      	ldr	r2, [pc, #228]	; (80076f0 <PIDstep+0x138>)
 800760c:	6013      	str	r3, [r2, #0]
	if(fcTemp<setTemp)
 800760e:	4b35      	ldr	r3, [pc, #212]	; (80076e4 <PIDstep+0x12c>)
 8007610:	ed93 7a00 	vldr	s14, [r3]
 8007614:	4b34      	ldr	r3, [pc, #208]	; (80076e8 <PIDstep+0x130>)
 8007616:	edd3 7a00 	vldr	s15, [r3]
 800761a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800761e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007622:	d506      	bpl.n	8007632 <PIDstep+0x7a>
	{
		value=0;
 8007624:	4b35      	ldr	r3, [pc, #212]	; (80076fc <PIDstep+0x144>)
 8007626:	2200      	movs	r2, #0
 8007628:	601a      	str	r2, [r3, #0]
		iError=0;
 800762a:	4b33      	ldr	r3, [pc, #204]	; (80076f8 <PIDstep+0x140>)
 800762c:	f04f 0200 	mov.w	r2, #0
 8007630:	601a      	str	r2, [r3, #0]
	}
	if(iError>=150)
 8007632:	4b31      	ldr	r3, [pc, #196]	; (80076f8 <PIDstep+0x140>)
 8007634:	edd3 7a00 	vldr	s15, [r3]
 8007638:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007700 <PIDstep+0x148>
 800763c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007644:	db02      	blt.n	800764c <PIDstep+0x94>
	{
		iError=150;
 8007646:	4b2c      	ldr	r3, [pc, #176]	; (80076f8 <PIDstep+0x140>)
 8007648:	4a2e      	ldr	r2, [pc, #184]	; (8007704 <PIDstep+0x14c>)
 800764a:	601a      	str	r2, [r3, #0]
	}
	value=Kp*error+Ki*iError+Kd*dError;
 800764c:	4b2e      	ldr	r3, [pc, #184]	; (8007708 <PIDstep+0x150>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	ee07 3a90 	vmov	s15, r3
 8007654:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007658:	4b24      	ldr	r3, [pc, #144]	; (80076ec <PIDstep+0x134>)
 800765a:	edd3 7a00 	vldr	s15, [r3]
 800765e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007662:	4b2a      	ldr	r3, [pc, #168]	; (800770c <PIDstep+0x154>)
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	ee07 3a90 	vmov	s15, r3
 800766a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800766e:	4b22      	ldr	r3, [pc, #136]	; (80076f8 <PIDstep+0x140>)
 8007670:	edd3 7a00 	vldr	s15, [r3]
 8007674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007678:	ee37 7a27 	vadd.f32	s14, s14, s15
 800767c:	4b24      	ldr	r3, [pc, #144]	; (8007710 <PIDstep+0x158>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	ee07 3a90 	vmov	s15, r3
 8007684:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007688:	4b1a      	ldr	r3, [pc, #104]	; (80076f4 <PIDstep+0x13c>)
 800768a:	edd3 7a00 	vldr	s15, [r3]
 800768e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800769a:	ee17 2a90 	vmov	r2, s15
 800769e:	4b17      	ldr	r3, [pc, #92]	; (80076fc <PIDstep+0x144>)
 80076a0:	601a      	str	r2, [r3, #0]
	if(fcTemp<setTemp)
 80076a2:	4b10      	ldr	r3, [pc, #64]	; (80076e4 <PIDstep+0x12c>)
 80076a4:	ed93 7a00 	vldr	s14, [r3]
 80076a8:	4b0f      	ldr	r3, [pc, #60]	; (80076e8 <PIDstep+0x130>)
 80076aa:	edd3 7a00 	vldr	s15, [r3]
 80076ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b6:	d502      	bpl.n	80076be <PIDstep+0x106>
	{
		value=0;
 80076b8:	4b10      	ldr	r3, [pc, #64]	; (80076fc <PIDstep+0x144>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	601a      	str	r2, [r3, #0]
	}
	if(value>=255)
 80076be:	4b0f      	ldr	r3, [pc, #60]	; (80076fc <PIDstep+0x144>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2bfe      	cmp	r3, #254	; 0xfe
 80076c4:	d903      	bls.n	80076ce <PIDstep+0x116>
	{
		FANS.controlValue=255;
 80076c6:	4b13      	ldr	r3, [pc, #76]	; (8007714 <PIDstep+0x15c>)
 80076c8:	22ff      	movs	r2, #255	; 0xff
 80076ca:	605a      	str	r2, [r3, #4]
	else
	{
		FANS.controlValue=value;
	}

}
 80076cc:	e003      	b.n	80076d6 <PIDstep+0x11e>
		FANS.controlValue=value;
 80076ce:	4b0b      	ldr	r3, [pc, #44]	; (80076fc <PIDstep+0x144>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a10      	ldr	r2, [pc, #64]	; (8007714 <PIDstep+0x15c>)
 80076d4:	6053      	str	r3, [r2, #4]
}
 80076d6:	bf00      	nop
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	20000438 	.word	0x20000438
 80076e4:	20000034 	.word	0x20000034
 80076e8:	2000000c 	.word	0x2000000c
 80076ec:	20000038 	.word	0x20000038
 80076f0:	20000044 	.word	0x20000044
 80076f4:	20000040 	.word	0x20000040
 80076f8:	2000003c 	.word	0x2000003c
 80076fc:	20000048 	.word	0x20000048
 8007700:	43160000 	.word	0x43160000
 8007704:	43160000 	.word	0x43160000
 8007708:	20000010 	.word	0x20000010
 800770c:	20000011 	.word	0x20000011
 8007710:	20000012 	.word	0x20000012
 8007714:	20000430 	.word	0x20000430

08007718 <rs485_init>:
/**
* @fn rs485_init(void)
* @brief Inicjalizacja magistrali RS-485, umiescic wewnatrz hydrogreen_init(void)
*/
void rs485_init(void)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	af00      	add	r7, sp, #0
  HAL_UART_Receive_DMA(&UART_PORT_RS485, &RS485_BUFF.rx, 1);				//Rozpocznij nasluchiwanie
 800771c:	2201      	movs	r2, #1
 800771e:	4904      	ldr	r1, [pc, #16]	; (8007730 <rs485_init+0x18>)
 8007720:	4804      	ldr	r0, [pc, #16]	; (8007734 <rs485_init+0x1c>)
 8007722:	f7fe ff33 	bl	800658c <HAL_UART_Receive_DMA>
  prepareNewDataToSend();								//Przygotuj nowy pakiet danych
 8007726:	f000 f8e9 	bl	80078fc <prepareNewDataToSend>
}
 800772a:	bf00      	nop
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	20000075 	.word	0x20000075
 8007734:	200003a4 	.word	0x200003a4

08007738 <rs485_step>:
/**
* @fn rs485_step(void)
* @brief Funkcja obslugujaca magistrale, umiescic wewnatrz hydrogreen_step(void)
*/
void rs485_step(void)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
  receiveData();
 800773c:	f000 f840 	bl	80077c0 <receiveData>
  sendData();
 8007740:	f000 f802 	bl	8007748 <sendData>
}
 8007744:	bf00      	nop
 8007746:	bd80      	pop	{r7, pc}

08007748 <sendData>:
/**
* @fn sendData(void)
* @brief Funkcja ktorej zadaniem jest obsluga linii TX, powinna zostac umieszczona w wewnatrz rs485_step()
*/
static void sendData(void)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	af00      	add	r7, sp, #0

  static uint16_t cntEndOfTxTick;							//Zmienna wykorzystywana do odliczenia czasu wskazujacego na koniec transmisji

  //Sprawdz czy wyslano cala ramke danych
  if (posInTxTab < TX_FRAME_LENGHT)
 800774c:	4b17      	ldr	r3, [pc, #92]	; (80077ac <sendData+0x64>)
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	2b14      	cmp	r3, #20
 8007752:	d816      	bhi.n	8007782 <sendData+0x3a>
    {
      //Nie, wysylaj dalej
      RS485_BUFF.tx = dataToTx[posInTxTab];
 8007754:	4b15      	ldr	r3, [pc, #84]	; (80077ac <sendData+0x64>)
 8007756:	881b      	ldrh	r3, [r3, #0]
 8007758:	461a      	mov	r2, r3
 800775a:	4b15      	ldr	r3, [pc, #84]	; (80077b0 <sendData+0x68>)
 800775c:	5c9a      	ldrb	r2, [r3, r2]
 800775e:	4b15      	ldr	r3, [pc, #84]	; (80077b4 <sendData+0x6c>)
 8007760:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007762:	b672      	cpsid	i

      //Na czas wysylania danych wylacz przerwania
      __disable_irq();
      HAL_UART_Transmit(&UART_PORT_RS485, &RS485_BUFF.tx, 1, HAL_MAX_DELAY);
 8007764:	f04f 33ff 	mov.w	r3, #4294967295
 8007768:	2201      	movs	r2, #1
 800776a:	4912      	ldr	r1, [pc, #72]	; (80077b4 <sendData+0x6c>)
 800776c:	4812      	ldr	r0, [pc, #72]	; (80077b8 <sendData+0x70>)
 800776e:	f7fe fe79 	bl	8006464 <HAL_UART_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 8007772:	b662      	cpsie	i
      __enable_irq();
      posInTxTab++;
 8007774:	4b0d      	ldr	r3, [pc, #52]	; (80077ac <sendData+0x64>)
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	3301      	adds	r3, #1
 800777a:	b29a      	uxth	r2, r3
 800777c:	4b0b      	ldr	r3, [pc, #44]	; (80077ac <sendData+0x64>)
 800777e:	801a      	strh	r2, [r3, #0]
      cntEndOfTxTick = 0;
      posInTxTab = 0;

      prepareNewDataToSend();
    }
}
 8007780:	e012      	b.n	80077a8 <sendData+0x60>
  else if (cntEndOfTxTick < TX_FRAME_LENGHT)
 8007782:	4b0e      	ldr	r3, [pc, #56]	; (80077bc <sendData+0x74>)
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	2b14      	cmp	r3, #20
 8007788:	d806      	bhi.n	8007798 <sendData+0x50>
      cntEndOfTxTick++;
 800778a:	4b0c      	ldr	r3, [pc, #48]	; (80077bc <sendData+0x74>)
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	3301      	adds	r3, #1
 8007790:	b29a      	uxth	r2, r3
 8007792:	4b0a      	ldr	r3, [pc, #40]	; (80077bc <sendData+0x74>)
 8007794:	801a      	strh	r2, [r3, #0]
}
 8007796:	e007      	b.n	80077a8 <sendData+0x60>
      cntEndOfTxTick = 0;
 8007798:	4b08      	ldr	r3, [pc, #32]	; (80077bc <sendData+0x74>)
 800779a:	2200      	movs	r2, #0
 800779c:	801a      	strh	r2, [r3, #0]
      posInTxTab = 0;
 800779e:	4b03      	ldr	r3, [pc, #12]	; (80077ac <sendData+0x64>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	801a      	strh	r2, [r3, #0]
      prepareNewDataToSend();
 80077a4:	f000 f8aa 	bl	80078fc <prepareNewDataToSend>
}
 80077a8:	bf00      	nop
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	2000006e 	.word	0x2000006e
 80077b0:	20000058 	.word	0x20000058
 80077b4:	20000074 	.word	0x20000074
 80077b8:	200003a4 	.word	0x200003a4
 80077bc:	20000076 	.word	0x20000076

080077c0 <receiveData>:
/**
* @fn receiveData(void)
* @brief Funkcja ktorej zadaniem jest obsluga linii RX, umiescic wewnatrz rs485_step()
*/
static void receiveData(void)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0

  static uint32_t rejectedFramesInRow;							//Zmienna przechowujaca liczbe straconych ramek z rzedu
  static uint32_t cntEndOfRxTick;							//Zmienna wykorzystywana do odliczenia czasu wskazujacego na koniec transmisji

  //Sprawdz czy otrzymano nowe dane
  if (!intRxCplt)
 80077c6:	4b2c      	ldr	r3, [pc, #176]	; (8007878 <receiveData+0xb8>)
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d105      	bne.n	80077dc <receiveData+0x1c>
    {
      //Nie otrzymano nowych danych, zacznij odliczac czas
      cntEndOfRxTick++;
 80077d0:	4b2a      	ldr	r3, [pc, #168]	; (800787c <receiveData+0xbc>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3301      	adds	r3, #1
 80077d6:	4a29      	ldr	r2, [pc, #164]	; (800787c <receiveData+0xbc>)
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	e007      	b.n	80077ec <receiveData+0x2c>
    }
  else if (intRxCplt)
 80077dc:	4b26      	ldr	r3, [pc, #152]	; (8007878 <receiveData+0xb8>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <receiveData+0x2c>
    {
      //Nowe dane zostaly otrzymane, zeruj flage informujaca o zakonczeniu transmisji
      intRxCplt = 0;
 80077e6:	4b24      	ldr	r3, [pc, #144]	; (8007878 <receiveData+0xb8>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	701a      	strb	r2, [r3, #0]
    }

  //Sprawdz czy minal juz czas wynoszacy RX_FRAME_LENGHT
  if (cntEndOfRxTick > RX_FRAME_LENGHT)
 80077ec:	4b23      	ldr	r3, [pc, #140]	; (800787c <receiveData+0xbc>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b06      	cmp	r3, #6
 80077f2:	d93d      	bls.n	8007870 <receiveData+0xb0>
  __ASM volatile ("cpsid i" : : : "memory");
 80077f4:	b672      	cpsid	i
    {
      //Na czas przetwarzania danych wylacz przerwania
      __disable_irq();

      //Czas minal, oznacza to koniec ramki
      cntEndOfRxTick = 0;
 80077f6:	4b21      	ldr	r3, [pc, #132]	; (800787c <receiveData+0xbc>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]
      posInRxTab = 0;
 80077fc:	4b20      	ldr	r3, [pc, #128]	; (8007880 <receiveData+0xc0>)
 80077fe:	2200      	movs	r2, #0
 8007800:	801a      	strh	r2, [r3, #0]

      //OBLICZ SUME KONTROLNA
      uint8_t crcSumOnMCU = HAL_CRC_Calculate(&hcrc, (uint32_t*)dataFromRx, (RX_FRAME_LENGHT - 2));
 8007802:	2204      	movs	r2, #4
 8007804:	491f      	ldr	r1, [pc, #124]	; (8007884 <receiveData+0xc4>)
 8007806:	4820      	ldr	r0, [pc, #128]	; (8007888 <receiveData+0xc8>)
 8007808:	f7fb f904 	bl	8002a14 <HAL_CRC_Calculate>
 800780c:	4603      	mov	r3, r0
 800780e:	71bb      	strb	r3, [r7, #6]

      //Sprawdz czy sumy kontrolne oraz bajt EOT (End Of Tranmission) sie zgadzaja
      if ( (dataFromRx[RX_FRAME_LENGHT - 2] == EOT_BYTE) && (crcSumOnMCU == dataFromRx[RX_FRAME_LENGHT - 1]) )
 8007810:	4b1c      	ldr	r3, [pc, #112]	; (8007884 <receiveData+0xc4>)
 8007812:	791b      	ldrb	r3, [r3, #4]
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b17      	cmp	r3, #23
 8007818:	d10e      	bne.n	8007838 <receiveData+0x78>
 800781a:	4b1a      	ldr	r3, [pc, #104]	; (8007884 <receiveData+0xc4>)
 800781c:	795b      	ldrb	r3, [r3, #5]
 800781e:	b2db      	uxtb	r3, r3
 8007820:	79ba      	ldrb	r2, [r7, #6]
 8007822:	429a      	cmp	r2, r3
 8007824:	d108      	bne.n	8007838 <receiveData+0x78>
	{
	  processReceivedData();
 8007826:	f000 f91f 	bl	8007a68 <processReceivedData>
	  rs485_flt = RS485_FLT_NONE;
 800782a:	4b18      	ldr	r3, [pc, #96]	; (800788c <receiveData+0xcc>)
 800782c:	2200      	movs	r2, #0
 800782e:	701a      	strb	r2, [r3, #0]
	  rejectedFramesInRow = 0;
 8007830:	4b17      	ldr	r3, [pc, #92]	; (8007890 <receiveData+0xd0>)
 8007832:	2200      	movs	r2, #0
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	e00d      	b.n	8007854 <receiveData+0x94>
	}
      else
	{

	  rejectedFramesInRow++;
 8007838:	4b15      	ldr	r3, [pc, #84]	; (8007890 <receiveData+0xd0>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3301      	adds	r3, #1
 800783e:	4a14      	ldr	r2, [pc, #80]	; (8007890 <receiveData+0xd0>)
 8007840:	6013      	str	r3, [r2, #0]

	  //Jezeli odrzucono wiecej niz 50 ramek z rzedu uznaj ze tranmisja zostala zerwana
	  if (rejectedFramesInRow > 50)
 8007842:	4b13      	ldr	r3, [pc, #76]	; (8007890 <receiveData+0xd0>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b32      	cmp	r3, #50	; 0x32
 8007848:	d904      	bls.n	8007854 <receiveData+0x94>
	    {
	      resetActData();
 800784a:	f000 f93d 	bl	8007ac8 <resetActData>
	      rs485_flt = RS485_NEW_DATA_TIMEOUT;
 800784e:	4b0f      	ldr	r3, [pc, #60]	; (800788c <receiveData+0xcc>)
 8007850:	2211      	movs	r2, #17
 8007852:	701a      	strb	r2, [r3, #0]
	    }
	}

      //Wyczysc bufor odbiorczy
      for (uint8_t i = 0; i < RX_FRAME_LENGHT; i++)
 8007854:	2300      	movs	r3, #0
 8007856:	71fb      	strb	r3, [r7, #7]
 8007858:	e006      	b.n	8007868 <receiveData+0xa8>
	{
	  dataFromRx[i] = 0x00;
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	4a09      	ldr	r2, [pc, #36]	; (8007884 <receiveData+0xc4>)
 800785e:	2100      	movs	r1, #0
 8007860:	54d1      	strb	r1, [r2, r3]
      for (uint8_t i = 0; i < RX_FRAME_LENGHT; i++)
 8007862:	79fb      	ldrb	r3, [r7, #7]
 8007864:	3301      	adds	r3, #1
 8007866:	71fb      	strb	r3, [r7, #7]
 8007868:	79fb      	ldrb	r3, [r7, #7]
 800786a:	2b05      	cmp	r3, #5
 800786c:	d9f5      	bls.n	800785a <receiveData+0x9a>
  __ASM volatile ("cpsie i" : : : "memory");
 800786e:	b662      	cpsie	i
	}

      __enable_irq();
    }
}
 8007870:	bf00      	nop
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	20000054 	.word	0x20000054
 800787c:	20000078 	.word	0x20000078
 8007880:	20000052 	.word	0x20000052
 8007884:	2000004c 	.word	0x2000004c
 8007888:	20000128 	.word	0x20000128
 800788c:	20000013 	.word	0x20000013
 8007890:	2000007c 	.word	0x2000007c

08007894 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&UART_PORT_RS485, &RS485_BUFF.rx, 1);			//Ponownie rozpocznij nasluchiwanie nasluchiwanie
 800789c:	2201      	movs	r2, #1
 800789e:	4911      	ldr	r1, [pc, #68]	; (80078e4 <HAL_UART_RxCpltCallback+0x50>)
 80078a0:	4811      	ldr	r0, [pc, #68]	; (80078e8 <HAL_UART_RxCpltCallback+0x54>)
 80078a2:	f7fe fe73 	bl	800658c <HAL_UART_Receive_DMA>

  intRxCplt = 1;								//Ustaw flage informujaca o otrzymaniu nowych danych
 80078a6:	4b11      	ldr	r3, [pc, #68]	; (80078ec <HAL_UART_RxCpltCallback+0x58>)
 80078a8:	2201      	movs	r2, #1
 80078aa:	701a      	strb	r2, [r3, #0]

  if (posInRxTab > RX_FRAME_LENGHT) posInRxTab = 0;				//Zabezpieczenie przed wyjsciem poza zakres tablicy
 80078ac:	4b10      	ldr	r3, [pc, #64]	; (80078f0 <HAL_UART_RxCpltCallback+0x5c>)
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	2b06      	cmp	r3, #6
 80078b4:	d902      	bls.n	80078bc <HAL_UART_RxCpltCallback+0x28>
 80078b6:	4b0e      	ldr	r3, [pc, #56]	; (80078f0 <HAL_UART_RxCpltCallback+0x5c>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	801a      	strh	r2, [r3, #0]

  dataFromRx[posInRxTab] = RS485_BUFF.rx;					//Przypisz otrzymany bajt do analizowanej tablicy
 80078bc:	4b0c      	ldr	r3, [pc, #48]	; (80078f0 <HAL_UART_RxCpltCallback+0x5c>)
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	461a      	mov	r2, r3
 80078c4:	4b0b      	ldr	r3, [pc, #44]	; (80078f4 <HAL_UART_RxCpltCallback+0x60>)
 80078c6:	7859      	ldrb	r1, [r3, #1]
 80078c8:	4b0b      	ldr	r3, [pc, #44]	; (80078f8 <HAL_UART_RxCpltCallback+0x64>)
 80078ca:	5499      	strb	r1, [r3, r2]
  posInRxTab++;
 80078cc:	4b08      	ldr	r3, [pc, #32]	; (80078f0 <HAL_UART_RxCpltCallback+0x5c>)
 80078ce:	881b      	ldrh	r3, [r3, #0]
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	3301      	adds	r3, #1
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	4b06      	ldr	r3, [pc, #24]	; (80078f0 <HAL_UART_RxCpltCallback+0x5c>)
 80078d8:	801a      	strh	r2, [r3, #0]
}
 80078da:	bf00      	nop
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	20000075 	.word	0x20000075
 80078e8:	200003a4 	.word	0x200003a4
 80078ec:	20000054 	.word	0x20000054
 80078f0:	20000052 	.word	0x20000052
 80078f4:	20000074 	.word	0x20000074
 80078f8:	2000004c 	.word	0x2000004c

080078fc <prepareNewDataToSend>:
/**
* @fn prepareNewDataToSend(void)
* @brief Funkcja przygotowujaca dane do wysylki, wykorzystana wewnatrz sendData(void)
*/
static void prepareNewDataToSend(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0

  uint8_t j = 0;
 8007902:	2300      	movs	r3, #0
 8007904:	71fb      	strb	r3, [r7, #7]

  dataToTx[j] = VALUES.FC_TEMP.array[0];
 8007906:	79fb      	ldrb	r3, [r7, #7]
 8007908:	4a53      	ldr	r2, [pc, #332]	; (8007a58 <prepareNewDataToSend+0x15c>)
 800790a:	7811      	ldrb	r1, [r2, #0]
 800790c:	4a53      	ldr	r2, [pc, #332]	; (8007a5c <prepareNewDataToSend+0x160>)
 800790e:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_TEMP.array[1];
 8007910:	79fb      	ldrb	r3, [r7, #7]
 8007912:	3301      	adds	r3, #1
 8007914:	71fb      	strb	r3, [r7, #7]
 8007916:	79fb      	ldrb	r3, [r7, #7]
 8007918:	4a4f      	ldr	r2, [pc, #316]	; (8007a58 <prepareNewDataToSend+0x15c>)
 800791a:	7851      	ldrb	r1, [r2, #1]
 800791c:	4a4f      	ldr	r2, [pc, #316]	; (8007a5c <prepareNewDataToSend+0x160>)
 800791e:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_TEMP.array[2];
 8007920:	79fb      	ldrb	r3, [r7, #7]
 8007922:	3301      	adds	r3, #1
 8007924:	71fb      	strb	r3, [r7, #7]
 8007926:	79fb      	ldrb	r3, [r7, #7]
 8007928:	4a4b      	ldr	r2, [pc, #300]	; (8007a58 <prepareNewDataToSend+0x15c>)
 800792a:	7891      	ldrb	r1, [r2, #2]
 800792c:	4a4b      	ldr	r2, [pc, #300]	; (8007a5c <prepareNewDataToSend+0x160>)
 800792e:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_TEMP.array[3];
 8007930:	79fb      	ldrb	r3, [r7, #7]
 8007932:	3301      	adds	r3, #1
 8007934:	71fb      	strb	r3, [r7, #7]
 8007936:	79fb      	ldrb	r3, [r7, #7]
 8007938:	4a47      	ldr	r2, [pc, #284]	; (8007a58 <prepareNewDataToSend+0x15c>)
 800793a:	78d1      	ldrb	r1, [r2, #3]
 800793c:	4a47      	ldr	r2, [pc, #284]	; (8007a5c <prepareNewDataToSend+0x160>)
 800793e:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_V.array[0];
 8007940:	79fb      	ldrb	r3, [r7, #7]
 8007942:	3301      	adds	r3, #1
 8007944:	71fb      	strb	r3, [r7, #7]
 8007946:	79fb      	ldrb	r3, [r7, #7]
 8007948:	4a43      	ldr	r2, [pc, #268]	; (8007a58 <prepareNewDataToSend+0x15c>)
 800794a:	7911      	ldrb	r1, [r2, #4]
 800794c:	4a43      	ldr	r2, [pc, #268]	; (8007a5c <prepareNewDataToSend+0x160>)
 800794e:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_V.array[1];
 8007950:	79fb      	ldrb	r3, [r7, #7]
 8007952:	3301      	adds	r3, #1
 8007954:	71fb      	strb	r3, [r7, #7]
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	4a3f      	ldr	r2, [pc, #252]	; (8007a58 <prepareNewDataToSend+0x15c>)
 800795a:	7951      	ldrb	r1, [r2, #5]
 800795c:	4a3f      	ldr	r2, [pc, #252]	; (8007a5c <prepareNewDataToSend+0x160>)
 800795e:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_V.array[2];
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	3301      	adds	r3, #1
 8007964:	71fb      	strb	r3, [r7, #7]
 8007966:	79fb      	ldrb	r3, [r7, #7]
 8007968:	4a3b      	ldr	r2, [pc, #236]	; (8007a58 <prepareNewDataToSend+0x15c>)
 800796a:	7991      	ldrb	r1, [r2, #6]
 800796c:	4a3b      	ldr	r2, [pc, #236]	; (8007a5c <prepareNewDataToSend+0x160>)
 800796e:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_V.array[3];
 8007970:	79fb      	ldrb	r3, [r7, #7]
 8007972:	3301      	adds	r3, #1
 8007974:	71fb      	strb	r3, [r7, #7]
 8007976:	79fb      	ldrb	r3, [r7, #7]
 8007978:	4a37      	ldr	r2, [pc, #220]	; (8007a58 <prepareNewDataToSend+0x15c>)
 800797a:	79d1      	ldrb	r1, [r2, #7]
 800797c:	4a37      	ldr	r2, [pc, #220]	; (8007a5c <prepareNewDataToSend+0x160>)
 800797e:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_V.array[0];
 8007980:	79fb      	ldrb	r3, [r7, #7]
 8007982:	3301      	adds	r3, #1
 8007984:	71fb      	strb	r3, [r7, #7]
 8007986:	79fb      	ldrb	r3, [r7, #7]
 8007988:	4a33      	ldr	r2, [pc, #204]	; (8007a58 <prepareNewDataToSend+0x15c>)
 800798a:	7a11      	ldrb	r1, [r2, #8]
 800798c:	4a33      	ldr	r2, [pc, #204]	; (8007a5c <prepareNewDataToSend+0x160>)
 800798e:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_V.array[1];
 8007990:	79fb      	ldrb	r3, [r7, #7]
 8007992:	3301      	adds	r3, #1
 8007994:	71fb      	strb	r3, [r7, #7]
 8007996:	79fb      	ldrb	r3, [r7, #7]
 8007998:	4a2f      	ldr	r2, [pc, #188]	; (8007a58 <prepareNewDataToSend+0x15c>)
 800799a:	7a51      	ldrb	r1, [r2, #9]
 800799c:	4a2f      	ldr	r2, [pc, #188]	; (8007a5c <prepareNewDataToSend+0x160>)
 800799e:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_V.array[2];
 80079a0:	79fb      	ldrb	r3, [r7, #7]
 80079a2:	3301      	adds	r3, #1
 80079a4:	71fb      	strb	r3, [r7, #7]
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	4a2b      	ldr	r2, [pc, #172]	; (8007a58 <prepareNewDataToSend+0x15c>)
 80079aa:	7a91      	ldrb	r1, [r2, #10]
 80079ac:	4a2b      	ldr	r2, [pc, #172]	; (8007a5c <prepareNewDataToSend+0x160>)
 80079ae:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_V.array[3];
 80079b0:	79fb      	ldrb	r3, [r7, #7]
 80079b2:	3301      	adds	r3, #1
 80079b4:	71fb      	strb	r3, [r7, #7]
 80079b6:	79fb      	ldrb	r3, [r7, #7]
 80079b8:	4a27      	ldr	r2, [pc, #156]	; (8007a58 <prepareNewDataToSend+0x15c>)
 80079ba:	7ad1      	ldrb	r1, [r2, #11]
 80079bc:	4a27      	ldr	r2, [pc, #156]	; (8007a5c <prepareNewDataToSend+0x160>)
 80079be:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_C.array[0];
 80079c0:	79fb      	ldrb	r3, [r7, #7]
 80079c2:	3301      	adds	r3, #1
 80079c4:	71fb      	strb	r3, [r7, #7]
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	4a23      	ldr	r2, [pc, #140]	; (8007a58 <prepareNewDataToSend+0x15c>)
 80079ca:	7b11      	ldrb	r1, [r2, #12]
 80079cc:	4a23      	ldr	r2, [pc, #140]	; (8007a5c <prepareNewDataToSend+0x160>)
 80079ce:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_C.array[1];
 80079d0:	79fb      	ldrb	r3, [r7, #7]
 80079d2:	3301      	adds	r3, #1
 80079d4:	71fb      	strb	r3, [r7, #7]
 80079d6:	79fb      	ldrb	r3, [r7, #7]
 80079d8:	4a1f      	ldr	r2, [pc, #124]	; (8007a58 <prepareNewDataToSend+0x15c>)
 80079da:	7b51      	ldrb	r1, [r2, #13]
 80079dc:	4a1f      	ldr	r2, [pc, #124]	; (8007a5c <prepareNewDataToSend+0x160>)
 80079de:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_C.array[2];
 80079e0:	79fb      	ldrb	r3, [r7, #7]
 80079e2:	3301      	adds	r3, #1
 80079e4:	71fb      	strb	r3, [r7, #7]
 80079e6:	79fb      	ldrb	r3, [r7, #7]
 80079e8:	4a1b      	ldr	r2, [pc, #108]	; (8007a58 <prepareNewDataToSend+0x15c>)
 80079ea:	7b91      	ldrb	r1, [r2, #14]
 80079ec:	4a1b      	ldr	r2, [pc, #108]	; (8007a5c <prepareNewDataToSend+0x160>)
 80079ee:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_C.array[3];
 80079f0:	79fb      	ldrb	r3, [r7, #7]
 80079f2:	3301      	adds	r3, #1
 80079f4:	71fb      	strb	r3, [r7, #7]
 80079f6:	79fb      	ldrb	r3, [r7, #7]
 80079f8:	4a17      	ldr	r2, [pc, #92]	; (8007a58 <prepareNewDataToSend+0x15c>)
 80079fa:	7bd1      	ldrb	r1, [r2, #15]
 80079fc:	4a17      	ldr	r2, [pc, #92]	; (8007a5c <prepareNewDataToSend+0x160>)
 80079fe:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = 2;
 8007a00:	79fb      	ldrb	r3, [r7, #7]
 8007a02:	3301      	adds	r3, #1
 8007a04:	71fb      	strb	r3, [r7, #7]
 8007a06:	79fb      	ldrb	r3, [r7, #7]
 8007a08:	4a14      	ldr	r2, [pc, #80]	; (8007a5c <prepareNewDataToSend+0x160>)
 8007a0a:	2102      	movs	r1, #2
 8007a0c:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = 2;
 8007a0e:	79fb      	ldrb	r3, [r7, #7]
 8007a10:	3301      	adds	r3, #1
 8007a12:	71fb      	strb	r3, [r7, #7]
 8007a14:	79fb      	ldrb	r3, [r7, #7]
 8007a16:	4a11      	ldr	r2, [pc, #68]	; (8007a5c <prepareNewDataToSend+0x160>)
 8007a18:	2102      	movs	r1, #2
 8007a1a:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = emergency;
 8007a1c:	79fb      	ldrb	r3, [r7, #7]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	71fb      	strb	r3, [r7, #7]
 8007a22:	79fb      	ldrb	r3, [r7, #7]
 8007a24:	4a0e      	ldr	r2, [pc, #56]	; (8007a60 <prepareNewDataToSend+0x164>)
 8007a26:	7811      	ldrb	r1, [r2, #0]
 8007a28:	4a0c      	ldr	r2, [pc, #48]	; (8007a5c <prepareNewDataToSend+0x160>)
 8007a2a:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = EOT_BYTE;
 8007a2c:	79fb      	ldrb	r3, [r7, #7]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	71fb      	strb	r3, [r7, #7]
 8007a32:	79fb      	ldrb	r3, [r7, #7]
 8007a34:	4a09      	ldr	r2, [pc, #36]	; (8007a5c <prepareNewDataToSend+0x160>)
 8007a36:	2117      	movs	r1, #23
 8007a38:	54d1      	strb	r1, [r2, r3]

  //OBLICZ SUME KONTROLNA
  uint8_t calculatedCrcSumOnMCU = HAL_CRC_Calculate(&hcrc, (uint32_t*)dataToTx, (TX_FRAME_LENGHT - 2) );
 8007a3a:	2213      	movs	r2, #19
 8007a3c:	4907      	ldr	r1, [pc, #28]	; (8007a5c <prepareNewDataToSend+0x160>)
 8007a3e:	4809      	ldr	r0, [pc, #36]	; (8007a64 <prepareNewDataToSend+0x168>)
 8007a40:	f7fa ffe8 	bl	8002a14 <HAL_CRC_Calculate>
 8007a44:	4603      	mov	r3, r0
 8007a46:	71bb      	strb	r3, [r7, #6]

  //Wrzuc obliczona sume kontrolna na koniec wysylanej tablicy
  dataToTx[TX_FRAME_LENGHT - 1] = calculatedCrcSumOnMCU;
 8007a48:	4a04      	ldr	r2, [pc, #16]	; (8007a5c <prepareNewDataToSend+0x160>)
 8007a4a:	79bb      	ldrb	r3, [r7, #6]
 8007a4c:	7513      	strb	r3, [r2, #20]
}
 8007a4e:	bf00      	nop
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	20000438 	.word	0x20000438
 8007a5c:	20000058 	.word	0x20000058
 8007a60:	20000070 	.word	0x20000070
 8007a64:	20000128 	.word	0x20000128

08007a68 <processReceivedData>:
/**
* @fn processReveivedData()
* @brief Funkcja przypisujaca odebrane dane do zmiennych docelowych
*/
static void processReceivedData(void)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0

  uint8_t i = 0;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	71fb      	strb	r3, [r7, #7]
  RS485_RX_VERIFIED_DATA.motorPWM = dataFromRx[i];
 8007a72:	79fb      	ldrb	r3, [r7, #7]
 8007a74:	4a12      	ldr	r2, [pc, #72]	; (8007ac0 <processReceivedData+0x58>)
 8007a76:	5cd3      	ldrb	r3, [r2, r3]
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	4b12      	ldr	r3, [pc, #72]	; (8007ac4 <processReceivedData+0x5c>)
 8007a7c:	701a      	strb	r2, [r3, #0]
  RS485_RX_VERIFIED_DATA.mode = dataFromRx[++i];
 8007a7e:	79fb      	ldrb	r3, [r7, #7]
 8007a80:	3301      	adds	r3, #1
 8007a82:	71fb      	strb	r3, [r7, #7]
 8007a84:	79fb      	ldrb	r3, [r7, #7]
 8007a86:	4a0e      	ldr	r2, [pc, #56]	; (8007ac0 <processReceivedData+0x58>)
 8007a88:	5cd3      	ldrb	r3, [r2, r3]
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	4b0d      	ldr	r3, [pc, #52]	; (8007ac4 <processReceivedData+0x5c>)
 8007a8e:	705a      	strb	r2, [r3, #1]
  RS485_RX_VERIFIED_DATA.scOn = dataFromRx[++i];
 8007a90:	79fb      	ldrb	r3, [r7, #7]
 8007a92:	3301      	adds	r3, #1
 8007a94:	71fb      	strb	r3, [r7, #7]
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	4a09      	ldr	r2, [pc, #36]	; (8007ac0 <processReceivedData+0x58>)
 8007a9a:	5cd3      	ldrb	r3, [r2, r3]
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	4b09      	ldr	r3, [pc, #36]	; (8007ac4 <processReceivedData+0x5c>)
 8007aa0:	709a      	strb	r2, [r3, #2]
  RS485_RX_VERIFIED_DATA.emergencyScenario = dataFromRx[++i];
 8007aa2:	79fb      	ldrb	r3, [r7, #7]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	71fb      	strb	r3, [r7, #7]
 8007aa8:	79fb      	ldrb	r3, [r7, #7]
 8007aaa:	4a05      	ldr	r2, [pc, #20]	; (8007ac0 <processReceivedData+0x58>)
 8007aac:	5cd3      	ldrb	r3, [r2, r3]
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	4b04      	ldr	r3, [pc, #16]	; (8007ac4 <processReceivedData+0x5c>)
 8007ab2:	70da      	strb	r2, [r3, #3]
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	2000004c 	.word	0x2000004c
 8007ac4:	20000450 	.word	0x20000450

08007ac8 <resetActData>:
/**
* @fn resetActData
* @brief Zerowanie zmiennych docelowych (odbywa sie m.in w przypadku zerwania transmisji)
*/
static void resetActData(void)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0
	  RS485_RX_VERIFIED_DATA.motorPWM = 0;
 8007acc:	4b08      	ldr	r3, [pc, #32]	; (8007af0 <resetActData+0x28>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	701a      	strb	r2, [r3, #0]
	  RS485_RX_VERIFIED_DATA.mode = 0;
 8007ad2:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <resetActData+0x28>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	705a      	strb	r2, [r3, #1]
	  RS485_RX_VERIFIED_DATA.scOn = 0;
 8007ad8:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <resetActData+0x28>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	709a      	strb	r2, [r3, #2]
	  RS485_RX_VERIFIED_DATA.emergencyScenario = 0;
 8007ade:	4b04      	ldr	r3, [pc, #16]	; (8007af0 <resetActData+0x28>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	70da      	strb	r2, [r3, #3]
}
 8007ae4:	bf00      	nop
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	20000450 	.word	0x20000450

08007af4 <timers_init>:
/**
* @fn timers_init(void)
* @brief Funkcja inicjalizujaca timery
*/
void timers_init(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim6);		//Inicjalizuj TIM6 pracujacy z czestotliwoscia 10kHz
 8007af8:	4803      	ldr	r0, [pc, #12]	; (8007b08 <timers_init+0x14>)
 8007afa:	f7fc ffe5 	bl	8004ac8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);		//Inicjalizuj TIM7 pracujacy z czestotliwoscia 100kHz
 8007afe:	4803      	ldr	r0, [pc, #12]	; (8007b0c <timers_init+0x18>)
 8007b00:	f7fc ffe2 	bl	8004ac8 <HAL_TIM_Base_Start_IT>
}
 8007b04:	bf00      	nop
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	20000230 	.word	0x20000230
 8007b0c:	20000314 	.word	0x20000314

08007b10 <timers_step>:
/**
* @fn timers_main(void)
* @brief Glowna funkcja odpowiadajaca za interwaly czasowe wykorzystywane w systemie
*/
static inline void timers_step(void)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	af00      	add	r7, sp, #0
  timers_tick1kHz = 1;
 8007b14:	4b03      	ldr	r3, [pc, #12]	; (8007b24 <timers_step+0x14>)
 8007b16:	2201      	movs	r2, #1
 8007b18:	701a      	strb	r2, [r3, #0]

  setSystemOperatingTime();
 8007b1a:	f000 f805 	bl	8007b28 <setSystemOperatingTime>
}
 8007b1e:	bf00      	nop
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20000458 	.word	0x20000458

08007b28 <setSystemOperatingTime>:
/**
* @fn setSystemOperatingTime(void)
* @brief Funkcja przeliczajaca czas pracy systemu na milisekundy, sekundy, minuty oraz godziny
*/
static inline void setSystemOperatingTime(void)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	af00      	add	r7, sp, #0
  timers_mainTimeMiliseconds++;
 8007b2c:	4b1c      	ldr	r3, [pc, #112]	; (8007ba0 <setSystemOperatingTime+0x78>)
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3301      	adds	r3, #1
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	4b1a      	ldr	r3, [pc, #104]	; (8007ba0 <setSystemOperatingTime+0x78>)
 8007b38:	801a      	strh	r2, [r3, #0]

  //Sekundy
  if (timers_mainTimeMiliseconds >= PERIOD_1S)
 8007b3a:	4b19      	ldr	r3, [pc, #100]	; (8007ba0 <setSystemOperatingTime+0x78>)
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b44:	d309      	bcc.n	8007b5a <setSystemOperatingTime+0x32>
    {
      timers_mainTimeMiliseconds = 0;
 8007b46:	4b16      	ldr	r3, [pc, #88]	; (8007ba0 <setSystemOperatingTime+0x78>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	801a      	strh	r2, [r3, #0]
      timers_mainTimeSeconds++;
 8007b4c:	4b15      	ldr	r3, [pc, #84]	; (8007ba4 <setSystemOperatingTime+0x7c>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	3301      	adds	r3, #1
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	4b13      	ldr	r3, [pc, #76]	; (8007ba4 <setSystemOperatingTime+0x7c>)
 8007b58:	701a      	strb	r2, [r3, #0]
    }

  //Minuty
  if (timers_mainTimeSeconds >= 60)
 8007b5a:	4b12      	ldr	r3, [pc, #72]	; (8007ba4 <setSystemOperatingTime+0x7c>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b3b      	cmp	r3, #59	; 0x3b
 8007b62:	d909      	bls.n	8007b78 <setSystemOperatingTime+0x50>
    {
      timers_mainTimeSeconds = 0;
 8007b64:	4b0f      	ldr	r3, [pc, #60]	; (8007ba4 <setSystemOperatingTime+0x7c>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	701a      	strb	r2, [r3, #0]
      timers_mainTimeMinutes++;
 8007b6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ba8 <setSystemOperatingTime+0x80>)
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	3301      	adds	r3, #1
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	4b0c      	ldr	r3, [pc, #48]	; (8007ba8 <setSystemOperatingTime+0x80>)
 8007b76:	701a      	strb	r2, [r3, #0]
    }

  //Godziny
  if (timers_mainTimeMinutes >= 60)
 8007b78:	4b0b      	ldr	r3, [pc, #44]	; (8007ba8 <setSystemOperatingTime+0x80>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b3b      	cmp	r3, #59	; 0x3b
 8007b80:	d909      	bls.n	8007b96 <setSystemOperatingTime+0x6e>
    {
      timers_mainTimeMinutes = 0;
 8007b82:	4b09      	ldr	r3, [pc, #36]	; (8007ba8 <setSystemOperatingTime+0x80>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	701a      	strb	r2, [r3, #0]
      timers_mainTimeHours++;
 8007b88:	4b08      	ldr	r3, [pc, #32]	; (8007bac <setSystemOperatingTime+0x84>)
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	3301      	adds	r3, #1
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	4b06      	ldr	r3, [pc, #24]	; (8007bac <setSystemOperatingTime+0x84>)
 8007b94:	701a      	strb	r2, [r3, #0]
    }
}
 8007b96:	bf00      	nop
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	20000456 	.word	0x20000456
 8007ba4:	20000468 	.word	0x20000468
 8007ba8:	20000460 	.word	0x20000460
 8007bac:	20000459 	.word	0x20000459

08007bb0 <timers_beforeStep1kHz>:
/**
* @fn timers_beforeStep1kHz(void)
* @brief Funkcja sluzaca do obliczania czasu trwania petli hydrogreen_step(), wywolac przed hydrogreen_step()
*/
void timers_beforeStep1kHz(void)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	af00      	add	r7, sp, #0
  timers_sysCycle100kHzCnt = 0;
 8007bb4:	4b03      	ldr	r3, [pc, #12]	; (8007bc4 <timers_beforeStep1kHz+0x14>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	601a      	str	r2, [r3, #0]
}
 8007bba:	bf00      	nop
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	20000080 	.word	0x20000080

08007bc8 <timers_afterStep1kHz>:
/**
* @fn timers_afterStep1kHz(void)
* @brief Funkcja sluzaca do obliczania czasu trwania petli hydrogreen_step(), wywolac po hydrogreen_step()
*/
void timers_afterStep1kHz(void)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	af00      	add	r7, sp, #0
  static uint32_t actSysCyclePeriod;
  static uint32_t avgSysCyclePeriodSum;
  static uint16_t avgCnt;

  //Warunek wykorzystywany przy inicjalizacji systemu (tylko raz)
  if (!initFlag)
 8007bcc:	4b2a      	ldr	r3, [pc, #168]	; (8007c78 <timers_afterStep1kHz+0xb0>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10b      	bne.n	8007bec <timers_afterStep1kHz+0x24>
    {
      timers_minSysCyclePeriod = 10 * timers_sysCycle100kHzCnt;
 8007bd4:	4b29      	ldr	r3, [pc, #164]	; (8007c7c <timers_afterStep1kHz+0xb4>)
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	461a      	mov	r2, r3
 8007be2:	4b27      	ldr	r3, [pc, #156]	; (8007c80 <timers_afterStep1kHz+0xb8>)
 8007be4:	601a      	str	r2, [r3, #0]
      initFlag = 1;
 8007be6:	4b24      	ldr	r3, [pc, #144]	; (8007c78 <timers_afterStep1kHz+0xb0>)
 8007be8:	2201      	movs	r2, #1
 8007bea:	701a      	strb	r2, [r3, #0]
    }

  actSysCyclePeriod = 10 * timers_sysCycle100kHzCnt; //Przeliczenie otrzymanej wartosci na mikrosekundy
 8007bec:	4b23      	ldr	r3, [pc, #140]	; (8007c7c <timers_afterStep1kHz+0xb4>)
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	4b22      	ldr	r3, [pc, #136]	; (8007c84 <timers_afterStep1kHz+0xbc>)
 8007bfc:	601a      	str	r2, [r3, #0]

  timers_sysCycle100kHzCnt = 0;
 8007bfe:	4b1f      	ldr	r3, [pc, #124]	; (8007c7c <timers_afterStep1kHz+0xb4>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	601a      	str	r2, [r3, #0]

  //Oblicz sredni czas trwania cyklu ze 100 probek
  if (avgCnt <= 100)
 8007c04:	4b20      	ldr	r3, [pc, #128]	; (8007c88 <timers_afterStep1kHz+0xc0>)
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	2b64      	cmp	r3, #100	; 0x64
 8007c0a:	d80d      	bhi.n	8007c28 <timers_afterStep1kHz+0x60>
    {
      avgSysCyclePeriodSum = avgSysCyclePeriodSum + actSysCyclePeriod;
 8007c0c:	4b1f      	ldr	r3, [pc, #124]	; (8007c8c <timers_afterStep1kHz+0xc4>)
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	4b1c      	ldr	r3, [pc, #112]	; (8007c84 <timers_afterStep1kHz+0xbc>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4413      	add	r3, r2
 8007c16:	4a1d      	ldr	r2, [pc, #116]	; (8007c8c <timers_afterStep1kHz+0xc4>)
 8007c18:	6013      	str	r3, [r2, #0]
      avgCnt++;
 8007c1a:	4b1b      	ldr	r3, [pc, #108]	; (8007c88 <timers_afterStep1kHz+0xc0>)
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	4b19      	ldr	r3, [pc, #100]	; (8007c88 <timers_afterStep1kHz+0xc0>)
 8007c24:	801a      	strh	r2, [r3, #0]
 8007c26:	e00d      	b.n	8007c44 <timers_afterStep1kHz+0x7c>
    }
  else
    {
      timers_avgSysCyclePeriod =  avgSysCyclePeriodSum / avgCnt;
 8007c28:	4b18      	ldr	r3, [pc, #96]	; (8007c8c <timers_afterStep1kHz+0xc4>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a16      	ldr	r2, [pc, #88]	; (8007c88 <timers_afterStep1kHz+0xc0>)
 8007c2e:	8812      	ldrh	r2, [r2, #0]
 8007c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c34:	4a16      	ldr	r2, [pc, #88]	; (8007c90 <timers_afterStep1kHz+0xc8>)
 8007c36:	6013      	str	r3, [r2, #0]
      avgSysCyclePeriodSum = 0;
 8007c38:	4b14      	ldr	r3, [pc, #80]	; (8007c8c <timers_afterStep1kHz+0xc4>)
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	601a      	str	r2, [r3, #0]
      avgCnt = 0;
 8007c3e:	4b12      	ldr	r3, [pc, #72]	; (8007c88 <timers_afterStep1kHz+0xc0>)
 8007c40:	2200      	movs	r2, #0
 8007c42:	801a      	strh	r2, [r3, #0]
    }

  //Najkrotszy czas trwania cyklu
  if (actSysCyclePeriod < timers_minSysCyclePeriod)
 8007c44:	4b0f      	ldr	r3, [pc, #60]	; (8007c84 <timers_afterStep1kHz+0xbc>)
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	4b0d      	ldr	r3, [pc, #52]	; (8007c80 <timers_afterStep1kHz+0xb8>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d203      	bcs.n	8007c58 <timers_afterStep1kHz+0x90>
    {
      timers_minSysCyclePeriod =  actSysCyclePeriod;
 8007c50:	4b0c      	ldr	r3, [pc, #48]	; (8007c84 <timers_afterStep1kHz+0xbc>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a0a      	ldr	r2, [pc, #40]	; (8007c80 <timers_afterStep1kHz+0xb8>)
 8007c56:	6013      	str	r3, [r2, #0]
    }

  //Najdluzszy czas trwania cyklu
  if (actSysCyclePeriod > timers_maxSysCyclePeriod)
 8007c58:	4b0a      	ldr	r3, [pc, #40]	; (8007c84 <timers_afterStep1kHz+0xbc>)
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	4b0d      	ldr	r3, [pc, #52]	; (8007c94 <timers_afterStep1kHz+0xcc>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d903      	bls.n	8007c6c <timers_afterStep1kHz+0xa4>
    {
      timers_maxSysCyclePeriod = actSysCyclePeriod;
 8007c64:	4b07      	ldr	r3, [pc, #28]	; (8007c84 <timers_afterStep1kHz+0xbc>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a0a      	ldr	r2, [pc, #40]	; (8007c94 <timers_afterStep1kHz+0xcc>)
 8007c6a:	6013      	str	r3, [r2, #0]
    }
}
 8007c6c:	bf00      	nop
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	20000084 	.word	0x20000084
 8007c7c:	20000080 	.word	0x20000080
 8007c80:	20000464 	.word	0x20000464
 8007c84:	20000088 	.word	0x20000088
 8007c88:	2000008c 	.word	0x2000008c
 8007c8c:	20000090 	.word	0x20000090
 8007c90:	2000046c 	.word	0x2000046c
 8007c94:	2000045c 	.word	0x2000045c

08007c98 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
  timers_step();
 8007c9c:	f7ff ff38 	bl	8007b10 <timers_step>
}
 8007ca0:	bf00      	nop
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a0a      	ldr	r2, [pc, #40]	; (8007cdc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d102      	bne.n	8007cbc <HAL_TIM_PeriodElapsedCallback+0x18>
    {
      timers_tick10kHz = 1;
 8007cb6:	4b0a      	ldr	r3, [pc, #40]	; (8007ce0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8007cb8:	2201      	movs	r2, #1
 8007cba:	701a      	strb	r2, [r3, #0]
    }

  if (htim->Instance == TIM7)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a08      	ldr	r2, [pc, #32]	; (8007ce4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d104      	bne.n	8007cd0 <HAL_TIM_PeriodElapsedCallback+0x2c>
    {
      timers_sysCycle100kHzCnt++;
 8007cc6:	4b08      	ldr	r3, [pc, #32]	; (8007ce8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	4a06      	ldr	r2, [pc, #24]	; (8007ce8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8007cce:	6013      	str	r3, [r2, #0]
    }
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	40001000 	.word	0x40001000
 8007ce0:	20000454 	.word	0x20000454
 8007ce4:	40001400 	.word	0x40001400
 8007ce8:	20000080 	.word	0x20000080

08007cec <watchdog_init>:
/**
* @fn watchdog_init(void)
* @brief Funkcja sprawdzajaca przyczyne zresetowania systemu i inicjalizujaca watchdoga
*/
void watchdog_init(void)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b0a0      	sub	sp, #128	; 0x80
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007cf6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cfa:	fa93 f3a3 	rbit	r3, r3
 8007cfe:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d04:	677b      	str	r3, [r7, #116]	; 0x74
 8007d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d08:	fa93 f3a3 	rbit	r3, r3
 8007d0c:	673b      	str	r3, [r7, #112]	; 0x70
 8007d0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d16:	fa93 f3a3 	rbit	r3, r3
 8007d1a:	66bb      	str	r3, [r7, #104]	; 0x68
  //Warunek sprawdzajacy czy system zostal zresetowany z powodu zaniku zasilania
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET)
 8007d1c:	4b5a      	ldr	r3, [pc, #360]	; (8007e88 <watchdog_init+0x19c>)
 8007d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d24:	667b      	str	r3, [r7, #100]	; 0x64
 8007d26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d28:	fa93 f3a3 	rbit	r3, r3
 8007d2c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8007d2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d30:	fab3 f383 	clz	r3, r3
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	f003 031f 	and.w	r3, r3, #31
 8007d40:	2101      	movs	r1, #1
 8007d42:	fa01 f303 	lsl.w	r3, r1, r3
 8007d46:	4013      	ands	r3, r2
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <watchdog_init+0x68>
    {
      watchdog_flt = WATCHDOG_FLT_LPWRRST;
 8007d4c:	4b4f      	ldr	r3, [pc, #316]	; (8007e8c <watchdog_init+0x1a0>)
 8007d4e:	2201      	movs	r2, #1
 8007d50:	701a      	strb	r2, [r3, #0]
 8007d52:	e091      	b.n	8007e78 <watchdog_init+0x18c>
 8007d54:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007d58:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d5c:	fa93 f3a3 	rbit	r3, r3
 8007d60:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d62:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007d66:	657b      	str	r3, [r7, #84]	; 0x54
 8007d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d6a:	fa93 f3a3 	rbit	r3, r3
 8007d6e:	653b      	str	r3, [r7, #80]	; 0x50
 8007d70:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007d74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d78:	fa93 f3a3 	rbit	r3, r3
 8007d7c:	64bb      	str	r3, [r7, #72]	; 0x48
    }

  //Warunek sprawdzajacy czy system zaczal prace po wykorzystaniu resetu przez uklad czuwajacy
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET)
 8007d7e:	4b42      	ldr	r3, [pc, #264]	; (8007e88 <watchdog_init+0x19c>)
 8007d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d82:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007d86:	647b      	str	r3, [r7, #68]	; 0x44
 8007d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d8a:	fa93 f3a3 	rbit	r3, r3
 8007d8e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d92:	fab3 f383 	clz	r3, r3
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	f003 031f 	and.w	r3, r3, #31
 8007da2:	2101      	movs	r1, #1
 8007da4:	fa01 f303 	lsl.w	r3, r1, r3
 8007da8:	4013      	ands	r3, r2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <watchdog_init+0xca>
    {
      watchdog_flt = WATCHDOG_FLT_IWDGRST;
 8007dae:	4b37      	ldr	r3, [pc, #220]	; (8007e8c <watchdog_init+0x1a0>)
 8007db0:	2202      	movs	r2, #2
 8007db2:	701a      	strb	r2, [r3, #0]
 8007db4:	e060      	b.n	8007e78 <watchdog_init+0x18c>
 8007db6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007dba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dbe:	fa93 f3a3 	rbit	r3, r3
 8007dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dcc:	fa93 f3a3 	rbit	r3, r3
 8007dd0:	633b      	str	r3, [r7, #48]	; 0x30
 8007dd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dda:	fa93 f3a3 	rbit	r3, r3
 8007dde:	62bb      	str	r3, [r7, #40]	; 0x28
    }

  //Warunek sprawdzajacy czy reset systemu zostal wywolany w programie
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET)
 8007de0:	4b29      	ldr	r3, [pc, #164]	; (8007e88 <watchdog_init+0x19c>)
 8007de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007de4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007de8:	627b      	str	r3, [r7, #36]	; 0x24
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	fa93 f3a3 	rbit	r3, r3
 8007df0:	623b      	str	r3, [r7, #32]
  return result;
 8007df2:	6a3b      	ldr	r3, [r7, #32]
 8007df4:	fab3 f383 	clz	r3, r3
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	f003 031f 	and.w	r3, r3, #31
 8007e04:	2101      	movs	r1, #1
 8007e06:	fa01 f303 	lsl.w	r3, r1, r3
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <watchdog_init+0x12c>
    {
      watchdog_flt = WATCHDOG_FLT_SFTRST;
 8007e10:	4b1e      	ldr	r3, [pc, #120]	; (8007e8c <watchdog_init+0x1a0>)
 8007e12:	2203      	movs	r2, #3
 8007e14:	701a      	strb	r2, [r3, #0]
 8007e16:	e02f      	b.n	8007e78 <watchdog_init+0x18c>
 8007e18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	fa93 f3a3 	rbit	r3, r3
 8007e24:	61bb      	str	r3, [r7, #24]
 8007e26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e2a:	617b      	str	r3, [r7, #20]
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	fa93 f3a3 	rbit	r3, r3
 8007e32:	613b      	str	r3, [r7, #16]
 8007e34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e38:	60fb      	str	r3, [r7, #12]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	fa93 f3a3 	rbit	r3, r3
 8007e40:	60bb      	str	r3, [r7, #8]
    }

  //Warunek sprawdzajacy czy reset systemu nastapil poprzez wlaczenie badz odlaczenie zasilania
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 8007e42:	4b11      	ldr	r3, [pc, #68]	; (8007e88 <watchdog_init+0x19c>)
 8007e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e4a:	607b      	str	r3, [r7, #4]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	fa93 f3a3 	rbit	r3, r3
 8007e52:	603b      	str	r3, [r7, #0]
  return result;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	fab3 f383 	clz	r3, r3
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	f003 031f 	and.w	r3, r3, #31
 8007e66:	2101      	movs	r1, #1
 8007e68:	fa01 f303 	lsl.w	r3, r1, r3
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d002      	beq.n	8007e78 <watchdog_init+0x18c>
    {
      watchdog_flt = WATCHDOG_FLT_NONE;
 8007e72:	4b06      	ldr	r3, [pc, #24]	; (8007e8c <watchdog_init+0x1a0>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	701a      	strb	r2, [r3, #0]
    }

  HAL_IWDG_Refresh(&hiwdg); 			//Przeladowanie IWDG
 8007e78:	4805      	ldr	r0, [pc, #20]	; (8007e90 <watchdog_init+0x1a4>)
 8007e7a:	f7fb fb59 	bl	8003530 <HAL_IWDG_Refresh>
}
 8007e7e:	bf00      	nop
 8007e80:	3780      	adds	r7, #128	; 0x80
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	40021000 	.word	0x40021000
 8007e8c:	20000470 	.word	0x20000470
 8007e90:	2000014c 	.word	0x2000014c

08007e94 <watchdog_step>:
/**
* @fn watchdog_step(void)
* @brief Funkcja przeladowujaca IWDG, powinna zostac wywolana wewnatrz hydrogreen_step()
*/
inline void watchdog_step(void)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	af00      	add	r7, sp, #0
  HAL_IWDG_Refresh(&hiwdg); 			//Przeladowanie IWDG
 8007e98:	4802      	ldr	r0, [pc, #8]	; (8007ea4 <watchdog_step+0x10>)
 8007e9a:	f7fb fb49 	bl	8003530 <HAL_IWDG_Refresh>
}
 8007e9e:	bf00      	nop
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	2000014c 	.word	0x2000014c

08007ea8 <__libc_init_array>:
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	4e0d      	ldr	r6, [pc, #52]	; (8007ee0 <__libc_init_array+0x38>)
 8007eac:	4c0d      	ldr	r4, [pc, #52]	; (8007ee4 <__libc_init_array+0x3c>)
 8007eae:	1ba4      	subs	r4, r4, r6
 8007eb0:	10a4      	asrs	r4, r4, #2
 8007eb2:	2500      	movs	r5, #0
 8007eb4:	42a5      	cmp	r5, r4
 8007eb6:	d109      	bne.n	8007ecc <__libc_init_array+0x24>
 8007eb8:	4e0b      	ldr	r6, [pc, #44]	; (8007ee8 <__libc_init_array+0x40>)
 8007eba:	4c0c      	ldr	r4, [pc, #48]	; (8007eec <__libc_init_array+0x44>)
 8007ebc:	f000 f820 	bl	8007f00 <_init>
 8007ec0:	1ba4      	subs	r4, r4, r6
 8007ec2:	10a4      	asrs	r4, r4, #2
 8007ec4:	2500      	movs	r5, #0
 8007ec6:	42a5      	cmp	r5, r4
 8007ec8:	d105      	bne.n	8007ed6 <__libc_init_array+0x2e>
 8007eca:	bd70      	pop	{r4, r5, r6, pc}
 8007ecc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ed0:	4798      	blx	r3
 8007ed2:	3501      	adds	r5, #1
 8007ed4:	e7ee      	b.n	8007eb4 <__libc_init_array+0xc>
 8007ed6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007eda:	4798      	blx	r3
 8007edc:	3501      	adds	r5, #1
 8007ede:	e7f2      	b.n	8007ec6 <__libc_init_array+0x1e>
 8007ee0:	08007f50 	.word	0x08007f50
 8007ee4:	08007f50 	.word	0x08007f50
 8007ee8:	08007f50 	.word	0x08007f50
 8007eec:	08007f54 	.word	0x08007f54

08007ef0 <memset>:
 8007ef0:	4402      	add	r2, r0
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d100      	bne.n	8007efa <memset+0xa>
 8007ef8:	4770      	bx	lr
 8007efa:	f803 1b01 	strb.w	r1, [r3], #1
 8007efe:	e7f9      	b.n	8007ef4 <memset+0x4>

08007f00 <_init>:
 8007f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f02:	bf00      	nop
 8007f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f06:	bc08      	pop	{r3}
 8007f08:	469e      	mov	lr, r3
 8007f0a:	4770      	bx	lr

08007f0c <_fini>:
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	bf00      	nop
 8007f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f12:	bc08      	pop	{r3}
 8007f14:	469e      	mov	lr, r3
 8007f16:	4770      	bx	lr
