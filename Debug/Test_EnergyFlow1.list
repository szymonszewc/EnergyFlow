
Test_EnergyFlow1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007fb0  08007fb0  00017fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fe8  08007fe8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08007fe8  08007fe8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007fe8  08007fe8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fe8  08007fe8  00017fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fec  08007fec  00017fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  20000014  08008004  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08008004  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018794  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c96  00000000  00000000  000387d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001340  00000000  00000000  0003c470  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001138  00000000  00000000  0003d7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001eba0  00000000  00000000  0003e8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001705f  00000000  00000000  0005d488  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aabfd  00000000  00000000  000744e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011f0e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ac0  00000000  00000000  0011f160  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007f98 	.word	0x08007f98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08007f98 	.word	0x08007f98

080001c8 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	463b      	mov	r3, r7
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]
 80001d8:	60da      	str	r2, [r3, #12]
 80001da:	611a      	str	r2, [r3, #16]
 80001dc:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc2.Instance = ADC2;
 80001de:	4b3c      	ldr	r3, [pc, #240]	; (80002d0 <MX_ADC2_Init+0x108>)
 80001e0:	4a3c      	ldr	r2, [pc, #240]	; (80002d4 <MX_ADC2_Init+0x10c>)
 80001e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001e4:	4b3a      	ldr	r3, [pc, #232]	; (80002d0 <MX_ADC2_Init+0x108>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80001ea:	4b39      	ldr	r3, [pc, #228]	; (80002d0 <MX_ADC2_Init+0x108>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001f0:	4b37      	ldr	r3, [pc, #220]	; (80002d0 <MX_ADC2_Init+0x108>)
 80001f2:	2201      	movs	r2, #1
 80001f4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80001f6:	4b36      	ldr	r3, [pc, #216]	; (80002d0 <MX_ADC2_Init+0x108>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80001fc:	4b34      	ldr	r3, [pc, #208]	; (80002d0 <MX_ADC2_Init+0x108>)
 80001fe:	2200      	movs	r2, #0
 8000200:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000204:	4b32      	ldr	r3, [pc, #200]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000206:	2200      	movs	r2, #0
 8000208:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800020a:	4b31      	ldr	r3, [pc, #196]	; (80002d0 <MX_ADC2_Init+0x108>)
 800020c:	2201      	movs	r2, #1
 800020e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000210:	4b2f      	ldr	r3, [pc, #188]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000216:	4b2e      	ldr	r3, [pc, #184]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000218:	2204      	movs	r2, #4
 800021a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800021c:	4b2c      	ldr	r3, [pc, #176]	; (80002d0 <MX_ADC2_Init+0x108>)
 800021e:	2201      	movs	r2, #1
 8000220:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000224:	4b2a      	ldr	r3, [pc, #168]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000226:	2204      	movs	r2, #4
 8000228:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800022a:	4b29      	ldr	r3, [pc, #164]	; (80002d0 <MX_ADC2_Init+0x108>)
 800022c:	2200      	movs	r2, #0
 800022e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000230:	4b27      	ldr	r3, [pc, #156]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000232:	2200      	movs	r2, #0
 8000234:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000236:	4826      	ldr	r0, [pc, #152]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000238:	f001 f816 	bl	8001268 <HAL_ADC_Init>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000242:	f000 fa94 	bl	800076e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000246:	2301      	movs	r3, #1
 8000248:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800024a:	2301      	movs	r3, #1
 800024c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000252:	2307      	movs	r3, #7
 8000254:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000256:	2300      	movs	r3, #0
 8000258:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800025e:	463b      	mov	r3, r7
 8000260:	4619      	mov	r1, r3
 8000262:	481b      	ldr	r0, [pc, #108]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000264:	f001 fa6c 	bl	8001740 <HAL_ADC_ConfigChannel>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800026e:	f000 fa7e 	bl	800076e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000272:	2302      	movs	r3, #2
 8000274:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000276:	2302      	movs	r3, #2
 8000278:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800027a:	463b      	mov	r3, r7
 800027c:	4619      	mov	r1, r3
 800027e:	4814      	ldr	r0, [pc, #80]	; (80002d0 <MX_ADC2_Init+0x108>)
 8000280:	f001 fa5e 	bl	8001740 <HAL_ADC_ConfigChannel>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 800028a:	f000 fa70 	bl	800076e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800028e:	2303      	movs	r3, #3
 8000290:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000292:	2303      	movs	r3, #3
 8000294:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000296:	463b      	mov	r3, r7
 8000298:	4619      	mov	r1, r3
 800029a:	480d      	ldr	r0, [pc, #52]	; (80002d0 <MX_ADC2_Init+0x108>)
 800029c:	f001 fa50 	bl	8001740 <HAL_ADC_ConfigChannel>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 80002a6:	f000 fa62 	bl	800076e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002aa:	2304      	movs	r3, #4
 80002ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002ae:	2304      	movs	r3, #4
 80002b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80002b2:	463b      	mov	r3, r7
 80002b4:	4619      	mov	r1, r3
 80002b6:	4806      	ldr	r0, [pc, #24]	; (80002d0 <MX_ADC2_Init+0x108>)
 80002b8:	f001 fa42 	bl	8001740 <HAL_ADC_ConfigChannel>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <MX_ADC2_Init+0xfe>
  {
    Error_Handler();
 80002c2:	f000 fa54 	bl	800076e <Error_Handler>
  }

}
 80002c6:	bf00      	nop
 80002c8:	3718      	adds	r7, #24
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20000084 	.word	0x20000084
 80002d4:	50000100 	.word	0x50000100

080002d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e0:	f107 0314 	add.w	r3, r7, #20
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a2c      	ldr	r2, [pc, #176]	; (80003a8 <HAL_ADC_MspInit+0xd0>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d152      	bne.n	80003a0 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80002fa:	4b2c      	ldr	r3, [pc, #176]	; (80003ac <HAL_ADC_MspInit+0xd4>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a2b      	ldr	r2, [pc, #172]	; (80003ac <HAL_ADC_MspInit+0xd4>)
 8000300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b29      	ldr	r3, [pc, #164]	; (80003ac <HAL_ADC_MspInit+0xd4>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800030e:	613b      	str	r3, [r7, #16]
 8000310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000312:	4b26      	ldr	r3, [pc, #152]	; (80003ac <HAL_ADC_MspInit+0xd4>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a25      	ldr	r2, [pc, #148]	; (80003ac <HAL_ADC_MspInit+0xd4>)
 8000318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800031c:	6153      	str	r3, [r2, #20]
 800031e:	4b23      	ldr	r3, [pc, #140]	; (80003ac <HAL_ADC_MspInit+0xd4>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC2_IN1
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = FC_TEMPERATURE_PIN_Pin|SC_VOLTAGE_PIN_Pin|FC_VOLTAGE_PIN_Pin|SC_CURRENT_SENSOR_PIN_Pin;
 800032a:	23f0      	movs	r3, #240	; 0xf0
 800032c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800032e:	2303      	movs	r3, #3
 8000330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000336:	f107 0314 	add.w	r3, r7, #20
 800033a:	4619      	mov	r1, r3
 800033c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000340:	f002 f9ee 	bl	8002720 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel4;
 8000344:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000346:	4a1b      	ldr	r2, [pc, #108]	; (80003b4 <HAL_ADC_MspInit+0xdc>)
 8000348:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800034a:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 800034c:	2200      	movs	r2, #0
 800034e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000350:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000356:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000358:	2280      	movs	r2, #128	; 0x80
 800035a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800035c:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 800035e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000362:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000366:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800036a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 800036e:	2220      	movs	r2, #32
 8000370:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000374:	2200      	movs	r2, #0
 8000376:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000378:	480d      	ldr	r0, [pc, #52]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 800037a:	f001 ffc3 	bl	8002304 <HAL_DMA_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000384:	f000 f9f3 	bl	800076e <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_ADC2_DMA1_CH4);
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <HAL_ADC_MspInit+0xe0>)
 800038a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800038c:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <HAL_ADC_MspInit+0xe0>)
 800038e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000392:	6513      	str	r3, [r2, #80]	; 0x50

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a06      	ldr	r2, [pc, #24]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 8000398:	639a      	str	r2, [r3, #56]	; 0x38
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <HAL_ADC_MspInit+0xd8>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80003a0:	bf00      	nop
 80003a2:	3728      	adds	r7, #40	; 0x28
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	50000100 	.word	0x50000100
 80003ac:	40021000 	.word	0x40021000
 80003b0:	200000d4 	.word	0x200000d4
 80003b4:	40020044 	.word	0x40020044
 80003b8:	40010000 	.word	0x40010000

080003bc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80003c0:	4b10      	ldr	r3, [pc, #64]	; (8000404 <MX_CRC_Init+0x48>)
 80003c2:	4a11      	ldr	r2, [pc, #68]	; (8000408 <MX_CRC_Init+0x4c>)
 80003c4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80003c6:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <MX_CRC_Init+0x48>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80003cc:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <MX_CRC_Init+0x48>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_CRC_Init+0x48>)
 80003d4:	2207      	movs	r2, #7
 80003d6:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 80003d8:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <MX_CRC_Init+0x48>)
 80003da:	2210      	movs	r2, #16
 80003dc:	60da      	str	r2, [r3, #12]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_CRC_Init+0x48>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80003e4:	4b07      	ldr	r3, [pc, #28]	; (8000404 <MX_CRC_Init+0x48>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80003ea:	4b06      	ldr	r3, [pc, #24]	; (8000404 <MX_CRC_Init+0x48>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80003f0:	4804      	ldr	r0, [pc, #16]	; (8000404 <MX_CRC_Init+0x48>)
 80003f2:	f001 fe9d 	bl	8002130 <HAL_CRC_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_CRC_Init+0x44>
  {
    Error_Handler();
 80003fc:	f000 f9b7 	bl	800076e <Error_Handler>
  }

}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000118 	.word	0x20000118
 8000408:	40023000 	.word	0x40023000

0800040c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <HAL_CRC_MspInit+0x38>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d10b      	bne.n	8000436 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <HAL_CRC_MspInit+0x3c>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a09      	ldr	r2, [pc, #36]	; (8000448 <HAL_CRC_MspInit+0x3c>)
 8000424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b07      	ldr	r3, [pc, #28]	; (8000448 <HAL_CRC_MspInit+0x3c>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000436:	bf00      	nop
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40023000 	.word	0x40023000
 8000448:	40021000 	.word	0x40021000

0800044c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_DMA_Init+0x68>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a17      	ldr	r2, [pc, #92]	; (80004b4 <MX_DMA_Init+0x68>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <MX_DMA_Init+0x68>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	2100      	movs	r1, #0
 800046e:	200c      	movs	r0, #12
 8000470:	f001 fe27 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000474:	200c      	movs	r0, #12
 8000476:	f001 fe40 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2100      	movs	r1, #0
 800047e:	200e      	movs	r0, #14
 8000480:	f001 fe1f 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000484:	200e      	movs	r0, #14
 8000486:	f001 fe38 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	200f      	movs	r0, #15
 8000490:	f001 fe17 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000494:	200f      	movs	r0, #15
 8000496:	f001 fe30 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2100      	movs	r1, #0
 800049e:	2010      	movs	r0, #16
 80004a0:	f001 fe0f 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004a4:	2010      	movs	r0, #16
 80004a6:	f001 fe28 	bl	80020fa <HAL_NVIC_EnableIRQ>

}
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000

080004b8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ce:	4b56      	ldr	r3, [pc, #344]	; (8000628 <MX_GPIO_Init+0x170>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a55      	ldr	r2, [pc, #340]	; (8000628 <MX_GPIO_Init+0x170>)
 80004d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b53      	ldr	r3, [pc, #332]	; (8000628 <MX_GPIO_Init+0x170>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	4b50      	ldr	r3, [pc, #320]	; (8000628 <MX_GPIO_Init+0x170>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a4f      	ldr	r2, [pc, #316]	; (8000628 <MX_GPIO_Init+0x170>)
 80004ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b4d      	ldr	r3, [pc, #308]	; (8000628 <MX_GPIO_Init+0x170>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	4b4a      	ldr	r3, [pc, #296]	; (8000628 <MX_GPIO_Init+0x170>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a49      	ldr	r2, [pc, #292]	; (8000628 <MX_GPIO_Init+0x170>)
 8000504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b47      	ldr	r3, [pc, #284]	; (8000628 <MX_GPIO_Init+0x170>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SC_ON_Pin|PURGING_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f002 fa70 	bl	8002a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FC_DECHARGING_GPIO_Port, FC_DECHARGING_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	4840      	ldr	r0, [pc, #256]	; (800062c <MX_GPIO_Init+0x174>)
 800052a:	f002 fa6b 	bl	8002a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800052e:	2302      	movs	r3, #2
 8000530:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000532:	2303      	movs	r3, #3
 8000534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800053a:	f107 030c 	add.w	r3, r7, #12
 800053e:	4619      	mov	r1, r3
 8000540:	483b      	ldr	r0, [pc, #236]	; (8000630 <MX_GPIO_Init+0x178>)
 8000542:	f002 f8ed 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8000546:	f649 0302 	movw	r3, #38914	; 0x9802
 800054a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800054c:	2303      	movs	r3, #3
 800054e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	4619      	mov	r1, r3
 800055a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055e:	f002 f8df 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB4 PBPin */
  GPIO_InitStruct.Pin = FAN_2_GPIO_Pin|GPIO_PIN_4|FAN_1_GPIO_Pin;
 8000562:	2352      	movs	r3, #82	; 0x52
 8000564:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000566:	4b33      	ldr	r3, [pc, #204]	; (8000634 <MX_GPIO_Init+0x17c>)
 8000568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	4619      	mov	r1, r3
 8000574:	482d      	ldr	r0, [pc, #180]	; (800062c <MX_GPIO_Init+0x174>)
 8000576:	f002 f8d3 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SC_ON_Pin;
 800057a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800057e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SC_ON_GPIO_Port, &GPIO_InitStruct);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4619      	mov	r1, r3
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f002 f8c3 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PURGING_Pin;
 800059a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800059e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a0:	2301      	movs	r3, #1
 80005a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005a4:	2302      	movs	r3, #2
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PURGING_GPIO_Port, &GPIO_InitStruct);
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	4619      	mov	r1, r3
 80005b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b6:	f002 f8b3 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80005ba:	2328      	movs	r3, #40	; 0x28
 80005bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005be:	2303      	movs	r3, #3
 80005c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	4619      	mov	r1, r3
 80005cc:	4817      	ldr	r0, [pc, #92]	; (800062c <MX_GPIO_Init+0x174>)
 80005ce:	f002 f8a7 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FC_DECHARGING_Pin;
 80005d2:	2380      	movs	r3, #128	; 0x80
 80005d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FC_DECHARGING_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	4619      	mov	r1, r3
 80005e8:	4810      	ldr	r0, [pc, #64]	; (800062c <MX_GPIO_Init+0x174>)
 80005ea:	f002 f899 	bl	8002720 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 3, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2103      	movs	r1, #3
 80005f2:	2007      	movs	r0, #7
 80005f4:	f001 fd65 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80005f8:	2007      	movs	r0, #7
 80005fa:	f001 fd7e 	bl	80020fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	2103      	movs	r1, #3
 8000602:	200a      	movs	r0, #10
 8000604:	f001 fd5d 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000608:	200a      	movs	r0, #10
 800060a:	f001 fd76 	bl	80020fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2101      	movs	r1, #1
 8000612:	2017      	movs	r0, #23
 8000614:	f001 fd55 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000618:	2017      	movs	r0, #23
 800061a:	f001 fd6e 	bl	80020fa <HAL_NVIC_EnableIRQ>

}
 800061e:	bf00      	nop
 8000620:	3720      	adds	r7, #32
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000
 800062c:	48000400 	.word	0x48000400
 8000630:	48001400 	.word	0x48001400
 8000634:	10210000 	.word	0x10210000

08000638 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_IWDG_Init+0x34>)
 800063e:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <MX_IWDG_Init+0x38>)
 8000640:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <MX_IWDG_Init+0x34>)
 8000644:	2200      	movs	r2, #0
 8000646:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 2000;
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_IWDG_Init+0x34>)
 800064a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800064e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 1500;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_IWDG_Init+0x34>)
 8000652:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000656:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_IWDG_Init+0x34>)
 800065a:	f002 fa03 	bl	8002a64 <HAL_IWDG_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000664:	f000 f883 	bl	800076e <Error_Handler>
  }

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	2000013c 	.word	0x2000013c
 8000670:	40003000 	.word	0x40003000

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000678:	f000 fd72 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067c:	f000 f819 	bl	80006b2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000680:	f7ff ff1a 	bl	80004b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000684:	f7ff fee2 	bl	800044c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000688:	f000 fc90 	bl	8000fac <MX_USART2_UART_Init>
  MX_ADC2_Init();
 800068c:	f7ff fd9c 	bl	80001c8 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000690:	f000 f932 	bl	80008f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000694:	f000 f9dc 	bl	8000a50 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000698:	f000 fa50 	bl	8000b3c <MX_TIM3_Init>
  MX_CRC_Init();
 800069c:	f7ff fe8e 	bl	80003bc <MX_CRC_Init>
  MX_IWDG_Init();
 80006a0:	f7ff ffca 	bl	8000638 <MX_IWDG_Init>
  MX_TIM6_Init();
 80006a4:	f000 fac2 	bl	8000c2c <MX_TIM6_Init>
  MX_TIM7_Init();
 80006a8:	f000 faf6 	bl	8000c98 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  hydrogreen_main();
 80006ac:	f006 fcf6 	bl	800709c <hydrogreen_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <main+0x3c>

080006b2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b096      	sub	sp, #88	; 0x58
 80006b6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006bc:	2228      	movs	r2, #40	; 0x28
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f007 fc61 	bl	8007f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
 80006e4:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006e6:	230a      	movs	r3, #10
 80006e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ea:	2301      	movs	r3, #1
 80006ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ee:	2310      	movs	r3, #16
 80006f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006f2:	2301      	movs	r3, #1
 80006f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fa:	2300      	movs	r3, #0
 80006fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006fe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000702:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000708:	4618      	mov	r0, r3
 800070a:	f002 fa01 	bl	8002b10 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000714:	f000 f82b 	bl	800076e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2102      	movs	r1, #2
 8000734:	4618      	mov	r0, r3
 8000736:	f003 f8f3 	bl	8003920 <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000740:	f000 f815 	bl	800076e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8000744:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000748:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800074a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800074e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4618      	mov	r0, r3
 8000758:	f003 fb18 	bl	8003d8c <HAL_RCCEx_PeriphCLKConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000762:	f000 f804 	bl	800076e <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3758      	adds	r7, #88	; 0x58
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  hydrogreen_hardFault();
 8000772:	f006 fcb5 	bl	80070e0 <hydrogreen_hardFault>
  /* USER CODE END Error_Handler_Debug */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_MspInit+0x44>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <HAL_MspInit+0x44>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6193      	str	r3, [r2, #24]
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_MspInit+0x44>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_MspInit+0x44>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <HAL_MspInit+0x44>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a4:	61d3      	str	r3, [r2, #28]
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_MspInit+0x44>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <NMI_Handler+0x4>

080007ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <HardFault_Handler+0x4>

080007d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <MemManage_Handler+0x4>

080007d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <BusFault_Handler+0x4>

080007dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <UsageFault_Handler+0x4>

080007e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_SYSTICK_Callback();
 8000810:	f007 fa8e 	bl	8007d30 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000814:	f000 fcea 	bl	80011ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}

0800081c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000820:	2002      	movs	r0, #2
 8000822:	f002 f907 	bl	8002a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}

0800082a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800082e:	2010      	movs	r0, #16
 8000830:	f002 f900 	bl	8002a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}

08000838 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <DMA1_Channel2_IRQHandler+0x10>)
 800083e:	f001 fe7e 	bl	800253e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000014c 	.word	0x2000014c

0800084c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <DMA1_Channel4_IRQHandler+0x10>)
 8000852:	f001 fe74 	bl	800253e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000d4 	.word	0x200000d4

08000860 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000864:	4802      	ldr	r0, [pc, #8]	; (8000870 <DMA1_Channel5_IRQHandler+0x10>)
 8000866:	f001 fe6a 	bl	800253e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000190 	.word	0x20000190

08000874 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <DMA1_Channel6_IRQHandler+0x10>)
 800087a:	f001 fe60 	bl	800253e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000350 	.word	0x20000350

08000888 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800088c:	2040      	movs	r0, #64	; 0x40
 800088e:	f002 f8d1 	bl	8002a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <USART2_IRQHandler+0x10>)
 800089e:	f005 f993 	bl	8005bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000394 	.word	0x20000394

080008ac <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <TIM6_DAC1_IRQHandler+0x10>)
 80008b2:	f003 ff91 	bl	80047d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000220 	.word	0x20000220

080008c0 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <TIM7_DAC2_IRQHandler+0x10>)
 80008c6:	f003 ff87 	bl	80047d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000304 	.word	0x20000304

080008d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <SystemInit+0x20>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <SystemInit+0x20>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch1;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b09a      	sub	sp, #104	; 0x68
 80008fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000918:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
 8000928:	615a      	str	r2, [r3, #20]
 800092a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	222c      	movs	r2, #44	; 0x2c
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f007 fb28 	bl	8007f88 <memset>

  htim1.Instance = TIM1;
 8000938:	4b43      	ldr	r3, [pc, #268]	; (8000a48 <MX_TIM1_Init+0x150>)
 800093a:	4a44      	ldr	r2, [pc, #272]	; (8000a4c <MX_TIM1_Init+0x154>)
 800093c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 800093e:	4b42      	ldr	r3, [pc, #264]	; (8000a48 <MX_TIM1_Init+0x150>)
 8000940:	2209      	movs	r2, #9
 8000942:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000944:	4b40      	ldr	r3, [pc, #256]	; (8000a48 <MX_TIM1_Init+0x150>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800094a:	4b3f      	ldr	r3, [pc, #252]	; (8000a48 <MX_TIM1_Init+0x150>)
 800094c:	22ff      	movs	r2, #255	; 0xff
 800094e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000950:	4b3d      	ldr	r3, [pc, #244]	; (8000a48 <MX_TIM1_Init+0x150>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000956:	4b3c      	ldr	r3, [pc, #240]	; (8000a48 <MX_TIM1_Init+0x150>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095c:	4b3a      	ldr	r3, [pc, #232]	; (8000a48 <MX_TIM1_Init+0x150>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000962:	4839      	ldr	r0, [pc, #228]	; (8000a48 <MX_TIM1_Init+0x150>)
 8000964:	f003 fb38 	bl	8003fd8 <HAL_TIM_Base_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800096e:	f7ff fefe 	bl	800076e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000976:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000978:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800097c:	4619      	mov	r1, r3
 800097e:	4832      	ldr	r0, [pc, #200]	; (8000a48 <MX_TIM1_Init+0x150>)
 8000980:	f004 f95a 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800098a:	f7ff fef0 	bl	800076e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800098e:	482e      	ldr	r0, [pc, #184]	; (8000a48 <MX_TIM1_Init+0x150>)
 8000990:	f003 fbd6 	bl	8004140 <HAL_TIM_PWM_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800099a:	f7ff fee8 	bl	800076e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009ae:	4619      	mov	r1, r3
 80009b0:	4825      	ldr	r0, [pc, #148]	; (8000a48 <MX_TIM1_Init+0x150>)
 80009b2:	f004 fee5 	bl	8005780 <HAL_TIMEx_MasterConfigSynchronization>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80009bc:	f7ff fed7 	bl	800076e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c0:	2360      	movs	r3, #96	; 0x60
 80009c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c8:	2300      	movs	r3, #0
 80009ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009cc:	2300      	movs	r3, #0
 80009ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009d4:	2300      	movs	r3, #0
 80009d6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009e0:	2200      	movs	r2, #0
 80009e2:	4619      	mov	r1, r3
 80009e4:	4818      	ldr	r0, [pc, #96]	; (8000a48 <MX_TIM1_Init+0x150>)
 80009e6:	f004 f817 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80009f0:	f7ff febd 	bl	800076e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	4619      	mov	r1, r3
 8000a28:	4807      	ldr	r0, [pc, #28]	; (8000a48 <MX_TIM1_Init+0x150>)
 8000a2a:	f004 ff17 	bl	800585c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000a34:	f7ff fe9b 	bl	800076e <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000a38:	4803      	ldr	r0, [pc, #12]	; (8000a48 <MX_TIM1_Init+0x150>)
 8000a3a:	f000 fa37 	bl	8000eac <HAL_TIM_MspPostInit>

}
 8000a3e:	bf00      	nop
 8000a40:	3768      	adds	r7, #104	; 0x68
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2000026c 	.word	0x2000026c
 8000a4c:	40012c00 	.word	0x40012c00

08000a50 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08e      	sub	sp, #56	; 0x38
 8000a54:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a70:	463b      	mov	r3, r7
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]
 8000a7e:	615a      	str	r2, [r3, #20]
 8000a80:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <MX_TIM2_Init+0xe8>)
 8000a84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8000a8a:	4b2b      	ldr	r3, [pc, #172]	; (8000b38 <MX_TIM2_Init+0xe8>)
 8000a8c:	2209      	movs	r2, #9
 8000a8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a90:	4b29      	ldr	r3, [pc, #164]	; (8000b38 <MX_TIM2_Init+0xe8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 240;
 8000a96:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <MX_TIM2_Init+0xe8>)
 8000a98:	22f0      	movs	r2, #240	; 0xf0
 8000a9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9c:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <MX_TIM2_Init+0xe8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa2:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <MX_TIM2_Init+0xe8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aa8:	4823      	ldr	r0, [pc, #140]	; (8000b38 <MX_TIM2_Init+0xe8>)
 8000aaa:	f003 fa95 	bl	8003fd8 <HAL_TIM_Base_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ab4:	f7ff fe5b 	bl	800076e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	481c      	ldr	r0, [pc, #112]	; (8000b38 <MX_TIM2_Init+0xe8>)
 8000ac6:	f004 f8b7 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000ad0:	f7ff fe4d 	bl	800076e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ad4:	4818      	ldr	r0, [pc, #96]	; (8000b38 <MX_TIM2_Init+0xe8>)
 8000ad6:	f003 fb33 	bl	8004140 <HAL_TIM_PWM_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ae0:	f7ff fe45 	bl	800076e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	4811      	ldr	r0, [pc, #68]	; (8000b38 <MX_TIM2_Init+0xe8>)
 8000af4:	f004 fe44 	bl	8005780 <HAL_TIMEx_MasterConfigSynchronization>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000afe:	f7ff fe36 	bl	800076e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b02:	2360      	movs	r3, #96	; 0x60
 8000b04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b12:	463b      	mov	r3, r7
 8000b14:	2200      	movs	r2, #0
 8000b16:	4619      	mov	r1, r3
 8000b18:	4807      	ldr	r0, [pc, #28]	; (8000b38 <MX_TIM2_Init+0xe8>)
 8000b1a:	f003 ff7d 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000b24:	f7ff fe23 	bl	800076e <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <MX_TIM2_Init+0xe8>)
 8000b2a:	f000 f9bf 	bl	8000eac <HAL_TIM_MspPostInit>

}
 8000b2e:	bf00      	nop
 8000b30:	3738      	adds	r7, #56	; 0x38
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200002b8 	.word	0x200002b8

08000b3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	; 0x38
 8000b40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
 8000b6a:	615a      	str	r2, [r3, #20]
 8000b6c:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000b6e:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <MX_TIM3_Init+0xe8>)
 8000b70:	4a2d      	ldr	r2, [pc, #180]	; (8000c28 <MX_TIM3_Init+0xec>)
 8000b72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1199;
 8000b74:	4b2b      	ldr	r3, [pc, #172]	; (8000c24 <MX_TIM3_Init+0xe8>)
 8000b76:	f240 42af 	movw	r2, #1199	; 0x4af
 8000b7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <MX_TIM3_Init+0xe8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000b82:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <MX_TIM3_Init+0xe8>)
 8000b84:	2263      	movs	r2, #99	; 0x63
 8000b86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b88:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <MX_TIM3_Init+0xe8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8e:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <MX_TIM3_Init+0xe8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b94:	4823      	ldr	r0, [pc, #140]	; (8000c24 <MX_TIM3_Init+0xe8>)
 8000b96:	f003 fa1f 	bl	8003fd8 <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ba0:	f7ff fde5 	bl	800076e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	481c      	ldr	r0, [pc, #112]	; (8000c24 <MX_TIM3_Init+0xe8>)
 8000bb2:	f004 f841 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000bbc:	f7ff fdd7 	bl	800076e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bc0:	4818      	ldr	r0, [pc, #96]	; (8000c24 <MX_TIM3_Init+0xe8>)
 8000bc2:	f003 fabd 	bl	8004140 <HAL_TIM_PWM_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000bcc:	f7ff fdcf 	bl	800076e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4811      	ldr	r0, [pc, #68]	; (8000c24 <MX_TIM3_Init+0xe8>)
 8000be0:	f004 fdce 	bl	8005780 <HAL_TIMEx_MasterConfigSynchronization>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000bea:	f7ff fdc0 	bl	800076e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bee:	2360      	movs	r3, #96	; 0x60
 8000bf0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2208      	movs	r2, #8
 8000c02:	4619      	mov	r1, r3
 8000c04:	4807      	ldr	r0, [pc, #28]	; (8000c24 <MX_TIM3_Init+0xe8>)
 8000c06:	f003 ff07 	bl	8004a18 <HAL_TIM_PWM_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c10:	f7ff fdad 	bl	800076e <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000c14:	4803      	ldr	r0, [pc, #12]	; (8000c24 <MX_TIM3_Init+0xe8>)
 8000c16:	f000 f949 	bl	8000eac <HAL_TIM_MspPostInit>

}
 8000c1a:	bf00      	nop
 8000c1c:	3738      	adds	r7, #56	; 0x38
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200001d4 	.word	0x200001d4
 8000c28:	40000400 	.word	0x40000400

08000c2c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_TIM6_Init+0x64>)
 8000c3e:	4a15      	ldr	r2, [pc, #84]	; (8000c94 <MX_TIM6_Init+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64-1;
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <MX_TIM6_Init+0x64>)
 8000c44:	223f      	movs	r2, #63	; 0x3f
 8000c46:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_TIM6_Init+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <MX_TIM6_Init+0x64>)
 8000c50:	2263      	movs	r2, #99	; 0x63
 8000c52:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_TIM6_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c5a:	480d      	ldr	r0, [pc, #52]	; (8000c90 <MX_TIM6_Init+0x64>)
 8000c5c:	f003 f9bc 	bl	8003fd8 <HAL_TIM_Base_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000c66:	f7ff fd82 	bl	800076e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	4619      	mov	r1, r3
 8000c76:	4806      	ldr	r0, [pc, #24]	; (8000c90 <MX_TIM6_Init+0x64>)
 8000c78:	f004 fd82 	bl	8005780 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000c82:	f7ff fd74 	bl	800076e <Error_Handler>
  }

}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000220 	.word	0x20000220
 8000c94:	40001000 	.word	0x40001000

08000c98 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_TIM7_Init+0x64>)
 8000caa:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <MX_TIM7_Init+0x68>)
 8000cac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 64-1;
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <MX_TIM7_Init+0x64>)
 8000cb0:	223f      	movs	r2, #63	; 0x3f
 8000cb2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_TIM7_Init+0x64>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10-1;
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <MX_TIM7_Init+0x64>)
 8000cbc:	2209      	movs	r2, #9
 8000cbe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_TIM7_Init+0x64>)
 8000cc2:	2280      	movs	r2, #128	; 0x80
 8000cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000cc6:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_TIM7_Init+0x64>)
 8000cc8:	f003 f986 	bl	8003fd8 <HAL_TIM_Base_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000cd2:	f7ff fd4c 	bl	800076e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4806      	ldr	r0, [pc, #24]	; (8000cfc <MX_TIM7_Init+0x64>)
 8000ce4:	f004 fd4c 	bl	8005780 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000cee:	f7ff fd3e 	bl	800076e <Error_Handler>
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000304 	.word	0x20000304
 8000d00:	40001400 	.word	0x40001400

08000d04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a5d      	ldr	r2, [pc, #372]	; (8000e88 <HAL_TIM_Base_MspInit+0x184>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d134      	bne.n	8000d80 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d16:	4b5d      	ldr	r3, [pc, #372]	; (8000e8c <HAL_TIM_Base_MspInit+0x188>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4a5c      	ldr	r2, [pc, #368]	; (8000e8c <HAL_TIM_Base_MspInit+0x188>)
 8000d1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d20:	6193      	str	r3, [r2, #24]
 8000d22:	4b5a      	ldr	r3, [pc, #360]	; (8000e8c <HAL_TIM_Base_MspInit+0x188>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d2a:	61fb      	str	r3, [r7, #28]
 8000d2c:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000d2e:	4b58      	ldr	r3, [pc, #352]	; (8000e90 <HAL_TIM_Base_MspInit+0x18c>)
 8000d30:	4a58      	ldr	r2, [pc, #352]	; (8000e94 <HAL_TIM_Base_MspInit+0x190>)
 8000d32:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d34:	4b56      	ldr	r3, [pc, #344]	; (8000e90 <HAL_TIM_Base_MspInit+0x18c>)
 8000d36:	2210      	movs	r2, #16
 8000d38:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d3a:	4b55      	ldr	r3, [pc, #340]	; (8000e90 <HAL_TIM_Base_MspInit+0x18c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d40:	4b53      	ldr	r3, [pc, #332]	; (8000e90 <HAL_TIM_Base_MspInit+0x18c>)
 8000d42:	2280      	movs	r2, #128	; 0x80
 8000d44:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d46:	4b52      	ldr	r3, [pc, #328]	; (8000e90 <HAL_TIM_Base_MspInit+0x18c>)
 8000d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d4c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d4e:	4b50      	ldr	r3, [pc, #320]	; (8000e90 <HAL_TIM_Base_MspInit+0x18c>)
 8000d50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d54:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000d56:	4b4e      	ldr	r3, [pc, #312]	; (8000e90 <HAL_TIM_Base_MspInit+0x18c>)
 8000d58:	2220      	movs	r2, #32
 8000d5a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d5c:	4b4c      	ldr	r3, [pc, #304]	; (8000e90 <HAL_TIM_Base_MspInit+0x18c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000d62:	484b      	ldr	r0, [pc, #300]	; (8000e90 <HAL_TIM_Base_MspInit+0x18c>)
 8000d64:	f001 face 	bl	8002304 <HAL_DMA_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000d6e:	f7ff fcfe 	bl	800076e <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a46      	ldr	r2, [pc, #280]	; (8000e90 <HAL_TIM_Base_MspInit+0x18c>)
 8000d76:	625a      	str	r2, [r3, #36]	; 0x24
 8000d78:	4a45      	ldr	r2, [pc, #276]	; (8000e90 <HAL_TIM_Base_MspInit+0x18c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000d7e:	e07e      	b.n	8000e7e <HAL_TIM_Base_MspInit+0x17a>
  else if(tim_baseHandle->Instance==TIM2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d88:	d134      	bne.n	8000df4 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8a:	4b40      	ldr	r3, [pc, #256]	; (8000e8c <HAL_TIM_Base_MspInit+0x188>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	4a3f      	ldr	r2, [pc, #252]	; (8000e8c <HAL_TIM_Base_MspInit+0x188>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	61d3      	str	r3, [r2, #28]
 8000d96:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <HAL_TIM_Base_MspInit+0x188>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	61bb      	str	r3, [r7, #24]
 8000da0:	69bb      	ldr	r3, [r7, #24]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000da2:	4b3d      	ldr	r3, [pc, #244]	; (8000e98 <HAL_TIM_Base_MspInit+0x194>)
 8000da4:	4a3d      	ldr	r2, [pc, #244]	; (8000e9c <HAL_TIM_Base_MspInit+0x198>)
 8000da6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da8:	4b3b      	ldr	r3, [pc, #236]	; (8000e98 <HAL_TIM_Base_MspInit+0x194>)
 8000daa:	2210      	movs	r2, #16
 8000dac:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dae:	4b3a      	ldr	r3, [pc, #232]	; (8000e98 <HAL_TIM_Base_MspInit+0x194>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000db4:	4b38      	ldr	r3, [pc, #224]	; (8000e98 <HAL_TIM_Base_MspInit+0x194>)
 8000db6:	2280      	movs	r2, #128	; 0x80
 8000db8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dba:	4b37      	ldr	r3, [pc, #220]	; (8000e98 <HAL_TIM_Base_MspInit+0x194>)
 8000dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dc2:	4b35      	ldr	r3, [pc, #212]	; (8000e98 <HAL_TIM_Base_MspInit+0x194>)
 8000dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dc8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000dca:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <HAL_TIM_Base_MspInit+0x194>)
 8000dcc:	2220      	movs	r2, #32
 8000dce:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000dd0:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <HAL_TIM_Base_MspInit+0x194>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000dd6:	4830      	ldr	r0, [pc, #192]	; (8000e98 <HAL_TIM_Base_MspInit+0x194>)
 8000dd8:	f001 fa94 	bl	8002304 <HAL_DMA_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_TIM_Base_MspInit+0xe2>
      Error_Handler();
 8000de2:	f7ff fcc4 	bl	800076e <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a2b      	ldr	r2, [pc, #172]	; (8000e98 <HAL_TIM_Base_MspInit+0x194>)
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24
 8000dec:	4a2a      	ldr	r2, [pc, #168]	; (8000e98 <HAL_TIM_Base_MspInit+0x194>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000df2:	e044      	b.n	8000e7e <HAL_TIM_Base_MspInit+0x17a>
  else if(tim_baseHandle->Instance==TIM3)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a29      	ldr	r2, [pc, #164]	; (8000ea0 <HAL_TIM_Base_MspInit+0x19c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d10c      	bne.n	8000e18 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dfe:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <HAL_TIM_Base_MspInit+0x188>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	4a22      	ldr	r2, [pc, #136]	; (8000e8c <HAL_TIM_Base_MspInit+0x188>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	61d3      	str	r3, [r2, #28]
 8000e0a:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <HAL_TIM_Base_MspInit+0x188>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697b      	ldr	r3, [r7, #20]
}
 8000e16:	e032      	b.n	8000e7e <HAL_TIM_Base_MspInit+0x17a>
  else if(tim_baseHandle->Instance==TIM6)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a21      	ldr	r2, [pc, #132]	; (8000ea4 <HAL_TIM_Base_MspInit+0x1a0>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d114      	bne.n	8000e4c <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e22:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <HAL_TIM_Base_MspInit+0x188>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a19      	ldr	r2, [pc, #100]	; (8000e8c <HAL_TIM_Base_MspInit+0x188>)
 8000e28:	f043 0310 	orr.w	r3, r3, #16
 8000e2c:	61d3      	str	r3, [r2, #28]
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <HAL_TIM_Base_MspInit+0x188>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f003 0310 	and.w	r3, r3, #16
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 1, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	2036      	movs	r0, #54	; 0x36
 8000e40:	f001 f93f 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000e44:	2036      	movs	r0, #54	; 0x36
 8000e46:	f001 f958 	bl	80020fa <HAL_NVIC_EnableIRQ>
}
 8000e4a:	e018      	b.n	8000e7e <HAL_TIM_Base_MspInit+0x17a>
  else if(tim_baseHandle->Instance==TIM7)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a15      	ldr	r2, [pc, #84]	; (8000ea8 <HAL_TIM_Base_MspInit+0x1a4>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d113      	bne.n	8000e7e <HAL_TIM_Base_MspInit+0x17a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <HAL_TIM_Base_MspInit+0x188>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <HAL_TIM_Base_MspInit+0x188>)
 8000e5c:	f043 0320 	orr.w	r3, r3, #32
 8000e60:	61d3      	str	r3, [r2, #28]
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_TIM_Base_MspInit+0x188>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	f003 0320 	and.w	r3, r3, #32
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 3, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2103      	movs	r1, #3
 8000e72:	2037      	movs	r0, #55	; 0x37
 8000e74:	f001 f925 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8000e78:	2037      	movs	r0, #55	; 0x37
 8000e7a:	f001 f93e 	bl	80020fa <HAL_NVIC_EnableIRQ>
}
 8000e7e:	bf00      	nop
 8000e80:	3720      	adds	r7, #32
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40012c00 	.word	0x40012c00
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	2000014c 	.word	0x2000014c
 8000e94:	4002001c 	.word	0x4002001c
 8000e98:	20000190 	.word	0x20000190
 8000e9c:	40020058 	.word	0x40020058
 8000ea0:	40000400 	.word	0x40000400
 8000ea4:	40001000 	.word	0x40001000
 8000ea8:	40001400 	.word	0x40001400

08000eac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a34      	ldr	r2, [pc, #208]	; (8000f9c <HAL_TIM_MspPostInit+0xf0>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d11e      	bne.n	8000f0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <HAL_TIM_MspPostInit+0xf4>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a33      	ldr	r2, [pc, #204]	; (8000fa0 <HAL_TIM_MspPostInit+0xf4>)
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	6153      	str	r3, [r2, #20]
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <HAL_TIM_MspPostInit+0xf4>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = FAN_PWM_TIM_Pin;
 8000ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000ef8:	2306      	movs	r3, #6
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_PWM_TIM_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4619      	mov	r1, r3
 8000f02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f06:	f001 fc0b 	bl	8002720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f0a:	e043      	b.n	8000f94 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f14:	d11d      	bne.n	8000f52 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <HAL_TIM_MspPostInit+0xf4>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	4a21      	ldr	r2, [pc, #132]	; (8000fa0 <HAL_TIM_MspPostInit+0xf4>)
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	6153      	str	r3, [r2, #20]
 8000f22:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <HAL_TIM_MspPostInit+0xf4>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4c:	f001 fbe8 	bl	8002720 <HAL_GPIO_Init>
}
 8000f50:	e020      	b.n	8000f94 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM3)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <HAL_TIM_MspPostInit+0xf8>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d11b      	bne.n	8000f94 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_TIM_MspPostInit+0xf4>)
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <HAL_TIM_MspPostInit+0xf4>)
 8000f62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f66:	6153      	str	r3, [r2, #20]
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <HAL_TIM_MspPostInit+0xf4>)
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FC_MOSFET_PWM_TIM_Pin;
 8000f74:	2301      	movs	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f84:	2302      	movs	r3, #2
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FC_MOSFET_PWM_TIM_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <HAL_TIM_MspPostInit+0xfc>)
 8000f90:	f001 fbc6 	bl	8002720 <HAL_GPIO_Init>
}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40012c00 	.word	0x40012c00
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40000400 	.word	0x40000400
 8000fa8:	48000400 	.word	0x48000400

08000fac <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <MX_USART2_UART_Init+0x6c>)
 8000fb2:	4a1a      	ldr	r2, [pc, #104]	; (800101c <MX_USART2_UART_Init+0x70>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <MX_USART2_UART_Init+0x6c>)
 8000fb8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <MX_USART2_UART_Init+0x6c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_USART2_UART_Init+0x6c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <MX_USART2_UART_Init+0x6c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_USART2_UART_Init+0x6c>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MX_USART2_UART_Init+0x6c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_USART2_UART_Init+0x6c>)
 8000fde:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fe2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USART2_UART_Init+0x6c>)
 8000fe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <MX_USART2_UART_Init+0x6c>)
 8000fee:	2230      	movs	r2, #48	; 0x30
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USART2_UART_Init+0x6c>)
 8000ff4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ff8:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <MX_USART2_UART_Init+0x6c>)
 8000ffc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001000:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_USART2_UART_Init+0x6c>)
 8001004:	f004 fcc0 	bl	8005988 <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART2_UART_Init+0x66>
  {
    Error_Handler();
 800100e:	f7ff fbae 	bl	800076e <Error_Handler>
  }

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000394 	.word	0x20000394
 800101c:	40004400 	.word	0x40004400

08001020 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a2f      	ldr	r2, [pc, #188]	; (80010fc <HAL_UART_MspInit+0xdc>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d157      	bne.n	80010f2 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001042:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <HAL_UART_MspInit+0xe0>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	4a2e      	ldr	r2, [pc, #184]	; (8001100 <HAL_UART_MspInit+0xe0>)
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	61d3      	str	r3, [r2, #28]
 800104e:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <HAL_UART_MspInit+0xe0>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	4b29      	ldr	r3, [pc, #164]	; (8001100 <HAL_UART_MspInit+0xe0>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a28      	ldr	r2, [pc, #160]	; (8001100 <HAL_UART_MspInit+0xe0>)
 8001060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001064:	6153      	str	r3, [r2, #20]
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <HAL_UART_MspInit+0xe0>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = RS_TX_Pin|RS_RX_Pin;
 8001072:	230c      	movs	r3, #12
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001082:	2307      	movs	r3, #7
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	f001 fb46 	bl	8002720 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <HAL_UART_MspInit+0xe4>)
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <HAL_UART_MspInit+0xe8>)
 8001098:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <HAL_UART_MspInit+0xe4>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <HAL_UART_MspInit+0xe4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <HAL_UART_MspInit+0xe4>)
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_UART_MspInit+0xe4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_UART_MspInit+0xe4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_UART_MspInit+0xe4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_UART_MspInit+0xe4>)
 80010c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010c4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80010c6:	480f      	ldr	r0, [pc, #60]	; (8001104 <HAL_UART_MspInit+0xe4>)
 80010c8:	f001 f91c 	bl	8002304 <HAL_DMA_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80010d2:	f7ff fb4c 	bl	800076e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <HAL_UART_MspInit+0xe4>)
 80010da:	671a      	str	r2, [r3, #112]	; 0x70
 80010dc:	4a09      	ldr	r2, [pc, #36]	; (8001104 <HAL_UART_MspInit+0xe4>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2101      	movs	r1, #1
 80010e6:	2026      	movs	r0, #38	; 0x26
 80010e8:	f000 ffeb 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010ec:	2026      	movs	r0, #38	; 0x26
 80010ee:	f001 f804 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010f2:	bf00      	nop
 80010f4:	3728      	adds	r7, #40	; 0x28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40004400 	.word	0x40004400
 8001100:	40021000 	.word	0x40021000
 8001104:	20000350 	.word	0x20000350
 8001108:	4002006c 	.word	0x4002006c

0800110c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001144 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <LoopForever+0x6>)
  ldr r1, =_edata
 8001112:	490e      	ldr	r1, [pc, #56]	; (800114c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001114:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <LoopForever+0xe>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001128:	4c0b      	ldr	r4, [pc, #44]	; (8001158 <LoopForever+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001136:	f7ff fbcd 	bl	80008d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113a:	f006 ff01 	bl	8007f40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800113e:	f7ff fa99 	bl	8000674 <main>

08001142 <LoopForever>:

LoopForever:
    b LoopForever
 8001142:	e7fe      	b.n	8001142 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001144:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001150:	08007ff0 	.word	0x08007ff0
  ldr r2, =_sbss
 8001154:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001158:	20000550 	.word	0x20000550

0800115c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC1_2_IRQHandler>
	...

08001160 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_Init+0x28>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_Init+0x28>)
 800116a:	f043 0310 	orr.w	r3, r3, #16
 800116e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001170:	2003      	movs	r0, #3
 8001172:	f000 ff9b 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001176:	2000      	movs	r0, #0
 8001178:	f000 f808 	bl	800118c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117c:	f7ff fafe 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40022000 	.word	0x40022000

0800118c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x54>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_InitTick+0x58>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 ffb3 	bl	8002116 <HAL_SYSTICK_Config>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00e      	b.n	80011d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d80a      	bhi.n	80011d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c0:	2200      	movs	r2, #0
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f000 ff7b 	bl	80020c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011cc:	4a06      	ldr	r2, [pc, #24]	; (80011e8 <HAL_InitTick+0x5c>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e000      	b.n	80011d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000004 	.word	0x20000004

080011ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x20>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x24>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_IncTick+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008
 8001210:	20000418 	.word	0x20000418

08001214 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;  
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_GetTick+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000418 	.word	0x20000418

0800122c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b09a      	sub	sp, #104	; 0x68
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001276:	2300      	movs	r3, #0
 8001278:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e172      	b.n	800156e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 0310 	and.w	r3, r3, #16
 8001296:	2b00      	cmp	r3, #0
 8001298:	d176      	bne.n	8001388 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d152      	bne.n	8001348 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff f80b 	bl	80002d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d13b      	bne.n	8001348 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 fdbb 	bl	8001e4c <ADC_Disable>
 80012d6:	4603      	mov	r3, r0
 80012d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d12f      	bne.n	8001348 <HAL_ADC_Init+0xe0>
 80012e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d12b      	bne.n	8001348 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012f8:	f023 0302 	bic.w	r3, r3, #2
 80012fc:	f043 0202 	orr.w	r2, r3, #2
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001312:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001322:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001324:	4b94      	ldr	r3, [pc, #592]	; (8001578 <HAL_ADC_Init+0x310>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a94      	ldr	r2, [pc, #592]	; (800157c <HAL_ADC_Init+0x314>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	0c9a      	lsrs	r2, r3, #18
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800133a:	e002      	b.n	8001342 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	3b01      	subs	r3, #1
 8001340:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f9      	bne.n	800133c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d007      	beq.n	8001366 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001364:	d110      	bne.n	8001388 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f023 0312 	bic.w	r3, r3, #18
 800136e:	f043 0210 	orr.w	r2, r3, #16
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	f043 0201 	orr.w	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	f003 0310 	and.w	r3, r3, #16
 8001390:	2b00      	cmp	r3, #0
 8001392:	f040 80df 	bne.w	8001554 <HAL_ADC_Init+0x2ec>
 8001396:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800139a:	2b00      	cmp	r3, #0
 800139c:	f040 80da 	bne.w	8001554 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f040 80d2 	bne.w	8001554 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013b8:	f043 0202 	orr.w	r2, r3, #2
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013c0:	4b6f      	ldr	r3, [pc, #444]	; (8001580 <HAL_ADC_Init+0x318>)
 80013c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013cc:	d102      	bne.n	80013d4 <HAL_ADC_Init+0x16c>
 80013ce:	4b6d      	ldr	r3, [pc, #436]	; (8001584 <HAL_ADC_Init+0x31c>)
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	e002      	b.n	80013da <HAL_ADC_Init+0x172>
 80013d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013d8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d108      	bne.n	80013fa <HAL_ADC_Init+0x192>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d101      	bne.n	80013fa <HAL_ADC_Init+0x192>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_ADC_Init+0x194>
 80013fa:	2300      	movs	r3, #0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d11c      	bne.n	800143a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001400:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001402:	2b00      	cmp	r3, #0
 8001404:	d010      	beq.n	8001428 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d107      	bne.n	8001422 <HAL_ADC_Init+0x1ba>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_ADC_Init+0x1ba>
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <HAL_ADC_Init+0x1bc>
 8001422:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001424:	2b00      	cmp	r3, #0
 8001426:	d108      	bne.n	800143a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	431a      	orrs	r2, r3
 8001436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001438:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	7e5b      	ldrb	r3, [r3, #25]
 800143e:	035b      	lsls	r3, r3, #13
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001444:	2a01      	cmp	r2, #1
 8001446:	d002      	beq.n	800144e <HAL_ADC_Init+0x1e6>
 8001448:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800144c:	e000      	b.n	8001450 <HAL_ADC_Init+0x1e8>
 800144e:	2200      	movs	r2, #0
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	4313      	orrs	r3, r2
 800145e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001460:	4313      	orrs	r3, r2
 8001462:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3020 	ldrb.w	r3, [r3, #32]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d11b      	bne.n	80014a6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7e5b      	ldrb	r3, [r3, #25]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d109      	bne.n	800148a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	3b01      	subs	r3, #1
 800147c:	045a      	lsls	r2, r3, #17
 800147e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001480:	4313      	orrs	r3, r2
 8001482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001486:	663b      	str	r3, [r7, #96]	; 0x60
 8001488:	e00d      	b.n	80014a6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001492:	f043 0220 	orr.w	r2, r3, #32
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	f043 0201 	orr.w	r2, r3, #1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d007      	beq.n	80014be <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	4313      	orrs	r3, r2
 80014b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014ba:	4313      	orrs	r3, r2
 80014bc:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d114      	bne.n	80014f6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014da:	f023 0302 	bic.w	r3, r3, #2
 80014de:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7e1b      	ldrb	r3, [r3, #24]
 80014e4:	039a      	lsls	r2, r3, #14
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4313      	orrs	r3, r2
 80014f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014f2:	4313      	orrs	r3, r2
 80014f4:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <HAL_ADC_Init+0x320>)
 80014fe:	4013      	ands	r3, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001506:	430b      	orrs	r3, r1
 8001508:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d10c      	bne.n	800152c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	f023 010f 	bic.w	r1, r3, #15
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	1e5a      	subs	r2, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	631a      	str	r2, [r3, #48]	; 0x30
 800152a:	e007      	b.n	800153c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 020f 	bic.w	r2, r2, #15
 800153a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f023 0303 	bic.w	r3, r3, #3
 800154a:	f043 0201 	orr.w	r2, r3, #1
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	641a      	str	r2, [r3, #64]	; 0x40
 8001552:	e00a      	b.n	800156a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	f023 0312 	bic.w	r3, r3, #18
 800155c:	f043 0210 	orr.w	r2, r3, #16
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001564:	2301      	movs	r3, #1
 8001566:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800156a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800156e:	4618      	mov	r0, r3
 8001570:	3768      	adds	r7, #104	; 0x68
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000000 	.word	0x20000000
 800157c:	431bde83 	.word	0x431bde83
 8001580:	50000300 	.word	0x50000300
 8001584:	50000100 	.word	0x50000100
 8001588:	fff0c007 	.word	0xfff0c007

0800158c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f040 80b9 	bne.w	800171e <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <HAL_ADC_Start_DMA+0x2e>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e0b4      	b.n	8001724 <HAL_ADC_Start_DMA+0x198>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80015c2:	4b5a      	ldr	r3, [pc, #360]	; (800172c <HAL_ADC_Start_DMA+0x1a0>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 031f 	and.w	r3, r3, #31
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 80a0 	bne.w	8001710 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f000 fbdd 	bl	8001d90 <ADC_Enable>
 80015d6:	4603      	mov	r3, r0
 80015d8:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80015da:	7dfb      	ldrb	r3, [r7, #23]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f040 8092 	bne.w	8001706 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015ea:	f023 0301 	bic.w	r3, r3, #1
 80015ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015f6:	4b4d      	ldr	r3, [pc, #308]	; (800172c <HAL_ADC_Start_DMA+0x1a0>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 031f 	and.w	r3, r3, #31
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d004      	beq.n	800160c <HAL_ADC_Start_DMA+0x80>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800160a:	d115      	bne.n	8001638 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d027      	beq.n	8001676 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800162e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001636:	e01e      	b.n	8001676 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800164c:	d004      	beq.n	8001658 <HAL_ADC_Start_DMA+0xcc>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a37      	ldr	r2, [pc, #220]	; (8001730 <HAL_ADC_Start_DMA+0x1a4>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d10e      	bne.n	8001676 <HAL_ADC_Start_DMA+0xea>
 8001658:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d007      	beq.n	8001676 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800166e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800167e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001682:	d106      	bne.n	8001692 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001688:	f023 0206 	bic.w	r2, r3, #6
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	645a      	str	r2, [r3, #68]	; 0x44
 8001690:	e002      	b.n	8001698 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2200      	movs	r2, #0
 8001696:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a4:	4a23      	ldr	r2, [pc, #140]	; (8001734 <HAL_ADC_Start_DMA+0x1a8>)
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ac:	4a22      	ldr	r2, [pc, #136]	; (8001738 <HAL_ADC_Start_DMA+0x1ac>)
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b4:	4a21      	ldr	r2, [pc, #132]	; (800173c <HAL_ADC_Start_DMA+0x1b0>)
 80016b6:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	221c      	movs	r2, #28
 80016be:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0210 	orr.w	r2, r2, #16
 80016ce:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3340      	adds	r3, #64	; 0x40
 80016ea:	4619      	mov	r1, r3
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f000 fe4f 	bl	8002392 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0204 	orr.w	r2, r2, #4
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	e00d      	b.n	8001722 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800170e:	e008      	b.n	8001722 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800171c:	e001      	b.n	8001722 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800171e:	2302      	movs	r3, #2
 8001720:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001722:	7dfb      	ldrb	r3, [r7, #23]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	50000300 	.word	0x50000300
 8001730:	50000100 	.word	0x50000100
 8001734:	08001cc5 	.word	0x08001cc5
 8001738:	08001d3f 	.word	0x08001d3f
 800173c:	08001d5b 	.word	0x08001d5b

08001740 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001740:	b480      	push	{r7}
 8001742:	b09b      	sub	sp, #108	; 0x6c
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x22>
 800175e:	2302      	movs	r3, #2
 8001760:	e2a5      	b.n	8001cae <HAL_ADC_ConfigChannel+0x56e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	f040 8289 	bne.w	8001c8c <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b04      	cmp	r3, #4
 8001780:	d81c      	bhi.n	80017bc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	461a      	mov	r2, r3
 8001796:	231f      	movs	r3, #31
 8001798:	4093      	lsls	r3, r2
 800179a:	43db      	mvns	r3, r3
 800179c:	4019      	ands	r1, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fa00 f203 	lsl.w	r2, r0, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	631a      	str	r2, [r3, #48]	; 0x30
 80017ba:	e063      	b.n	8001884 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b09      	cmp	r3, #9
 80017c2:	d81e      	bhi.n	8001802 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	3b1e      	subs	r3, #30
 80017d8:	221f      	movs	r2, #31
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	4019      	ands	r1, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4413      	add	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	3b1e      	subs	r3, #30
 80017f4:	fa00 f203 	lsl.w	r2, r0, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001800:	e040      	b.n	8001884 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b0e      	cmp	r3, #14
 8001808:	d81e      	bhi.n	8001848 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	3b3c      	subs	r3, #60	; 0x3c
 800181e:	221f      	movs	r2, #31
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	4019      	ands	r1, r3
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	3b3c      	subs	r3, #60	; 0x3c
 800183a:	fa00 f203 	lsl.w	r2, r0, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	639a      	str	r2, [r3, #56]	; 0x38
 8001846:	e01d      	b.n	8001884 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4413      	add	r3, r2
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	3b5a      	subs	r3, #90	; 0x5a
 800185c:	221f      	movs	r2, #31
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	4019      	ands	r1, r3
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	4413      	add	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	3b5a      	subs	r3, #90	; 0x5a
 8001878:	fa00 f203 	lsl.w	r2, r0, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b00      	cmp	r3, #0
 8001890:	f040 80e5 	bne.w	8001a5e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b09      	cmp	r3, #9
 800189a:	d91c      	bls.n	80018d6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6999      	ldr	r1, [r3, #24]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	3b1e      	subs	r3, #30
 80018ae:	2207      	movs	r2, #7
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	4019      	ands	r1, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	6898      	ldr	r0, [r3, #8]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	3b1e      	subs	r3, #30
 80018c8:	fa00 f203 	lsl.w	r2, r0, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	619a      	str	r2, [r3, #24]
 80018d4:	e019      	b.n	800190a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6959      	ldr	r1, [r3, #20]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	2207      	movs	r2, #7
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	4019      	ands	r1, r3
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	6898      	ldr	r0, [r3, #8]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	08db      	lsrs	r3, r3, #3
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	3b01      	subs	r3, #1
 8001928:	2b03      	cmp	r3, #3
 800192a:	d84f      	bhi.n	80019cc <HAL_ADC_ConfigChannel+0x28c>
 800192c:	a201      	add	r2, pc, #4	; (adr r2, 8001934 <HAL_ADC_ConfigChannel+0x1f4>)
 800192e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001932:	bf00      	nop
 8001934:	08001945 	.word	0x08001945
 8001938:	08001967 	.word	0x08001967
 800193c:	08001989 	.word	0x08001989
 8001940:	080019ab 	.word	0x080019ab
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800194a:	4b9e      	ldr	r3, [pc, #632]	; (8001bc4 <HAL_ADC_ConfigChannel+0x484>)
 800194c:	4013      	ands	r3, r2
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	0691      	lsls	r1, r2, #26
 8001954:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001956:	430a      	orrs	r2, r1
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001962:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001964:	e07e      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800196c:	4b95      	ldr	r3, [pc, #596]	; (8001bc4 <HAL_ADC_ConfigChannel+0x484>)
 800196e:	4013      	ands	r3, r2
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	0691      	lsls	r1, r2, #26
 8001976:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001978:	430a      	orrs	r2, r1
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001984:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001986:	e06d      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800198e:	4b8d      	ldr	r3, [pc, #564]	; (8001bc4 <HAL_ADC_ConfigChannel+0x484>)
 8001990:	4013      	ands	r3, r2
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	0691      	lsls	r1, r2, #26
 8001998:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800199a:	430a      	orrs	r2, r1
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019a6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019a8:	e05c      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019b0:	4b84      	ldr	r3, [pc, #528]	; (8001bc4 <HAL_ADC_ConfigChannel+0x484>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	0691      	lsls	r1, r2, #26
 80019ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019bc:	430a      	orrs	r2, r1
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019c8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019ca:	e04b      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	069b      	lsls	r3, r3, #26
 80019dc:	429a      	cmp	r2, r3
 80019de:	d107      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019ee:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	069b      	lsls	r3, r3, #26
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d107      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a12:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	069b      	lsls	r3, r3, #26
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d107      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a36:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	069b      	lsls	r3, r3, #26
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d10a      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a5a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001a5c:	e001      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001a5e:	bf00      	nop
 8001a60:	e000      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001a62:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d108      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x344>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x344>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x346>
 8001a84:	2300      	movs	r3, #0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f040 810b 	bne.w	8001ca2 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d00f      	beq.n	8001ab4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	400a      	ands	r2, r1
 8001aae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001ab2:	e049      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b09      	cmp	r3, #9
 8001ad4:	d91c      	bls.n	8001b10 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6999      	ldr	r1, [r3, #24]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3b1b      	subs	r3, #27
 8001ae8:	2207      	movs	r2, #7
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	4019      	ands	r1, r3
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6898      	ldr	r0, [r3, #8]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	3b1b      	subs	r3, #27
 8001b02:	fa00 f203 	lsl.w	r2, r0, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	619a      	str	r2, [r3, #24]
 8001b0e:	e01b      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6959      	ldr	r1, [r3, #20]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	2207      	movs	r2, #7
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	4019      	ands	r1, r3
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	6898      	ldr	r0, [r3, #8]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	4613      	mov	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b48:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <HAL_ADC_ConfigChannel+0x488>)
 8001b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b10      	cmp	r3, #16
 8001b52:	d105      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d015      	beq.n	8001b8c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b64:	2b11      	cmp	r3, #17
 8001b66:	d105      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00b      	beq.n	8001b8c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b78:	2b12      	cmp	r3, #18
 8001b7a:	f040 8092 	bne.w	8001ca2 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f040 808b 	bne.w	8001ca2 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b94:	d102      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x45c>
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_ADC_ConfigChannel+0x48c>)
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	e002      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x462>
 8001b9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ba0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d10f      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x490>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d108      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x490>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e007      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x492>
 8001bc2:	bf00      	nop
 8001bc4:	83fff000 	.word	0x83fff000
 8001bc8:	50000300 	.word	0x50000300
 8001bcc:	50000100 	.word	0x50000100
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d150      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bd6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d010      	beq.n	8001bfe <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d107      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x4b8>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x4b8>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x4ba>
 8001bf8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d13c      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b10      	cmp	r3, #16
 8001c04:	d11d      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x502>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c0e:	d118      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c1a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <HAL_ADC_ConfigChannel+0x57c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a27      	ldr	r2, [pc, #156]	; (8001cc0 <HAL_ADC_ConfigChannel+0x580>)
 8001c22:	fba2 2303 	umull	r2, r3, r2, r3
 8001c26:	0c9a      	lsrs	r2, r3, #18
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c32:	e002      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f9      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c40:	e02e      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b11      	cmp	r3, #17
 8001c48:	d10b      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x522>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c52:	d106      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c5e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c60:	e01e      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b12      	cmp	r3, #18
 8001c68:	d11a      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c74:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c76:	e013      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f043 0220 	orr.w	r2, r3, #32
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c8a:	e00a      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f043 0220 	orr.w	r2, r3, #32
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c9e:	e000      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ca0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001caa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	376c      	adds	r7, #108	; 0x6c
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	431bde83 	.word	0x431bde83

08001cc4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d126      	bne.n	8001d2c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d115      	bne.n	8001d24 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d111      	bne.n	8001d24 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d105      	bne.n	8001d24 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	f043 0201 	orr.w	r2, r3, #1
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f7ff fa81 	bl	800122c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001d2a:	e004      	b.n	8001d36 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	4798      	blx	r3
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f7ff fa77 	bl	8001240 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b084      	sub	sp, #16
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d78:	f043 0204 	orr.w	r2, r3, #4
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f7ff fa67 	bl	8001254 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d108      	bne.n	8001dbc <ADC_Enable+0x2c>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <ADC_Enable+0x2c>
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <ADC_Enable+0x2e>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d13c      	bne.n	8001e3c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	4b1f      	ldr	r3, [pc, #124]	; (8001e48 <ADC_Enable+0xb8>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00d      	beq.n	8001dec <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f043 0210 	orr.w	r2, r3, #16
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de0:	f043 0201 	orr.w	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e028      	b.n	8001e3e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001dfc:	f7ff fa0a 	bl	8001214 <HAL_GetTick>
 8001e00:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e02:	e014      	b.n	8001e2e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e04:	f7ff fa06 	bl	8001214 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d90d      	bls.n	8001e2e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f043 0210 	orr.w	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e007      	b.n	8001e3e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d1e3      	bne.n	8001e04 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	8000003f 	.word	0x8000003f

08001e4c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d108      	bne.n	8001e78 <ADC_Disable+0x2c>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <ADC_Disable+0x2c>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <ADC_Disable+0x2e>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d040      	beq.n	8001f00 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 030d 	and.w	r3, r3, #13
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d10f      	bne.n	8001eac <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0202 	orr.w	r2, r2, #2
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001ea4:	f7ff f9b6 	bl	8001214 <HAL_GetTick>
 8001ea8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001eaa:	e022      	b.n	8001ef2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f043 0210 	orr.w	r2, r3, #16
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebc:	f043 0201 	orr.w	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e01c      	b.n	8001f02 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ec8:	f7ff f9a4 	bl	8001214 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d90d      	bls.n	8001ef2 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f043 0210 	orr.w	r2, r3, #16
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f043 0201 	orr.w	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e007      	b.n	8001f02 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d0e3      	beq.n	8001ec8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3e:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	60d3      	str	r3, [r2, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <__NVIC_GetPriorityGrouping+0x18>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	f003 0307 	and.w	r3, r3, #7
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0b      	blt.n	8001f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	4907      	ldr	r1, [pc, #28]	; (8001fa8 <__NVIC_EnableIRQ+0x38>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	; (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	; (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
         );
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002078:	d301      	bcc.n	800207e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207a:	2301      	movs	r3, #1
 800207c:	e00f      	b.n	800209e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <SysTick_Config+0x40>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002086:	210f      	movs	r1, #15
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f7ff ff8e 	bl	8001fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <SysTick_Config+0x40>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002096:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <SysTick_Config+0x40>)
 8002098:	2207      	movs	r2, #7
 800209a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	e000e010 	.word	0xe000e010

080020ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff29 	bl	8001f0c <__NVIC_SetPriorityGrouping>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d4:	f7ff ff3e 	bl	8001f54 <__NVIC_GetPriorityGrouping>
 80020d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7ff ff8e 	bl	8002000 <NVIC_EncodePriority>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff5d 	bl	8001fac <__NVIC_SetPriority>
}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff31 	bl	8001f70 <__NVIC_EnableIRQ>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffa2 	bl	8002068 <SysTick_Config>
 8002124:	4603      	mov	r3, r0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e054      	b.n	80021ec <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7f5b      	ldrb	r3, [r3, #29]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d105      	bne.n	8002158 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe f95a 	bl	800040c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	791b      	ldrb	r3, [r3, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10c      	bne.n	8002180 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a22      	ldr	r2, [pc, #136]	; (80021f4 <HAL_CRC_Init+0xc4>)
 800216c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0218 	bic.w	r2, r2, #24
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	e00c      	b.n	800219a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6899      	ldr	r1, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	461a      	mov	r2, r3
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f834 	bl	80021f8 <HAL_CRCEx_Polynomial_Set>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e028      	b.n	80021ec <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	795b      	ldrb	r3, [r3, #5]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d105      	bne.n	80021ae <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f04f 32ff 	mov.w	r2, #4294967295
 80021aa:	611a      	str	r2, [r3, #16]
 80021ac:	e004      	b.n	80021b8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6912      	ldr	r2, [r2, #16]
 80021b6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699a      	ldr	r2, [r3, #24]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	04c11db7 	.word	0x04c11db7

080021f8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002208:	231f      	movs	r3, #31
 800220a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800220c:	bf00      	nop
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1e5a      	subs	r2, r3, #1
 8002212:	613a      	str	r2, [r7, #16]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d009      	beq.n	800222c <HAL_CRCEx_Polynomial_Set+0x34>
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b18      	cmp	r3, #24
 8002230:	d846      	bhi.n	80022c0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002232:	a201      	add	r2, pc, #4	; (adr r2, 8002238 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002238:	080022c7 	.word	0x080022c7
 800223c:	080022c1 	.word	0x080022c1
 8002240:	080022c1 	.word	0x080022c1
 8002244:	080022c1 	.word	0x080022c1
 8002248:	080022c1 	.word	0x080022c1
 800224c:	080022c1 	.word	0x080022c1
 8002250:	080022c1 	.word	0x080022c1
 8002254:	080022c1 	.word	0x080022c1
 8002258:	080022b5 	.word	0x080022b5
 800225c:	080022c1 	.word	0x080022c1
 8002260:	080022c1 	.word	0x080022c1
 8002264:	080022c1 	.word	0x080022c1
 8002268:	080022c1 	.word	0x080022c1
 800226c:	080022c1 	.word	0x080022c1
 8002270:	080022c1 	.word	0x080022c1
 8002274:	080022c1 	.word	0x080022c1
 8002278:	080022a9 	.word	0x080022a9
 800227c:	080022c1 	.word	0x080022c1
 8002280:	080022c1 	.word	0x080022c1
 8002284:	080022c1 	.word	0x080022c1
 8002288:	080022c1 	.word	0x080022c1
 800228c:	080022c1 	.word	0x080022c1
 8002290:	080022c1 	.word	0x080022c1
 8002294:	080022c1 	.word	0x080022c1
 8002298:	0800229d 	.word	0x0800229d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d913      	bls.n	80022ca <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80022a6:	e010      	b.n	80022ca <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	2b07      	cmp	r3, #7
 80022ac:	d90f      	bls.n	80022ce <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80022b2:	e00c      	b.n	80022ce <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b0f      	cmp	r3, #15
 80022b8:	d90b      	bls.n	80022d2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80022be:	e008      	b.n	80022d2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	75fb      	strb	r3, [r7, #23]
      break;
 80022c4:	e006      	b.n	80022d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022c6:	bf00      	nop
 80022c8:	e004      	b.n	80022d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022ca:	bf00      	nop
 80022cc:	e002      	b.n	80022d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022ce:	bf00      	nop
 80022d0:	e000      	b.n	80022d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022d2:	bf00      	nop
  }
  if (status == HAL_OK)
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10d      	bne.n	80022f6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f023 0118 	bic.w	r1, r3, #24
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80022f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	371c      	adds	r7, #28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e037      	b.n	800238a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2202      	movs	r2, #2
 800231e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002330:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002334:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800233e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002356:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f9b7 	bl	80026e0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}  
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_DMA_Start_IT+0x20>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e04a      	b.n	8002448 <HAL_DMA_Start_IT+0xb6>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d13a      	bne.n	800243a <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0201 	bic.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	68b9      	ldr	r1, [r7, #8]
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 f94b 	bl	8002684 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 020e 	orr.w	r2, r2, #14
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	e00f      	b.n	8002428 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 020a 	orr.w	r2, r2, #10
 8002416:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0204 	bic.w	r2, r2, #4
 8002426:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	e005      	b.n	8002446 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002442:	2302      	movs	r3, #2
 8002444:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002446:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800245e:	2b02      	cmp	r3, #2
 8002460:	d008      	beq.n	8002474 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2204      	movs	r2, #4
 8002466:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e020      	b.n	80024b6 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 020e 	bic.w	r2, r2, #14
 8002482:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249c:	2101      	movs	r1, #1
 800249e:	fa01 f202 	lsl.w	r2, r1, r2
 80024a2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b084      	sub	sp, #16
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d005      	beq.n	80024e4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2204      	movs	r2, #4
 80024dc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
 80024e2:	e027      	b.n	8002534 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 020e 	bic.w	r2, r2, #14
 80024f2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250c:	2101      	movs	r1, #1
 800250e:	fa01 f202 	lsl.w	r2, r1, r2
 8002512:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	4798      	blx	r3
    } 
  }
  return status;
 8002534:	7bfb      	ldrb	r3, [r7, #15]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b084      	sub	sp, #16
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2204      	movs	r2, #4
 800255c:	409a      	lsls	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4013      	ands	r3, r2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d024      	beq.n	80025b0 <HAL_DMA_IRQHandler+0x72>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d01f      	beq.n	80025b0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b00      	cmp	r3, #0
 800257c:	d107      	bne.n	800258e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0204 	bic.w	r2, r2, #4
 800258c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002596:	2104      	movs	r1, #4
 8002598:	fa01 f202 	lsl.w	r2, r1, r2
 800259c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d06a      	beq.n	800267c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80025ae:	e065      	b.n	800267c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	2202      	movs	r2, #2
 80025b6:	409a      	lsls	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d02c      	beq.n	800261a <HAL_DMA_IRQHandler+0xdc>
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d027      	beq.n	800261a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 020a 	bic.w	r2, r2, #10
 80025e6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f8:	2102      	movs	r1, #2
 80025fa:	fa01 f202 	lsl.w	r2, r1, r2
 80025fe:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	2b00      	cmp	r3, #0
 800260e:	d035      	beq.n	800267c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002618:	e030      	b.n	800267c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	2208      	movs	r2, #8
 8002620:	409a      	lsls	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4013      	ands	r3, r2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d028      	beq.n	800267c <HAL_DMA_IRQHandler+0x13e>
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d023      	beq.n	800267c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 020e 	bic.w	r2, r2, #14
 8002642:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	2101      	movs	r1, #1
 800264e:	fa01 f202 	lsl.w	r2, r1, r2
 8002652:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	2b00      	cmp	r3, #0
 8002670:	d004      	beq.n	800267c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	4798      	blx	r3
    }
  }
}  
 800267a:	e7ff      	b.n	800267c <HAL_DMA_IRQHandler+0x13e>
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269a:	2101      	movs	r1, #1
 800269c:	fa01 f202 	lsl.w	r2, r1, r2
 80026a0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d108      	bne.n	80026c4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026c2:	e007      	b.n	80026d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	60da      	str	r2, [r3, #12]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <DMA_CalcBaseAndBitshift+0x34>)
 80026f0:	4413      	add	r3, r2
 80026f2:	4a09      	ldr	r2, [pc, #36]	; (8002718 <DMA_CalcBaseAndBitshift+0x38>)
 80026f4:	fba2 2303 	umull	r2, r3, r2, r3
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	009a      	lsls	r2, r3, #2
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a06      	ldr	r2, [pc, #24]	; (800271c <DMA_CalcBaseAndBitshift+0x3c>)
 8002704:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	bffdfff8 	.word	0xbffdfff8
 8002718:	cccccccd 	.word	0xcccccccd
 800271c:	40020000 	.word	0x40020000

08002720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800272e:	e14e      	b.n	80029ce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	4013      	ands	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 8140 	beq.w	80029c8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d00b      	beq.n	8002768 <HAL_GPIO_Init+0x48>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d007      	beq.n	8002768 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800275c:	2b11      	cmp	r3, #17
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b12      	cmp	r3, #18
 8002766:	d130      	bne.n	80027ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800279e:	2201      	movs	r2, #1
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4013      	ands	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	f003 0201 	and.w	r2, r3, #1
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	2203      	movs	r2, #3
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0xea>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b12      	cmp	r3, #18
 8002808:	d123      	bne.n	8002852 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	08da      	lsrs	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3208      	adds	r2, #8
 8002812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	220f      	movs	r2, #15
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4013      	ands	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	08da      	lsrs	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3208      	adds	r2, #8
 800284c:	6939      	ldr	r1, [r7, #16]
 800284e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	2203      	movs	r2, #3
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 0203 	and.w	r2, r3, #3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 809a 	beq.w	80029c8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002894:	4b55      	ldr	r3, [pc, #340]	; (80029ec <HAL_GPIO_Init+0x2cc>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	4a54      	ldr	r2, [pc, #336]	; (80029ec <HAL_GPIO_Init+0x2cc>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6193      	str	r3, [r2, #24]
 80028a0:	4b52      	ldr	r3, [pc, #328]	; (80029ec <HAL_GPIO_Init+0x2cc>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028ac:	4a50      	ldr	r2, [pc, #320]	; (80029f0 <HAL_GPIO_Init+0x2d0>)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	3302      	adds	r3, #2
 80028b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	220f      	movs	r2, #15
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028d6:	d013      	beq.n	8002900 <HAL_GPIO_Init+0x1e0>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a46      	ldr	r2, [pc, #280]	; (80029f4 <HAL_GPIO_Init+0x2d4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00d      	beq.n	80028fc <HAL_GPIO_Init+0x1dc>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a45      	ldr	r2, [pc, #276]	; (80029f8 <HAL_GPIO_Init+0x2d8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d007      	beq.n	80028f8 <HAL_GPIO_Init+0x1d8>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a44      	ldr	r2, [pc, #272]	; (80029fc <HAL_GPIO_Init+0x2dc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d101      	bne.n	80028f4 <HAL_GPIO_Init+0x1d4>
 80028f0:	2303      	movs	r3, #3
 80028f2:	e006      	b.n	8002902 <HAL_GPIO_Init+0x1e2>
 80028f4:	2305      	movs	r3, #5
 80028f6:	e004      	b.n	8002902 <HAL_GPIO_Init+0x1e2>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e002      	b.n	8002902 <HAL_GPIO_Init+0x1e2>
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <HAL_GPIO_Init+0x1e2>
 8002900:	2300      	movs	r3, #0
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	f002 0203 	and.w	r2, r2, #3
 8002908:	0092      	lsls	r2, r2, #2
 800290a:	4093      	lsls	r3, r2
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002912:	4937      	ldr	r1, [pc, #220]	; (80029f0 <HAL_GPIO_Init+0x2d0>)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	3302      	adds	r3, #2
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002920:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <HAL_GPIO_Init+0x2e0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	43db      	mvns	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002944:	4a2e      	ldr	r2, [pc, #184]	; (8002a00 <HAL_GPIO_Init+0x2e0>)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800294a:	4b2d      	ldr	r3, [pc, #180]	; (8002a00 <HAL_GPIO_Init+0x2e0>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	43db      	mvns	r3, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800296e:	4a24      	ldr	r2, [pc, #144]	; (8002a00 <HAL_GPIO_Init+0x2e0>)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002974:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <HAL_GPIO_Init+0x2e0>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	43db      	mvns	r3, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002998:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <HAL_GPIO_Init+0x2e0>)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800299e:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <HAL_GPIO_Init+0x2e0>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029c2:	4a0f      	ldr	r2, [pc, #60]	; (8002a00 <HAL_GPIO_Init+0x2e0>)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	3301      	adds	r3, #1
 80029cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f47f aea9 	bne.w	8002730 <HAL_GPIO_Init+0x10>
  }
}
 80029de:	bf00      	nop
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40010000 	.word	0x40010000
 80029f4:	48000400 	.word	0x48000400
 80029f8:	48000800 	.word	0x48000800
 80029fc:	48000c00 	.word	0x48000c00
 8002a00:	40010400 	.word	0x40010400

08002a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	807b      	strh	r3, [r7, #2]
 8002a10:	4613      	mov	r3, r2
 8002a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a14:	787b      	ldrb	r3, [r7, #1]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a1a:	887a      	ldrh	r2, [r7, #2]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a20:	e002      	b.n	8002a28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a22:	887a      	ldrh	r2, [r7, #2]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d006      	beq.n	8002a58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a4a:	4a05      	ldr	r2, [pc, #20]	; (8002a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f004 fad4 	bl	8007000 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40010400 	.word	0x40010400

08002a64 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e038      	b.n	8002ae8 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002a7e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f245 5255 	movw	r2, #21845	; 0x5555
 8002a88:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6852      	ldr	r2, [r2, #4]
 8002a92:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6892      	ldr	r2, [r2, #8]
 8002a9c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002a9e:	f7fe fbb9 	bl	8001214 <HAL_GetTick>
 8002aa2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8002aa4:	e008      	b.n	8002ab8 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002aa6:	f7fe fbb5 	bl	8001214 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b26      	cmp	r3, #38	; 0x26
 8002ab2:	d901      	bls.n	8002ab8 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e017      	b.n	8002ae8 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f1      	bne.n	8002aa6 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d005      	beq.n	8002adc <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	68d2      	ldr	r2, [r2, #12]
 8002ad8:	611a      	str	r2, [r3, #16]
 8002ada:	e004      	b.n	8002ae6 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002ae4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002b00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	1d3b      	adds	r3, r7, #4
 8002b1a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b1c:	1d3b      	adds	r3, r7, #4
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f000 bef4 	b.w	8003912 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 816a 	beq.w	8002e0e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b3a:	4bb3      	ldr	r3, [pc, #716]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d00c      	beq.n	8002b60 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b46:	4bb0      	ldr	r3, [pc, #704]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d159      	bne.n	8002c06 <HAL_RCC_OscConfig+0xf6>
 8002b52:	4bad      	ldr	r3, [pc, #692]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5e:	d152      	bne.n	8002c06 <HAL_RCC_OscConfig+0xf6>
 8002b60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b64:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b74:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b78:	fab3 f383 	clz	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d102      	bne.n	8002b92 <HAL_RCC_OscConfig+0x82>
 8002b8c:	4b9e      	ldr	r3, [pc, #632]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	e015      	b.n	8002bbe <HAL_RCC_OscConfig+0xae>
 8002b92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b96:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002ba6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002baa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002bae:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002bba:	4b93      	ldr	r3, [pc, #588]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bc2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002bc6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002bca:	fa92 f2a2 	rbit	r2, r2
 8002bce:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002bd2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002bd6:	fab2 f282 	clz	r2, r2
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	f042 0220 	orr.w	r2, r2, #32
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	f002 021f 	and.w	r2, r2, #31
 8002be6:	2101      	movs	r1, #1
 8002be8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 810c 	beq.w	8002e0c <HAL_RCC_OscConfig+0x2fc>
 8002bf4:	1d3b      	adds	r3, r7, #4
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f040 8106 	bne.w	8002e0c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	f000 be86 	b.w	8003912 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c06:	1d3b      	adds	r3, r7, #4
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c10:	d106      	bne.n	8002c20 <HAL_RCC_OscConfig+0x110>
 8002c12:	4b7d      	ldr	r3, [pc, #500]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a7c      	ldr	r2, [pc, #496]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e030      	b.n	8002c82 <HAL_RCC_OscConfig+0x172>
 8002c20:	1d3b      	adds	r3, r7, #4
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x134>
 8002c2a:	4b77      	ldr	r3, [pc, #476]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a76      	ldr	r2, [pc, #472]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b74      	ldr	r3, [pc, #464]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a73      	ldr	r2, [pc, #460]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e01e      	b.n	8002c82 <HAL_RCC_OscConfig+0x172>
 8002c44:	1d3b      	adds	r3, r7, #4
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c4e:	d10c      	bne.n	8002c6a <HAL_RCC_OscConfig+0x15a>
 8002c50:	4b6d      	ldr	r3, [pc, #436]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a6c      	ldr	r2, [pc, #432]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002c56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	4b6a      	ldr	r3, [pc, #424]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a69      	ldr	r2, [pc, #420]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	e00b      	b.n	8002c82 <HAL_RCC_OscConfig+0x172>
 8002c6a:	4b67      	ldr	r3, [pc, #412]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a66      	ldr	r2, [pc, #408]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	4b64      	ldr	r3, [pc, #400]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a63      	ldr	r2, [pc, #396]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002c7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c80:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c82:	4b61      	ldr	r3, [pc, #388]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	f023 020f 	bic.w	r2, r3, #15
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	495d      	ldr	r1, [pc, #372]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c96:	1d3b      	adds	r3, r7, #4
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d059      	beq.n	8002d54 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fab8 	bl	8001214 <HAL_GetTick>
 8002ca4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002caa:	f7fe fab3 	bl	8001214 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d902      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	f000 be29 	b.w	8003912 <HAL_RCC_OscConfig+0xe02>
 8002cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cc4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002cd4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd8:	fab3 f383 	clz	r3, r3
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d102      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x1e2>
 8002cec:	4b46      	ldr	r3, [pc, #280]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	e015      	b.n	8002d1e <HAL_RCC_OscConfig+0x20e>
 8002cf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cf6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d0a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d0e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002d1a:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d22:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002d26:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d2a:	fa92 f2a2 	rbit	r2, r2
 8002d2e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002d32:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002d36:	fab2 f282 	clz	r2, r2
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	f042 0220 	orr.w	r2, r2, #32
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	f002 021f 	and.w	r2, r2, #31
 8002d46:	2101      	movs	r1, #1
 8002d48:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0ab      	beq.n	8002caa <HAL_RCC_OscConfig+0x19a>
 8002d52:	e05c      	b.n	8002e0e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fe fa5e 	bl	8001214 <HAL_GetTick>
 8002d58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d5e:	f7fe fa59 	bl	8001214 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d902      	bls.n	8002d74 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	f000 bdcf 	b.w	8003912 <HAL_RCC_OscConfig+0xe02>
 8002d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d78:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002d88:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8c:	fab3 f383 	clz	r3, r3
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d102      	bne.n	8002da6 <HAL_RCC_OscConfig+0x296>
 8002da0:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	e015      	b.n	8002dd2 <HAL_RCC_OscConfig+0x2c2>
 8002da6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002daa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dae:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002dba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dbe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002dc2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002dce:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <HAL_RCC_OscConfig+0x2f8>)
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dd6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002dda:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002dde:	fa92 f2a2 	rbit	r2, r2
 8002de2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002de6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002dea:	fab2 f282 	clz	r2, r2
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	f042 0220 	orr.w	r2, r2, #32
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	f002 021f 	and.w	r2, r2, #31
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1ab      	bne.n	8002d5e <HAL_RCC_OscConfig+0x24e>
 8002e06:	e002      	b.n	8002e0e <HAL_RCC_OscConfig+0x2fe>
 8002e08:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0e:	1d3b      	adds	r3, r7, #4
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 816f 	beq.w	80030fc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e1e:	4bd0      	ldr	r3, [pc, #832]	; (8003160 <HAL_RCC_OscConfig+0x650>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e2a:	4bcd      	ldr	r3, [pc, #820]	; (8003160 <HAL_RCC_OscConfig+0x650>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d16c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x400>
 8002e36:	4bca      	ldr	r3, [pc, #808]	; (8003160 <HAL_RCC_OscConfig+0x650>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d166      	bne.n	8002f10 <HAL_RCC_OscConfig+0x400>
 8002e42:	2302      	movs	r3, #2
 8002e44:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002e54:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e58:	fab3 f383 	clz	r3, r3
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d102      	bne.n	8002e72 <HAL_RCC_OscConfig+0x362>
 8002e6c:	4bbc      	ldr	r3, [pc, #752]	; (8003160 <HAL_RCC_OscConfig+0x650>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	e013      	b.n	8002e9a <HAL_RCC_OscConfig+0x38a>
 8002e72:	2302      	movs	r3, #2
 8002e74:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e84:	2302      	movs	r3, #2
 8002e86:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e8a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002e96:	4bb2      	ldr	r3, [pc, #712]	; (8003160 <HAL_RCC_OscConfig+0x650>)
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002ea0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ea4:	fa92 f2a2 	rbit	r2, r2
 8002ea8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002eac:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002eb0:	fab2 f282 	clz	r2, r2
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	f042 0220 	orr.w	r2, r2, #32
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	f002 021f 	and.w	r2, r2, #31
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <HAL_RCC_OscConfig+0x3cc>
 8002ecc:	1d3b      	adds	r3, r7, #4
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f000 bd1b 	b.w	8003912 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002edc:	4ba0      	ldr	r3, [pc, #640]	; (8003160 <HAL_RCC_OscConfig+0x650>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee4:	1d3b      	adds	r3, r7, #4
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	21f8      	movs	r1, #248	; 0xf8
 8002eec:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002ef4:	fa91 f1a1 	rbit	r1, r1
 8002ef8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002efc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002f00:	fab1 f181 	clz	r1, r1
 8002f04:	b2c9      	uxtb	r1, r1
 8002f06:	408b      	lsls	r3, r1
 8002f08:	4995      	ldr	r1, [pc, #596]	; (8003160 <HAL_RCC_OscConfig+0x650>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0e:	e0f5      	b.n	80030fc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 8085 	beq.w	8003026 <HAL_RCC_OscConfig+0x516>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002f2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f32:	fab3 f383 	clz	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	461a      	mov	r2, r3
 8002f44:	2301      	movs	r3, #1
 8002f46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fe f964 	bl	8001214 <HAL_GetTick>
 8002f4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f52:	f7fe f95f 	bl	8001214 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d902      	bls.n	8002f68 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	f000 bcd5 	b.w	8003912 <HAL_RCC_OscConfig+0xe02>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002f7a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d102      	bne.n	8002f98 <HAL_RCC_OscConfig+0x488>
 8002f92:	4b73      	ldr	r3, [pc, #460]	; (8003160 <HAL_RCC_OscConfig+0x650>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	e013      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4b0>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002faa:	2302      	movs	r3, #2
 8002fac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002fb0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002fbc:	4b68      	ldr	r3, [pc, #416]	; (8003160 <HAL_RCC_OscConfig+0x650>)
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002fc6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002fca:	fa92 f2a2 	rbit	r2, r2
 8002fce:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002fd2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002fd6:	fab2 f282 	clz	r2, r2
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	f042 0220 	orr.w	r2, r2, #32
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	f002 021f 	and.w	r2, r2, #31
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0af      	beq.n	8002f52 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff2:	4b5b      	ldr	r3, [pc, #364]	; (8003160 <HAL_RCC_OscConfig+0x650>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	21f8      	movs	r1, #248	; 0xf8
 8003002:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800300a:	fa91 f1a1 	rbit	r1, r1
 800300e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003012:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003016:	fab1 f181 	clz	r1, r1
 800301a:	b2c9      	uxtb	r1, r1
 800301c:	408b      	lsls	r3, r1
 800301e:	4950      	ldr	r1, [pc, #320]	; (8003160 <HAL_RCC_OscConfig+0x650>)
 8003020:	4313      	orrs	r3, r2
 8003022:	600b      	str	r3, [r1, #0]
 8003024:	e06a      	b.n	80030fc <HAL_RCC_OscConfig+0x5ec>
 8003026:	2301      	movs	r3, #1
 8003028:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003030:	fa93 f3a3 	rbit	r3, r3
 8003034:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003038:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003046:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	461a      	mov	r2, r3
 800304e:	2300      	movs	r3, #0
 8003050:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003052:	f7fe f8df 	bl	8001214 <HAL_GetTick>
 8003056:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305a:	e00a      	b.n	8003072 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800305c:	f7fe f8da 	bl	8001214 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d902      	bls.n	8003072 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	f000 bc50 	b.w	8003912 <HAL_RCC_OscConfig+0xe02>
 8003072:	2302      	movs	r3, #2
 8003074:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800307c:	fa93 f3a3 	rbit	r3, r3
 8003080:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003088:	fab3 f383 	clz	r3, r3
 800308c:	b2db      	uxtb	r3, r3
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b01      	cmp	r3, #1
 800309a:	d102      	bne.n	80030a2 <HAL_RCC_OscConfig+0x592>
 800309c:	4b30      	ldr	r3, [pc, #192]	; (8003160 <HAL_RCC_OscConfig+0x650>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	e013      	b.n	80030ca <HAL_RCC_OscConfig+0x5ba>
 80030a2:	2302      	movs	r3, #2
 80030a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80030ac:	fa93 f3a3 	rbit	r3, r3
 80030b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80030b4:	2302      	movs	r3, #2
 80030b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80030ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80030c6:	4b26      	ldr	r3, [pc, #152]	; (8003160 <HAL_RCC_OscConfig+0x650>)
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	2202      	movs	r2, #2
 80030cc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80030d0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80030d4:	fa92 f2a2 	rbit	r2, r2
 80030d8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80030dc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80030e0:	fab2 f282 	clz	r2, r2
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	f042 0220 	orr.w	r2, r2, #32
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	f002 021f 	and.w	r2, r2, #31
 80030f0:	2101      	movs	r1, #1
 80030f2:	fa01 f202 	lsl.w	r2, r1, r2
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1af      	bne.n	800305c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030fc:	1d3b      	adds	r3, r7, #4
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80da 	beq.w	80032c0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800310c:	1d3b      	adds	r3, r7, #4
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d069      	beq.n	80031ea <HAL_RCC_OscConfig+0x6da>
 8003116:	2301      	movs	r3, #1
 8003118:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003120:	fa93 f3a3 	rbit	r3, r3
 8003124:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	461a      	mov	r2, r3
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_OscConfig+0x654>)
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	461a      	mov	r2, r3
 800313c:	2301      	movs	r3, #1
 800313e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003140:	f7fe f868 	bl	8001214 <HAL_GetTick>
 8003144:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003148:	e00e      	b.n	8003168 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800314a:	f7fe f863 	bl	8001214 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d906      	bls.n	8003168 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e3d9      	b.n	8003912 <HAL_RCC_OscConfig+0xe02>
 800315e:	bf00      	nop
 8003160:	40021000 	.word	0x40021000
 8003164:	10908120 	.word	0x10908120
 8003168:	2302      	movs	r3, #2
 800316a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003172:	fa93 f3a3 	rbit	r3, r3
 8003176:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800317a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800317e:	2202      	movs	r2, #2
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	fa93 f2a3 	rbit	r2, r3
 800318c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003196:	2202      	movs	r2, #2
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	fa93 f2a3 	rbit	r2, r3
 80031a4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80031a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031aa:	4ba5      	ldr	r3, [pc, #660]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 80031ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80031b2:	2102      	movs	r1, #2
 80031b4:	6019      	str	r1, [r3, #0]
 80031b6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	fa93 f1a3 	rbit	r1, r3
 80031c0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80031c4:	6019      	str	r1, [r3, #0]
  return result;
 80031c6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	fab3 f383 	clz	r3, r3
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	2101      	movs	r1, #1
 80031de:	fa01 f303 	lsl.w	r3, r1, r3
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0b0      	beq.n	800314a <HAL_RCC_OscConfig+0x63a>
 80031e8:	e06a      	b.n	80032c0 <HAL_RCC_OscConfig+0x7b0>
 80031ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80031ee:	2201      	movs	r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	fa93 f2a3 	rbit	r2, r3
 80031fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003200:	601a      	str	r2, [r3, #0]
  return result;
 8003202:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003206:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003208:	fab3 f383 	clz	r3, r3
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	4b8c      	ldr	r3, [pc, #560]	; (8003444 <HAL_RCC_OscConfig+0x934>)
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	461a      	mov	r2, r3
 8003218:	2300      	movs	r3, #0
 800321a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321c:	f7fd fffa 	bl	8001214 <HAL_GetTick>
 8003220:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003224:	e009      	b.n	800323a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003226:	f7fd fff5 	bl	8001214 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e36b      	b.n	8003912 <HAL_RCC_OscConfig+0xe02>
 800323a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800323e:	2202      	movs	r2, #2
 8003240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	fa93 f2a3 	rbit	r2, r3
 800324c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003256:	2202      	movs	r2, #2
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	fa93 f2a3 	rbit	r2, r3
 8003264:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800326e:	2202      	movs	r2, #2
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	fa93 f2a3 	rbit	r2, r3
 800327c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003280:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003282:	4b6f      	ldr	r3, [pc, #444]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 8003284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003286:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800328a:	2102      	movs	r1, #2
 800328c:	6019      	str	r1, [r3, #0]
 800328e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	fa93 f1a3 	rbit	r1, r3
 8003298:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800329c:	6019      	str	r1, [r3, #0]
  return result;
 800329e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	fab3 f383 	clz	r3, r3
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	2101      	movs	r1, #1
 80032b6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1b2      	bne.n	8003226 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c0:	1d3b      	adds	r3, r7, #4
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 8158 	beq.w	8003580 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d0:	2300      	movs	r3, #0
 80032d2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d6:	4b5a      	ldr	r3, [pc, #360]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d112      	bne.n	8003308 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e2:	4b57      	ldr	r3, [pc, #348]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	4a56      	ldr	r2, [pc, #344]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ec:	61d3      	str	r3, [r2, #28]
 80032ee:	4b54      	ldr	r3, [pc, #336]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80032f6:	f107 0308 	add.w	r3, r7, #8
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	f107 0308 	add.w	r3, r7, #8
 8003300:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003302:	2301      	movs	r3, #1
 8003304:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003308:	4b4f      	ldr	r3, [pc, #316]	; (8003448 <HAL_RCC_OscConfig+0x938>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003310:	2b00      	cmp	r3, #0
 8003312:	d11a      	bne.n	800334a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003314:	4b4c      	ldr	r3, [pc, #304]	; (8003448 <HAL_RCC_OscConfig+0x938>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a4b      	ldr	r2, [pc, #300]	; (8003448 <HAL_RCC_OscConfig+0x938>)
 800331a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003320:	f7fd ff78 	bl	8001214 <HAL_GetTick>
 8003324:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003328:	e009      	b.n	800333e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800332a:	f7fd ff73 	bl	8001214 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	; 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e2e9      	b.n	8003912 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333e:	4b42      	ldr	r3, [pc, #264]	; (8003448 <HAL_RCC_OscConfig+0x938>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0ef      	beq.n	800332a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800334a:	1d3b      	adds	r3, r7, #4
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d106      	bne.n	8003362 <HAL_RCC_OscConfig+0x852>
 8003354:	4b3a      	ldr	r3, [pc, #232]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	4a39      	ldr	r2, [pc, #228]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	6213      	str	r3, [r2, #32]
 8003360:	e02f      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
 8003362:	1d3b      	adds	r3, r7, #4
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10c      	bne.n	8003386 <HAL_RCC_OscConfig+0x876>
 800336c:	4b34      	ldr	r3, [pc, #208]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	4a33      	ldr	r2, [pc, #204]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 8003372:	f023 0301 	bic.w	r3, r3, #1
 8003376:	6213      	str	r3, [r2, #32]
 8003378:	4b31      	ldr	r3, [pc, #196]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	4a30      	ldr	r2, [pc, #192]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 800337e:	f023 0304 	bic.w	r3, r3, #4
 8003382:	6213      	str	r3, [r2, #32]
 8003384:	e01d      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
 8003386:	1d3b      	adds	r3, r7, #4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2b05      	cmp	r3, #5
 800338e:	d10c      	bne.n	80033aa <HAL_RCC_OscConfig+0x89a>
 8003390:	4b2b      	ldr	r3, [pc, #172]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	4a2a      	ldr	r2, [pc, #168]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 8003396:	f043 0304 	orr.w	r3, r3, #4
 800339a:	6213      	str	r3, [r2, #32]
 800339c:	4b28      	ldr	r3, [pc, #160]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	4a27      	ldr	r2, [pc, #156]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6213      	str	r3, [r2, #32]
 80033a8:	e00b      	b.n	80033c2 <HAL_RCC_OscConfig+0x8b2>
 80033aa:	4b25      	ldr	r3, [pc, #148]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	4a24      	ldr	r2, [pc, #144]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	6213      	str	r3, [r2, #32]
 80033b6:	4b22      	ldr	r3, [pc, #136]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	4a21      	ldr	r2, [pc, #132]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 80033bc:	f023 0304 	bic.w	r3, r3, #4
 80033c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d06b      	beq.n	80034a4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033cc:	f7fd ff22 	bl	8001214 <HAL_GetTick>
 80033d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	e00b      	b.n	80033ee <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d6:	f7fd ff1d 	bl	8001214 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e291      	b.n	8003912 <HAL_RCC_OscConfig+0xe02>
 80033ee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80033f2:	2202      	movs	r2, #2
 80033f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	fa93 f2a3 	rbit	r2, r3
 8003400:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800340a:	2202      	movs	r2, #2
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	fa93 f2a3 	rbit	r2, r3
 8003418:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800341c:	601a      	str	r2, [r3, #0]
  return result;
 800341e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003422:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003424:	fab3 f383 	clz	r3, r3
 8003428:	b2db      	uxtb	r3, r3
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f043 0302 	orr.w	r3, r3, #2
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d109      	bne.n	800344c <HAL_RCC_OscConfig+0x93c>
 8003438:	4b01      	ldr	r3, [pc, #4]	; (8003440 <HAL_RCC_OscConfig+0x930>)
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	e014      	b.n	8003468 <HAL_RCC_OscConfig+0x958>
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	10908120 	.word	0x10908120
 8003448:	40007000 	.word	0x40007000
 800344c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003450:	2202      	movs	r2, #2
 8003452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	fa93 f2a3 	rbit	r2, r3
 800345e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	4bbb      	ldr	r3, [pc, #748]	; (8003754 <HAL_RCC_OscConfig+0xc44>)
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800346c:	2102      	movs	r1, #2
 800346e:	6011      	str	r1, [r2, #0]
 8003470:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	fa92 f1a2 	rbit	r1, r2
 800347a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800347e:	6011      	str	r1, [r2, #0]
  return result;
 8003480:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	fab2 f282 	clz	r2, r2
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	f002 021f 	and.w	r2, r2, #31
 8003496:	2101      	movs	r1, #1
 8003498:	fa01 f202 	lsl.w	r2, r1, r2
 800349c:	4013      	ands	r3, r2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d099      	beq.n	80033d6 <HAL_RCC_OscConfig+0x8c6>
 80034a2:	e063      	b.n	800356c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a4:	f7fd feb6 	bl	8001214 <HAL_GetTick>
 80034a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ac:	e00b      	b.n	80034c6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ae:	f7fd feb1 	bl	8001214 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e225      	b.n	8003912 <HAL_RCC_OscConfig+0xe02>
 80034c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80034ca:	2202      	movs	r2, #2
 80034cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	fa93 f2a3 	rbit	r2, r3
 80034d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80034e2:	2202      	movs	r2, #2
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	fa93 f2a3 	rbit	r2, r3
 80034f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80034f4:	601a      	str	r2, [r3, #0]
  return result;
 80034f6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80034fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fc:	fab3 f383 	clz	r3, r3
 8003500:	b2db      	uxtb	r3, r3
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	b2db      	uxtb	r3, r3
 8003506:	f043 0302 	orr.w	r3, r3, #2
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d102      	bne.n	8003516 <HAL_RCC_OscConfig+0xa06>
 8003510:	4b90      	ldr	r3, [pc, #576]	; (8003754 <HAL_RCC_OscConfig+0xc44>)
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	e00d      	b.n	8003532 <HAL_RCC_OscConfig+0xa22>
 8003516:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800351a:	2202      	movs	r2, #2
 800351c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	fa93 f2a3 	rbit	r2, r3
 8003528:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	4b89      	ldr	r3, [pc, #548]	; (8003754 <HAL_RCC_OscConfig+0xc44>)
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003536:	2102      	movs	r1, #2
 8003538:	6011      	str	r1, [r2, #0]
 800353a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	fa92 f1a2 	rbit	r1, r2
 8003544:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003548:	6011      	str	r1, [r2, #0]
  return result;
 800354a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	fab2 f282 	clz	r2, r2
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	f002 021f 	and.w	r2, r2, #31
 8003560:	2101      	movs	r1, #1
 8003562:	fa01 f202 	lsl.w	r2, r1, r2
 8003566:	4013      	ands	r3, r2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1a0      	bne.n	80034ae <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800356c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003570:	2b01      	cmp	r3, #1
 8003572:	d105      	bne.n	8003580 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003574:	4b77      	ldr	r3, [pc, #476]	; (8003754 <HAL_RCC_OscConfig+0xc44>)
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	4a76      	ldr	r2, [pc, #472]	; (8003754 <HAL_RCC_OscConfig+0xc44>)
 800357a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003580:	1d3b      	adds	r3, r7, #4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 81c2 	beq.w	8003910 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800358c:	4b71      	ldr	r3, [pc, #452]	; (8003754 <HAL_RCC_OscConfig+0xc44>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b08      	cmp	r3, #8
 8003596:	f000 819c 	beq.w	80038d2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800359a:	1d3b      	adds	r3, r7, #4
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	f040 8114 	bne.w	80037ce <HAL_RCC_OscConfig+0xcbe>
 80035a6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80035aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	fa93 f2a3 	rbit	r2, r3
 80035ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035be:	601a      	str	r2, [r3, #0]
  return result;
 80035c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c6:	fab3 f383 	clz	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	461a      	mov	r2, r3
 80035d8:	2300      	movs	r3, #0
 80035da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035dc:	f7fd fe1a 	bl	8001214 <HAL_GetTick>
 80035e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035e4:	e009      	b.n	80035fa <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e6:	f7fd fe15 	bl	8001214 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e18b      	b.n	8003912 <HAL_RCC_OscConfig+0xe02>
 80035fa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80035fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	fa93 f2a3 	rbit	r2, r3
 800360e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003612:	601a      	str	r2, [r3, #0]
  return result;
 8003614:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003618:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800361a:	fab3 f383 	clz	r3, r3
 800361e:	b2db      	uxtb	r3, r3
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	b2db      	uxtb	r3, r3
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b01      	cmp	r3, #1
 800362c:	d102      	bne.n	8003634 <HAL_RCC_OscConfig+0xb24>
 800362e:	4b49      	ldr	r3, [pc, #292]	; (8003754 <HAL_RCC_OscConfig+0xc44>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	e01b      	b.n	800366c <HAL_RCC_OscConfig+0xb5c>
 8003634:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003638:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800363c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	fa93 f2a3 	rbit	r2, r3
 8003648:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003652:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	fa93 f2a3 	rbit	r2, r3
 8003662:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	4b3a      	ldr	r3, [pc, #232]	; (8003754 <HAL_RCC_OscConfig+0xc44>)
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003670:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003674:	6011      	str	r1, [r2, #0]
 8003676:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	fa92 f1a2 	rbit	r1, r2
 8003680:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003684:	6011      	str	r1, [r2, #0]
  return result;
 8003686:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	fab2 f282 	clz	r2, r2
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	f042 0220 	orr.w	r2, r2, #32
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	f002 021f 	and.w	r2, r2, #31
 800369c:	2101      	movs	r1, #1
 800369e:	fa01 f202 	lsl.w	r2, r1, r2
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d19e      	bne.n	80035e6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036a8:	4b2a      	ldr	r3, [pc, #168]	; (8003754 <HAL_RCC_OscConfig+0xc44>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036b0:	1d3b      	adds	r3, r7, #4
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036b6:	1d3b      	adds	r3, r7, #4
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	430b      	orrs	r3, r1
 80036be:	4925      	ldr	r1, [pc, #148]	; (8003754 <HAL_RCC_OscConfig+0xc44>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
 80036c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80036c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	fa93 f2a3 	rbit	r2, r3
 80036d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80036dc:	601a      	str	r2, [r3, #0]
  return result;
 80036de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80036e2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e4:	fab3 f383 	clz	r3, r3
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	461a      	mov	r2, r3
 80036f6:	2301      	movs	r3, #1
 80036f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fa:	f7fd fd8b 	bl	8001214 <HAL_GetTick>
 80036fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003702:	e009      	b.n	8003718 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003704:	f7fd fd86 	bl	8001214 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e0fc      	b.n	8003912 <HAL_RCC_OscConfig+0xe02>
 8003718:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800371c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	fa93 f2a3 	rbit	r2, r3
 800372c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003730:	601a      	str	r2, [r3, #0]
  return result;
 8003732:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003736:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003738:	fab3 f383 	clz	r3, r3
 800373c:	b2db      	uxtb	r3, r3
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	b2db      	uxtb	r3, r3
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b01      	cmp	r3, #1
 800374a:	d105      	bne.n	8003758 <HAL_RCC_OscConfig+0xc48>
 800374c:	4b01      	ldr	r3, [pc, #4]	; (8003754 <HAL_RCC_OscConfig+0xc44>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	e01e      	b.n	8003790 <HAL_RCC_OscConfig+0xc80>
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
 8003758:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800375c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	fa93 f2a3 	rbit	r2, r3
 800376c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003776:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	fa93 f2a3 	rbit	r2, r3
 8003786:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	4b63      	ldr	r3, [pc, #396]	; (800391c <HAL_RCC_OscConfig+0xe0c>)
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003794:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003798:	6011      	str	r1, [r2, #0]
 800379a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	fa92 f1a2 	rbit	r1, r2
 80037a4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80037a8:	6011      	str	r1, [r2, #0]
  return result;
 80037aa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	fab2 f282 	clz	r2, r2
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	f042 0220 	orr.w	r2, r2, #32
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	f002 021f 	and.w	r2, r2, #31
 80037c0:	2101      	movs	r1, #1
 80037c2:	fa01 f202 	lsl.w	r2, r1, r2
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d09b      	beq.n	8003704 <HAL_RCC_OscConfig+0xbf4>
 80037cc:	e0a0      	b.n	8003910 <HAL_RCC_OscConfig+0xe00>
 80037ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	fa93 f2a3 	rbit	r2, r3
 80037e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037e6:	601a      	str	r2, [r3, #0]
  return result;
 80037e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ee:	fab3 f383 	clz	r3, r3
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	461a      	mov	r2, r3
 8003800:	2300      	movs	r3, #0
 8003802:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003804:	f7fd fd06 	bl	8001214 <HAL_GetTick>
 8003808:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800380c:	e009      	b.n	8003822 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800380e:	f7fd fd01 	bl	8001214 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e077      	b.n	8003912 <HAL_RCC_OscConfig+0xe02>
 8003822:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003826:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800382a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	fa93 f2a3 	rbit	r2, r3
 8003836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800383a:	601a      	str	r2, [r3, #0]
  return result;
 800383c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003840:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003842:	fab3 f383 	clz	r3, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	b2db      	uxtb	r3, r3
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b01      	cmp	r3, #1
 8003854:	d102      	bne.n	800385c <HAL_RCC_OscConfig+0xd4c>
 8003856:	4b31      	ldr	r3, [pc, #196]	; (800391c <HAL_RCC_OscConfig+0xe0c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	e01b      	b.n	8003894 <HAL_RCC_OscConfig+0xd84>
 800385c:	f107 0320 	add.w	r3, r7, #32
 8003860:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003864:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	f107 0320 	add.w	r3, r7, #32
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	fa93 f2a3 	rbit	r2, r3
 8003870:	f107 031c 	add.w	r3, r7, #28
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	f107 0318 	add.w	r3, r7, #24
 800387a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	f107 0318 	add.w	r3, r7, #24
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	fa93 f2a3 	rbit	r2, r3
 800388a:	f107 0314 	add.w	r3, r7, #20
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	4b22      	ldr	r3, [pc, #136]	; (800391c <HAL_RCC_OscConfig+0xe0c>)
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	f107 0210 	add.w	r2, r7, #16
 8003898:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800389c:	6011      	str	r1, [r2, #0]
 800389e:	f107 0210 	add.w	r2, r7, #16
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	fa92 f1a2 	rbit	r1, r2
 80038a8:	f107 020c 	add.w	r2, r7, #12
 80038ac:	6011      	str	r1, [r2, #0]
  return result;
 80038ae:	f107 020c 	add.w	r2, r7, #12
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	fab2 f282 	clz	r2, r2
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	f042 0220 	orr.w	r2, r2, #32
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	f002 021f 	and.w	r2, r2, #31
 80038c4:	2101      	movs	r1, #1
 80038c6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ca:	4013      	ands	r3, r2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d19e      	bne.n	800380e <HAL_RCC_OscConfig+0xcfe>
 80038d0:	e01e      	b.n	8003910 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d2:	1d3b      	adds	r3, r7, #4
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e018      	b.n	8003912 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038e0:	4b0e      	ldr	r3, [pc, #56]	; (800391c <HAL_RCC_OscConfig+0xe0c>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038e8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038f0:	1d3b      	adds	r3, r7, #4
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d108      	bne.n	800390c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80038fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003902:	1d3b      	adds	r3, r7, #4
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40021000 	.word	0x40021000

08003920 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b09e      	sub	sp, #120	; 0x78
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e162      	b.n	8003bfe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003938:	4b90      	ldr	r3, [pc, #576]	; (8003b7c <HAL_RCC_ClockConfig+0x25c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d910      	bls.n	8003968 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003946:	4b8d      	ldr	r3, [pc, #564]	; (8003b7c <HAL_RCC_ClockConfig+0x25c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 0207 	bic.w	r2, r3, #7
 800394e:	498b      	ldr	r1, [pc, #556]	; (8003b7c <HAL_RCC_ClockConfig+0x25c>)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	4313      	orrs	r3, r2
 8003954:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003956:	4b89      	ldr	r3, [pc, #548]	; (8003b7c <HAL_RCC_ClockConfig+0x25c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e14a      	b.n	8003bfe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003974:	4b82      	ldr	r3, [pc, #520]	; (8003b80 <HAL_RCC_ClockConfig+0x260>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	497f      	ldr	r1, [pc, #508]	; (8003b80 <HAL_RCC_ClockConfig+0x260>)
 8003982:	4313      	orrs	r3, r2
 8003984:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80dc 	beq.w	8003b4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d13c      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xf6>
 800399c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039a4:	fa93 f3a3 	rbit	r3, r3
 80039a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80039aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ac:	fab3 f383 	clz	r3, r3
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d102      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xa6>
 80039c0:	4b6f      	ldr	r3, [pc, #444]	; (8003b80 <HAL_RCC_ClockConfig+0x260>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	e00f      	b.n	80039e6 <HAL_RCC_ClockConfig+0xc6>
 80039c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039ce:	fa93 f3a3 	rbit	r3, r3
 80039d2:	667b      	str	r3, [r7, #100]	; 0x64
 80039d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039d8:	663b      	str	r3, [r7, #96]	; 0x60
 80039da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039dc:	fa93 f3a3 	rbit	r3, r3
 80039e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039e2:	4b67      	ldr	r3, [pc, #412]	; (8003b80 <HAL_RCC_ClockConfig+0x260>)
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80039ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039ee:	fa92 f2a2 	rbit	r2, r2
 80039f2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80039f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039f6:	fab2 f282 	clz	r2, r2
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	f042 0220 	orr.w	r2, r2, #32
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	f002 021f 	and.w	r2, r2, #31
 8003a06:	2101      	movs	r1, #1
 8003a08:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d17b      	bne.n	8003b0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e0f3      	b.n	8003bfe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d13c      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x178>
 8003a1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a26:	fa93 f3a3 	rbit	r3, r3
 8003a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2e:	fab3 f383 	clz	r3, r3
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d102      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x128>
 8003a42:	4b4f      	ldr	r3, [pc, #316]	; (8003b80 <HAL_RCC_ClockConfig+0x260>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	e00f      	b.n	8003a68 <HAL_RCC_ClockConfig+0x148>
 8003a48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a50:	fa93 f3a3 	rbit	r3, r3
 8003a54:	647b      	str	r3, [r7, #68]	; 0x44
 8003a56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a5a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a5e:	fa93 f3a3 	rbit	r3, r3
 8003a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a64:	4b46      	ldr	r3, [pc, #280]	; (8003b80 <HAL_RCC_ClockConfig+0x260>)
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a6c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a70:	fa92 f2a2 	rbit	r2, r2
 8003a74:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a78:	fab2 f282 	clz	r2, r2
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	f042 0220 	orr.w	r2, r2, #32
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	f002 021f 	and.w	r2, r2, #31
 8003a88:	2101      	movs	r1, #1
 8003a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d13a      	bne.n	8003b0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0b2      	b.n	8003bfe <HAL_RCC_ClockConfig+0x2de>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa6:	fab3 f383 	clz	r3, r3
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	095b      	lsrs	r3, r3, #5
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d102      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x1a0>
 8003aba:	4b31      	ldr	r3, [pc, #196]	; (8003b80 <HAL_RCC_ClockConfig+0x260>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	e00d      	b.n	8003adc <HAL_RCC_ClockConfig+0x1bc>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac6:	fa93 f3a3 	rbit	r3, r3
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
 8003acc:	2302      	movs	r3, #2
 8003ace:	623b      	str	r3, [r7, #32]
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	4b29      	ldr	r3, [pc, #164]	; (8003b80 <HAL_RCC_ClockConfig+0x260>)
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	2202      	movs	r2, #2
 8003ade:	61ba      	str	r2, [r7, #24]
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	fa92 f2a2 	rbit	r2, r2
 8003ae6:	617a      	str	r2, [r7, #20]
  return result;
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	fab2 f282 	clz	r2, r2
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	f042 0220 	orr.w	r2, r2, #32
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	f002 021f 	and.w	r2, r2, #31
 8003afa:	2101      	movs	r1, #1
 8003afc:	fa01 f202 	lsl.w	r2, r1, r2
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e079      	b.n	8003bfe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b0a:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <HAL_RCC_ClockConfig+0x260>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f023 0203 	bic.w	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	491a      	ldr	r1, [pc, #104]	; (8003b80 <HAL_RCC_ClockConfig+0x260>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b1c:	f7fd fb7a 	bl	8001214 <HAL_GetTick>
 8003b20:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b22:	e00a      	b.n	8003b3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b24:	f7fd fb76 	bl	8001214 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e061      	b.n	8003bfe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3a:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <HAL_RCC_ClockConfig+0x260>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 020c 	and.w	r2, r3, #12
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d1eb      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCC_ClockConfig+0x25c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d214      	bcs.n	8003b84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5a:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <HAL_RCC_ClockConfig+0x25c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 0207 	bic.w	r2, r3, #7
 8003b62:	4906      	ldr	r1, [pc, #24]	; (8003b7c <HAL_RCC_ClockConfig+0x25c>)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6a:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <HAL_RCC_ClockConfig+0x25c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e040      	b.n	8003bfe <HAL_RCC_ClockConfig+0x2de>
 8003b7c:	40022000 	.word	0x40022000
 8003b80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b90:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <HAL_RCC_ClockConfig+0x2e8>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	491a      	ldr	r1, [pc, #104]	; (8003c08 <HAL_RCC_ClockConfig+0x2e8>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bae:	4b16      	ldr	r3, [pc, #88]	; (8003c08 <HAL_RCC_ClockConfig+0x2e8>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4912      	ldr	r1, [pc, #72]	; (8003c08 <HAL_RCC_ClockConfig+0x2e8>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003bc2:	f000 f829 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8003bc6:	4601      	mov	r1, r0
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <HAL_RCC_ClockConfig+0x2e8>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd0:	22f0      	movs	r2, #240	; 0xf0
 8003bd2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	fa92 f2a2 	rbit	r2, r2
 8003bda:	60fa      	str	r2, [r7, #12]
  return result;
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	fab2 f282 	clz	r2, r2
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	40d3      	lsrs	r3, r2
 8003be6:	4a09      	ldr	r2, [pc, #36]	; (8003c0c <HAL_RCC_ClockConfig+0x2ec>)
 8003be8:	5cd3      	ldrb	r3, [r2, r3]
 8003bea:	fa21 f303 	lsr.w	r3, r1, r3
 8003bee:	4a08      	ldr	r2, [pc, #32]	; (8003c10 <HAL_RCC_ClockConfig+0x2f0>)
 8003bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003bf2:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <HAL_RCC_ClockConfig+0x2f4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fd fac8 	bl	800118c <HAL_InitTick>
  
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3778      	adds	r7, #120	; 0x78
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	08007fb0 	.word	0x08007fb0
 8003c10:	20000000 	.word	0x20000000
 8003c14:	20000004 	.word	0x20000004

08003c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b08b      	sub	sp, #44	; 0x2c
 8003c1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	2300      	movs	r3, #0
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	2300      	movs	r3, #0
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c32:	4b29      	ldr	r3, [pc, #164]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d002      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0x30>
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d003      	beq.n	8003c4e <HAL_RCC_GetSysClockFreq+0x36>
 8003c46:	e03c      	b.n	8003cc2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c48:	4b24      	ldr	r3, [pc, #144]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c4a:	623b      	str	r3, [r7, #32]
      break;
 8003c4c:	e03c      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c54:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003c58:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	fa92 f2a2 	rbit	r2, r2
 8003c60:	607a      	str	r2, [r7, #4]
  return result;
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	fab2 f282 	clz	r2, r2
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	40d3      	lsrs	r3, r2
 8003c6c:	4a1c      	ldr	r2, [pc, #112]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c6e:	5cd3      	ldrb	r3, [r2, r3]
 8003c70:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003c72:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	220f      	movs	r2, #15
 8003c7c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	fa92 f2a2 	rbit	r2, r2
 8003c84:	60fa      	str	r2, [r7, #12]
  return result;
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	fab2 f282 	clz	r2, r2
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	40d3      	lsrs	r3, r2
 8003c90:	4a14      	ldr	r2, [pc, #80]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c92:	5cd3      	ldrb	r3, [r2, r3]
 8003c94:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ca0:	4a0e      	ldr	r2, [pc, #56]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	fb02 f303 	mul.w	r3, r2, r3
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb0:	e004      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	4a0c      	ldr	r2, [pc, #48]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cb6:	fb02 f303 	mul.w	r3, r2, r3
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	623b      	str	r3, [r7, #32]
      break;
 8003cc0:	e002      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cc2:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cc4:	623b      	str	r3, [r7, #32]
      break;
 8003cc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	372c      	adds	r7, #44	; 0x2c
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	007a1200 	.word	0x007a1200
 8003ce0:	08007fc8 	.word	0x08007fc8
 8003ce4:	08007fd8 	.word	0x08007fd8
 8003ce8:	003d0900 	.word	0x003d0900

08003cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf0:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000000 	.word	0x20000000

08003d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d0a:	f7ff ffef 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d0e:	4601      	mov	r1, r0
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d18:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	fa92 f2a2 	rbit	r2, r2
 8003d24:	603a      	str	r2, [r7, #0]
  return result;
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	fab2 f282 	clz	r2, r2
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	40d3      	lsrs	r3, r2
 8003d30:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d32:	5cd3      	ldrb	r3, [r2, r3]
 8003d34:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021000 	.word	0x40021000
 8003d44:	08007fc0 	.word	0x08007fc0

08003d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d4e:	f7ff ffcd 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d52:	4601      	mov	r1, r0
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003d5c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003d60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	fa92 f2a2 	rbit	r2, r2
 8003d68:	603a      	str	r2, [r7, #0]
  return result;
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	fab2 f282 	clz	r2, r2
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	40d3      	lsrs	r3, r2
 8003d74:	4a04      	ldr	r2, [pc, #16]	; (8003d88 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003d76:	5cd3      	ldrb	r3, [r2, r3]
 8003d78:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40021000 	.word	0x40021000
 8003d88:	08007fc0 	.word	0x08007fc0

08003d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b092      	sub	sp, #72	; 0x48
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80cd 	beq.w	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db0:	4b86      	ldr	r3, [pc, #536]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10e      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dbc:	4b83      	ldr	r3, [pc, #524]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	4a82      	ldr	r2, [pc, #520]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	61d3      	str	r3, [r2, #28]
 8003dc8:	4b80      	ldr	r3, [pc, #512]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dda:	4b7d      	ldr	r3, [pc, #500]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d118      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003de6:	4b7a      	ldr	r3, [pc, #488]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a79      	ldr	r2, [pc, #484]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df2:	f7fd fa0f 	bl	8001214 <HAL_GetTick>
 8003df6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df8:	e008      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfa:	f7fd fa0b 	bl	8001214 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b64      	cmp	r3, #100	; 0x64
 8003e06:	d901      	bls.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e0db      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0c:	4b70      	ldr	r3, [pc, #448]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e18:	4b6c      	ldr	r3, [pc, #432]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e20:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d07d      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d076      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e36:	4b65      	ldr	r3, [pc, #404]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e44:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	fa93 f3a3 	rbit	r3, r3
 8003e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e50:	fab3 f383 	clz	r3, r3
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	4b5e      	ldr	r3, [pc, #376]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	461a      	mov	r2, r3
 8003e60:	2301      	movs	r3, #1
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	fa93 f3a3 	rbit	r3, r3
 8003e70:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e74:	fab3 f383 	clz	r3, r3
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	4b55      	ldr	r3, [pc, #340]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	461a      	mov	r2, r3
 8003e84:	2300      	movs	r3, #0
 8003e86:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e88:	4a50      	ldr	r2, [pc, #320]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d045      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fd f9bc 	bl	8001214 <HAL_GetTick>
 8003e9c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9e:	e00a      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea0:	f7fd f9b8 	bl	8001214 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e086      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	fa93 f3a3 	rbit	r3, r3
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	623b      	str	r3, [r7, #32]
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	fa93 f3a3 	rbit	r3, r3
 8003ecc:	61fb      	str	r3, [r7, #28]
  return result;
 8003ece:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed0:	fab3 f383 	clz	r3, r3
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f043 0302 	orr.w	r3, r3, #2
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d102      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003ee4:	4b39      	ldr	r3, [pc, #228]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	e007      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003eea:	2302      	movs	r3, #2
 8003eec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	fa93 f3a3 	rbit	r3, r3
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	4b35      	ldr	r3, [pc, #212]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	2202      	movs	r2, #2
 8003efc:	613a      	str	r2, [r7, #16]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	fa92 f2a2 	rbit	r2, r2
 8003f04:	60fa      	str	r2, [r7, #12]
  return result;
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	fab2 f282 	clz	r2, r2
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	f002 021f 	and.w	r2, r2, #31
 8003f18:	2101      	movs	r1, #1
 8003f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0bd      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f24:	4b29      	ldr	r3, [pc, #164]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	4926      	ldr	r1, [pc, #152]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d105      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f3e:	4b23      	ldr	r3, [pc, #140]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	4a22      	ldr	r2, [pc, #136]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f48:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f56:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	f023 0203 	bic.w	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	491a      	ldr	r1, [pc, #104]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f74:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	f023 0210 	bic.w	r2, r3, #16
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4912      	ldr	r1, [pc, #72]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d008      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f92:	4b0e      	ldr	r3, [pc, #56]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	490b      	ldr	r1, [pc, #44]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003fb0:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	4903      	ldr	r1, [pc, #12]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3748      	adds	r7, #72	; 0x48
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	40007000 	.word	0x40007000
 8003fd4:	10908100 	.word	0x10908100

08003fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e049      	b.n	800407e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fc fe80 	bl	8000d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f000 ffd4 	bl	8004fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b01      	cmp	r3, #1
 800409a:	d001      	beq.n	80040a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e040      	b.n	8004122 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <HAL_TIM_Base_Start_IT+0xa8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00e      	beq.n	80040e0 <HAL_TIM_Base_Start_IT+0x58>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ca:	d009      	beq.n	80040e0 <HAL_TIM_Base_Start_IT+0x58>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a18      	ldr	r2, [pc, #96]	; (8004134 <HAL_TIM_Base_Start_IT+0xac>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d004      	beq.n	80040e0 <HAL_TIM_Base_Start_IT+0x58>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a17      	ldr	r2, [pc, #92]	; (8004138 <HAL_TIM_Base_Start_IT+0xb0>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d115      	bne.n	800410c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	4b15      	ldr	r3, [pc, #84]	; (800413c <HAL_TIM_Base_Start_IT+0xb4>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b06      	cmp	r3, #6
 80040f0:	d015      	beq.n	800411e <HAL_TIM_Base_Start_IT+0x96>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f8:	d011      	beq.n	800411e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0201 	orr.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410a:	e008      	b.n	800411e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e000      	b.n	8004120 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40000400 	.word	0x40000400
 8004138:	40014000 	.word	0x40014000
 800413c:	00010007 	.word	0x00010007

08004140 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e049      	b.n	80041e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d106      	bne.n	800416c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f841 	bl	80041ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3304      	adds	r3, #4
 800417c:	4619      	mov	r1, r3
 800417e:	4610      	mov	r0, r2
 8004180:	f000 ff20 	bl	8004fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d109      	bne.n	8004228 <HAL_TIM_PWM_Start+0x24>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	bf14      	ite	ne
 8004220:	2301      	movne	r3, #1
 8004222:	2300      	moveq	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	e03c      	b.n	80042a2 <HAL_TIM_PWM_Start+0x9e>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b04      	cmp	r3, #4
 800422c:	d109      	bne.n	8004242 <HAL_TIM_PWM_Start+0x3e>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b01      	cmp	r3, #1
 8004238:	bf14      	ite	ne
 800423a:	2301      	movne	r3, #1
 800423c:	2300      	moveq	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	e02f      	b.n	80042a2 <HAL_TIM_PWM_Start+0x9e>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b08      	cmp	r3, #8
 8004246:	d109      	bne.n	800425c <HAL_TIM_PWM_Start+0x58>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b01      	cmp	r3, #1
 8004252:	bf14      	ite	ne
 8004254:	2301      	movne	r3, #1
 8004256:	2300      	moveq	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	e022      	b.n	80042a2 <HAL_TIM_PWM_Start+0x9e>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b0c      	cmp	r3, #12
 8004260:	d109      	bne.n	8004276 <HAL_TIM_PWM_Start+0x72>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	bf14      	ite	ne
 800426e:	2301      	movne	r3, #1
 8004270:	2300      	moveq	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	e015      	b.n	80042a2 <HAL_TIM_PWM_Start+0x9e>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b10      	cmp	r3, #16
 800427a:	d109      	bne.n	8004290 <HAL_TIM_PWM_Start+0x8c>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	bf14      	ite	ne
 8004288:	2301      	movne	r3, #1
 800428a:	2300      	moveq	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	e008      	b.n	80042a2 <HAL_TIM_PWM_Start+0x9e>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	bf14      	ite	ne
 800429c:	2301      	movne	r3, #1
 800429e:	2300      	moveq	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e088      	b.n	80043bc <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d104      	bne.n	80042ba <HAL_TIM_PWM_Start+0xb6>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042b8:	e023      	b.n	8004302 <HAL_TIM_PWM_Start+0xfe>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d104      	bne.n	80042ca <HAL_TIM_PWM_Start+0xc6>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c8:	e01b      	b.n	8004302 <HAL_TIM_PWM_Start+0xfe>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d104      	bne.n	80042da <HAL_TIM_PWM_Start+0xd6>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042d8:	e013      	b.n	8004302 <HAL_TIM_PWM_Start+0xfe>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b0c      	cmp	r3, #12
 80042de:	d104      	bne.n	80042ea <HAL_TIM_PWM_Start+0xe6>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042e8:	e00b      	b.n	8004302 <HAL_TIM_PWM_Start+0xfe>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b10      	cmp	r3, #16
 80042ee:	d104      	bne.n	80042fa <HAL_TIM_PWM_Start+0xf6>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f8:	e003      	b.n	8004302 <HAL_TIM_PWM_Start+0xfe>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2202      	movs	r2, #2
 80042fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2201      	movs	r2, #1
 8004308:	6839      	ldr	r1, [r7, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f001 fa12 	bl	8005734 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a2b      	ldr	r2, [pc, #172]	; (80043c4 <HAL_TIM_PWM_Start+0x1c0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00e      	beq.n	8004338 <HAL_TIM_PWM_Start+0x134>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a2a      	ldr	r2, [pc, #168]	; (80043c8 <HAL_TIM_PWM_Start+0x1c4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d009      	beq.n	8004338 <HAL_TIM_PWM_Start+0x134>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a28      	ldr	r2, [pc, #160]	; (80043cc <HAL_TIM_PWM_Start+0x1c8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d004      	beq.n	8004338 <HAL_TIM_PWM_Start+0x134>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a27      	ldr	r2, [pc, #156]	; (80043d0 <HAL_TIM_PWM_Start+0x1cc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d101      	bne.n	800433c <HAL_TIM_PWM_Start+0x138>
 8004338:	2301      	movs	r3, #1
 800433a:	e000      	b.n	800433e <HAL_TIM_PWM_Start+0x13a>
 800433c:	2300      	movs	r3, #0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004350:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1b      	ldr	r2, [pc, #108]	; (80043c4 <HAL_TIM_PWM_Start+0x1c0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d00e      	beq.n	800437a <HAL_TIM_PWM_Start+0x176>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004364:	d009      	beq.n	800437a <HAL_TIM_PWM_Start+0x176>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1a      	ldr	r2, [pc, #104]	; (80043d4 <HAL_TIM_PWM_Start+0x1d0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d004      	beq.n	800437a <HAL_TIM_PWM_Start+0x176>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a14      	ldr	r2, [pc, #80]	; (80043c8 <HAL_TIM_PWM_Start+0x1c4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d115      	bne.n	80043a6 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	4b15      	ldr	r3, [pc, #84]	; (80043d8 <HAL_TIM_PWM_Start+0x1d4>)
 8004382:	4013      	ands	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b06      	cmp	r3, #6
 800438a:	d015      	beq.n	80043b8 <HAL_TIM_PWM_Start+0x1b4>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004392:	d011      	beq.n	80043b8 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a4:	e008      	b.n	80043b8 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0201 	orr.w	r2, r2, #1
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	e000      	b.n	80043ba <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40012c00 	.word	0x40012c00
 80043c8:	40014000 	.word	0x40014000
 80043cc:	40014400 	.word	0x40014400
 80043d0:	40014800 	.word	0x40014800
 80043d4:	40000400 	.word	0x40000400
 80043d8:	00010007 	.word	0x00010007

080043dc <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d109      	bne.n	8004404 <HAL_TIM_PWM_Start_DMA+0x28>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	bf0c      	ite	eq
 80043fc:	2301      	moveq	r3, #1
 80043fe:	2300      	movne	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	e03c      	b.n	800447e <HAL_TIM_PWM_Start_DMA+0xa2>
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b04      	cmp	r3, #4
 8004408:	d109      	bne.n	800441e <HAL_TIM_PWM_Start_DMA+0x42>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	bf0c      	ite	eq
 8004416:	2301      	moveq	r3, #1
 8004418:	2300      	movne	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	e02f      	b.n	800447e <HAL_TIM_PWM_Start_DMA+0xa2>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d109      	bne.n	8004438 <HAL_TIM_PWM_Start_DMA+0x5c>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	bf0c      	ite	eq
 8004430:	2301      	moveq	r3, #1
 8004432:	2300      	movne	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	e022      	b.n	800447e <HAL_TIM_PWM_Start_DMA+0xa2>
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b0c      	cmp	r3, #12
 800443c:	d109      	bne.n	8004452 <HAL_TIM_PWM_Start_DMA+0x76>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	bf0c      	ite	eq
 800444a:	2301      	moveq	r3, #1
 800444c:	2300      	movne	r3, #0
 800444e:	b2db      	uxtb	r3, r3
 8004450:	e015      	b.n	800447e <HAL_TIM_PWM_Start_DMA+0xa2>
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b10      	cmp	r3, #16
 8004456:	d109      	bne.n	800446c <HAL_TIM_PWM_Start_DMA+0x90>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	bf0c      	ite	eq
 8004464:	2301      	moveq	r3, #1
 8004466:	2300      	movne	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	e008      	b.n	800447e <HAL_TIM_PWM_Start_DMA+0xa2>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8004482:	2302      	movs	r3, #2
 8004484:	e192      	b.n	80047ac <HAL_TIM_PWM_Start_DMA+0x3d0>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d109      	bne.n	80044a0 <HAL_TIM_PWM_Start_DMA+0xc4>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b01      	cmp	r3, #1
 8004496:	bf0c      	ite	eq
 8004498:	2301      	moveq	r3, #1
 800449a:	2300      	movne	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	e03c      	b.n	800451a <HAL_TIM_PWM_Start_DMA+0x13e>
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d109      	bne.n	80044ba <HAL_TIM_PWM_Start_DMA+0xde>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	bf0c      	ite	eq
 80044b2:	2301      	moveq	r3, #1
 80044b4:	2300      	movne	r3, #0
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	e02f      	b.n	800451a <HAL_TIM_PWM_Start_DMA+0x13e>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d109      	bne.n	80044d4 <HAL_TIM_PWM_Start_DMA+0xf8>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	bf0c      	ite	eq
 80044cc:	2301      	moveq	r3, #1
 80044ce:	2300      	movne	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	e022      	b.n	800451a <HAL_TIM_PWM_Start_DMA+0x13e>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b0c      	cmp	r3, #12
 80044d8:	d109      	bne.n	80044ee <HAL_TIM_PWM_Start_DMA+0x112>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	bf0c      	ite	eq
 80044e6:	2301      	moveq	r3, #1
 80044e8:	2300      	movne	r3, #0
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	e015      	b.n	800451a <HAL_TIM_PWM_Start_DMA+0x13e>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b10      	cmp	r3, #16
 80044f2:	d109      	bne.n	8004508 <HAL_TIM_PWM_Start_DMA+0x12c>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	e008      	b.n	800451a <HAL_TIM_PWM_Start_DMA+0x13e>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	bf0c      	ite	eq
 8004514:	2301      	moveq	r3, #1
 8004516:	2300      	movne	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d034      	beq.n	8004588 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d104      	bne.n	800452e <HAL_TIM_PWM_Start_DMA+0x152>
 8004524:	887b      	ldrh	r3, [r7, #2]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e13e      	b.n	80047ac <HAL_TIM_PWM_Start_DMA+0x3d0>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d104      	bne.n	800453e <HAL_TIM_PWM_Start_DMA+0x162>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800453c:	e026      	b.n	800458c <HAL_TIM_PWM_Start_DMA+0x1b0>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b04      	cmp	r3, #4
 8004542:	d104      	bne.n	800454e <HAL_TIM_PWM_Start_DMA+0x172>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800454c:	e01e      	b.n	800458c <HAL_TIM_PWM_Start_DMA+0x1b0>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b08      	cmp	r3, #8
 8004552:	d104      	bne.n	800455e <HAL_TIM_PWM_Start_DMA+0x182>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800455c:	e016      	b.n	800458c <HAL_TIM_PWM_Start_DMA+0x1b0>
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b0c      	cmp	r3, #12
 8004562:	d104      	bne.n	800456e <HAL_TIM_PWM_Start_DMA+0x192>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800456c:	e00e      	b.n	800458c <HAL_TIM_PWM_Start_DMA+0x1b0>
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b10      	cmp	r3, #16
 8004572:	d104      	bne.n	800457e <HAL_TIM_PWM_Start_DMA+0x1a2>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800457c:	e006      	b.n	800458c <HAL_TIM_PWM_Start_DMA+0x1b0>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2202      	movs	r2, #2
 8004582:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004586:	e001      	b.n	800458c <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e10f      	b.n	80047ac <HAL_TIM_PWM_Start_DMA+0x3d0>
  }

  switch (Channel)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b0c      	cmp	r3, #12
 8004590:	f200 80ae 	bhi.w	80046f0 <HAL_TIM_PWM_Start_DMA+0x314>
 8004594:	a201      	add	r2, pc, #4	; (adr r2, 800459c <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045d1 	.word	0x080045d1
 80045a0:	080046f1 	.word	0x080046f1
 80045a4:	080046f1 	.word	0x080046f1
 80045a8:	080046f1 	.word	0x080046f1
 80045ac:	08004619 	.word	0x08004619
 80045b0:	080046f1 	.word	0x080046f1
 80045b4:	080046f1 	.word	0x080046f1
 80045b8:	080046f1 	.word	0x080046f1
 80045bc:	08004661 	.word	0x08004661
 80045c0:	080046f1 	.word	0x080046f1
 80045c4:	080046f1 	.word	0x080046f1
 80045c8:	080046f1 	.word	0x080046f1
 80045cc:	080046a9 	.word	0x080046a9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	4a77      	ldr	r2, [pc, #476]	; (80047b4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80045d6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	4a76      	ldr	r2, [pc, #472]	; (80047b8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80045de:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	4a75      	ldr	r2, [pc, #468]	; (80047bc <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3334      	adds	r3, #52	; 0x34
 80045f4:	461a      	mov	r2, r3
 80045f6:	887b      	ldrh	r3, [r7, #2]
 80045f8:	f7fd fecb 	bl	8002392 <HAL_DMA_Start_IT>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e0d2      	b.n	80047ac <HAL_TIM_PWM_Start_DMA+0x3d0>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004614:	60da      	str	r2, [r3, #12]
      break;
 8004616:	e06c      	b.n	80046f2 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	4a65      	ldr	r2, [pc, #404]	; (80047b4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800461e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	4a64      	ldr	r2, [pc, #400]	; (80047b8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004626:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	4a63      	ldr	r2, [pc, #396]	; (80047bc <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800462e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3338      	adds	r3, #56	; 0x38
 800463c:	461a      	mov	r2, r3
 800463e:	887b      	ldrh	r3, [r7, #2]
 8004640:	f7fd fea7 	bl	8002392 <HAL_DMA_Start_IT>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e0ae      	b.n	80047ac <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800465c:	60da      	str	r2, [r3, #12]
      break;
 800465e:	e048      	b.n	80046f2 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	4a53      	ldr	r2, [pc, #332]	; (80047b4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004666:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	4a52      	ldr	r2, [pc, #328]	; (80047b8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800466e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	4a51      	ldr	r2, [pc, #324]	; (80047bc <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8004676:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	333c      	adds	r3, #60	; 0x3c
 8004684:	461a      	mov	r2, r3
 8004686:	887b      	ldrh	r3, [r7, #2]
 8004688:	f7fd fe83 	bl	8002392 <HAL_DMA_Start_IT>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e08a      	b.n	80047ac <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a4:	60da      	str	r2, [r3, #12]
      break;
 80046a6:	e024      	b.n	80046f2 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	4a41      	ldr	r2, [pc, #260]	; (80047b4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80046ae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	4a40      	ldr	r2, [pc, #256]	; (80047b8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80046b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	4a3f      	ldr	r2, [pc, #252]	; (80047bc <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80046be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3340      	adds	r3, #64	; 0x40
 80046cc:	461a      	mov	r2, r3
 80046ce:	887b      	ldrh	r3, [r7, #2]
 80046d0:	f7fd fe5f 	bl	8002392 <HAL_DMA_Start_IT>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e066      	b.n	80047ac <HAL_TIM_PWM_Start_DMA+0x3d0>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046ec:	60da      	str	r2, [r3, #12]
      break;
 80046ee:	e000      	b.n	80046f2 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 80046f0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2201      	movs	r2, #1
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f001 f81a 	bl	8005734 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a2e      	ldr	r2, [pc, #184]	; (80047c0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00e      	beq.n	8004728 <HAL_TIM_PWM_Start_DMA+0x34c>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a2d      	ldr	r2, [pc, #180]	; (80047c4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d009      	beq.n	8004728 <HAL_TIM_PWM_Start_DMA+0x34c>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a2b      	ldr	r2, [pc, #172]	; (80047c8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d004      	beq.n	8004728 <HAL_TIM_PWM_Start_DMA+0x34c>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a2a      	ldr	r2, [pc, #168]	; (80047cc <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d101      	bne.n	800472c <HAL_TIM_PWM_Start_DMA+0x350>
 8004728:	2301      	movs	r3, #1
 800472a:	e000      	b.n	800472e <HAL_TIM_PWM_Start_DMA+0x352>
 800472c:	2300      	movs	r3, #0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <HAL_TIM_PWM_Start_DMA+0x366>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1e      	ldr	r2, [pc, #120]	; (80047c0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00e      	beq.n	800476a <HAL_TIM_PWM_Start_DMA+0x38e>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004754:	d009      	beq.n	800476a <HAL_TIM_PWM_Start_DMA+0x38e>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1d      	ldr	r2, [pc, #116]	; (80047d0 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d004      	beq.n	800476a <HAL_TIM_PWM_Start_DMA+0x38e>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a17      	ldr	r2, [pc, #92]	; (80047c4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d115      	bne.n	8004796 <HAL_TIM_PWM_Start_DMA+0x3ba>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	4b18      	ldr	r3, [pc, #96]	; (80047d4 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004772:	4013      	ands	r3, r2
 8004774:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2b06      	cmp	r3, #6
 800477a:	d015      	beq.n	80047a8 <HAL_TIM_PWM_Start_DMA+0x3cc>
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004782:	d011      	beq.n	80047a8 <HAL_TIM_PWM_Start_DMA+0x3cc>
    {
      __HAL_TIM_ENABLE(htim);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0201 	orr.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004794:	e008      	b.n	80047a8 <HAL_TIM_PWM_Start_DMA+0x3cc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0201 	orr.w	r2, r2, #1
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	e000      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x3ce>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	08004eb5 	.word	0x08004eb5
 80047b8:	08004f5d 	.word	0x08004f5d
 80047bc:	08004e23 	.word	0x08004e23
 80047c0:	40012c00 	.word	0x40012c00
 80047c4:	40014000 	.word	0x40014000
 80047c8:	40014400 	.word	0x40014400
 80047cc:	40014800 	.word	0x40014800
 80047d0:	40000400 	.word	0x40000400
 80047d4:	00010007 	.word	0x00010007

080047d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d122      	bne.n	8004834 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d11b      	bne.n	8004834 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0202 	mvn.w	r2, #2
 8004804:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 facf 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 8004820:	e005      	b.n	800482e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fac1 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fad2 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b04      	cmp	r3, #4
 8004840:	d122      	bne.n	8004888 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b04      	cmp	r3, #4
 800484e:	d11b      	bne.n	8004888 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0204 	mvn.w	r2, #4
 8004858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2202      	movs	r2, #2
 800485e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 faa5 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 8004874:	e005      	b.n	8004882 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fa97 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 faa8 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b08      	cmp	r3, #8
 8004894:	d122      	bne.n	80048dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d11b      	bne.n	80048dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0208 	mvn.w	r2, #8
 80048ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2204      	movs	r2, #4
 80048b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fa7b 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fa6d 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fa7e 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	2b10      	cmp	r3, #16
 80048e8:	d122      	bne.n	8004930 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d11b      	bne.n	8004930 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0210 	mvn.w	r2, #16
 8004900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2208      	movs	r2, #8
 8004906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fa51 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 800491c:	e005      	b.n	800492a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fa43 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fa54 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b01      	cmp	r3, #1
 800493c:	d10e      	bne.n	800495c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b01      	cmp	r3, #1
 800494a:	d107      	bne.n	800495c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0201 	mvn.w	r2, #1
 8004954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f003 f9f0 	bl	8007d3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004966:	2b80      	cmp	r3, #128	; 0x80
 8004968:	d10e      	bne.n	8004988 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004974:	2b80      	cmp	r3, #128	; 0x80
 8004976:	d107      	bne.n	8004988 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 ffec 	bl	8005960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004996:	d10e      	bne.n	80049b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a2:	2b80      	cmp	r3, #128	; 0x80
 80049a4:	d107      	bne.n	80049b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 ffdf 	bl	8005974 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c0:	2b40      	cmp	r3, #64	; 0x40
 80049c2:	d10e      	bne.n	80049e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ce:	2b40      	cmp	r3, #64	; 0x40
 80049d0:	d107      	bne.n	80049e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fa0c 	bl	8004dfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	d10e      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b20      	cmp	r3, #32
 80049fc:	d107      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f06f 0220 	mvn.w	r2, #32
 8004a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 ff9f 	bl	800594c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e0fd      	b.n	8004c2e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b14      	cmp	r3, #20
 8004a3e:	f200 80f0 	bhi.w	8004c22 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004a42:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a48:	08004a9d 	.word	0x08004a9d
 8004a4c:	08004c23 	.word	0x08004c23
 8004a50:	08004c23 	.word	0x08004c23
 8004a54:	08004c23 	.word	0x08004c23
 8004a58:	08004add 	.word	0x08004add
 8004a5c:	08004c23 	.word	0x08004c23
 8004a60:	08004c23 	.word	0x08004c23
 8004a64:	08004c23 	.word	0x08004c23
 8004a68:	08004b1f 	.word	0x08004b1f
 8004a6c:	08004c23 	.word	0x08004c23
 8004a70:	08004c23 	.word	0x08004c23
 8004a74:	08004c23 	.word	0x08004c23
 8004a78:	08004b5f 	.word	0x08004b5f
 8004a7c:	08004c23 	.word	0x08004c23
 8004a80:	08004c23 	.word	0x08004c23
 8004a84:	08004c23 	.word	0x08004c23
 8004a88:	08004ba1 	.word	0x08004ba1
 8004a8c:	08004c23 	.word	0x08004c23
 8004a90:	08004c23 	.word	0x08004c23
 8004a94:	08004c23 	.word	0x08004c23
 8004a98:	08004be1 	.word	0x08004be1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fb06 	bl	80050b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0208 	orr.w	r2, r2, #8
 8004ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0204 	bic.w	r2, r2, #4
 8004ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6999      	ldr	r1, [r3, #24]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	619a      	str	r2, [r3, #24]
      break;
 8004ada:	e0a3      	b.n	8004c24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fb6c 	bl	80051c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6999      	ldr	r1, [r3, #24]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	021a      	lsls	r2, r3, #8
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	619a      	str	r2, [r3, #24]
      break;
 8004b1c:	e082      	b.n	8004c24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fbcb 	bl	80052c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0208 	orr.w	r2, r2, #8
 8004b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0204 	bic.w	r2, r2, #4
 8004b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69d9      	ldr	r1, [r3, #28]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	61da      	str	r2, [r3, #28]
      break;
 8004b5c:	e062      	b.n	8004c24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fc29 	bl	80053bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69d9      	ldr	r1, [r3, #28]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	021a      	lsls	r2, r3, #8
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	61da      	str	r2, [r3, #28]
      break;
 8004b9e:	e041      	b.n	8004c24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fc6c 	bl	8005484 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0208 	orr.w	r2, r2, #8
 8004bba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0204 	bic.w	r2, r2, #4
 8004bca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bde:	e021      	b.n	8004c24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fcaa 	bl	8005540 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	021a      	lsls	r2, r3, #8
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c20:	e000      	b.n	8004c24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004c22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop

08004c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_TIM_ConfigClockSource+0x18>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e0a8      	b.n	8004da2 <HAL_TIM_ConfigClockSource+0x16a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b40      	cmp	r3, #64	; 0x40
 8004c8a:	d067      	beq.n	8004d5c <HAL_TIM_ConfigClockSource+0x124>
 8004c8c:	2b40      	cmp	r3, #64	; 0x40
 8004c8e:	d80b      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x70>
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d073      	beq.n	8004d7c <HAL_TIM_ConfigClockSource+0x144>
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d802      	bhi.n	8004c9e <HAL_TIM_ConfigClockSource+0x66>
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d06f      	beq.n	8004d7c <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c9c:	e078      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004c9e:	2b20      	cmp	r3, #32
 8004ca0:	d06c      	beq.n	8004d7c <HAL_TIM_ConfigClockSource+0x144>
 8004ca2:	2b30      	cmp	r3, #48	; 0x30
 8004ca4:	d06a      	beq.n	8004d7c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004ca6:	e073      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004ca8:	2b70      	cmp	r3, #112	; 0x70
 8004caa:	d00d      	beq.n	8004cc8 <HAL_TIM_ConfigClockSource+0x90>
 8004cac:	2b70      	cmp	r3, #112	; 0x70
 8004cae:	d804      	bhi.n	8004cba <HAL_TIM_ConfigClockSource+0x82>
 8004cb0:	2b50      	cmp	r3, #80	; 0x50
 8004cb2:	d033      	beq.n	8004d1c <HAL_TIM_ConfigClockSource+0xe4>
 8004cb4:	2b60      	cmp	r3, #96	; 0x60
 8004cb6:	d041      	beq.n	8004d3c <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004cb8:	e06a      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cbe:	d066      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x156>
 8004cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc4:	d017      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004cc6:	e063      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	6899      	ldr	r1, [r3, #8]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f000 fd0c 	bl	80056f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	609a      	str	r2, [r3, #8]
      break;
 8004cf4:	e04c      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6899      	ldr	r1, [r3, #8]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f000 fcf5 	bl	80056f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d18:	609a      	str	r2, [r3, #8]
      break;
 8004d1a:	e039      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	f000 fc69 	bl	8005600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2150      	movs	r1, #80	; 0x50
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 fcc2 	bl	80056be <TIM_ITRx_SetConfig>
      break;
 8004d3a:	e029      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	6859      	ldr	r1, [r3, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	f000 fc88 	bl	800565e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2160      	movs	r1, #96	; 0x60
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fcb2 	bl	80056be <TIM_ITRx_SetConfig>
      break;
 8004d5a:	e019      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6818      	ldr	r0, [r3, #0]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	6859      	ldr	r1, [r3, #4]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	f000 fc49 	bl	8005600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2140      	movs	r1, #64	; 0x40
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fca2 	bl	80056be <TIM_ITRx_SetConfig>
      break;
 8004d7a:	e009      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4619      	mov	r1, r3
 8004d86:	4610      	mov	r0, r2
 8004d88:	f000 fc99 	bl	80056be <TIM_ITRx_SetConfig>
        break;
 8004d8c:	e000      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004d8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d107      	bne.n	8004e4a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e48:	e02a      	b.n	8004ea0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d107      	bne.n	8004e64 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2202      	movs	r2, #2
 8004e58:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e62:	e01d      	b.n	8004ea0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d107      	bne.n	8004e7e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2204      	movs	r2, #4
 8004e72:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e7c:	e010      	b.n	8004ea0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d107      	bne.n	8004e98 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2208      	movs	r2, #8
 8004e8c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e96:	e003      	b.n	8004ea0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f7ff ffb4 	bl	8004e0e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	771a      	strb	r2, [r3, #28]
}
 8004eac:	bf00      	nop
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d10b      	bne.n	8004ee4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d136      	bne.n	8004f48 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ee2:	e031      	b.n	8004f48 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d10b      	bne.n	8004f06 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d125      	bne.n	8004f48 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f04:	e020      	b.n	8004f48 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d10b      	bne.n	8004f28 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2204      	movs	r2, #4
 8004f14:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d114      	bne.n	8004f48 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f26:	e00f      	b.n	8004f48 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d10a      	bne.n	8004f48 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2208      	movs	r2, #8
 8004f36:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d103      	bne.n	8004f48 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f7ff ff42 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	771a      	strb	r2, [r3, #28]
}
 8004f54:	bf00      	nop
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d103      	bne.n	8004f7c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	771a      	strb	r2, [r3, #28]
 8004f7a:	e019      	b.n	8004fb0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d103      	bne.n	8004f8e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2202      	movs	r2, #2
 8004f8a:	771a      	strb	r2, [r3, #28]
 8004f8c:	e010      	b.n	8004fb0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d103      	bne.n	8004fa0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2204      	movs	r2, #4
 8004f9c:	771a      	strb	r2, [r3, #28]
 8004f9e:	e007      	b.n	8004fb0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d102      	bne.n	8004fb0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2208      	movs	r2, #8
 8004fae:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f7ff ff18 	bl	8004de6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	771a      	strb	r2, [r3, #28]
}
 8004fbc:	bf00      	nop
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a32      	ldr	r2, [pc, #200]	; (80050a0 <TIM_Base_SetConfig+0xdc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d007      	beq.n	8004fec <TIM_Base_SetConfig+0x28>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe2:	d003      	beq.n	8004fec <TIM_Base_SetConfig+0x28>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a2f      	ldr	r2, [pc, #188]	; (80050a4 <TIM_Base_SetConfig+0xe0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d108      	bne.n	8004ffe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a27      	ldr	r2, [pc, #156]	; (80050a0 <TIM_Base_SetConfig+0xdc>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d013      	beq.n	800502e <TIM_Base_SetConfig+0x6a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500c:	d00f      	beq.n	800502e <TIM_Base_SetConfig+0x6a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a24      	ldr	r2, [pc, #144]	; (80050a4 <TIM_Base_SetConfig+0xe0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00b      	beq.n	800502e <TIM_Base_SetConfig+0x6a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a23      	ldr	r2, [pc, #140]	; (80050a8 <TIM_Base_SetConfig+0xe4>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d007      	beq.n	800502e <TIM_Base_SetConfig+0x6a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a22      	ldr	r2, [pc, #136]	; (80050ac <TIM_Base_SetConfig+0xe8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d003      	beq.n	800502e <TIM_Base_SetConfig+0x6a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a21      	ldr	r2, [pc, #132]	; (80050b0 <TIM_Base_SetConfig+0xec>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d108      	bne.n	8005040 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a0e      	ldr	r2, [pc, #56]	; (80050a0 <TIM_Base_SetConfig+0xdc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00b      	beq.n	8005084 <TIM_Base_SetConfig+0xc0>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a0e      	ldr	r2, [pc, #56]	; (80050a8 <TIM_Base_SetConfig+0xe4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d007      	beq.n	8005084 <TIM_Base_SetConfig+0xc0>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a0d      	ldr	r2, [pc, #52]	; (80050ac <TIM_Base_SetConfig+0xe8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_Base_SetConfig+0xc0>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a0c      	ldr	r2, [pc, #48]	; (80050b0 <TIM_Base_SetConfig+0xec>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d103      	bne.n	800508c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	615a      	str	r2, [r3, #20]
}
 8005092:	bf00      	nop
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	40000400 	.word	0x40000400
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40014400 	.word	0x40014400
 80050b0:	40014800 	.word	0x40014800

080050b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	f023 0201 	bic.w	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0303 	bic.w	r3, r3, #3
 80050ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f023 0302 	bic.w	r3, r3, #2
 8005100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a28      	ldr	r2, [pc, #160]	; (80051b0 <TIM_OC1_SetConfig+0xfc>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d00b      	beq.n	800512c <TIM_OC1_SetConfig+0x78>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a27      	ldr	r2, [pc, #156]	; (80051b4 <TIM_OC1_SetConfig+0x100>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d007      	beq.n	800512c <TIM_OC1_SetConfig+0x78>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a26      	ldr	r2, [pc, #152]	; (80051b8 <TIM_OC1_SetConfig+0x104>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d003      	beq.n	800512c <TIM_OC1_SetConfig+0x78>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a25      	ldr	r2, [pc, #148]	; (80051bc <TIM_OC1_SetConfig+0x108>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d10c      	bne.n	8005146 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f023 0308 	bic.w	r3, r3, #8
 8005132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	4313      	orrs	r3, r2
 800513c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f023 0304 	bic.w	r3, r3, #4
 8005144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a19      	ldr	r2, [pc, #100]	; (80051b0 <TIM_OC1_SetConfig+0xfc>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00b      	beq.n	8005166 <TIM_OC1_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a18      	ldr	r2, [pc, #96]	; (80051b4 <TIM_OC1_SetConfig+0x100>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d007      	beq.n	8005166 <TIM_OC1_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a17      	ldr	r2, [pc, #92]	; (80051b8 <TIM_OC1_SetConfig+0x104>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d003      	beq.n	8005166 <TIM_OC1_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a16      	ldr	r2, [pc, #88]	; (80051bc <TIM_OC1_SetConfig+0x108>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d111      	bne.n	800518a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800516c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	621a      	str	r2, [r3, #32]
}
 80051a4:	bf00      	nop
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40012c00 	.word	0x40012c00
 80051b4:	40014000 	.word	0x40014000
 80051b8:	40014400 	.word	0x40014400
 80051bc:	40014800 	.word	0x40014800

080051c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	f023 0210 	bic.w	r2, r3, #16
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f023 0320 	bic.w	r3, r3, #32
 800520e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a24      	ldr	r2, [pc, #144]	; (80052b0 <TIM_OC2_SetConfig+0xf0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d10d      	bne.n	8005240 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800522a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800523e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a1b      	ldr	r2, [pc, #108]	; (80052b0 <TIM_OC2_SetConfig+0xf0>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d00b      	beq.n	8005260 <TIM_OC2_SetConfig+0xa0>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a1a      	ldr	r2, [pc, #104]	; (80052b4 <TIM_OC2_SetConfig+0xf4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d007      	beq.n	8005260 <TIM_OC2_SetConfig+0xa0>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a19      	ldr	r2, [pc, #100]	; (80052b8 <TIM_OC2_SetConfig+0xf8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d003      	beq.n	8005260 <TIM_OC2_SetConfig+0xa0>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a18      	ldr	r2, [pc, #96]	; (80052bc <TIM_OC2_SetConfig+0xfc>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d113      	bne.n	8005288 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005266:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800526e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4313      	orrs	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	621a      	str	r2, [r3, #32]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40012c00 	.word	0x40012c00
 80052b4:	40014000 	.word	0x40014000
 80052b8:	40014400 	.word	0x40014400
 80052bc:	40014800 	.word	0x40014800

080052c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0303 	bic.w	r3, r3, #3
 80052fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800530c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	021b      	lsls	r3, r3, #8
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a23      	ldr	r2, [pc, #140]	; (80053ac <TIM_OC3_SetConfig+0xec>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d10d      	bne.n	800533e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	021b      	lsls	r3, r3, #8
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800533c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a1a      	ldr	r2, [pc, #104]	; (80053ac <TIM_OC3_SetConfig+0xec>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00b      	beq.n	800535e <TIM_OC3_SetConfig+0x9e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a19      	ldr	r2, [pc, #100]	; (80053b0 <TIM_OC3_SetConfig+0xf0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d007      	beq.n	800535e <TIM_OC3_SetConfig+0x9e>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a18      	ldr	r2, [pc, #96]	; (80053b4 <TIM_OC3_SetConfig+0xf4>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d003      	beq.n	800535e <TIM_OC3_SetConfig+0x9e>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a17      	ldr	r2, [pc, #92]	; (80053b8 <TIM_OC3_SetConfig+0xf8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d113      	bne.n	8005386 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800536c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	4313      	orrs	r3, r2
 8005384:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	621a      	str	r2, [r3, #32]
}
 80053a0:	bf00      	nop
 80053a2:	371c      	adds	r7, #28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	40012c00 	.word	0x40012c00
 80053b0:	40014000 	.word	0x40014000
 80053b4:	40014400 	.word	0x40014400
 80053b8:	40014800 	.word	0x40014800

080053bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	021b      	lsls	r3, r3, #8
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800540a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	031b      	lsls	r3, r3, #12
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	4313      	orrs	r3, r2
 8005416:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a16      	ldr	r2, [pc, #88]	; (8005474 <TIM_OC4_SetConfig+0xb8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00b      	beq.n	8005438 <TIM_OC4_SetConfig+0x7c>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a15      	ldr	r2, [pc, #84]	; (8005478 <TIM_OC4_SetConfig+0xbc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d007      	beq.n	8005438 <TIM_OC4_SetConfig+0x7c>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a14      	ldr	r2, [pc, #80]	; (800547c <TIM_OC4_SetConfig+0xc0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d003      	beq.n	8005438 <TIM_OC4_SetConfig+0x7c>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a13      	ldr	r2, [pc, #76]	; (8005480 <TIM_OC4_SetConfig+0xc4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d109      	bne.n	800544c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800543e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	019b      	lsls	r3, r3, #6
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	621a      	str	r2, [r3, #32]
}
 8005466:	bf00      	nop
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40012c00 	.word	0x40012c00
 8005478:	40014000 	.word	0x40014000
 800547c:	40014400 	.word	0x40014400
 8005480:	40014800 	.word	0x40014800

08005484 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80054c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	041b      	lsls	r3, r3, #16
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a15      	ldr	r2, [pc, #84]	; (8005530 <TIM_OC5_SetConfig+0xac>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00b      	beq.n	80054f6 <TIM_OC5_SetConfig+0x72>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a14      	ldr	r2, [pc, #80]	; (8005534 <TIM_OC5_SetConfig+0xb0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d007      	beq.n	80054f6 <TIM_OC5_SetConfig+0x72>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a13      	ldr	r2, [pc, #76]	; (8005538 <TIM_OC5_SetConfig+0xb4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d003      	beq.n	80054f6 <TIM_OC5_SetConfig+0x72>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a12      	ldr	r2, [pc, #72]	; (800553c <TIM_OC5_SetConfig+0xb8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d109      	bne.n	800550a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	021b      	lsls	r3, r3, #8
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	4313      	orrs	r3, r2
 8005508:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	621a      	str	r2, [r3, #32]
}
 8005524:	bf00      	nop
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	40012c00 	.word	0x40012c00
 8005534:	40014000 	.word	0x40014000
 8005538:	40014400 	.word	0x40014400
 800553c:	40014800 	.word	0x40014800

08005540 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800556e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	021b      	lsls	r3, r3, #8
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	051b      	lsls	r3, r3, #20
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a16      	ldr	r2, [pc, #88]	; (80055f0 <TIM_OC6_SetConfig+0xb0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d00b      	beq.n	80055b4 <TIM_OC6_SetConfig+0x74>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a15      	ldr	r2, [pc, #84]	; (80055f4 <TIM_OC6_SetConfig+0xb4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d007      	beq.n	80055b4 <TIM_OC6_SetConfig+0x74>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a14      	ldr	r2, [pc, #80]	; (80055f8 <TIM_OC6_SetConfig+0xb8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d003      	beq.n	80055b4 <TIM_OC6_SetConfig+0x74>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a13      	ldr	r2, [pc, #76]	; (80055fc <TIM_OC6_SetConfig+0xbc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d109      	bne.n	80055c8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	029b      	lsls	r3, r3, #10
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	621a      	str	r2, [r3, #32]
}
 80055e2:	bf00      	nop
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40012c00 	.word	0x40012c00
 80055f4:	40014000 	.word	0x40014000
 80055f8:	40014400 	.word	0x40014400
 80055fc:	40014800 	.word	0x40014800

08005600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f023 0201 	bic.w	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800562a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f023 030a 	bic.w	r3, r3, #10
 800563c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4313      	orrs	r3, r2
 8005644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	621a      	str	r2, [r3, #32]
}
 8005652:	bf00      	nop
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800565e:	b480      	push	{r7}
 8005660:	b087      	sub	sp, #28
 8005662:	af00      	add	r7, sp, #0
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f023 0210 	bic.w	r2, r3, #16
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005688:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	031b      	lsls	r3, r3, #12
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800569a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	621a      	str	r2, [r3, #32]
}
 80056b2:	bf00      	nop
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056be:	b480      	push	{r7}
 80056c0:	b085      	sub	sp, #20
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	f043 0307 	orr.w	r3, r3, #7
 80056e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	609a      	str	r2, [r3, #8]
}
 80056e8:	bf00      	nop
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800570e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	021a      	lsls	r2, r3, #8
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	431a      	orrs	r2, r3
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	4313      	orrs	r3, r2
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	609a      	str	r2, [r3, #8]
}
 8005728:	bf00      	nop
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f003 031f 	and.w	r3, r3, #31
 8005746:	2201      	movs	r2, #1
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6a1a      	ldr	r2, [r3, #32]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	43db      	mvns	r3, r3
 8005756:	401a      	ands	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a1a      	ldr	r2, [r3, #32]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f003 031f 	and.w	r3, r3, #31
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	fa01 f303 	lsl.w	r3, r1, r3
 800576c:	431a      	orrs	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	621a      	str	r2, [r3, #32]
}
 8005772:	bf00      	nop
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
	...

08005780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005794:	2302      	movs	r3, #2
 8005796:	e054      	b.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a24      	ldr	r2, [pc, #144]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d108      	bne.n	80057d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a17      	ldr	r2, [pc, #92]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00e      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005800:	d009      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a13      	ldr	r2, [pc, #76]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d004      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a11      	ldr	r2, [pc, #68]	; (8005858 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d10c      	bne.n	8005830 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800581c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	4313      	orrs	r3, r2
 8005826:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40012c00 	.word	0x40012c00
 8005854:	40000400 	.word	0x40000400
 8005858:	40014000 	.word	0x40014000

0800585c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005874:	2302      	movs	r3, #2
 8005876:	e060      	b.n	800593a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	041b      	lsls	r3, r3, #16
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a14      	ldr	r2, [pc, #80]	; (8005948 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d115      	bne.n	8005928 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	051b      	lsls	r3, r3, #20
 8005908:	4313      	orrs	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40012c00 	.word	0x40012c00

0800594c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e040      	b.n	8005a1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fb fb38 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2224      	movs	r2, #36	; 0x24
 80059b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0201 	bic.w	r2, r2, #1
 80059c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fb28 	bl	800601c <UART_SetConfig>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e022      	b.n	8005a1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fc54 	bl	800628c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0201 	orr.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fcdb 	bl	80063d0 <UART_CheckIdleState>
 8005a1a:	4603      	mov	r3, r0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08a      	sub	sp, #40	; 0x28
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	4613      	mov	r3, r2
 8005a32:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	f040 8082 	bne.w	8005b42 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <HAL_UART_Transmit+0x26>
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e07a      	b.n	8005b44 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d101      	bne.n	8005a5c <HAL_UART_Transmit+0x38>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e073      	b.n	8005b44 <HAL_UART_Transmit+0x120>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2221      	movs	r2, #33	; 0x21
 8005a70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a72:	f7fb fbcf 	bl	8001214 <HAL_GetTick>
 8005a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	88fa      	ldrh	r2, [r7, #6]
 8005a7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	88fa      	ldrh	r2, [r7, #6]
 8005a84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a90:	d108      	bne.n	8005aa4 <HAL_UART_Transmit+0x80>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d104      	bne.n	8005aa4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	61bb      	str	r3, [r7, #24]
 8005aa2:	e003      	b.n	8005aac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005ab4:	e02d      	b.n	8005b12 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2200      	movs	r2, #0
 8005abe:	2180      	movs	r1, #128	; 0x80
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 fcce 	bl	8006462 <UART_WaitOnFlagUntilTimeout>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e039      	b.n	8005b44 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10b      	bne.n	8005aee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	881a      	ldrh	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ae2:	b292      	uxth	r2, r2
 8005ae4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	3302      	adds	r3, #2
 8005aea:	61bb      	str	r3, [r7, #24]
 8005aec:	e008      	b.n	8005b00 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	781a      	ldrb	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	b292      	uxth	r2, r2
 8005af8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	3301      	adds	r3, #1
 8005afe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1cb      	bne.n	8005ab6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2200      	movs	r2, #0
 8005b26:	2140      	movs	r1, #64	; 0x40
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 fc9a 	bl	8006462 <UART_WaitOnFlagUntilTimeout>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e005      	b.n	8005b44 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e000      	b.n	8005b44 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005b42:	2302      	movs	r3, #2
  }
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3720      	adds	r7, #32
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	4613      	mov	r3, r2
 8005b58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b5e:	2b20      	cmp	r3, #32
 8005b60:	d12c      	bne.n	8005bbc <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <HAL_UART_Receive_DMA+0x22>
 8005b68:	88fb      	ldrh	r3, [r7, #6]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e025      	b.n	8005bbe <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <HAL_UART_Receive_DMA+0x34>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	e01e      	b.n	8005bbe <HAL_UART_Receive_DMA+0x72>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d007      	beq.n	8005bac <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005baa:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005bac:	88fb      	ldrh	r3, [r7, #6]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 fcd2 	bl	800655c <UART_Start_Receive_DMA>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	e000      	b.n	8005bbe <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005bbc:	2302      	movs	r3, #2
  }
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005be8:	69fa      	ldr	r2, [r7, #28]
 8005bea:	f640 030f 	movw	r3, #2063	; 0x80f
 8005bee:	4013      	ands	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d113      	bne.n	8005c20 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00e      	beq.n	8005c20 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d009      	beq.n	8005c20 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 81cd 	beq.w	8005fb0 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	4798      	blx	r3
      }
      return;
 8005c1e:	e1c7      	b.n	8005fb0 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 80e3 	beq.w	8005dee <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d105      	bne.n	8005c3e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	4ba5      	ldr	r3, [pc, #660]	; (8005ecc <HAL_UART_IRQHandler+0x304>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 80d8 	beq.w	8005dee <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d010      	beq.n	8005c6a <HAL_UART_IRQHandler+0xa2>
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00b      	beq.n	8005c6a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2201      	movs	r2, #1
 8005c58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c60:	f043 0201 	orr.w	r2, r3, #1
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d010      	beq.n	8005c96 <HAL_UART_IRQHandler+0xce>
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00b      	beq.n	8005c96 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2202      	movs	r2, #2
 8005c84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c8c:	f043 0204 	orr.w	r2, r3, #4
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d010      	beq.n	8005cc2 <HAL_UART_IRQHandler+0xfa>
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00b      	beq.n	8005cc2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2204      	movs	r2, #4
 8005cb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cb8:	f043 0202 	orr.w	r2, r3, #2
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d015      	beq.n	8005cf8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d104      	bne.n	8005ce0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00b      	beq.n	8005cf8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cee:	f043 0208 	orr.w	r2, r3, #8
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d011      	beq.n	8005d26 <HAL_UART_IRQHandler+0x15e>
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00c      	beq.n	8005d26 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d1c:	f043 0220 	orr.w	r2, r3, #32
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 8141 	beq.w	8005fb4 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f003 0320 	and.w	r3, r3, #32
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00c      	beq.n	8005d56 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	f003 0320 	and.w	r3, r3, #32
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d007      	beq.n	8005d56 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d5c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d68:	2b40      	cmp	r3, #64	; 0x40
 8005d6a:	d004      	beq.n	8005d76 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d031      	beq.n	8005dda <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fc71 	bl	800665e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d86:	2b40      	cmp	r3, #64	; 0x40
 8005d88:	d123      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d98:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d013      	beq.n	8005dca <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da6:	4a4a      	ldr	r2, [pc, #296]	; (8005ed0 <HAL_UART_IRQHandler+0x308>)
 8005da8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fc fb87 	bl	80024c2 <HAL_DMA_Abort_IT>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d017      	beq.n	8005dea <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc8:	e00f      	b.n	8005dea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f910 	bl	8005ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd0:	e00b      	b.n	8005dea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f90c 	bl	8005ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd8:	e007      	b.n	8005dea <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f908 	bl	8005ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005de8:	e0e4      	b.n	8005fb4 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dea:	bf00      	nop
    return;
 8005dec:	e0e2      	b.n	8005fb4 <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	f040 80a7 	bne.w	8005f46 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	f003 0310 	and.w	r3, r3, #16
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 80a1 	beq.w	8005f46 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 809b 	beq.w	8005f46 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2210      	movs	r2, #16
 8005e16:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e22:	2b40      	cmp	r3, #64	; 0x40
 8005e24:	d156      	bne.n	8005ed4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005e30:	893b      	ldrh	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 80c0 	beq.w	8005fb8 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e3e:	893a      	ldrh	r2, [r7, #8]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	f080 80b9 	bcs.w	8005fb8 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	893a      	ldrh	r2, [r7, #8]
 8005e4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d02a      	beq.n	8005eae <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e66:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689a      	ldr	r2, [r3, #8]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0201 	bic.w	r2, r2, #1
 8005e76:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e86:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0210 	bic.w	r2, r2, #16
 8005ea2:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fc fad1 	bl	8002450 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f89e 	bl	8006004 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005ec8:	e076      	b.n	8005fb8 <HAL_UART_IRQHandler+0x3f0>
 8005eca:	bf00      	nop
 8005ecc:	04000120 	.word	0x04000120
 8005ed0:	08006803 	.word	0x08006803
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d064      	beq.n	8005fbc <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 8005ef2:	897b      	ldrh	r3, [r7, #10]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d061      	beq.n	8005fbc <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f06:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0201 	bic.w	r2, r2, #1
 8005f16:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0210 	bic.w	r2, r2, #16
 8005f38:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f3a:	897b      	ldrh	r3, [r7, #10]
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f860 	bl	8006004 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005f44:	e03a      	b.n	8005fbc <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00d      	beq.n	8005f6c <HAL_UART_IRQHandler+0x3a4>
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d008      	beq.n	8005f6c <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fc7b 	bl	8006860 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f6a:	e02a      	b.n	8005fc2 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00d      	beq.n	8005f92 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d008      	beq.n	8005f92 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01b      	beq.n	8005fc0 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	4798      	blx	r3
    }
    return;
 8005f90:	e016      	b.n	8005fc0 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d012      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x3fa>
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00d      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fc41 	bl	800682e <UART_EndTransmit_IT>
    return;
 8005fac:	bf00      	nop
 8005fae:	e008      	b.n	8005fc2 <HAL_UART_IRQHandler+0x3fa>
      return;
 8005fb0:	bf00      	nop
 8005fb2:	e006      	b.n	8005fc2 <HAL_UART_IRQHandler+0x3fa>
    return;
 8005fb4:	bf00      	nop
 8005fb6:	e004      	b.n	8005fc2 <HAL_UART_IRQHandler+0x3fa>
      return;
 8005fb8:	bf00      	nop
 8005fba:	e002      	b.n	8005fc2 <HAL_UART_IRQHandler+0x3fa>
      return;
 8005fbc:	bf00      	nop
 8005fbe:	e000      	b.n	8005fc2 <HAL_UART_IRQHandler+0x3fa>
    return;
 8005fc0:	bf00      	nop
  }

}
 8005fc2:	3720      	adds	r7, #32
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b088      	sub	sp, #32
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006024:	2300      	movs	r3, #0
 8006026:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	431a      	orrs	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	431a      	orrs	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	4313      	orrs	r3, r2
 800603e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4b8b      	ldr	r3, [pc, #556]	; (8006274 <UART_SetConfig+0x258>)
 8006048:	4013      	ands	r3, r2
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6812      	ldr	r2, [r2, #0]
 800604e:	6979      	ldr	r1, [r7, #20]
 8006050:	430b      	orrs	r3, r1
 8006052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	4313      	orrs	r3, r2
 8006078:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	430a      	orrs	r2, r1
 800608c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a79      	ldr	r2, [pc, #484]	; (8006278 <UART_SetConfig+0x25c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d121      	bne.n	80060dc <UART_SetConfig+0xc0>
 8006098:	4b78      	ldr	r3, [pc, #480]	; (800627c <UART_SetConfig+0x260>)
 800609a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d817      	bhi.n	80060d4 <UART_SetConfig+0xb8>
 80060a4:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <UART_SetConfig+0x90>)
 80060a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060aa:	bf00      	nop
 80060ac:	080060bd 	.word	0x080060bd
 80060b0:	080060c9 	.word	0x080060c9
 80060b4:	080060cf 	.word	0x080060cf
 80060b8:	080060c3 	.word	0x080060c3
 80060bc:	2300      	movs	r3, #0
 80060be:	77fb      	strb	r3, [r7, #31]
 80060c0:	e01e      	b.n	8006100 <UART_SetConfig+0xe4>
 80060c2:	2302      	movs	r3, #2
 80060c4:	77fb      	strb	r3, [r7, #31]
 80060c6:	e01b      	b.n	8006100 <UART_SetConfig+0xe4>
 80060c8:	2304      	movs	r3, #4
 80060ca:	77fb      	strb	r3, [r7, #31]
 80060cc:	e018      	b.n	8006100 <UART_SetConfig+0xe4>
 80060ce:	2308      	movs	r3, #8
 80060d0:	77fb      	strb	r3, [r7, #31]
 80060d2:	e015      	b.n	8006100 <UART_SetConfig+0xe4>
 80060d4:	2310      	movs	r3, #16
 80060d6:	77fb      	strb	r3, [r7, #31]
 80060d8:	bf00      	nop
 80060da:	e011      	b.n	8006100 <UART_SetConfig+0xe4>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a67      	ldr	r2, [pc, #412]	; (8006280 <UART_SetConfig+0x264>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d102      	bne.n	80060ec <UART_SetConfig+0xd0>
 80060e6:	2300      	movs	r3, #0
 80060e8:	77fb      	strb	r3, [r7, #31]
 80060ea:	e009      	b.n	8006100 <UART_SetConfig+0xe4>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a64      	ldr	r2, [pc, #400]	; (8006284 <UART_SetConfig+0x268>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d102      	bne.n	80060fc <UART_SetConfig+0xe0>
 80060f6:	2300      	movs	r3, #0
 80060f8:	77fb      	strb	r3, [r7, #31]
 80060fa:	e001      	b.n	8006100 <UART_SetConfig+0xe4>
 80060fc:	2310      	movs	r3, #16
 80060fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006108:	d15c      	bne.n	80061c4 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 800610a:	7ffb      	ldrb	r3, [r7, #31]
 800610c:	2b08      	cmp	r3, #8
 800610e:	d828      	bhi.n	8006162 <UART_SetConfig+0x146>
 8006110:	a201      	add	r2, pc, #4	; (adr r2, 8006118 <UART_SetConfig+0xfc>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	0800613d 	.word	0x0800613d
 800611c:	08006145 	.word	0x08006145
 8006120:	0800614d 	.word	0x0800614d
 8006124:	08006163 	.word	0x08006163
 8006128:	08006153 	.word	0x08006153
 800612c:	08006163 	.word	0x08006163
 8006130:	08006163 	.word	0x08006163
 8006134:	08006163 	.word	0x08006163
 8006138:	0800615b 	.word	0x0800615b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800613c:	f7fd fde2 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 8006140:	61b8      	str	r0, [r7, #24]
        break;
 8006142:	e013      	b.n	800616c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006144:	f7fd fe00 	bl	8003d48 <HAL_RCC_GetPCLK2Freq>
 8006148:	61b8      	str	r0, [r7, #24]
        break;
 800614a:	e00f      	b.n	800616c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800614c:	4b4e      	ldr	r3, [pc, #312]	; (8006288 <UART_SetConfig+0x26c>)
 800614e:	61bb      	str	r3, [r7, #24]
        break;
 8006150:	e00c      	b.n	800616c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006152:	f7fd fd61 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8006156:	61b8      	str	r0, [r7, #24]
        break;
 8006158:	e008      	b.n	800616c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800615a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800615e:	61bb      	str	r3, [r7, #24]
        break;
 8006160:	e004      	b.n	800616c <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8006162:	2300      	movs	r3, #0
 8006164:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	77bb      	strb	r3, [r7, #30]
        break;
 800616a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d074      	beq.n	800625c <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	005a      	lsls	r2, r3, #1
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	085b      	lsrs	r3, r3, #1
 800617c:	441a      	add	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	fbb2 f3f3 	udiv	r3, r2, r3
 8006186:	b29b      	uxth	r3, r3
 8006188:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	2b0f      	cmp	r3, #15
 800618e:	d916      	bls.n	80061be <UART_SetConfig+0x1a2>
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006196:	d212      	bcs.n	80061be <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	b29b      	uxth	r3, r3
 800619c:	f023 030f 	bic.w	r3, r3, #15
 80061a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	085b      	lsrs	r3, r3, #1
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	89fb      	ldrh	r3, [r7, #14]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	89fa      	ldrh	r2, [r7, #14]
 80061ba:	60da      	str	r2, [r3, #12]
 80061bc:	e04e      	b.n	800625c <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	77bb      	strb	r3, [r7, #30]
 80061c2:	e04b      	b.n	800625c <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061c4:	7ffb      	ldrb	r3, [r7, #31]
 80061c6:	2b08      	cmp	r3, #8
 80061c8:	d827      	bhi.n	800621a <UART_SetConfig+0x1fe>
 80061ca:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <UART_SetConfig+0x1b4>)
 80061cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d0:	080061f5 	.word	0x080061f5
 80061d4:	080061fd 	.word	0x080061fd
 80061d8:	08006205 	.word	0x08006205
 80061dc:	0800621b 	.word	0x0800621b
 80061e0:	0800620b 	.word	0x0800620b
 80061e4:	0800621b 	.word	0x0800621b
 80061e8:	0800621b 	.word	0x0800621b
 80061ec:	0800621b 	.word	0x0800621b
 80061f0:	08006213 	.word	0x08006213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061f4:	f7fd fd86 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 80061f8:	61b8      	str	r0, [r7, #24]
        break;
 80061fa:	e013      	b.n	8006224 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061fc:	f7fd fda4 	bl	8003d48 <HAL_RCC_GetPCLK2Freq>
 8006200:	61b8      	str	r0, [r7, #24]
        break;
 8006202:	e00f      	b.n	8006224 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006204:	4b20      	ldr	r3, [pc, #128]	; (8006288 <UART_SetConfig+0x26c>)
 8006206:	61bb      	str	r3, [r7, #24]
        break;
 8006208:	e00c      	b.n	8006224 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800620a:	f7fd fd05 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 800620e:	61b8      	str	r0, [r7, #24]
        break;
 8006210:	e008      	b.n	8006224 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006216:	61bb      	str	r3, [r7, #24]
        break;
 8006218:	e004      	b.n	8006224 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	77bb      	strb	r3, [r7, #30]
        break;
 8006222:	bf00      	nop
    }

    if (pclk != 0U)
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d018      	beq.n	800625c <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	085a      	lsrs	r2, r3, #1
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	441a      	add	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	fbb2 f3f3 	udiv	r3, r2, r3
 800623c:	b29b      	uxth	r3, r3
 800623e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	2b0f      	cmp	r3, #15
 8006244:	d908      	bls.n	8006258 <UART_SetConfig+0x23c>
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800624c:	d204      	bcs.n	8006258 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	60da      	str	r2, [r3, #12]
 8006256:	e001      	b.n	800625c <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006268:	7fbb      	ldrb	r3, [r7, #30]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3720      	adds	r7, #32
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	efff69f3 	.word	0xefff69f3
 8006278:	40013800 	.word	0x40013800
 800627c:	40021000 	.word	0x40021000
 8006280:	40004400 	.word	0x40004400
 8006284:	40004800 	.word	0x40004800
 8006288:	007a1200 	.word	0x007a1200

0800628c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00a      	beq.n	800633e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	f003 0320 	and.w	r3, r3, #32
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d01a      	beq.n	80063a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800638a:	d10a      	bne.n	80063a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	605a      	str	r2, [r3, #4]
  }
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063e0:	f7fa ff18 	bl	8001214 <HAL_GetTick>
 80063e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0308 	and.w	r3, r3, #8
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d10e      	bne.n	8006412 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f82d 	bl	8006462 <UART_WaitOnFlagUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e023      	b.n	800645a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b04      	cmp	r3, #4
 800641e:	d10e      	bne.n	800643e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006420:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f817 	bl	8006462 <UART_WaitOnFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e00d      	b.n	800645a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	60f8      	str	r0, [r7, #12]
 800646a:	60b9      	str	r1, [r7, #8]
 800646c:	603b      	str	r3, [r7, #0]
 800646e:	4613      	mov	r3, r2
 8006470:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006472:	e05e      	b.n	8006532 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d05a      	beq.n	8006532 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647c:	f7fa feca 	bl	8001214 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	429a      	cmp	r2, r3
 800648a:	d302      	bcc.n	8006492 <UART_WaitOnFlagUntilTimeout+0x30>
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d11b      	bne.n	80064ca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80064a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0201 	bic.w	r2, r2, #1
 80064b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2220      	movs	r2, #32
 80064b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2220      	movs	r2, #32
 80064bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e043      	b.n	8006552 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d02c      	beq.n	8006532 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064e6:	d124      	bne.n	8006532 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006500:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0201 	bic.w	r2, r2, #1
 8006510:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2220      	movs	r2, #32
 8006516:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2220      	movs	r2, #32
 800651c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2220      	movs	r2, #32
 8006522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e00f      	b.n	8006552 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69da      	ldr	r2, [r3, #28]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4013      	ands	r3, r2
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	429a      	cmp	r2, r3
 8006540:	bf0c      	ite	eq
 8006542:	2301      	moveq	r3, #1
 8006544:	2300      	movne	r3, #0
 8006546:	b2db      	uxtb	r3, r3
 8006548:	461a      	mov	r2, r3
 800654a:	79fb      	ldrb	r3, [r7, #7]
 800654c:	429a      	cmp	r2, r3
 800654e:	d091      	beq.n	8006474 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	4613      	mov	r3, r2
 8006568:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	88fa      	ldrh	r2, [r7, #6]
 8006574:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2222      	movs	r2, #34	; 0x22
 8006584:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658a:	2b00      	cmp	r3, #0
 800658c:	d02b      	beq.n	80065e6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006592:	4a25      	ldr	r2, [pc, #148]	; (8006628 <UART_Start_Receive_DMA+0xcc>)
 8006594:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659a:	4a24      	ldr	r2, [pc, #144]	; (800662c <UART_Start_Receive_DMA+0xd0>)
 800659c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a2:	4a23      	ldr	r2, [pc, #140]	; (8006630 <UART_Start_Receive_DMA+0xd4>)
 80065a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065aa:	2200      	movs	r2, #0
 80065ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3324      	adds	r3, #36	; 0x24
 80065b8:	4619      	mov	r1, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065be:	461a      	mov	r2, r3
 80065c0:	88fb      	ldrh	r3, [r7, #6]
 80065c2:	f7fb fee6 	bl	8002392 <HAL_DMA_Start_IT>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00c      	beq.n	80065e6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2210      	movs	r2, #16
 80065d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2220      	movs	r2, #32
 80065e0:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e01c      	b.n	8006620 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065fc:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0201 	orr.w	r2, r2, #1
 800660c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800661c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	080066bd 	.word	0x080066bd
 800662c:	0800674f 	.word	0x0800674f
 8006630:	08006787 	.word	0x08006787

08006634 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800664a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006652:	bf00      	nop
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800665e:	b480      	push	{r7}
 8006660:	b083      	sub	sp, #12
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006674:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0201 	bic.w	r2, r2, #1
 8006684:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800668a:	2b01      	cmp	r3, #1
 800668c:	d107      	bne.n	800669e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0210 	bic.w	r2, r2, #16
 800669c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2220      	movs	r2, #32
 80066a2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	665a      	str	r2, [r3, #100]	; 0x64
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	2b20      	cmp	r3, #32
 80066d0:	d02a      	beq.n	8006728 <UART_DMAReceiveCplt+0x6c>
  {
    huart->RxXferCount = 0U;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066e8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0201 	bic.w	r2, r2, #1
 80066f8:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006708:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2220      	movs	r2, #32
 800670e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006714:	2b01      	cmp	r3, #1
 8006716:	d107      	bne.n	8006728 <UART_DMAReceiveCplt+0x6c>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0210 	bic.w	r2, r2, #16
 8006726:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800672c:	2b01      	cmp	r3, #1
 800672e:	d107      	bne.n	8006740 <UART_DMAReceiveCplt+0x84>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006736:	4619      	mov	r1, r3
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f7ff fc63 	bl	8006004 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800673e:	e002      	b.n	8006746 <UART_DMAReceiveCplt+0x8a>
    HAL_UART_RxCpltCallback(huart);
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f001 f8d5 	bl	80078f0 <HAL_UART_RxCpltCallback>
}
 8006746:	bf00      	nop
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b084      	sub	sp, #16
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006760:	2b01      	cmp	r3, #1
 8006762:	d109      	bne.n	8006778 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800676a:	085b      	lsrs	r3, r3, #1
 800676c:	b29b      	uxth	r3, r3
 800676e:	4619      	mov	r1, r3
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f7ff fc47 	bl	8006004 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006776:	e002      	b.n	800677e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7ff fc2f 	bl	8005fdc <HAL_UART_RxHalfCpltCallback>
}
 800677e:	bf00      	nop
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b086      	sub	sp, #24
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006792:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006798:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800679e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067aa:	2b80      	cmp	r3, #128	; 0x80
 80067ac:	d109      	bne.n	80067c2 <UART_DMAError+0x3c>
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	2b21      	cmp	r3, #33	; 0x21
 80067b2:	d106      	bne.n	80067c2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80067bc:	6978      	ldr	r0, [r7, #20]
 80067be:	f7ff ff39 	bl	8006634 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067cc:	2b40      	cmp	r3, #64	; 0x40
 80067ce:	d109      	bne.n	80067e4 <UART_DMAError+0x5e>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b22      	cmp	r3, #34	; 0x22
 80067d4:	d106      	bne.n	80067e4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2200      	movs	r2, #0
 80067da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80067de:	6978      	ldr	r0, [r7, #20]
 80067e0:	f7ff ff3d 	bl	800665e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067ea:	f043 0210 	orr.w	r2, r3, #16
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067f4:	6978      	ldr	r0, [r7, #20]
 80067f6:	f7ff fbfb 	bl	8005ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067fa:	bf00      	nop
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f7ff fbe5 	bl	8005ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006826:	bf00      	nop
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b082      	sub	sp, #8
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006844:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7ff fbb8 	bl	8005fc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006858:	bf00      	nop
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <energyflow_init>:
static void SC_Set_charging();
static void FC_Decharching(uint8_t state);
static void FC_to_SC_Current_regulator(uint8_t current);

void energyflow_init(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  hydros.HydrosSC.MaxSCCurrent = 10;
 8006878:	4b4b      	ldr	r3, [pc, #300]	; (80069a8 <energyflow_init+0x134>)
 800687a:	4a4c      	ldr	r2, [pc, #304]	; (80069ac <energyflow_init+0x138>)
 800687c:	60da      	str	r2, [r3, #12]
  hydros.HydrosSC.MaxSCVoltage = 37;
 800687e:	4b4a      	ldr	r3, [pc, #296]	; (80069a8 <energyflow_init+0x134>)
 8006880:	4a4b      	ldr	r2, [pc, #300]	; (80069b0 <energyflow_init+0x13c>)
 8006882:	605a      	str	r2, [r3, #4]
  hydros.HydrosSC.MinSCVoltage = 30;
 8006884:	4b48      	ldr	r3, [pc, #288]	; (80069a8 <energyflow_init+0x134>)
 8006886:	4a4b      	ldr	r2, [pc, #300]	; (80069b4 <energyflow_init+0x140>)
 8006888:	609a      	str	r2, [r3, #8]
  if (VALUES.SC_V.value >= hydros.HydrosSC.MaxSCVoltage)
 800688a:	4b4b      	ldr	r3, [pc, #300]	; (80069b8 <energyflow_init+0x144>)
 800688c:	ed93 7a08 	vldr	s14, [r3, #32]
 8006890:	4b45      	ldr	r3, [pc, #276]	; (80069a8 <energyflow_init+0x134>)
 8006892:	edd3 7a01 	vldr	s15, [r3, #4]
 8006896:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800689a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800689e:	db03      	blt.n	80068a8 <energyflow_init+0x34>
    {
      hydros.HydrosSC.SCstatus = CHARGED;
 80068a0:	4b41      	ldr	r3, [pc, #260]	; (80069a8 <energyflow_init+0x134>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	741a      	strb	r2, [r3, #16]
 80068a6:	e01c      	b.n	80068e2 <energyflow_init+0x6e>
    }
  else if (VALUES.SC_V.value <= hydros.HydrosSC.MinSCVoltage)
 80068a8:	4b43      	ldr	r3, [pc, #268]	; (80069b8 <energyflow_init+0x144>)
 80068aa:	ed93 7a08 	vldr	s14, [r3, #32]
 80068ae:	4b3e      	ldr	r3, [pc, #248]	; (80069a8 <energyflow_init+0x134>)
 80068b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80068b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068bc:	d803      	bhi.n	80068c6 <energyflow_init+0x52>
    {
      hydros.HydrosSC.SCstatus = DECHARGED;
 80068be:	4b3a      	ldr	r3, [pc, #232]	; (80069a8 <energyflow_init+0x134>)
 80068c0:	2202      	movs	r2, #2
 80068c2:	741a      	strb	r2, [r3, #16]
 80068c4:	e00d      	b.n	80068e2 <energyflow_init+0x6e>
    }
  else if (VALUES.SC_V.value > hydros.HydrosSC.MinSCVoltage)
 80068c6:	4b3c      	ldr	r3, [pc, #240]	; (80069b8 <energyflow_init+0x144>)
 80068c8:	ed93 7a08 	vldr	s14, [r3, #32]
 80068cc:	4b36      	ldr	r3, [pc, #216]	; (80069a8 <energyflow_init+0x134>)
 80068ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80068d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068da:	dd02      	ble.n	80068e2 <energyflow_init+0x6e>
    {
      hydros.HydrosSC.SCstatus = NOTFULLCHARGE;
 80068dc:	4b32      	ldr	r3, [pc, #200]	; (80069a8 <energyflow_init+0x134>)
 80068de:	2201      	movs	r2, #1
 80068e0:	741a      	strb	r2, [r3, #16]
    }
  hydros.HydrosFC.MinFCVoltage = 33;
 80068e2:	4b31      	ldr	r3, [pc, #196]	; (80069a8 <energyflow_init+0x134>)
 80068e4:	4a35      	ldr	r2, [pc, #212]	; (80069bc <energyflow_init+0x148>)
 80068e6:	615a      	str	r2, [r3, #20]
  FC_T_PID.setValue = 80;
 80068e8:	4b35      	ldr	r3, [pc, #212]	; (80069c0 <energyflow_init+0x14c>)
 80068ea:	4a36      	ldr	r2, [pc, #216]	; (80069c4 <energyflow_init+0x150>)
 80068ec:	601a      	str	r2, [r3, #0]
  hydros.charging = 0;
 80068ee:	4b2e      	ldr	r3, [pc, #184]	; (80069a8 <energyflow_init+0x134>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80068f4:	2108      	movs	r1, #8
 80068f6:	4834      	ldr	r0, [pc, #208]	; (80069c8 <energyflow_init+0x154>)
 80068f8:	f7fd fc84 	bl	8004204 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(SC_ON_GPIO_Port, SC_ON_Pin, RESET);
 80068fc:	2200      	movs	r2, #0
 80068fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006906:	f7fc f87d 	bl	8002a04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FC_DECHARGING_GPIO_Port, FC_DECHARGING_Pin, RESET);
 800690a:	2200      	movs	r2, #0
 800690c:	2180      	movs	r1, #128	; 0x80
 800690e:	482f      	ldr	r0, [pc, #188]	; (80069cc <energyflow_init+0x158>)
 8006910:	f7fc f878 	bl	8002a04 <HAL_GPIO_WritePin>
  SC_C_regulator.setValue = 8.6;
 8006914:	4b2e      	ldr	r3, [pc, #184]	; (80069d0 <energyflow_init+0x15c>)
 8006916:	4a2f      	ldr	r2, [pc, #188]	; (80069d4 <energyflow_init+0x160>)
 8006918:	601a      	str	r2, [r3, #0]
  SC_C_regulator.measurement = 0;
 800691a:	4b2d      	ldr	r3, [pc, #180]	; (80069d0 <energyflow_init+0x15c>)
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	605a      	str	r2, [r3, #4]
  SC_C_regulator.prevMeasurement = 0;
 8006922:	4b2b      	ldr	r3, [pc, #172]	; (80069d0 <energyflow_init+0x15c>)
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	609a      	str	r2, [r3, #8]
  SC_C_regulator.error = 0;
 800692a:	4b29      	ldr	r3, [pc, #164]	; (80069d0 <energyflow_init+0x15c>)
 800692c:	f04f 0200 	mov.w	r2, #0
 8006930:	60da      	str	r2, [r3, #12]
  SC_C_regulator.iError = 0;
 8006932:	4b27      	ldr	r3, [pc, #156]	; (80069d0 <energyflow_init+0x15c>)
 8006934:	f04f 0200 	mov.w	r2, #0
 8006938:	611a      	str	r2, [r3, #16]
  SC_C_regulator.dError = 0;
 800693a:	4b25      	ldr	r3, [pc, #148]	; (80069d0 <energyflow_init+0x15c>)
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	615a      	str	r2, [r3, #20]
  SC_C_regulator.lastError = 0;
 8006942:	4b23      	ldr	r3, [pc, #140]	; (80069d0 <energyflow_init+0x15c>)
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	619a      	str	r2, [r3, #24]
  SC_C_regulator.Kp = 7;
 800694a:	4b21      	ldr	r3, [pc, #132]	; (80069d0 <energyflow_init+0x15c>)
 800694c:	4a22      	ldr	r2, [pc, #136]	; (80069d8 <energyflow_init+0x164>)
 800694e:	61da      	str	r2, [r3, #28]
  SC_C_regulator.Ki = 3;
 8006950:	4b1f      	ldr	r3, [pc, #124]	; (80069d0 <energyflow_init+0x15c>)
 8006952:	4a22      	ldr	r2, [pc, #136]	; (80069dc <energyflow_init+0x168>)
 8006954:	621a      	str	r2, [r3, #32]
  SC_C_regulator.Kd = 0.02;
 8006956:	4b1e      	ldr	r3, [pc, #120]	; (80069d0 <energyflow_init+0x15c>)
 8006958:	4a21      	ldr	r2, [pc, #132]	; (80069e0 <energyflow_init+0x16c>)
 800695a:	625a      	str	r2, [r3, #36]	; 0x24
  SC_C_regulator.proportional = 0;
 800695c:	4b1c      	ldr	r3, [pc, #112]	; (80069d0 <energyflow_init+0x15c>)
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	629a      	str	r2, [r3, #40]	; 0x28
  SC_C_regulator.integrator = 1;
 8006964:	4b1a      	ldr	r3, [pc, #104]	; (80069d0 <energyflow_init+0x15c>)
 8006966:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800696a:	62da      	str	r2, [r3, #44]	; 0x2c
  SC_C_regulator.differentator = 0;
 800696c:	4b18      	ldr	r3, [pc, #96]	; (80069d0 <energyflow_init+0x15c>)
 800696e:	f04f 0200 	mov.w	r2, #0
 8006972:	631a      	str	r2, [r3, #48]	; 0x30
  SC_C_regulator.integratorMax = 20;
 8006974:	4b16      	ldr	r3, [pc, #88]	; (80069d0 <energyflow_init+0x15c>)
 8006976:	4a1b      	ldr	r2, [pc, #108]	; (80069e4 <energyflow_init+0x170>)
 8006978:	635a      	str	r2, [r3, #52]	; 0x34
  SC_C_regulator.integratorMin = 0;
 800697a:	4b15      	ldr	r3, [pc, #84]	; (80069d0 <energyflow_init+0x15c>)
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	639a      	str	r2, [r3, #56]	; 0x38
  SC_C_regulator.controlMax = 75;
 8006982:	4b13      	ldr	r3, [pc, #76]	; (80069d0 <energyflow_init+0x15c>)
 8006984:	4a18      	ldr	r2, [pc, #96]	; (80069e8 <energyflow_init+0x174>)
 8006986:	63da      	str	r2, [r3, #60]	; 0x3c
  SC_C_regulator.controlMin = 0;
 8006988:	4b11      	ldr	r3, [pc, #68]	; (80069d0 <energyflow_init+0x15c>)
 800698a:	f04f 0200 	mov.w	r2, #0
 800698e:	641a      	str	r2, [r3, #64]	; 0x40
  SC_C_regulator.PIDtime = 0.001;
 8006990:	4b0f      	ldr	r3, [pc, #60]	; (80069d0 <energyflow_init+0x15c>)
 8006992:	4a16      	ldr	r2, [pc, #88]	; (80069ec <energyflow_init+0x178>)
 8006994:	645a      	str	r2, [r3, #68]	; 0x44
  SC_C_regulator.PIDtimeFactor = 1;
 8006996:	4b0e      	ldr	r3, [pc, #56]	; (80069d0 <energyflow_init+0x15c>)
 8006998:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800699c:	649a      	str	r2, [r3, #72]	; 0x48
  SC_C_regulator.controlValue = 0;
 800699e:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <energyflow_init+0x15c>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80069a4:	bf00      	nop
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	2000046c 	.word	0x2000046c
 80069ac:	41200000 	.word	0x41200000
 80069b0:	42140000 	.word	0x42140000
 80069b4:	41f00000 	.word	0x41f00000
 80069b8:	2000048c 	.word	0x2000048c
 80069bc:	42040000 	.word	0x42040000
 80069c0:	200004dc 	.word	0x200004dc
 80069c4:	42a00000 	.word	0x42a00000
 80069c8:	200001d4 	.word	0x200001d4
 80069cc:	48000400 	.word	0x48000400
 80069d0:	2000041c 	.word	0x2000041c
 80069d4:	4109999a 	.word	0x4109999a
 80069d8:	40e00000 	.word	0x40e00000
 80069dc:	40400000 	.word	0x40400000
 80069e0:	3ca3d70a 	.word	0x3ca3d70a
 80069e4:	41a00000 	.word	0x41a00000
 80069e8:	42960000 	.word	0x42960000
 80069ec:	3a83126f 	.word	0x3a83126f

080069f0 <energyflow_step>:

void energyflow_step(void)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	af00      	add	r7, sp, #0
  if (!rs485_flt && !emergency)
 80069f4:	4b0f      	ldr	r3, [pc, #60]	; (8006a34 <energyflow_step+0x44>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d117      	bne.n	8006a2c <energyflow_step+0x3c>
 80069fc:	4b0e      	ldr	r3, [pc, #56]	; (8006a38 <energyflow_step+0x48>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d113      	bne.n	8006a2c <energyflow_step+0x3c>
    {
      dupa = 1;
 8006a04:	4b0d      	ldr	r3, [pc, #52]	; (8006a3c <energyflow_step+0x4c>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	701a      	strb	r2, [r3, #0]
      switch (RS485_RX_VERIFIED_DATA.emergencyScenario)
 8006a0a:	4b0d      	ldr	r3, [pc, #52]	; (8006a40 <energyflow_step+0x50>)
 8006a0c:	78db      	ldrb	r3, [r3, #3]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <energyflow_step+0x28>
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d003      	beq.n	8006a1e <energyflow_step+0x2e>
 8006a16:	e005      	b.n	8006a24 <energyflow_step+0x34>
	{
	case 0:
	  energyFlow();
 8006a18:	f000 f814 	bl	8006a44 <energyFlow>
	break;
 8006a1c:	e005      	b.n	8006a2a <energyflow_step+0x3a>
	case 1:
	  //energyflow_emergency();
	  energyFlow();
 8006a1e:	f000 f811 	bl	8006a44 <energyFlow>

	break;
 8006a22:	e002      	b.n	8006a2a <energyflow_step+0x3a>
	default:
	  //energyflow_emergency();
	  energyFlow();
 8006a24:	f000 f80e 	bl	8006a44 <energyFlow>

	break;
 8006a28:	bf00      	nop
	}
    }
 8006a2a:	e001      	b.n	8006a30 <energyflow_step+0x40>
  else
    {
      energyflow_emergency();
 8006a2c:	f000 f92c 	bl	8006c88 <energyflow_emergency>
    }
}
 8006a30:	bf00      	nop
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	20000010 	.word	0x20000010
 8006a38:	20000060 	.word	0x20000060
 8006a3c:	20000009 	.word	0x20000009
 8006a40:	2000052c 	.word	0x2000052c

08006a44 <energyFlow>:

static void energyFlow()
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0

  switch (RS485_RX_VERIFIED_DATA.mode)
 8006a48:	4b11      	ldr	r3, [pc, #68]	; (8006a90 <energyFlow+0x4c>)
 8006a4a:	785b      	ldrb	r3, [r3, #1]
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d81a      	bhi.n	8006a86 <energyFlow+0x42>
 8006a50:	a201      	add	r2, pc, #4	; (adr r2, 8006a58 <energyFlow+0x14>)
 8006a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a56:	bf00      	nop
 8006a58:	08006a69 	.word	0x08006a69
 8006a5c:	08006a75 	.word	0x08006a75
 8006a60:	08006a7b 	.word	0x08006a7b
 8006a64:	08006a81 	.word	0x08006a81
    {
    case 0:
      energyflow_mode0();
 8006a68:	f000 f816 	bl	8006a98 <energyflow_mode0>
      dupa = 2;
 8006a6c:	4b09      	ldr	r3, [pc, #36]	; (8006a94 <energyFlow+0x50>)
 8006a6e:	2202      	movs	r2, #2
 8006a70:	701a      	strb	r2, [r3, #0]
    break;
 8006a72:	e00b      	b.n	8006a8c <energyFlow+0x48>

    case 1:
      energyflow_preapre_to_race();
 8006a74:	f000 f846 	bl	8006b04 <energyflow_preapre_to_race>
    break;
 8006a78:	e008      	b.n	8006a8c <energyFlow+0x48>

    case 2:
      energyflow_race();
 8006a7a:	f000 f85d 	bl	8006b38 <energyflow_race>
    break;
 8006a7e:	e005      	b.n	8006a8c <energyFlow+0x48>

    case 3:
      energyflow_end_race();
 8006a80:	f000 f882 	bl	8006b88 <energyflow_end_race>
    break;
 8006a84:	e002      	b.n	8006a8c <energyFlow+0x48>

    default:
      energyflow_emergency();
 8006a86:	f000 f8ff 	bl	8006c88 <energyflow_emergency>
    break;
 8006a8a:	bf00      	nop
    }
}
 8006a8c:	bf00      	nop
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	2000052c 	.word	0x2000052c
 8006a94:	20000009 	.word	0x20000009

08006a98 <energyflow_mode0>:

static void energyflow_mode0()
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	af00      	add	r7, sp, #0
  FC_T_PID.setValue = 50;
 8006a9c:	4b14      	ldr	r3, [pc, #80]	; (8006af0 <energyflow_mode0+0x58>)
 8006a9e:	4a15      	ldr	r2, [pc, #84]	; (8006af4 <energyflow_mode0+0x5c>)
 8006aa0:	601a      	str	r2, [r3, #0]

  switch (RS485_RX_VERIFIED_DATA.scOn)
 8006aa2:	4b15      	ldr	r3, [pc, #84]	; (8006af8 <energyflow_mode0+0x60>)
 8006aa4:	789b      	ldrb	r3, [r3, #2]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <energyflow_mode0+0x18>
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d00e      	beq.n	8006acc <energyflow_mode0+0x34>
 8006aae:	e01a      	b.n	8006ae6 <energyflow_mode0+0x4e>
    {
    case 0:
      SC_State(0);
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	f000 f87d 	bl	8006bb0 <SC_State>
      //hydros.charging = 0;
      FC_to_SC_Current_regulator(3);
 8006ab6:	2003      	movs	r0, #3
 8006ab8:	f000 f90a 	bl	8006cd0 <FC_to_SC_Current_regulator>
      dupaPWM = hydros.charging;
 8006abc:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <energyflow_mode0+0x64>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a0f      	ldr	r2, [pc, #60]	; (8006b00 <energyflow_mode0+0x68>)
 8006ac2:	6013      	str	r3, [r2, #0]
      FC_Decharching(0);
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	f000 f8bd 	bl	8006c44 <FC_Decharching>
    break;
 8006aca:	e00f      	b.n	8006aec <energyflow_mode0+0x54>
    case 1:
      SC_State(1);
 8006acc:	2001      	movs	r0, #1
 8006ace:	f000 f86f 	bl	8006bb0 <SC_State>
      hydros.charging = 0;
 8006ad2:	4b0a      	ldr	r3, [pc, #40]	; (8006afc <energyflow_mode0+0x64>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	601a      	str	r2, [r3, #0]
      FC_to_SC_Current_regulator(3);
 8006ad8:	2003      	movs	r0, #3
 8006ada:	f000 f8f9 	bl	8006cd0 <FC_to_SC_Current_regulator>
      FC_Decharching(0);
 8006ade:	2000      	movs	r0, #0
 8006ae0:	f000 f8b0 	bl	8006c44 <FC_Decharching>
    break;
 8006ae4:	e002      	b.n	8006aec <energyflow_mode0+0x54>
    default:
      energyflow_emergency();
 8006ae6:	f000 f8cf 	bl	8006c88 <energyflow_emergency>
    break;
 8006aea:	bf00      	nop
    }
}
 8006aec:	bf00      	nop
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	200004dc 	.word	0x200004dc
 8006af4:	42480000 	.word	0x42480000
 8006af8:	2000052c 	.word	0x2000052c
 8006afc:	2000046c 	.word	0x2000046c
 8006b00:	20000030 	.word	0x20000030

08006b04 <energyflow_preapre_to_race>:

static void energyflow_preapre_to_race()
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
  //FC_T_PID.setValue = 10;
  FC_T_PID.setValue = 50;
 8006b08:	4b08      	ldr	r3, [pc, #32]	; (8006b2c <energyflow_preapre_to_race+0x28>)
 8006b0a:	4a09      	ldr	r2, [pc, #36]	; (8006b30 <energyflow_preapre_to_race+0x2c>)
 8006b0c:	601a      	str	r2, [r3, #0]
  hydros.charging = 0;
 8006b0e:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <energyflow_preapre_to_race+0x30>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]
  SC_State(0);
 8006b14:	2000      	movs	r0, #0
 8006b16:	f000 f84b 	bl	8006bb0 <SC_State>
  FC_to_SC_Current_regulator(0);
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	f000 f8d8 	bl	8006cd0 <FC_to_SC_Current_regulator>
  //SC_Set_charging(hydros.charging);
  FC_Decharching(1);
 8006b20:	2001      	movs	r0, #1
 8006b22:	f000 f88f 	bl	8006c44 <FC_Decharching>
}
 8006b26:	bf00      	nop
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	200004dc 	.word	0x200004dc
 8006b30:	42480000 	.word	0x42480000
 8006b34:	2000046c 	.word	0x2000046c

08006b38 <energyflow_race>:

static void energyflow_race()
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	af00      	add	r7, sp, #0
  //FC_T_PID.setValue = 10;
  FC_T_PID.setValue = 50;
 8006b3c:	4b0f      	ldr	r3, [pc, #60]	; (8006b7c <energyflow_race+0x44>)
 8006b3e:	4a10      	ldr	r2, [pc, #64]	; (8006b80 <energyflow_race+0x48>)
 8006b40:	601a      	str	r2, [r3, #0]
  FC_Decharching(0);
 8006b42:	2000      	movs	r0, #0
 8006b44:	f000 f87e 	bl	8006c44 <FC_Decharching>
  //RS485_RX_VERIFIED_DATA.scOn = 0;
  switch (RS485_RX_VERIFIED_DATA.scOn)
 8006b48:	4b0e      	ldr	r3, [pc, #56]	; (8006b84 <energyflow_race+0x4c>)
 8006b4a:	789b      	ldrb	r3, [r3, #2]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <energyflow_race+0x1e>
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d007      	beq.n	8006b64 <energyflow_race+0x2c>
 8006b54:	e00d      	b.n	8006b72 <energyflow_race+0x3a>
    {
    case 0:
      SC_State(0);
 8006b56:	2000      	movs	r0, #0
 8006b58:	f000 f82a 	bl	8006bb0 <SC_State>
      FC_to_SC_Current_regulator(5);
 8006b5c:	2005      	movs	r0, #5
 8006b5e:	f000 f8b7 	bl	8006cd0 <FC_to_SC_Current_regulator>
    break;
 8006b62:	e009      	b.n	8006b78 <energyflow_race+0x40>
    case 1:
      SC_State(1);
 8006b64:	2001      	movs	r0, #1
 8006b66:	f000 f823 	bl	8006bb0 <SC_State>
      FC_to_SC_Current_regulator(5);
 8006b6a:	2005      	movs	r0, #5
 8006b6c:	f000 f8b0 	bl	8006cd0 <FC_to_SC_Current_regulator>
    break;
 8006b70:	e002      	b.n	8006b78 <energyflow_race+0x40>
    default:
      energyflow_emergency();
 8006b72:	f000 f889 	bl	8006c88 <energyflow_emergency>
    break;
 8006b76:	bf00      	nop
    }
}
 8006b78:	bf00      	nop
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	200004dc 	.word	0x200004dc
 8006b80:	42480000 	.word	0x42480000
 8006b84:	2000052c 	.word	0x2000052c

08006b88 <energyflow_end_race>:

static void energyflow_end_race()
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	af00      	add	r7, sp, #0
  hydros.charging = 0;
 8006b8c:	4b07      	ldr	r3, [pc, #28]	; (8006bac <energyflow_end_race+0x24>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	601a      	str	r2, [r3, #0]
  SC_Set_charging(hydros.charging);
 8006b92:	4b06      	ldr	r3, [pc, #24]	; (8006bac <energyflow_end_race+0x24>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 f83c 	bl	8006c14 <SC_Set_charging>
  SC_State(0);
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	f000 f807 	bl	8006bb0 <SC_State>
  FC_Decharching(0);
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	f000 f84e 	bl	8006c44 <FC_Decharching>
}
 8006ba8:	bf00      	nop
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	2000046c 	.word	0x2000046c

08006bb0 <SC_State>:

static void SC_State(uint8_t state)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	71fb      	strb	r3, [r7, #7]
  switch (state)
 8006bba:	79fb      	ldrb	r3, [r7, #7]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <SC_State+0x16>
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d00b      	beq.n	8006bdc <SC_State+0x2c>
 8006bc4:	e015      	b.n	8006bf2 <SC_State+0x42>
    {
    case 0:
      HAL_GPIO_WritePin(SC_ON_GPIO_Port, SC_ON_Pin, RESET);
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006bd0:	f7fb ff18 	bl	8002a04 <HAL_GPIO_WritePin>
      dupaStanSC = 0;
 8006bd4:	4b0e      	ldr	r3, [pc, #56]	; (8006c10 <SC_State+0x60>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	701a      	strb	r2, [r3, #0]
    break;
 8006bda:	e015      	b.n	8006c08 <SC_State+0x58>
    case 1:
      dupaStanSC = 1;
 8006bdc:	4b0c      	ldr	r3, [pc, #48]	; (8006c10 <SC_State+0x60>)
 8006bde:	2201      	movs	r2, #1
 8006be0:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(SC_ON_GPIO_Port, SC_ON_Pin, SET);
 8006be2:	2201      	movs	r2, #1
 8006be4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006bec:	f7fb ff0a 	bl	8002a04 <HAL_GPIO_WritePin>
    break;
 8006bf0:	e00a      	b.n	8006c08 <SC_State+0x58>
    default:
      HAL_GPIO_WritePin(SC_ON_GPIO_Port, SC_ON_Pin, RESET);
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006bfc:	f7fb ff02 	bl	8002a04 <HAL_GPIO_WritePin>
      dupaStanSC = 0;
 8006c00:	4b03      	ldr	r3, [pc, #12]	; (8006c10 <SC_State+0x60>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	701a      	strb	r2, [r3, #0]
    break;
 8006c06:	bf00      	nop
    }
}
 8006c08:	bf00      	nop
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000034 	.word	0x20000034

08006c14 <SC_Set_charging>:

static void SC_Set_charging(uint32_t charging)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  TIM3->CCR3 = hydros.charging;
 8006c1c:	4a06      	ldr	r2, [pc, #24]	; (8006c38 <SC_Set_charging+0x24>)
 8006c1e:	4b07      	ldr	r3, [pc, #28]	; (8006c3c <SC_Set_charging+0x28>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	63d3      	str	r3, [r2, #60]	; 0x3c
  dupaPWM = hydros.charging;
 8006c24:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <SC_Set_charging+0x28>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a05      	ldr	r2, [pc, #20]	; (8006c40 <SC_Set_charging+0x2c>)
 8006c2a:	6013      	str	r3, [r2, #0]
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	40000400 	.word	0x40000400
 8006c3c:	2000046c 	.word	0x2000046c
 8006c40:	20000030 	.word	0x20000030

08006c44 <FC_Decharching>:

static void FC_Decharching(uint8_t state)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	71fb      	strb	r3, [r7, #7]
  switch (state)
 8006c4e:	79fb      	ldrb	r3, [r7, #7]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <FC_Decharching+0x16>
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d008      	beq.n	8006c6a <FC_Decharching+0x26>
 8006c58:	e00f      	b.n	8006c7a <FC_Decharching+0x36>
    {
    case 0:
      HAL_GPIO_WritePin(PURGING_GPIO_Port, PURGING_Pin, RESET);
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c64:	f7fb fece 	bl	8002a04 <HAL_GPIO_WritePin>
    break;
 8006c68:	e00a      	b.n	8006c80 <FC_Decharching+0x3c>
    case 1:
      HAL_GPIO_WritePin(PURGING_GPIO_Port, PURGING_Pin, SET);
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c74:	f7fb fec6 	bl	8002a04 <HAL_GPIO_WritePin>
    break;
 8006c78:	e002      	b.n	8006c80 <FC_Decharching+0x3c>
    default:
      energyflow_emergency();
 8006c7a:	f000 f805 	bl	8006c88 <energyflow_emergency>
    break;
 8006c7e:	bf00      	nop
    }
}
 8006c80:	bf00      	nop
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <energyflow_emergency>:

static void energyflow_emergency()
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  hydros.charging = 0;
 8006c8c:	4b0d      	ldr	r3, [pc, #52]	; (8006cc4 <energyflow_emergency+0x3c>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
  SC_Set_charging(hydros.charging);
 8006c92:	4b0c      	ldr	r3, [pc, #48]	; (8006cc4 <energyflow_emergency+0x3c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7ff ffbc 	bl	8006c14 <SC_Set_charging>
  SC_State(0);
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	f7ff ff87 	bl	8006bb0 <SC_State>
  dupa = 0;
 8006ca2:	4b09      	ldr	r3, [pc, #36]	; (8006cc8 <energyflow_emergency+0x40>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	701a      	strb	r2, [r3, #0]
  switch (RS485_RX_VERIFIED_DATA.mode)
 8006ca8:	4b08      	ldr	r3, [pc, #32]	; (8006ccc <energyflow_emergency+0x44>)
 8006caa:	785b      	ldrb	r3, [r3, #1]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d103      	bne.n	8006cb8 <energyflow_emergency+0x30>
    {
    case 1:
      //FC_Decharching(1);
      FC_Decharching(0);
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	f7ff ffc7 	bl	8006c44 <FC_Decharching>
    break;
 8006cb6:	e003      	b.n	8006cc0 <energyflow_emergency+0x38>
    default:
      FC_Decharching(0);
 8006cb8:	2000      	movs	r0, #0
 8006cba:	f7ff ffc3 	bl	8006c44 <FC_Decharching>
    break;
 8006cbe:	bf00      	nop
    }
}
 8006cc0:	bf00      	nop
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	2000046c 	.word	0x2000046c
 8006cc8:	20000009 	.word	0x20000009
 8006ccc:	2000052c 	.word	0x2000052c

08006cd0 <FC_to_SC_Current_regulator>:

static void FC_to_SC_Current_regulator(uint8_t current)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	71fb      	strb	r3, [r7, #7]
  static uint8_t time = 0;
  if (RS485_RX_VERIFIED_DATA.motorPWM == 0)
 8006cda:	4b91      	ldr	r3, [pc, #580]	; (8006f20 <FC_to_SC_Current_regulator+0x250>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f040 8116 	bne.w	8006f10 <FC_to_SC_Current_regulator+0x240>
    {
      if (time >= SC_C_regulator.PIDtimeFactor)
 8006ce4:	4b8f      	ldr	r3, [pc, #572]	; (8006f24 <FC_to_SC_Current_regulator+0x254>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	ee07 3a90 	vmov	s15, r3
 8006cec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006cf0:	4b8d      	ldr	r3, [pc, #564]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006cf2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8006cf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cfe:	f2c0 8100 	blt.w	8006f02 <FC_to_SC_Current_regulator+0x232>
	{
	  SC_C_regulator.setValue = current;
 8006d02:	79fb      	ldrb	r3, [r7, #7]
 8006d04:	ee07 3a90 	vmov	s15, r3
 8006d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0c:	4b86      	ldr	r3, [pc, #536]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006d0e:	edc3 7a00 	vstr	s15, [r3]
	  SC_C_regulator.measurement = VALUES.SC_C.value;
 8006d12:	4b86      	ldr	r3, [pc, #536]	; (8006f2c <FC_to_SC_Current_regulator+0x25c>)
 8006d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d16:	4a84      	ldr	r2, [pc, #528]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006d18:	6053      	str	r3, [r2, #4]

	  /*
	   * część proporcjonalna
	   */

	  SC_C_regulator.error = SC_C_regulator.setValue
 8006d1a:	4b83      	ldr	r3, [pc, #524]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006d1c:	ed93 7a00 	vldr	s14, [r3]
	      - SC_C_regulator.measurement;
 8006d20:	4b81      	ldr	r3, [pc, #516]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006d22:	edd3 7a01 	vldr	s15, [r3, #4]
 8006d26:	ee77 7a67 	vsub.f32	s15, s14, s15
	  SC_C_regulator.error = SC_C_regulator.setValue
 8006d2a:	4b7f      	ldr	r3, [pc, #508]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006d2c:	edc3 7a03 	vstr	s15, [r3, #12]
	  SC_C_regulator.proportional = SC_C_regulator.error
 8006d30:	4b7d      	ldr	r3, [pc, #500]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006d32:	ed93 7a03 	vldr	s14, [r3, #12]
	      * SC_C_regulator.Kp;
 8006d36:	4b7c      	ldr	r3, [pc, #496]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006d38:	edd3 7a07 	vldr	s15, [r3, #28]
 8006d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
	  SC_C_regulator.proportional = SC_C_regulator.error
 8006d40:	4b79      	ldr	r3, [pc, #484]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006d42:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	  /*
	   * część całkująca
	   */

	  SC_C_regulator.iError = SC_C_regulator.iError
 8006d46:	4b78      	ldr	r3, [pc, #480]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006d48:	ed93 7a04 	vldr	s14, [r3, #16]
	      + SC_C_regulator.PIDtime * SC_C_regulator.PIDtimeFactor * 0.5f
 8006d4c:	4b76      	ldr	r3, [pc, #472]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006d4e:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8006d52:	4b75      	ldr	r3, [pc, #468]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006d54:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8006d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d5c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006d60:	ee67 6aa6 	vmul.f32	s13, s15, s13
		  * (SC_C_regulator.error + SC_C_regulator.lastError); //Metoda trapezów suma dwóch następnych błędów podzielona na 2 pomnożona razy czas w [s] (wysokość trapezu)
 8006d64:	4b70      	ldr	r3, [pc, #448]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006d66:	ed93 6a03 	vldr	s12, [r3, #12]
 8006d6a:	4b6f      	ldr	r3, [pc, #444]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006d6c:	edd3 7a06 	vldr	s15, [r3, #24]
 8006d70:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006d74:	ee66 7aa7 	vmul.f32	s15, s13, s15
	      + SC_C_regulator.PIDtime * SC_C_regulator.PIDtimeFactor * 0.5f
 8006d78:	ee77 7a27 	vadd.f32	s15, s14, s15
	  SC_C_regulator.iError = SC_C_regulator.iError
 8006d7c:	4b6a      	ldr	r3, [pc, #424]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006d7e:	edc3 7a04 	vstr	s15, [r3, #16]
	  if (SC_C_regulator.iError >= SC_C_regulator.integratorMax)
 8006d82:	4b69      	ldr	r3, [pc, #420]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006d84:	ed93 7a04 	vldr	s14, [r3, #16]
 8006d88:	4b67      	ldr	r3, [pc, #412]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006d8a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006d8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d96:	db04      	blt.n	8006da2 <FC_to_SC_Current_regulator+0xd2>
	    {
	      SC_C_regulator.iError = SC_C_regulator.integratorMax;
 8006d98:	4b63      	ldr	r3, [pc, #396]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d9c:	4a62      	ldr	r2, [pc, #392]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006d9e:	6113      	str	r3, [r2, #16]
 8006da0:	e00e      	b.n	8006dc0 <FC_to_SC_Current_regulator+0xf0>
	    }
	  else if (SC_C_regulator.iError <= SC_C_regulator.integratorMin)
 8006da2:	4b61      	ldr	r3, [pc, #388]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006da4:	ed93 7a04 	vldr	s14, [r3, #16]
 8006da8:	4b5f      	ldr	r3, [pc, #380]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006daa:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006dae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db6:	d803      	bhi.n	8006dc0 <FC_to_SC_Current_regulator+0xf0>
	    {
	      SC_C_regulator.iError = SC_C_regulator.integratorMin;
 8006db8:	4b5b      	ldr	r3, [pc, #364]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbc:	4a5a      	ldr	r2, [pc, #360]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006dbe:	6113      	str	r3, [r2, #16]
	    }
	  SC_C_regulator.integrator = SC_C_regulator.iError * SC_C_regulator.Ki;
 8006dc0:	4b59      	ldr	r3, [pc, #356]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006dc2:	ed93 7a04 	vldr	s14, [r3, #16]
 8006dc6:	4b58      	ldr	r3, [pc, #352]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006dc8:	edd3 7a08 	vldr	s15, [r3, #32]
 8006dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd0:	4b55      	ldr	r3, [pc, #340]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006dd2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	  /*
	   * część różniczkująca
	   */

	  SC_C_regulator.dError = (SC_C_regulator.measurement
 8006dd6:	4b54      	ldr	r3, [pc, #336]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006dd8:	ed93 7a01 	vldr	s14, [r3, #4]
	      - SC_C_regulator.prevMeasurement)
 8006ddc:	4b52      	ldr	r3, [pc, #328]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006dde:	edd3 7a02 	vldr	s15, [r3, #8]
 8006de2:	ee77 6a67 	vsub.f32	s13, s14, s15
	      / (SC_C_regulator.PIDtime * SC_C_regulator.PIDtimeFactor);
 8006de6:	4b50      	ldr	r3, [pc, #320]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006de8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006dec:	4b4e      	ldr	r3, [pc, #312]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006dee:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8006df2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
	  SC_C_regulator.dError = (SC_C_regulator.measurement
 8006dfa:	4b4b      	ldr	r3, [pc, #300]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006dfc:	edc3 7a05 	vstr	s15, [r3, #20]
	  SC_C_regulator.differentator = SC_C_regulator.dError
 8006e00:	4b49      	ldr	r3, [pc, #292]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006e02:	ed93 7a05 	vldr	s14, [r3, #20]
	      * SC_C_regulator.Kd;
 8006e06:	4b48      	ldr	r3, [pc, #288]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006e08:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
	  SC_C_regulator.differentator = SC_C_regulator.dError
 8006e10:	4b45      	ldr	r3, [pc, #276]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006e12:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	  /*
	   * wartość sterująca
	   */

	  SC_C_regulator.controlValue = SC_C_regulator.proportional
 8006e16:	4b44      	ldr	r3, [pc, #272]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006e18:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
	      + SC_C_regulator.integrator + SC_C_regulator.differentator;
 8006e1c:	4b42      	ldr	r3, [pc, #264]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006e1e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006e22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006e26:	4b40      	ldr	r3, [pc, #256]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006e28:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
	  SC_C_regulator.controlValue = SC_C_regulator.proportional
 8006e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e34:	ee17 2a90 	vmov	r2, s15
 8006e38:	4b3b      	ldr	r3, [pc, #236]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006e3a:	64da      	str	r2, [r3, #76]	; 0x4c
	  if (SC_C_regulator.controlValue >= SC_C_regulator.controlMax)
 8006e3c:	4b3a      	ldr	r3, [pc, #232]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e40:	ee07 3a90 	vmov	s15, r3
 8006e44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e48:	4b37      	ldr	r3, [pc, #220]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006e4a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8006e4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e56:	db09      	blt.n	8006e6c <FC_to_SC_Current_regulator+0x19c>
	    {
	      SC_C_regulator.controlValue = SC_C_regulator.controlMax;
 8006e58:	4b33      	ldr	r3, [pc, #204]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006e5a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8006e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e62:	ee17 2a90 	vmov	r2, s15
 8006e66:	4b30      	ldr	r3, [pc, #192]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006e68:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e6a:	e016      	b.n	8006e9a <FC_to_SC_Current_regulator+0x1ca>
	    }
	  else if (SC_C_regulator.controlValue <= SC_C_regulator.controlMin)
 8006e6c:	4b2e      	ldr	r3, [pc, #184]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e70:	ee07 3a90 	vmov	s15, r3
 8006e74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e78:	4b2b      	ldr	r3, [pc, #172]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006e7a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006e7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e86:	d808      	bhi.n	8006e9a <FC_to_SC_Current_regulator+0x1ca>
	    {
	      SC_C_regulator.controlValue = SC_C_regulator.controlMin;
 8006e88:	4b27      	ldr	r3, [pc, #156]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006e8a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e92:	ee17 2a90 	vmov	r2, s15
 8006e96:	4b24      	ldr	r3, [pc, #144]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006e98:	64da      	str	r2, [r3, #76]	; 0x4c
	  /*
	   * Przepisanie
	   */

	  ;
	  SC_C_regulator.lastError = SC_C_regulator.error;
 8006e9a:	4b23      	ldr	r3, [pc, #140]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	4a22      	ldr	r2, [pc, #136]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006ea0:	6193      	str	r3, [r2, #24]
	  SC_C_regulator.prevMeasurement = SC_C_regulator.measurement;
 8006ea2:	4b21      	ldr	r3, [pc, #132]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	4a20      	ldr	r2, [pc, #128]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006ea8:	6093      	str	r3, [r2, #8]
	  if (!RS485_RX_VERIFIED_DATA.emergencyScenario)
 8006eaa:	4b1d      	ldr	r3, [pc, #116]	; (8006f20 <FC_to_SC_Current_regulator+0x250>)
 8006eac:	78db      	ldrb	r3, [r3, #3]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d11a      	bne.n	8006ee8 <FC_to_SC_Current_regulator+0x218>
	    {
	      hydros.charging = SC_C_regulator.controlValue;
 8006eb2:	4b1d      	ldr	r3, [pc, #116]	; (8006f28 <FC_to_SC_Current_regulator+0x258>)
 8006eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb6:	4a1e      	ldr	r2, [pc, #120]	; (8006f30 <FC_to_SC_Current_regulator+0x260>)
 8006eb8:	6013      	str	r3, [r2, #0]
	      dupaPWM = hydros.charging;
 8006eba:	4b1d      	ldr	r3, [pc, #116]	; (8006f30 <FC_to_SC_Current_regulator+0x260>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a1d      	ldr	r2, [pc, #116]	; (8006f34 <FC_to_SC_Current_regulator+0x264>)
 8006ec0:	6013      	str	r3, [r2, #0]
	      SC_Set_charging(hydros.charging);
 8006ec2:	4b1b      	ldr	r3, [pc, #108]	; (8006f30 <FC_to_SC_Current_regulator+0x260>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7ff fea4 	bl	8006c14 <SC_Set_charging>
	      if (VALUES.SC_C.value >= 40)
 8006ecc:	4b17      	ldr	r3, [pc, #92]	; (8006f2c <FC_to_SC_Current_regulator+0x25c>)
 8006ece:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006ed2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006f38 <FC_to_SC_Current_regulator+0x268>
 8006ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ede:	db0c      	blt.n	8006efa <FC_to_SC_Current_regulator+0x22a>
		{
		  SC_Set_charging(100);
 8006ee0:	2064      	movs	r0, #100	; 0x64
 8006ee2:	f7ff fe97 	bl	8006c14 <SC_Set_charging>
 8006ee6:	e008      	b.n	8006efa <FC_to_SC_Current_regulator+0x22a>
		}
	    }
	  else
	    {
	      hydros.charging = 0;
 8006ee8:	4b11      	ldr	r3, [pc, #68]	; (8006f30 <FC_to_SC_Current_regulator+0x260>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	601a      	str	r2, [r3, #0]
	      SC_Set_charging(0);
 8006eee:	2000      	movs	r0, #0
 8006ef0:	f7ff fe90 	bl	8006c14 <SC_Set_charging>
	      dupaPWM = 0;
 8006ef4:	4b0f      	ldr	r3, [pc, #60]	; (8006f34 <FC_to_SC_Current_regulator+0x264>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	601a      	str	r2, [r3, #0]
	    }
	  time = 0;
 8006efa:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <FC_to_SC_Current_regulator+0x254>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	701a      	strb	r2, [r3, #0]
    }
  else
    {
      SC_Set_charging(100);
    }
}
 8006f00:	e009      	b.n	8006f16 <FC_to_SC_Current_regulator+0x246>
	  time++;
 8006f02:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <FC_to_SC_Current_regulator+0x254>)
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	3301      	adds	r3, #1
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <FC_to_SC_Current_regulator+0x254>)
 8006f0c:	701a      	strb	r2, [r3, #0]
}
 8006f0e:	e002      	b.n	8006f16 <FC_to_SC_Current_regulator+0x246>
      SC_Set_charging(100);
 8006f10:	2064      	movs	r0, #100	; 0x64
 8006f12:	f7ff fe7f 	bl	8006c14 <SC_Set_charging>
}
 8006f16:	bf00      	nop
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	2000052c 	.word	0x2000052c
 8006f24:	20000035 	.word	0x20000035
 8006f28:	2000041c 	.word	0x2000041c
 8006f2c:	2000048c 	.word	0x2000048c
 8006f30:	2000046c 	.word	0x2000046c
 8006f34:	20000030 	.word	0x20000030
 8006f38:	42200000 	.word	0x42200000

08006f3c <fans_init>:
FC_FANS FANS;

static void doCalculations(void);

void fans_init()
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, &FANS.controlValue, 1);
 8006f40:	2301      	movs	r3, #1
 8006f42:	4a06      	ldr	r2, [pc, #24]	; (8006f5c <fans_init+0x20>)
 8006f44:	2100      	movs	r1, #0
 8006f46:	4806      	ldr	r0, [pc, #24]	; (8006f60 <fans_init+0x24>)
 8006f48:	f7fd fa48 	bl	80043dc <HAL_TIM_PWM_Start_DMA>
  FANS.rpm_1 = 1;
 8006f4c:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <fans_init+0x28>)
 8006f4e:	2201      	movs	r2, #1
 8006f50:	805a      	strh	r2, [r3, #2]
  FANS.fanstors485.rpm_2 = 1;
 8006f52:	4b04      	ldr	r3, [pc, #16]	; (8006f64 <fans_init+0x28>)
 8006f54:	2201      	movs	r2, #1
 8006f56:	801a      	strh	r2, [r3, #0]
}
 8006f58:	bf00      	nop
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	20000488 	.word	0x20000488
 8006f60:	2000026c 	.word	0x2000026c
 8006f64:	20000484 	.word	0x20000484

08006f68 <fansStep>:
void fansStep(void)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	af00      	add	r7, sp, #0
  doCalculations();
 8006f6c:	f000 f808 	bl	8006f80 <doCalculations>
  if (FANS.rpm_1 == 0 || FANS.fanstors485.rpm_2 == 0)
 8006f70:	4b02      	ldr	r3, [pc, #8]	; (8006f7c <fansStep+0x14>)
 8006f72:	885b      	ldrh	r3, [r3, #2]
 8006f74:	2b00      	cmp	r3, #0
    {
     // emergency = 1;
    }
}
 8006f76:	bf00      	nop
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000484 	.word	0x20000484

08006f80 <doCalculations>:

void doCalculations(void)   //co 150 ms
{
 8006f80:	b480      	push	{r7}
 8006f82:	af00      	add	r7, sp, #0
  sampleTime++;
 8006f84:	4b1a      	ldr	r3, [pc, #104]	; (8006ff0 <doCalculations+0x70>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	4b18      	ldr	r3, [pc, #96]	; (8006ff0 <doCalculations+0x70>)
 8006f8e:	701a      	strb	r2, [r3, #0]
  if (sampleTime >= 150)	//oblicz predkosc obrotowa w rpm
 8006f90:	4b17      	ldr	r3, [pc, #92]	; (8006ff0 <doCalculations+0x70>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	2b95      	cmp	r3, #149	; 0x95
 8006f96:	d926      	bls.n	8006fe6 <doCalculations+0x66>
    {
      FANS.rpm_1 = pulses_1 * 200;
 8006f98:	4b16      	ldr	r3, [pc, #88]	; (8006ff4 <doCalculations+0x74>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	0092      	lsls	r2, r2, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	0091      	lsls	r1, r2, #2
 8006fa8:	461a      	mov	r2, r3
 8006faa:	460b      	mov	r3, r1
 8006fac:	4413      	add	r3, r2
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	4b11      	ldr	r3, [pc, #68]	; (8006ff8 <doCalculations+0x78>)
 8006fb4:	805a      	strh	r2, [r3, #2]
      FANS.fanstors485.rpm_2 = pulses_2 * 200; //200 dla 150 ms okresu
 8006fb6:	4b11      	ldr	r3, [pc, #68]	; (8006ffc <doCalculations+0x7c>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	0092      	lsls	r2, r2, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	0091      	lsls	r1, r2, #2
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4413      	add	r3, r2
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	4b09      	ldr	r3, [pc, #36]	; (8006ff8 <doCalculations+0x78>)
 8006fd2:	801a      	strh	r2, [r3, #0]
      pulses_1 = 0;		//zeruj impulsy
 8006fd4:	4b07      	ldr	r3, [pc, #28]	; (8006ff4 <doCalculations+0x74>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	701a      	strb	r2, [r3, #0]
      pulses_2 = 0;
 8006fda:	4b08      	ldr	r3, [pc, #32]	; (8006ffc <doCalculations+0x7c>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	701a      	strb	r2, [r3, #0]
      sampleTime = 0;	//zeruj czas pomiaru
 8006fe0:	4b03      	ldr	r3, [pc, #12]	; (8006ff0 <doCalculations+0x70>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	701a      	strb	r2, [r3, #0]
    }
}
 8006fe6:	bf00      	nop
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	20000036 	.word	0x20000036
 8006ff4:	20000037 	.word	0x20000037
 8006ff8:	20000484 	.word	0x20000484
 8006ffc:	20000038 	.word	0x20000038

08007000 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	80fb      	strh	r3, [r7, #6]
  //Zlicza impulsy poszczegolnych wentylatorow
  switch (GPIO_Pin)
 800700a:	88fb      	ldrh	r3, [r7, #6]
 800700c:	2b02      	cmp	r3, #2
 800700e:	d009      	beq.n	8007024 <HAL_GPIO_EXTI_Callback+0x24>
 8007010:	2b40      	cmp	r3, #64	; 0x40
 8007012:	d000      	beq.n	8007016 <HAL_GPIO_EXTI_Callback+0x16>
    break;
    case fan_2_PIN:
      pulses_2++;
    break;
    default:
    break;
 8007014:	e00d      	b.n	8007032 <HAL_GPIO_EXTI_Callback+0x32>
      pulses_1++;
 8007016:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <HAL_GPIO_EXTI_Callback+0x40>)
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	3301      	adds	r3, #1
 800701c:	b2da      	uxtb	r2, r3
 800701e:	4b08      	ldr	r3, [pc, #32]	; (8007040 <HAL_GPIO_EXTI_Callback+0x40>)
 8007020:	701a      	strb	r2, [r3, #0]
    break;
 8007022:	e006      	b.n	8007032 <HAL_GPIO_EXTI_Callback+0x32>
      pulses_2++;
 8007024:	4b07      	ldr	r3, [pc, #28]	; (8007044 <HAL_GPIO_EXTI_Callback+0x44>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	3301      	adds	r3, #1
 800702a:	b2da      	uxtb	r2, r3
 800702c:	4b05      	ldr	r3, [pc, #20]	; (8007044 <HAL_GPIO_EXTI_Callback+0x44>)
 800702e:	701a      	strb	r2, [r3, #0]
    break;
 8007030:	bf00      	nop
    }
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	20000037 	.word	0x20000037
 8007044:	20000038 	.word	0x20000038

08007048 <hydrogreen_init>:
/**
 * @fn hydrogreen_init(void)
 * @brief Glowna funkcja inicjalizujaca, powinna zostac wywolana wewnatrz hydrogreen_main()
 */
static void hydrogreen_init(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	af00      	add	r7, sp, #0
  watchdog_init();
 800704c:	f000 fe9a 	bl	8007d84 <watchdog_init>
  timers_init();
 8007050:	f000 fd9c 	bl	8007b8c <timers_init>
  rs485_init();
 8007054:	f000 fb8c 	bl	8007770 <rs485_init>
  adc_init();
 8007058:	f000 f84a 	bl	80070f0 <adc_init>
  motor_init();
 800705c:	f000 f976 	bl	800734c <motor_init>
  energyflow_init();
 8007060:	f7ff fc08 	bl	8006874 <energyflow_init>
  fans_init();
 8007064:	f7ff ff6a 	bl	8006f3c <fans_init>
  PID_init();
 8007068:	f000 f99e 	bl	80073a8 <PID_init>
}
 800706c:	bf00      	nop
 800706e:	bd80      	pop	{r7, pc}

08007070 <hydrogreen_step1kHz>:
/**
 * @fn hydrogreen_step1kHz(void)
 * @brief Glowna funkcja wykonywana co T = 1ms, powinna zostac wywolana wewnatrz hydrogreen_main()
 */
static inline void hydrogreen_step1kHz(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
#ifdef HYDROGREEN_DEBUG
  HAL_GPIO_WritePin(GPIOA, DBG_Pin, GPIO_PIN_RESET);
#endif
  watchdog_step();
 8007074:	f000 ff5a 	bl	8007f2c <watchdog_step>
  energyflow_step();
 8007078:	f7ff fcba 	bl	80069f0 <energyflow_step>
  fansStep();
 800707c:	f7ff ff74 	bl	8006f68 <fansStep>
  PIDstep();
 8007080:	f000 f9f2 	bl	8007468 <PIDstep>
  adc_step();
 8007084:	f000 f948 	bl	8007318 <adc_step>
  motor_set_PWM();
 8007088:	f000 f96e 	bl	8007368 <motor_set_PWM>
#ifdef HYDROGREEN_DEBUG
  HAL_GPIO_WritePin(GPIOA, DBG_Pin, GPIO_PIN_SET);
#endif
}
 800708c:	bf00      	nop
 800708e:	bd80      	pop	{r7, pc}

08007090 <hydrogreen_step10kHz>:
/**
 * @fn hydrogreen_step(void)
 * @brief Glowna funkcja wykonywana co T = 0,1ms, powinna zostac wywolana wewnatrz hydrogreen_main()
 */
static inline void hydrogreen_step10kHz(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  rs485_step();
 8007094:	f000 fb7c 	bl	8007790 <rs485_step>
}
 8007098:	bf00      	nop
 800709a:	bd80      	pop	{r7, pc}

0800709c <hydrogreen_main>:
/**
 * @fn hydrogreen_main(void)
 * @brief Glowna funkcja programu, powinna zostac wywolana w pliku main.c, pomiedzy  USER CODE BEGIN 2 a USER CODE END 2
 */
void hydrogreen_main(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
  hydrogreen_init();
 80070a0:	f7ff ffd2 	bl	8007048 <hydrogreen_init>

  while (1)
    {
      //Sprawdz czy wystapil tick timera nastepujacy z f = 1kHz
      if (timers_tick1kHz)
 80070a4:	4b0c      	ldr	r3, [pc, #48]	; (80070d8 <hydrogreen_main+0x3c>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d008      	beq.n	80070c0 <hydrogreen_main+0x24>
	{
	  timers_beforeStep1kHz();
 80070ae:	f000 fdcb 	bl	8007c48 <timers_beforeStep1kHz>

	  hydrogreen_step1kHz();
 80070b2:	f7ff ffdd 	bl	8007070 <hydrogreen_step1kHz>

	  timers_afterStep1kHz();
 80070b6:	f000 fdd3 	bl	8007c60 <timers_afterStep1kHz>

	  timers_tick1kHz = 0;
 80070ba:	4b07      	ldr	r3, [pc, #28]	; (80070d8 <hydrogreen_main+0x3c>)
 80070bc:	2200      	movs	r2, #0
 80070be:	701a      	strb	r2, [r3, #0]
	}

      //Sprawdz czy wystapil tick timera nastepujacy z f = 10kHz
      if (timers_tick10kHz)
 80070c0:	4b06      	ldr	r3, [pc, #24]	; (80070dc <hydrogreen_main+0x40>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d0ec      	beq.n	80070a4 <hydrogreen_main+0x8>
	{
	  hydrogreen_step10kHz();
 80070ca:	f7ff ffe1 	bl	8007090 <hydrogreen_step10kHz>
	  timers_tick10kHz = 0;
 80070ce:	4b03      	ldr	r3, [pc, #12]	; (80070dc <hydrogreen_main+0x40>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	701a      	strb	r2, [r3, #0]
      if (timers_tick1kHz)
 80070d4:	e7e6      	b.n	80070a4 <hydrogreen_main+0x8>
 80070d6:	bf00      	nop
 80070d8:	20000534 	.word	0x20000534
 80070dc:	20000530 	.word	0x20000530

080070e0 <hydrogreen_hardFault>:
/**
 * @fn hydrogreen_hardFault(void)
 * @brief Sygnalizacja wystapienia hard fault'a, wywolac w pliku main.c, w funkcji Error_Handler()
 */
void hydrogreen_hardFault(void)
{
 80070e0:	b480      	push	{r7}
 80070e2:	af00      	add	r7, sp, #0
  //HAL_GPIO_WritePin(GPIOB, LED_NUCLEO_Pin, GPIO_PIN_SET);
}
 80070e4:	bf00      	nop
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
	...

080070f0 <adc_init>:
static void averaging_Values(void);
/*
 * Inicjalizacja adc z dma oraz stałych filtrujących dla filtru
 */
void adc_init(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  HAL_ADC_Start_DMA(&adcChannel, (uint32_t*) adcDataToCalculate, 4);
 80070f4:	2204      	movs	r2, #4
 80070f6:	490a      	ldr	r1, [pc, #40]	; (8007120 <adc_init+0x30>)
 80070f8:	480a      	ldr	r0, [pc, #40]	; (8007124 <adc_init+0x34>)
 80070fa:	f7fa fa47 	bl	800158c <HAL_ADC_Start_DMA>
  VALUES.FC_Temp_Const = 255;
 80070fe:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <adc_init+0x38>)
 8007100:	22ff      	movs	r2, #255	; 0xff
 8007102:	731a      	strb	r2, [r3, #12]
  VALUES.FC_V_Const = 99;
 8007104:	4b08      	ldr	r3, [pc, #32]	; (8007128 <adc_init+0x38>)
 8007106:	2263      	movs	r2, #99	; 0x63
 8007108:	771a      	strb	r2, [r3, #28]
  VALUES.SC_C_Const = 5.76;
 800710a:	4b07      	ldr	r3, [pc, #28]	; (8007128 <adc_init+0x38>)
 800710c:	2205      	movs	r2, #5
 800710e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  VALUES.SC_V_Const = 99;
 8007112:	4b05      	ldr	r3, [pc, #20]	; (8007128 <adc_init+0x38>)
 8007114:	2263      	movs	r2, #99	; 0x63
 8007116:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 800711a:	bf00      	nop
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	200004d0 	.word	0x200004d0
 8007124:	20000084 	.word	0x20000084
 8007128:	2000048c 	.word	0x2000048c

0800712c <calculateValues>:
/*
 * Funkcja przelicza wartosci z ADC na wartosci uzyteczne
 */
static void calculateValues(void)
{
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0
  //Przelicza wartosci z ADC na temperature w stopniach Celsjusza, napiecie i prad
  VALUES.FC_Temp_to_average = (((4095.0f - (float) adcDataToCalculate[0]) * 20))
 8007130:	4b2a      	ldr	r3, [pc, #168]	; (80071dc <calculateValues+0xb0>)
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	ee07 3a90 	vmov	s15, r3
 8007138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80071e0 <calculateValues+0xb4>
 8007140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007144:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8007148:	ee27 7a87 	vmul.f32	s14, s15, s14
      / 300.0f; //zależność wyznaczona eksperymentalnie w sali
 800714c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80071e4 <calculateValues+0xb8>
 8007150:	eec7 7a26 	vdiv.f32	s15, s14, s13
  VALUES.FC_Temp_to_average = (((4095.0f - (float) adcDataToCalculate[0]) * 20))
 8007154:	4b24      	ldr	r3, [pc, #144]	; (80071e8 <calculateValues+0xbc>)
 8007156:	edc3 7a02 	vstr	s15, [r3, #8]
  VALUES.SC_V_to_average = (((float) adcDataToCalculate[1]) * 62.5f) / 4095.0f;
 800715a:	4b20      	ldr	r3, [pc, #128]	; (80071dc <calculateValues+0xb0>)
 800715c:	885b      	ldrh	r3, [r3, #2]
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007166:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80071ec <calculateValues+0xc0>
 800716a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800716e:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80071e0 <calculateValues+0xb4>
 8007172:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007176:	4b1c      	ldr	r3, [pc, #112]	; (80071e8 <calculateValues+0xbc>)
 8007178:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  // VALUES.SC_C_to_average = (((float) adcDataToCalculate[2]) / 4095.0f) * 5.0f;
  VALUES.SC_C_to_average = (((((float) adcDataToCalculate[3] * 5.178f) / 4095.0f))
 800717c:	4b17      	ldr	r3, [pc, #92]	; (80071dc <calculateValues+0xb0>)
 800717e:	88db      	ldrh	r3, [r3, #6]
 8007180:	ee07 3a90 	vmov	s15, r3
 8007184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007188:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80071f0 <calculateValues+0xc4>
 800718c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007190:	eddf 6a13 	vldr	s13, [pc, #76]	; 80071e0 <calculateValues+0xb4>
 8007194:	eec7 7a26 	vdiv.f32	s15, s14, s13
      - 2.5f) * (25.0f / 0.625f);
 8007198:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800719c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071a0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80071f4 <calculateValues+0xc8>
 80071a4:	ee67 7a87 	vmul.f32	s15, s15, s14
  VALUES.SC_C_to_average = (((((float) adcDataToCalculate[3] * 5.178f) / 4095.0f))
 80071a8:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <calculateValues+0xbc>)
 80071aa:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  VALUES.FC_V_to_average = (((float) adcDataToCalculate[2]) * 65.2f) / 4095.0f;
 80071ae:	4b0b      	ldr	r3, [pc, #44]	; (80071dc <calculateValues+0xb0>)
 80071b0:	889b      	ldrh	r3, [r3, #4]
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ba:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80071f8 <calculateValues+0xcc>
 80071be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80071c2:	eddf 6a07 	vldr	s13, [pc, #28]	; 80071e0 <calculateValues+0xb4>
 80071c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071ca:	4b07      	ldr	r3, [pc, #28]	; (80071e8 <calculateValues+0xbc>)
 80071cc:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80071d0:	bf00      	nop
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	200004d0 	.word	0x200004d0
 80071e0:	457ff000 	.word	0x457ff000
 80071e4:	43960000 	.word	0x43960000
 80071e8:	2000048c 	.word	0x2000048c
 80071ec:	427a0000 	.word	0x427a0000
 80071f0:	40a5b22d 	.word	0x40a5b22d
 80071f4:	42200000 	.word	0x42200000
 80071f8:	42826666 	.word	0x42826666

080071fc <averaging_Values>:
/*
 * Funkcja filtrujaca pomiary
 */
static void averaging_Values(void)
{
 80071fc:	b480      	push	{r7}
 80071fe:	af00      	add	r7, sp, #0
  VALUES.FC_TEMP.value = (VALUES.prev_FC_Temp * (VALUES.FC_Temp_Const - 1)
 8007200:	4b44      	ldr	r3, [pc, #272]	; (8007314 <averaging_Values+0x118>)
 8007202:	ed93 7a01 	vldr	s14, [r3, #4]
 8007206:	4b43      	ldr	r3, [pc, #268]	; (8007314 <averaging_Values+0x118>)
 8007208:	7b1b      	ldrb	r3, [r3, #12]
 800720a:	3b01      	subs	r3, #1
 800720c:	ee07 3a90 	vmov	s15, r3
 8007210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007214:	ee27 7a27 	vmul.f32	s14, s14, s15
      + VALUES.FC_Temp_to_average) / VALUES.FC_Temp_Const;
 8007218:	4b3e      	ldr	r3, [pc, #248]	; (8007314 <averaging_Values+0x118>)
 800721a:	edd3 7a02 	vldr	s15, [r3, #8]
 800721e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8007222:	4b3c      	ldr	r3, [pc, #240]	; (8007314 <averaging_Values+0x118>)
 8007224:	7b1b      	ldrb	r3, [r3, #12]
 8007226:	ee07 3a90 	vmov	s15, r3
 800722a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800722e:	eec6 7a87 	vdiv.f32	s15, s13, s14
  VALUES.FC_TEMP.value = (VALUES.prev_FC_Temp * (VALUES.FC_Temp_Const - 1)
 8007232:	4b38      	ldr	r3, [pc, #224]	; (8007314 <averaging_Values+0x118>)
 8007234:	edc3 7a00 	vstr	s15, [r3]
  VALUES.SC_V.value = (VALUES.prev_SC_V * (VALUES.SC_V_Const - 1)
 8007238:	4b36      	ldr	r3, [pc, #216]	; (8007314 <averaging_Values+0x118>)
 800723a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800723e:	4b35      	ldr	r3, [pc, #212]	; (8007314 <averaging_Values+0x118>)
 8007240:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007244:	3b01      	subs	r3, #1
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800724e:	ee27 7a27 	vmul.f32	s14, s14, s15
      + VALUES.SC_V_to_average) / VALUES.SC_V_Const;
 8007252:	4b30      	ldr	r3, [pc, #192]	; (8007314 <averaging_Values+0x118>)
 8007254:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007258:	ee77 6a27 	vadd.f32	s13, s14, s15
 800725c:	4b2d      	ldr	r3, [pc, #180]	; (8007314 <averaging_Values+0x118>)
 800725e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800726a:	eec6 7a87 	vdiv.f32	s15, s13, s14
  VALUES.SC_V.value = (VALUES.prev_SC_V * (VALUES.SC_V_Const - 1)
 800726e:	4b29      	ldr	r3, [pc, #164]	; (8007314 <averaging_Values+0x118>)
 8007270:	edc3 7a08 	vstr	s15, [r3, #32]
  VALUES.SC_C.value = (VALUES.prev_SC_C * (VALUES.SC_C_Const - 1)
 8007274:	4b27      	ldr	r3, [pc, #156]	; (8007314 <averaging_Values+0x118>)
 8007276:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800727a:	4b26      	ldr	r3, [pc, #152]	; (8007314 <averaging_Values+0x118>)
 800727c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007280:	3b01      	subs	r3, #1
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800728a:	ee27 7a27 	vmul.f32	s14, s14, s15
      + VALUES.SC_C_to_average) / VALUES.SC_C_Const;
 800728e:	4b21      	ldr	r3, [pc, #132]	; (8007314 <averaging_Values+0x118>)
 8007290:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007294:	ee77 6a27 	vadd.f32	s13, s14, s15
 8007298:	4b1e      	ldr	r3, [pc, #120]	; (8007314 <averaging_Values+0x118>)
 800729a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800729e:	ee07 3a90 	vmov	s15, r3
 80072a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
  VALUES.SC_C.value = (VALUES.prev_SC_C * (VALUES.SC_C_Const - 1)
 80072aa:	4b1a      	ldr	r3, [pc, #104]	; (8007314 <averaging_Values+0x118>)
 80072ac:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  VALUES.FC_V.value = (VALUES.prev_FC_V * (VALUES.FC_V_Const - 1)
 80072b0:	4b18      	ldr	r3, [pc, #96]	; (8007314 <averaging_Values+0x118>)
 80072b2:	ed93 7a05 	vldr	s14, [r3, #20]
 80072b6:	4b17      	ldr	r3, [pc, #92]	; (8007314 <averaging_Values+0x118>)
 80072b8:	7f1b      	ldrb	r3, [r3, #28]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	ee07 3a90 	vmov	s15, r3
 80072c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072c4:	ee27 7a27 	vmul.f32	s14, s14, s15
      + VALUES.FC_V_to_average) / VALUES.FC_V_Const;
 80072c8:	4b12      	ldr	r3, [pc, #72]	; (8007314 <averaging_Values+0x118>)
 80072ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80072ce:	ee77 6a27 	vadd.f32	s13, s14, s15
 80072d2:	4b10      	ldr	r3, [pc, #64]	; (8007314 <averaging_Values+0x118>)
 80072d4:	7f1b      	ldrb	r3, [r3, #28]
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072de:	eec6 7a87 	vdiv.f32	s15, s13, s14
  VALUES.FC_V.value = (VALUES.prev_FC_V * (VALUES.FC_V_Const - 1)
 80072e2:	4b0c      	ldr	r3, [pc, #48]	; (8007314 <averaging_Values+0x118>)
 80072e4:	edc3 7a04 	vstr	s15, [r3, #16]
  VALUES.prev_FC_Temp = VALUES.FC_Temp_to_average;
 80072e8:	4b0a      	ldr	r3, [pc, #40]	; (8007314 <averaging_Values+0x118>)
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	4a09      	ldr	r2, [pc, #36]	; (8007314 <averaging_Values+0x118>)
 80072ee:	6053      	str	r3, [r2, #4]
  VALUES.prev_FC_V = VALUES.FC_V_to_average;
 80072f0:	4b08      	ldr	r3, [pc, #32]	; (8007314 <averaging_Values+0x118>)
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	4a07      	ldr	r2, [pc, #28]	; (8007314 <averaging_Values+0x118>)
 80072f6:	6153      	str	r3, [r2, #20]
  VALUES.prev_SC_C = VALUES.SC_C_to_average;
 80072f8:	4b06      	ldr	r3, [pc, #24]	; (8007314 <averaging_Values+0x118>)
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	4a05      	ldr	r2, [pc, #20]	; (8007314 <averaging_Values+0x118>)
 80072fe:	6353      	str	r3, [r2, #52]	; 0x34
  VALUES.prev_SC_V = VALUES.SC_V_to_average;
 8007300:	4b04      	ldr	r3, [pc, #16]	; (8007314 <averaging_Values+0x118>)
 8007302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007304:	4a03      	ldr	r2, [pc, #12]	; (8007314 <averaging_Values+0x118>)
 8007306:	6253      	str	r3, [r2, #36]	; 0x24
}
 8007308:	bf00      	nop
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	2000048c 	.word	0x2000048c

08007318 <adc_step>:
void adc_step()
{
 8007318:	b580      	push	{r7, lr}
 800731a:	af00      	add	r7, sp, #0
  calculateValues();
 800731c:	f7ff ff06 	bl	800712c <calculateValues>
  averaging_Values();
 8007320:	f7ff ff6c 	bl	80071fc <averaging_Values>
  if(VALUES.SC_C.value >= 10)
 8007324:	4b07      	ldr	r3, [pc, #28]	; (8007344 <adc_step+0x2c>)
 8007326:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800732a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800732e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007336:	da00      	bge.n	800733a <adc_step+0x22>
    {
      emergency = 0;
    }
}
 8007338:	e002      	b.n	8007340 <adc_step+0x28>
      emergency = 0;
 800733a:	4b03      	ldr	r3, [pc, #12]	; (8007348 <adc_step+0x30>)
 800733c:	2200      	movs	r2, #0
 800733e:	701a      	strb	r2, [r3, #0]
}
 8007340:	bf00      	nop
 8007342:	bd80      	pop	{r7, pc}
 8007344:	2000048c 	.word	0x2000048c
 8007348:	20000060 	.word	0x20000060

0800734c <motor_init>:

uint32_t motorPWM = 20;
uint32_t motorPWMconst = 7;

void motor_init(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, &motorPWM, 1);
 8007350:	2301      	movs	r3, #1
 8007352:	4a03      	ldr	r2, [pc, #12]	; (8007360 <motor_init+0x14>)
 8007354:	2100      	movs	r1, #0
 8007356:	4803      	ldr	r0, [pc, #12]	; (8007364 <motor_init+0x18>)
 8007358:	f7fd f840 	bl	80043dc <HAL_TIM_PWM_Start_DMA>
  //HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, &motorPWMconst, 1);
}
 800735c:	bf00      	nop
 800735e:	bd80      	pop	{r7, pc}
 8007360:	2000000c 	.word	0x2000000c
 8007364:	200002b8 	.word	0x200002b8

08007368 <motor_set_PWM>:

void motor_set_PWM(void)
{
 8007368:	b480      	push	{r7}
 800736a:	af00      	add	r7, sp, #0
	//}
      //else
	//{


  if (!rs485_flt && !emergency)
 800736c:	4b0a      	ldr	r3, [pc, #40]	; (8007398 <motor_set_PWM+0x30>)
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d109      	bne.n	8007388 <motor_set_PWM+0x20>
 8007374:	4b09      	ldr	r3, [pc, #36]	; (800739c <motor_set_PWM+0x34>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d105      	bne.n	8007388 <motor_set_PWM+0x20>
    {
	  motorPWM = RS485_RX_VERIFIED_DATA.motorPWM;
 800737c:	4b08      	ldr	r3, [pc, #32]	; (80073a0 <motor_set_PWM+0x38>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	461a      	mov	r2, r3
 8007382:	4b08      	ldr	r3, [pc, #32]	; (80073a4 <motor_set_PWM+0x3c>)
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	e002      	b.n	800738e <motor_set_PWM+0x26>
    }
  else
    {
      motorPWM = 0;
 8007388:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <motor_set_PWM+0x3c>)
 800738a:	2200      	movs	r2, #0
 800738c:	601a      	str	r2, [r3, #0]
   // }
 // else
    //{
      //motorPWM = RS485_RX_VERIFIED_DATA.motorPWM;
    //}
}
 800738e:	bf00      	nop
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	20000010 	.word	0x20000010
 800739c:	20000060 	.word	0x20000060
 80073a0:	2000052c 	.word	0x2000052c
 80073a4:	2000000c 	.word	0x2000000c

080073a8 <PID_init>:
#include "fans.h"

PID_struct FC_T_PID;

void PID_init()
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
  FC_T_PID.Kp = 3.9;
 80073ac:	4b25      	ldr	r3, [pc, #148]	; (8007444 <PID_init+0x9c>)
 80073ae:	4a26      	ldr	r2, [pc, #152]	; (8007448 <PID_init+0xa0>)
 80073b0:	61da      	str	r2, [r3, #28]
  FC_T_PID.Ki = 1.2;
 80073b2:	4b24      	ldr	r3, [pc, #144]	; (8007444 <PID_init+0x9c>)
 80073b4:	4a25      	ldr	r2, [pc, #148]	; (800744c <PID_init+0xa4>)
 80073b6:	621a      	str	r2, [r3, #32]
  FC_T_PID.Kd = 0.0012;
 80073b8:	4b22      	ldr	r3, [pc, #136]	; (8007444 <PID_init+0x9c>)
 80073ba:	4a25      	ldr	r2, [pc, #148]	; (8007450 <PID_init+0xa8>)
 80073bc:	625a      	str	r2, [r3, #36]	; 0x24
  FC_T_PID.controlValue = 0;
 80073be:	4b21      	ldr	r3, [pc, #132]	; (8007444 <PID_init+0x9c>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	64da      	str	r2, [r3, #76]	; 0x4c
  FC_T_PID.error = 0;
 80073c4:	4b1f      	ldr	r3, [pc, #124]	; (8007444 <PID_init+0x9c>)
 80073c6:	f04f 0200 	mov.w	r2, #0
 80073ca:	60da      	str	r2, [r3, #12]
  FC_T_PID.iError = 0;
 80073cc:	4b1d      	ldr	r3, [pc, #116]	; (8007444 <PID_init+0x9c>)
 80073ce:	f04f 0200 	mov.w	r2, #0
 80073d2:	611a      	str	r2, [r3, #16]
  FC_T_PID.dError = 0;
 80073d4:	4b1b      	ldr	r3, [pc, #108]	; (8007444 <PID_init+0x9c>)
 80073d6:	f04f 0200 	mov.w	r2, #0
 80073da:	615a      	str	r2, [r3, #20]
  FC_T_PID.lastError = 0;
 80073dc:	4b19      	ldr	r3, [pc, #100]	; (8007444 <PID_init+0x9c>)
 80073de:	f04f 0200 	mov.w	r2, #0
 80073e2:	619a      	str	r2, [r3, #24]
  FC_T_PID.setValue = 50; //Temperatura w st Celsjusza
 80073e4:	4b17      	ldr	r3, [pc, #92]	; (8007444 <PID_init+0x9c>)
 80073e6:	4a1b      	ldr	r2, [pc, #108]	; (8007454 <PID_init+0xac>)
 80073e8:	601a      	str	r2, [r3, #0]
  FC_T_PID.measurement = 0;
 80073ea:	4b16      	ldr	r3, [pc, #88]	; (8007444 <PID_init+0x9c>)
 80073ec:	f04f 0200 	mov.w	r2, #0
 80073f0:	605a      	str	r2, [r3, #4]
  FC_T_PID.prevMeasurement = 0;
 80073f2:	4b14      	ldr	r3, [pc, #80]	; (8007444 <PID_init+0x9c>)
 80073f4:	f04f 0200 	mov.w	r2, #0
 80073f8:	609a      	str	r2, [r3, #8]
  FC_T_PID.proportional = 0;
 80073fa:	4b12      	ldr	r3, [pc, #72]	; (8007444 <PID_init+0x9c>)
 80073fc:	f04f 0200 	mov.w	r2, #0
 8007400:	629a      	str	r2, [r3, #40]	; 0x28
  FC_T_PID.integrator = 0;
 8007402:	4b10      	ldr	r3, [pc, #64]	; (8007444 <PID_init+0x9c>)
 8007404:	f04f 0200 	mov.w	r2, #0
 8007408:	62da      	str	r2, [r3, #44]	; 0x2c
  FC_T_PID.differentator = 0;
 800740a:	4b0e      	ldr	r3, [pc, #56]	; (8007444 <PID_init+0x9c>)
 800740c:	f04f 0200 	mov.w	r2, #0
 8007410:	631a      	str	r2, [r3, #48]	; 0x30
  FC_T_PID.integratorMax = 150;
 8007412:	4b0c      	ldr	r3, [pc, #48]	; (8007444 <PID_init+0x9c>)
 8007414:	4a10      	ldr	r2, [pc, #64]	; (8007458 <PID_init+0xb0>)
 8007416:	635a      	str	r2, [r3, #52]	; 0x34
  FC_T_PID.integratorMin = -50;
 8007418:	4b0a      	ldr	r3, [pc, #40]	; (8007444 <PID_init+0x9c>)
 800741a:	4a10      	ldr	r2, [pc, #64]	; (800745c <PID_init+0xb4>)
 800741c:	639a      	str	r2, [r3, #56]	; 0x38
  FC_T_PID.controlMax = 255;
 800741e:	4b09      	ldr	r3, [pc, #36]	; (8007444 <PID_init+0x9c>)
 8007420:	4a0f      	ldr	r2, [pc, #60]	; (8007460 <PID_init+0xb8>)
 8007422:	63da      	str	r2, [r3, #60]	; 0x3c
  FC_T_PID.controlMin = 0;
 8007424:	4b07      	ldr	r3, [pc, #28]	; (8007444 <PID_init+0x9c>)
 8007426:	f04f 0200 	mov.w	r2, #0
 800742a:	641a      	str	r2, [r3, #64]	; 0x40
  FC_T_PID.PIDtime = 0.001; //Podstawa czasu z jaką wykonuje się funkcja PIDstep() w [s]
 800742c:	4b05      	ldr	r3, [pc, #20]	; (8007444 <PID_init+0x9c>)
 800742e:	4a0d      	ldr	r2, [pc, #52]	; (8007464 <PID_init+0xbc>)
 8007430:	645a      	str	r2, [r3, #68]	; 0x44
  FC_T_PID.PIDtimeFactor = 1; //Mnożnik podstawy czasu
 8007432:	4b04      	ldr	r3, [pc, #16]	; (8007444 <PID_init+0x9c>)
 8007434:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007438:	649a      	str	r2, [r3, #72]	; 0x48
}
 800743a:	bf00      	nop
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	200004dc 	.word	0x200004dc
 8007448:	4079999a 	.word	0x4079999a
 800744c:	3f99999a 	.word	0x3f99999a
 8007450:	3a9d4952 	.word	0x3a9d4952
 8007454:	42480000 	.word	0x42480000
 8007458:	43160000 	.word	0x43160000
 800745c:	c2480000 	.word	0xc2480000
 8007460:	437f0000 	.word	0x437f0000
 8007464:	3a83126f 	.word	0x3a83126f

08007468 <PIDstep>:
void PIDstep()
{
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0
  static uint8_t time = 0;
  if (time >= FC_T_PID.PIDtimeFactor)
 800746c:	4b76      	ldr	r3, [pc, #472]	; (8007648 <PIDstep+0x1e0>)
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	ee07 3a90 	vmov	s15, r3
 8007474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007478:	4b74      	ldr	r3, [pc, #464]	; (800764c <PIDstep+0x1e4>)
 800747a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800747e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007486:	f2c0 80d3 	blt.w	8007630 <PIDstep+0x1c8>
    {
      FC_T_PID.measurement = VALUES.FC_TEMP.value;
 800748a:	4b71      	ldr	r3, [pc, #452]	; (8007650 <PIDstep+0x1e8>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a6f      	ldr	r2, [pc, #444]	; (800764c <PIDstep+0x1e4>)
 8007490:	6053      	str	r3, [r2, #4]

      /*
       * część proporcjonalna
       */

      FC_T_PID.error = FC_T_PID.measurement - FC_T_PID.setValue;
 8007492:	4b6e      	ldr	r3, [pc, #440]	; (800764c <PIDstep+0x1e4>)
 8007494:	ed93 7a01 	vldr	s14, [r3, #4]
 8007498:	4b6c      	ldr	r3, [pc, #432]	; (800764c <PIDstep+0x1e4>)
 800749a:	edd3 7a00 	vldr	s15, [r3]
 800749e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074a2:	4b6a      	ldr	r3, [pc, #424]	; (800764c <PIDstep+0x1e4>)
 80074a4:	edc3 7a03 	vstr	s15, [r3, #12]
      FC_T_PID.proportional = FC_T_PID.error * FC_T_PID.Kp;
 80074a8:	4b68      	ldr	r3, [pc, #416]	; (800764c <PIDstep+0x1e4>)
 80074aa:	ed93 7a03 	vldr	s14, [r3, #12]
 80074ae:	4b67      	ldr	r3, [pc, #412]	; (800764c <PIDstep+0x1e4>)
 80074b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80074b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b8:	4b64      	ldr	r3, [pc, #400]	; (800764c <PIDstep+0x1e4>)
 80074ba:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

      /*
       * część całkująca
       */

      FC_T_PID.iError = FC_T_PID.iError
 80074be:	4b63      	ldr	r3, [pc, #396]	; (800764c <PIDstep+0x1e4>)
 80074c0:	ed93 7a04 	vldr	s14, [r3, #16]
	  + FC_T_PID.PIDtime * FC_T_PID.PIDtimeFactor * 0.5f
 80074c4:	4b61      	ldr	r3, [pc, #388]	; (800764c <PIDstep+0x1e4>)
 80074c6:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 80074ca:	4b60      	ldr	r3, [pc, #384]	; (800764c <PIDstep+0x1e4>)
 80074cc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80074d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074d4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80074d8:	ee67 6aa6 	vmul.f32	s13, s15, s13
	      * (FC_T_PID.error + FC_T_PID.lastError); //Metoda trapezów suma dwóch następnych błędów podzielona na 2 pomnożona razy czas w [s] (wysokość trapezu)
 80074dc:	4b5b      	ldr	r3, [pc, #364]	; (800764c <PIDstep+0x1e4>)
 80074de:	ed93 6a03 	vldr	s12, [r3, #12]
 80074e2:	4b5a      	ldr	r3, [pc, #360]	; (800764c <PIDstep+0x1e4>)
 80074e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80074e8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80074ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
	  + FC_T_PID.PIDtime * FC_T_PID.PIDtimeFactor * 0.5f
 80074f0:	ee77 7a27 	vadd.f32	s15, s14, s15
      FC_T_PID.iError = FC_T_PID.iError
 80074f4:	4b55      	ldr	r3, [pc, #340]	; (800764c <PIDstep+0x1e4>)
 80074f6:	edc3 7a04 	vstr	s15, [r3, #16]
      if (FC_T_PID.iError >= FC_T_PID.integratorMax)
 80074fa:	4b54      	ldr	r3, [pc, #336]	; (800764c <PIDstep+0x1e4>)
 80074fc:	ed93 7a04 	vldr	s14, [r3, #16]
 8007500:	4b52      	ldr	r3, [pc, #328]	; (800764c <PIDstep+0x1e4>)
 8007502:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007506:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800750a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800750e:	db04      	blt.n	800751a <PIDstep+0xb2>
	{
	  FC_T_PID.iError = FC_T_PID.integratorMax;
 8007510:	4b4e      	ldr	r3, [pc, #312]	; (800764c <PIDstep+0x1e4>)
 8007512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007514:	4a4d      	ldr	r2, [pc, #308]	; (800764c <PIDstep+0x1e4>)
 8007516:	6113      	str	r3, [r2, #16]
 8007518:	e00e      	b.n	8007538 <PIDstep+0xd0>
	}
      else if (FC_T_PID.iError <= FC_T_PID.integratorMin)
 800751a:	4b4c      	ldr	r3, [pc, #304]	; (800764c <PIDstep+0x1e4>)
 800751c:	ed93 7a04 	vldr	s14, [r3, #16]
 8007520:	4b4a      	ldr	r3, [pc, #296]	; (800764c <PIDstep+0x1e4>)
 8007522:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007526:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800752a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800752e:	d803      	bhi.n	8007538 <PIDstep+0xd0>
	{
	  FC_T_PID.iError = FC_T_PID.integratorMin;
 8007530:	4b46      	ldr	r3, [pc, #280]	; (800764c <PIDstep+0x1e4>)
 8007532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007534:	4a45      	ldr	r2, [pc, #276]	; (800764c <PIDstep+0x1e4>)
 8007536:	6113      	str	r3, [r2, #16]
	}
      FC_T_PID.integrator = FC_T_PID.iError * FC_T_PID.Ki;
 8007538:	4b44      	ldr	r3, [pc, #272]	; (800764c <PIDstep+0x1e4>)
 800753a:	ed93 7a04 	vldr	s14, [r3, #16]
 800753e:	4b43      	ldr	r3, [pc, #268]	; (800764c <PIDstep+0x1e4>)
 8007540:	edd3 7a08 	vldr	s15, [r3, #32]
 8007544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007548:	4b40      	ldr	r3, [pc, #256]	; (800764c <PIDstep+0x1e4>)
 800754a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

      /*
       * część różniczkująca
       */

      FC_T_PID.dError = (FC_T_PID.measurement - FC_T_PID.prevMeasurement)
 800754e:	4b3f      	ldr	r3, [pc, #252]	; (800764c <PIDstep+0x1e4>)
 8007550:	ed93 7a01 	vldr	s14, [r3, #4]
 8007554:	4b3d      	ldr	r3, [pc, #244]	; (800764c <PIDstep+0x1e4>)
 8007556:	edd3 7a02 	vldr	s15, [r3, #8]
 800755a:	ee77 6a67 	vsub.f32	s13, s14, s15
	  / (FC_T_PID.PIDtime * FC_T_PID.PIDtimeFactor);
 800755e:	4b3b      	ldr	r3, [pc, #236]	; (800764c <PIDstep+0x1e4>)
 8007560:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8007564:	4b39      	ldr	r3, [pc, #228]	; (800764c <PIDstep+0x1e4>)
 8007566:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800756a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800756e:	eec6 7a87 	vdiv.f32	s15, s13, s14
      FC_T_PID.dError = (FC_T_PID.measurement - FC_T_PID.prevMeasurement)
 8007572:	4b36      	ldr	r3, [pc, #216]	; (800764c <PIDstep+0x1e4>)
 8007574:	edc3 7a05 	vstr	s15, [r3, #20]
      FC_T_PID.differentator = FC_T_PID.dError * FC_T_PID.Kd;
 8007578:	4b34      	ldr	r3, [pc, #208]	; (800764c <PIDstep+0x1e4>)
 800757a:	ed93 7a05 	vldr	s14, [r3, #20]
 800757e:	4b33      	ldr	r3, [pc, #204]	; (800764c <PIDstep+0x1e4>)
 8007580:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007588:	4b30      	ldr	r3, [pc, #192]	; (800764c <PIDstep+0x1e4>)
 800758a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

      /*
       * wartość sterująca
       */

      FC_T_PID.controlValue = FC_T_PID.proportional + FC_T_PID.integrator
 800758e:	4b2f      	ldr	r3, [pc, #188]	; (800764c <PIDstep+0x1e4>)
 8007590:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8007594:	4b2d      	ldr	r3, [pc, #180]	; (800764c <PIDstep+0x1e4>)
 8007596:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800759a:	ee37 7a27 	vadd.f32	s14, s14, s15
	  + FC_T_PID.differentator;
 800759e:	4b2b      	ldr	r3, [pc, #172]	; (800764c <PIDstep+0x1e4>)
 80075a0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80075a4:	ee77 7a27 	vadd.f32	s15, s14, s15
      FC_T_PID.controlValue = FC_T_PID.proportional + FC_T_PID.integrator
 80075a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ac:	ee17 2a90 	vmov	r2, s15
 80075b0:	4b26      	ldr	r3, [pc, #152]	; (800764c <PIDstep+0x1e4>)
 80075b2:	64da      	str	r2, [r3, #76]	; 0x4c
      if (FC_T_PID.controlValue >= FC_T_PID.controlMax)
 80075b4:	4b25      	ldr	r3, [pc, #148]	; (800764c <PIDstep+0x1e4>)
 80075b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075b8:	ee07 3a90 	vmov	s15, r3
 80075bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075c0:	4b22      	ldr	r3, [pc, #136]	; (800764c <PIDstep+0x1e4>)
 80075c2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80075c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80075ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ce:	db09      	blt.n	80075e4 <PIDstep+0x17c>
	{
	  FC_T_PID.controlValue = FC_T_PID.controlMax;
 80075d0:	4b1e      	ldr	r3, [pc, #120]	; (800764c <PIDstep+0x1e4>)
 80075d2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80075d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075da:	ee17 2a90 	vmov	r2, s15
 80075de:	4b1b      	ldr	r3, [pc, #108]	; (800764c <PIDstep+0x1e4>)
 80075e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80075e2:	e016      	b.n	8007612 <PIDstep+0x1aa>
	}
      else if (FC_T_PID.controlValue <= FC_T_PID.controlMin)
 80075e4:	4b19      	ldr	r3, [pc, #100]	; (800764c <PIDstep+0x1e4>)
 80075e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075e8:	ee07 3a90 	vmov	s15, r3
 80075ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075f0:	4b16      	ldr	r3, [pc, #88]	; (800764c <PIDstep+0x1e4>)
 80075f2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80075f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80075fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075fe:	d808      	bhi.n	8007612 <PIDstep+0x1aa>
	{
	  FC_T_PID.controlValue = FC_T_PID.controlMin;
 8007600:	4b12      	ldr	r3, [pc, #72]	; (800764c <PIDstep+0x1e4>)
 8007602:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8007606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800760a:	ee17 2a90 	vmov	r2, s15
 800760e:	4b0f      	ldr	r3, [pc, #60]	; (800764c <PIDstep+0x1e4>)
 8007610:	64da      	str	r2, [r3, #76]	; 0x4c
      /*
       * Przepisanie
       */

      //FANS.controlValue = FC_T_PID.controlValue;
      FANS.controlValue = 150;
 8007612:	4b10      	ldr	r3, [pc, #64]	; (8007654 <PIDstep+0x1ec>)
 8007614:	2296      	movs	r2, #150	; 0x96
 8007616:	605a      	str	r2, [r3, #4]
      FC_T_PID.lastError = FC_T_PID.error;
 8007618:	4b0c      	ldr	r3, [pc, #48]	; (800764c <PIDstep+0x1e4>)
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	4a0b      	ldr	r2, [pc, #44]	; (800764c <PIDstep+0x1e4>)
 800761e:	6193      	str	r3, [r2, #24]
      FC_T_PID.prevMeasurement = FC_T_PID.measurement;
 8007620:	4b0a      	ldr	r3, [pc, #40]	; (800764c <PIDstep+0x1e4>)
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	4a09      	ldr	r2, [pc, #36]	; (800764c <PIDstep+0x1e4>)
 8007626:	6093      	str	r3, [r2, #8]
      time = 0;
 8007628:	4b07      	ldr	r3, [pc, #28]	; (8007648 <PIDstep+0x1e0>)
 800762a:	2200      	movs	r2, #0
 800762c:	701a      	strb	r2, [r3, #0]
    }
  else
    {
      time++;
    }
}
 800762e:	e005      	b.n	800763c <PIDstep+0x1d4>
      time++;
 8007630:	4b05      	ldr	r3, [pc, #20]	; (8007648 <PIDstep+0x1e0>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	3301      	adds	r3, #1
 8007636:	b2da      	uxtb	r2, r3
 8007638:	4b03      	ldr	r3, [pc, #12]	; (8007648 <PIDstep+0x1e0>)
 800763a:	701a      	strb	r2, [r3, #0]
}
 800763c:	bf00      	nop
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	20000039 	.word	0x20000039
 800764c:	200004dc 	.word	0x200004dc
 8007650:	2000048c 	.word	0x2000048c
 8007654:	20000484 	.word	0x20000484

08007658 <crc_calc>:
/**
 * @fn rs485_init(void)
 * @brief Inicjalizacja magistrali RS-485, umiescic wewnatrz hydrogreen_init(void)
 */
uint8_t crc_calc(void)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
  uint8_t crcSumOnMCU = 0xFF;
 800765e:	23ff      	movs	r3, #255	; 0xff
 8007660:	71fb      	strb	r3, [r7, #7]
  uint8_t xbit, data1 = 1;
 8007662:	2301      	movs	r3, #1
 8007664:	70fb      	strb	r3, [r7, #3]
#define polynomial 0x7;

  for (uint8_t l = 0; l < RX_FRAME_LENGHT - 1; l++)
 8007666:	2300      	movs	r3, #0
 8007668:	717b      	strb	r3, [r7, #5]
 800766a:	e02e      	b.n	80076ca <crc_calc+0x72>
    {
      uint8_t data = dataFromRx[l];
 800766c:	797b      	ldrb	r3, [r7, #5]
 800766e:	4a1c      	ldr	r2, [pc, #112]	; (80076e0 <crc_calc+0x88>)
 8007670:	5cd3      	ldrb	r3, [r2, r3]
 8007672:	70bb      	strb	r3, [r7, #2]
      xbit = data1 << 7;
 8007674:	78fb      	ldrb	r3, [r7, #3]
 8007676:	01db      	lsls	r3, r3, #7
 8007678:	71bb      	strb	r3, [r7, #6]
      for (uint8_t k = sizeof(RX_FRAME_LENGHT - 1) * 8; k > 0; --k) // obliczanie wartosci najbardziej znaczacego bitu
 800767a:	2320      	movs	r3, #32
 800767c:	713b      	strb	r3, [r7, #4]
 800767e:	e01e      	b.n	80076be <crc_calc+0x66>
	{
	  if (crcSumOnMCU & 0x80)    //jesli najbardziej znaczacy bit = 1
 8007680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007684:	2b00      	cmp	r3, #0
 8007686:	da07      	bge.n	8007698 <crc_calc+0x40>
	    {
	      crcSumOnMCU = (crcSumOnMCU << 1) ^ polynomial
 8007688:	79fb      	ldrb	r3, [r7, #7]
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	b25b      	sxtb	r3, r3
 800768e:	f083 0307 	eor.w	r3, r3, #7
 8007692:	b25b      	sxtb	r3, r3
 8007694:	71fb      	strb	r3, [r7, #7]
 8007696:	e002      	b.n	800769e <crc_calc+0x46>
	      ; //XOR i leftshift
	    }
	  else
	    { //jesli = 0
	      crcSumOnMCU = (crcSumOnMCU << 1); //leftshift
 8007698:	79fb      	ldrb	r3, [r7, #7]
 800769a:	005b      	lsls	r3, r3, #1
 800769c:	71fb      	strb	r3, [r7, #7]
	    }
	  if (data & xbit)
 800769e:	78ba      	ldrb	r2, [r7, #2]
 80076a0:	79bb      	ldrb	r3, [r7, #6]
 80076a2:	4013      	ands	r3, r2
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <crc_calc+0x5a>
	    {
	      crcSumOnMCU = crcSumOnMCU ^ polynomial
 80076aa:	79fb      	ldrb	r3, [r7, #7]
 80076ac:	f083 0307 	eor.w	r3, r3, #7
 80076b0:	71fb      	strb	r3, [r7, #7]
	      ;
	    }
	  xbit >>= 1;
 80076b2:	79bb      	ldrb	r3, [r7, #6]
 80076b4:	085b      	lsrs	r3, r3, #1
 80076b6:	71bb      	strb	r3, [r7, #6]
      for (uint8_t k = sizeof(RX_FRAME_LENGHT - 1) * 8; k > 0; --k) // obliczanie wartosci najbardziej znaczacego bitu
 80076b8:	793b      	ldrb	r3, [r7, #4]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	713b      	strb	r3, [r7, #4]
 80076be:	793b      	ldrb	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1dd      	bne.n	8007680 <crc_calc+0x28>
  for (uint8_t l = 0; l < RX_FRAME_LENGHT - 1; l++)
 80076c4:	797b      	ldrb	r3, [r7, #5]
 80076c6:	3301      	adds	r3, #1
 80076c8:	717b      	strb	r3, [r7, #5]
 80076ca:	797b      	ldrb	r3, [r7, #5]
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d9cd      	bls.n	800766c <crc_calc+0x14>
	}
    }
  return crcSumOnMCU;
 80076d0:	79fb      	ldrb	r3, [r7, #7]

}
 80076d2:	4618      	mov	r0, r3
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	2000003c 	.word	0x2000003c

080076e4 <crc_calc_TX>:

uint8_t crc_calc_TX(void)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
  uint8_t crcSumOnMCUTX = 0xFF;
 80076ea:	23ff      	movs	r3, #255	; 0xff
 80076ec:	71fb      	strb	r3, [r7, #7]
  uint8_t xbit, data1 = 1;
 80076ee:	2301      	movs	r3, #1
 80076f0:	70fb      	strb	r3, [r7, #3]
#define polynomial 0x7;

  for (uint8_t l = 0; l < TX_FRAME_LENGHT - 1; l++)
 80076f2:	2300      	movs	r3, #0
 80076f4:	717b      	strb	r3, [r7, #5]
 80076f6:	e02e      	b.n	8007756 <crc_calc_TX+0x72>
    {
      uint8_t data = dataToTx[l];
 80076f8:	797b      	ldrb	r3, [r7, #5]
 80076fa:	4a1c      	ldr	r2, [pc, #112]	; (800776c <crc_calc_TX+0x88>)
 80076fc:	5cd3      	ldrb	r3, [r2, r3]
 80076fe:	70bb      	strb	r3, [r7, #2]
      xbit = data1 << 7;
 8007700:	78fb      	ldrb	r3, [r7, #3]
 8007702:	01db      	lsls	r3, r3, #7
 8007704:	71bb      	strb	r3, [r7, #6]
      for (uint8_t k = sizeof(TX_FRAME_LENGHT - 1) * 8; k > 0; --k) // obliczanie wartosci najbardziej znaczacego bitu
 8007706:	2320      	movs	r3, #32
 8007708:	713b      	strb	r3, [r7, #4]
 800770a:	e01e      	b.n	800774a <crc_calc_TX+0x66>
	{
	  if (crcSumOnMCUTX & 0x80)    //jesli najbardziej znaczacy bit = 1
 800770c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007710:	2b00      	cmp	r3, #0
 8007712:	da07      	bge.n	8007724 <crc_calc_TX+0x40>
	    {
	      crcSumOnMCUTX = (crcSumOnMCUTX << 1) ^ polynomial
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	b25b      	sxtb	r3, r3
 800771a:	f083 0307 	eor.w	r3, r3, #7
 800771e:	b25b      	sxtb	r3, r3
 8007720:	71fb      	strb	r3, [r7, #7]
 8007722:	e002      	b.n	800772a <crc_calc_TX+0x46>
	      ; //XOR i leftshift
	    }
	  else
	    { //jesli = 0
	      crcSumOnMCUTX = (crcSumOnMCUTX << 1); //leftshift
 8007724:	79fb      	ldrb	r3, [r7, #7]
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	71fb      	strb	r3, [r7, #7]
	    }
	  if (data & xbit)
 800772a:	78ba      	ldrb	r2, [r7, #2]
 800772c:	79bb      	ldrb	r3, [r7, #6]
 800772e:	4013      	ands	r3, r2
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <crc_calc_TX+0x5a>
	    {
	      crcSumOnMCUTX = crcSumOnMCUTX ^ polynomial
 8007736:	79fb      	ldrb	r3, [r7, #7]
 8007738:	f083 0307 	eor.w	r3, r3, #7
 800773c:	71fb      	strb	r3, [r7, #7]
	      ;
	    }
	  xbit >>= 1;
 800773e:	79bb      	ldrb	r3, [r7, #6]
 8007740:	085b      	lsrs	r3, r3, #1
 8007742:	71bb      	strb	r3, [r7, #6]
      for (uint8_t k = sizeof(TX_FRAME_LENGHT - 1) * 8; k > 0; --k) // obliczanie wartosci najbardziej znaczacego bitu
 8007744:	793b      	ldrb	r3, [r7, #4]
 8007746:	3b01      	subs	r3, #1
 8007748:	713b      	strb	r3, [r7, #4]
 800774a:	793b      	ldrb	r3, [r7, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1dd      	bne.n	800770c <crc_calc_TX+0x28>
  for (uint8_t l = 0; l < TX_FRAME_LENGHT - 1; l++)
 8007750:	797b      	ldrb	r3, [r7, #5]
 8007752:	3301      	adds	r3, #1
 8007754:	717b      	strb	r3, [r7, #5]
 8007756:	797b      	ldrb	r3, [r7, #5]
 8007758:	2b13      	cmp	r3, #19
 800775a:	d9cd      	bls.n	80076f8 <crc_calc_TX+0x14>
	}
    }
  return crcSumOnMCUTX;
 800775c:	79fb      	ldrb	r3, [r7, #7]

}
 800775e:	4618      	mov	r0, r3
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	20000048 	.word	0x20000048

08007770 <rs485_init>:
void rs485_init(void)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
  HAL_UART_Receive_DMA(&UART_PORT_RS485, &RS485_BUFF.rx, 1); //Rozpocznij nasluchiwanie
 8007774:	2201      	movs	r2, #1
 8007776:	4904      	ldr	r1, [pc, #16]	; (8007788 <rs485_init+0x18>)
 8007778:	4804      	ldr	r0, [pc, #16]	; (800778c <rs485_init+0x1c>)
 800777a:	f7fe f9e7 	bl	8005b4c <HAL_UART_Receive_DMA>
  prepareNewDataToSend();			//Przygotuj nowy pakiet danych
 800777e:	f000 f8eb 	bl	8007958 <prepareNewDataToSend>
}
 8007782:	bf00      	nop
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20000069 	.word	0x20000069
 800778c:	20000394 	.word	0x20000394

08007790 <rs485_step>:
/**
 * @fn rs485_step(void)
 * @brief Funkcja obslugujaca magistrale, umiescic wewnatrz hydrogreen_step(void)
 */
void rs485_step(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  receiveData();
 8007794:	f000 f840 	bl	8007818 <receiveData>
  sendData();
 8007798:	f000 f802 	bl	80077a0 <sendData>
}
 800779c:	bf00      	nop
 800779e:	bd80      	pop	{r7, pc}

080077a0 <sendData>:
/**
 * @fn sendData(void)
 * @brief Funkcja ktorej zadaniem jest obsluga linii TX, powinna zostac umieszczona w wewnatrz rs485_step()
 */
static void sendData(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	af00      	add	r7, sp, #0

  static uint16_t cntEndOfTxTick = 0;//Zmienna wykorzystywana do odliczenia czasu wskazujacego na koniec transmisji

  //Sprawdz czy wyslano cala ramke danych
  if (posInTxTab < TX_FRAME_LENGHT)
 80077a4:	4b17      	ldr	r3, [pc, #92]	; (8007804 <sendData+0x64>)
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	2b14      	cmp	r3, #20
 80077aa:	d816      	bhi.n	80077da <sendData+0x3a>
    {
      //Nie, wysylaj dalej
      RS485_BUFF.tx = dataToTx[posInTxTab];
 80077ac:	4b15      	ldr	r3, [pc, #84]	; (8007804 <sendData+0x64>)
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	461a      	mov	r2, r3
 80077b2:	4b15      	ldr	r3, [pc, #84]	; (8007808 <sendData+0x68>)
 80077b4:	5c9a      	ldrb	r2, [r3, r2]
 80077b6:	4b15      	ldr	r3, [pc, #84]	; (800780c <sendData+0x6c>)
 80077b8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80077ba:	b672      	cpsid	i

      //Na czas wysylania danych wylacz przerwania
      __disable_irq();
      HAL_UART_Transmit(&UART_PORT_RS485, &RS485_BUFF.tx, 1, HAL_MAX_DELAY);
 80077bc:	f04f 33ff 	mov.w	r3, #4294967295
 80077c0:	2201      	movs	r2, #1
 80077c2:	4912      	ldr	r1, [pc, #72]	; (800780c <sendData+0x6c>)
 80077c4:	4812      	ldr	r0, [pc, #72]	; (8007810 <sendData+0x70>)
 80077c6:	f7fe f92d 	bl	8005a24 <HAL_UART_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 80077ca:	b662      	cpsie	i
      __enable_irq();
      posInTxTab++;
 80077cc:	4b0d      	ldr	r3, [pc, #52]	; (8007804 <sendData+0x64>)
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	3301      	adds	r3, #1
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	4b0b      	ldr	r3, [pc, #44]	; (8007804 <sendData+0x64>)
 80077d6:	801a      	strh	r2, [r3, #0]
      cntEndOfTxTick = 0;
      posInTxTab = 0;

      prepareNewDataToSend();
    }
}
 80077d8:	e012      	b.n	8007800 <sendData+0x60>
  else if (cntEndOfTxTick < TX_FRAME_LENGHT)
 80077da:	4b0e      	ldr	r3, [pc, #56]	; (8007814 <sendData+0x74>)
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	2b14      	cmp	r3, #20
 80077e0:	d806      	bhi.n	80077f0 <sendData+0x50>
      cntEndOfTxTick++;
 80077e2:	4b0c      	ldr	r3, [pc, #48]	; (8007814 <sendData+0x74>)
 80077e4:	881b      	ldrh	r3, [r3, #0]
 80077e6:	3301      	adds	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	4b0a      	ldr	r3, [pc, #40]	; (8007814 <sendData+0x74>)
 80077ec:	801a      	strh	r2, [r3, #0]
}
 80077ee:	e007      	b.n	8007800 <sendData+0x60>
      cntEndOfTxTick = 0;
 80077f0:	4b08      	ldr	r3, [pc, #32]	; (8007814 <sendData+0x74>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	801a      	strh	r2, [r3, #0]
      posInTxTab = 0;
 80077f6:	4b03      	ldr	r3, [pc, #12]	; (8007804 <sendData+0x64>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	801a      	strh	r2, [r3, #0]
      prepareNewDataToSend();
 80077fc:	f000 f8ac 	bl	8007958 <prepareNewDataToSend>
}
 8007800:	bf00      	nop
 8007802:	bd80      	pop	{r7, pc}
 8007804:	2000005e 	.word	0x2000005e
 8007808:	20000048 	.word	0x20000048
 800780c:	20000068 	.word	0x20000068
 8007810:	20000394 	.word	0x20000394
 8007814:	2000006a 	.word	0x2000006a

08007818 <receiveData>:
/**
 * @fn receiveData(void)
 * @brief Funkcja ktorej zadaniem jest obsluga linii RX, umiescic wewnatrz rs485_step()
 */
static void receiveData(void)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0

  //static uint32_t rejectedFramesInRow=0;	//Zmienna przechowujaca liczbe straconych ramek z rzedu
  static uint32_t cntEndOfRxTick = 0;//Zmienna wykorzystywana do odliczenia czasu wskazujacego na koniec transmisji

  //Sprawdz czy otrzymano nowe dane
  if (!intRxCplt)
 800781e:	4b2e      	ldr	r3, [pc, #184]	; (80078d8 <receiveData+0xc0>)
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b00      	cmp	r3, #0
 8007826:	d105      	bne.n	8007834 <receiveData+0x1c>
    {
      //Nie otrzymano nowych danych, zacznij odliczac czas
      cntEndOfRxTick++;
 8007828:	4b2c      	ldr	r3, [pc, #176]	; (80078dc <receiveData+0xc4>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3301      	adds	r3, #1
 800782e:	4a2b      	ldr	r2, [pc, #172]	; (80078dc <receiveData+0xc4>)
 8007830:	6013      	str	r3, [r2, #0]
 8007832:	e007      	b.n	8007844 <receiveData+0x2c>
    }
  else if (intRxCplt)
 8007834:	4b28      	ldr	r3, [pc, #160]	; (80078d8 <receiveData+0xc0>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <receiveData+0x2c>
    {
      //Nowe dane zostaly otrzymane, zeruj flage informujaca o zakonczeniu transmisji
      intRxCplt = 0;
 800783e:	4b26      	ldr	r3, [pc, #152]	; (80078d8 <receiveData+0xc0>)
 8007840:	2200      	movs	r2, #0
 8007842:	701a      	strb	r2, [r3, #0]
    }

  //Sprawdz czy minal juz czas wynoszacy RX_FRAME_LENGHT
  if (cntEndOfRxTick > RX_FRAME_LENGHT)
 8007844:	4b25      	ldr	r3, [pc, #148]	; (80078dc <receiveData+0xc4>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b06      	cmp	r3, #6
 800784a:	d939      	bls.n	80078c0 <receiveData+0xa8>
  __ASM volatile ("cpsid i" : : : "memory");
 800784c:	b672      	cpsid	i
    {
      //Na czas przetwarzania danych wylacz przerwania
      __disable_irq();

      //Czas minal, oznacza to koniec ramki
      cntEndOfRxTick = 0;
 800784e:	4b23      	ldr	r3, [pc, #140]	; (80078dc <receiveData+0xc4>)
 8007850:	2200      	movs	r2, #0
 8007852:	601a      	str	r2, [r3, #0]
      posInRxTab = 0;
 8007854:	4b22      	ldr	r3, [pc, #136]	; (80078e0 <receiveData+0xc8>)
 8007856:	2200      	movs	r2, #0
 8007858:	801a      	strh	r2, [r3, #0]
      //OBLICZ SUME KONTROLNA
      //uint8_t crcSumOnMCU = HAL_CRC_Calculate(&hcrc, (uint32_t*)dataFromRx, (RX_FRAME_LENGHT - 2));
      //  uint8_t crcSumOnMCU = crc_calc();

      //Sprawdz czy sumy kontrolne oraz bajt EOT (End Of Tranmission) sie zgadzaja
      if ((dataFromRx[RX_FRAME_LENGHT - 2] == EOT_BYTE)
 800785a:	4b22      	ldr	r3, [pc, #136]	; (80078e4 <receiveData+0xcc>)
 800785c:	791b      	ldrb	r3, [r3, #4]
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b17      	cmp	r3, #23
 8007862:	d111      	bne.n	8007888 <receiveData+0x70>
	  && (crc_calc() == dataFromRx[RX_FRAME_LENGHT - 1]))
 8007864:	f7ff fef8 	bl	8007658 <crc_calc>
 8007868:	4603      	mov	r3, r0
 800786a:	461a      	mov	r2, r3
 800786c:	4b1d      	ldr	r3, [pc, #116]	; (80078e4 <receiveData+0xcc>)
 800786e:	795b      	ldrb	r3, [r3, #5]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	429a      	cmp	r2, r3
 8007874:	d108      	bne.n	8007888 <receiveData+0x70>
	{
	  processReceivedData();
 8007876:	f000 f933 	bl	8007ae0 <processReceivedData>
	  rs485_flt = RS485_FLT_NONE;
 800787a:	4b1b      	ldr	r3, [pc, #108]	; (80078e8 <receiveData+0xd0>)
 800787c:	2200      	movs	r2, #0
 800787e:	701a      	strb	r2, [r3, #0]
	  rejectedFramesInRow = 0;
 8007880:	4b1a      	ldr	r3, [pc, #104]	; (80078ec <receiveData+0xd4>)
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	e00d      	b.n	80078a4 <receiveData+0x8c>
	}
      else
	{
	  rejectedFramesInRow++;
 8007888:	4b18      	ldr	r3, [pc, #96]	; (80078ec <receiveData+0xd4>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3301      	adds	r3, #1
 800788e:	4a17      	ldr	r2, [pc, #92]	; (80078ec <receiveData+0xd4>)
 8007890:	6013      	str	r3, [r2, #0]

	  //Jezeli odrzucono wiecej niz 50 ramek z rzedu uznaj ze tranmisja zostala zerwana
	  if (rejectedFramesInRow > 50)
 8007892:	4b16      	ldr	r3, [pc, #88]	; (80078ec <receiveData+0xd4>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b32      	cmp	r3, #50	; 0x32
 8007898:	d904      	bls.n	80078a4 <receiveData+0x8c>
	    {
	      resetActData();
 800789a:	f000 f961 	bl	8007b60 <resetActData>
	      rs485_flt = RS485_NEW_DATA_TIMEOUT;
 800789e:	4b12      	ldr	r3, [pc, #72]	; (80078e8 <receiveData+0xd0>)
 80078a0:	2211      	movs	r2, #17
 80078a2:	701a      	strb	r2, [r3, #0]
	    }
	}
      //Wyczysc bufor odbiorczy
      for (uint8_t i = 0; i < RX_FRAME_LENGHT; i++)
 80078a4:	2300      	movs	r3, #0
 80078a6:	71fb      	strb	r3, [r7, #7]
 80078a8:	e006      	b.n	80078b8 <receiveData+0xa0>
	{
	  dataFromRx[i] = 0x00;
 80078aa:	79fb      	ldrb	r3, [r7, #7]
 80078ac:	4a0d      	ldr	r2, [pc, #52]	; (80078e4 <receiveData+0xcc>)
 80078ae:	2100      	movs	r1, #0
 80078b0:	54d1      	strb	r1, [r2, r3]
      for (uint8_t i = 0; i < RX_FRAME_LENGHT; i++)
 80078b2:	79fb      	ldrb	r3, [r7, #7]
 80078b4:	3301      	adds	r3, #1
 80078b6:	71fb      	strb	r3, [r7, #7]
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	2b05      	cmp	r3, #5
 80078bc:	d9f5      	bls.n	80078aa <receiveData+0x92>
  __ASM volatile ("cpsie i" : : : "memory");
 80078be:	b662      	cpsie	i
	}

      __enable_irq();
    }
  if (cntEndOfRxTick > 100 * RX_FRAME_LENGHT)
 80078c0:	4b06      	ldr	r3, [pc, #24]	; (80078dc <receiveData+0xc4>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80078c8:	d902      	bls.n	80078d0 <receiveData+0xb8>
    {
      rs485_flt = RS485_NEW_DATA_TIMEOUT;
 80078ca:	4b07      	ldr	r3, [pc, #28]	; (80078e8 <receiveData+0xd0>)
 80078cc:	2211      	movs	r2, #17
 80078ce:	701a      	strb	r2, [r3, #0]
    }
}
 80078d0:	bf00      	nop
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	20000044 	.word	0x20000044
 80078dc:	2000006c 	.word	0x2000006c
 80078e0:	20000042 	.word	0x20000042
 80078e4:	2000003c 	.word	0x2000003c
 80078e8:	20000010 	.word	0x20000010
 80078ec:	20000064 	.word	0x20000064

080078f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]

  HAL_UART_Receive_DMA(&UART_PORT_RS485, &RS485_BUFF.rx, 1); //Ponownie rozpocznij nasluchiwanie nasluchiwanie
 80078f8:	2201      	movs	r2, #1
 80078fa:	4911      	ldr	r1, [pc, #68]	; (8007940 <HAL_UART_RxCpltCallback+0x50>)
 80078fc:	4811      	ldr	r0, [pc, #68]	; (8007944 <HAL_UART_RxCpltCallback+0x54>)
 80078fe:	f7fe f925 	bl	8005b4c <HAL_UART_Receive_DMA>

  intRxCplt = 1;	//Ustaw flage informujaca o otrzymaniu nowych danych
 8007902:	4b11      	ldr	r3, [pc, #68]	; (8007948 <HAL_UART_RxCpltCallback+0x58>)
 8007904:	2201      	movs	r2, #1
 8007906:	701a      	strb	r2, [r3, #0]

  if (posInRxTab > RX_FRAME_LENGHT)
 8007908:	4b10      	ldr	r3, [pc, #64]	; (800794c <HAL_UART_RxCpltCallback+0x5c>)
 800790a:	881b      	ldrh	r3, [r3, #0]
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b06      	cmp	r3, #6
 8007910:	d902      	bls.n	8007918 <HAL_UART_RxCpltCallback+0x28>
    posInRxTab = 0;	//Zabezpieczenie przed wyjsciem poza zakres tablicy
 8007912:	4b0e      	ldr	r3, [pc, #56]	; (800794c <HAL_UART_RxCpltCallback+0x5c>)
 8007914:	2200      	movs	r2, #0
 8007916:	801a      	strh	r2, [r3, #0]

  dataFromRx[posInRxTab] = RS485_BUFF.rx;//Przypisz otrzymany bajt do analizowanej tablicy
 8007918:	4b0c      	ldr	r3, [pc, #48]	; (800794c <HAL_UART_RxCpltCallback+0x5c>)
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	461a      	mov	r2, r3
 8007920:	4b0b      	ldr	r3, [pc, #44]	; (8007950 <HAL_UART_RxCpltCallback+0x60>)
 8007922:	7859      	ldrb	r1, [r3, #1]
 8007924:	4b0b      	ldr	r3, [pc, #44]	; (8007954 <HAL_UART_RxCpltCallback+0x64>)
 8007926:	5499      	strb	r1, [r3, r2]
  posInRxTab++;
 8007928:	4b08      	ldr	r3, [pc, #32]	; (800794c <HAL_UART_RxCpltCallback+0x5c>)
 800792a:	881b      	ldrh	r3, [r3, #0]
 800792c:	b29b      	uxth	r3, r3
 800792e:	3301      	adds	r3, #1
 8007930:	b29a      	uxth	r2, r3
 8007932:	4b06      	ldr	r3, [pc, #24]	; (800794c <HAL_UART_RxCpltCallback+0x5c>)
 8007934:	801a      	strh	r2, [r3, #0]
}
 8007936:	bf00      	nop
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20000069 	.word	0x20000069
 8007944:	20000394 	.word	0x20000394
 8007948:	20000044 	.word	0x20000044
 800794c:	20000042 	.word	0x20000042
 8007950:	20000068 	.word	0x20000068
 8007954:	2000003c 	.word	0x2000003c

08007958 <prepareNewDataToSend>:
/**
 * @fn prepareNewDataToSend(void)
 * @brief Funkcja przygotowujaca dane do wysylki, wykorzystana wewnatrz sendData(void)
 */
static void prepareNewDataToSend(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0

  uint8_t j = 0;
 800795e:	2300      	movs	r3, #0
 8007960:	71fb      	strb	r3, [r7, #7]
  dataToTx[j] = emergency;
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	4a59      	ldr	r2, [pc, #356]	; (8007acc <prepareNewDataToSend+0x174>)
 8007966:	7811      	ldrb	r1, [r2, #0]
 8007968:	4a59      	ldr	r2, [pc, #356]	; (8007ad0 <prepareNewDataToSend+0x178>)
 800796a:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_V.array[0];
 800796c:	79fb      	ldrb	r3, [r7, #7]
 800796e:	3301      	adds	r3, #1
 8007970:	71fb      	strb	r3, [r7, #7]
 8007972:	79fb      	ldrb	r3, [r7, #7]
 8007974:	4a57      	ldr	r2, [pc, #348]	; (8007ad4 <prepareNewDataToSend+0x17c>)
 8007976:	7c11      	ldrb	r1, [r2, #16]
 8007978:	4a55      	ldr	r2, [pc, #340]	; (8007ad0 <prepareNewDataToSend+0x178>)
 800797a:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_V.array[1];
 800797c:	79fb      	ldrb	r3, [r7, #7]
 800797e:	3301      	adds	r3, #1
 8007980:	71fb      	strb	r3, [r7, #7]
 8007982:	79fb      	ldrb	r3, [r7, #7]
 8007984:	4a53      	ldr	r2, [pc, #332]	; (8007ad4 <prepareNewDataToSend+0x17c>)
 8007986:	7c51      	ldrb	r1, [r2, #17]
 8007988:	4a51      	ldr	r2, [pc, #324]	; (8007ad0 <prepareNewDataToSend+0x178>)
 800798a:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_V.array[2];
 800798c:	79fb      	ldrb	r3, [r7, #7]
 800798e:	3301      	adds	r3, #1
 8007990:	71fb      	strb	r3, [r7, #7]
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	4a4f      	ldr	r2, [pc, #316]	; (8007ad4 <prepareNewDataToSend+0x17c>)
 8007996:	7c91      	ldrb	r1, [r2, #18]
 8007998:	4a4d      	ldr	r2, [pc, #308]	; (8007ad0 <prepareNewDataToSend+0x178>)
 800799a:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_V.array[3];
 800799c:	79fb      	ldrb	r3, [r7, #7]
 800799e:	3301      	adds	r3, #1
 80079a0:	71fb      	strb	r3, [r7, #7]
 80079a2:	79fb      	ldrb	r3, [r7, #7]
 80079a4:	4a4b      	ldr	r2, [pc, #300]	; (8007ad4 <prepareNewDataToSend+0x17c>)
 80079a6:	7cd1      	ldrb	r1, [r2, #19]
 80079a8:	4a49      	ldr	r2, [pc, #292]	; (8007ad0 <prepareNewDataToSend+0x178>)
 80079aa:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_TEMP.array[0];
 80079ac:	79fb      	ldrb	r3, [r7, #7]
 80079ae:	3301      	adds	r3, #1
 80079b0:	71fb      	strb	r3, [r7, #7]
 80079b2:	79fb      	ldrb	r3, [r7, #7]
 80079b4:	4a47      	ldr	r2, [pc, #284]	; (8007ad4 <prepareNewDataToSend+0x17c>)
 80079b6:	7811      	ldrb	r1, [r2, #0]
 80079b8:	4a45      	ldr	r2, [pc, #276]	; (8007ad0 <prepareNewDataToSend+0x178>)
 80079ba:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_TEMP.array[1];
 80079bc:	79fb      	ldrb	r3, [r7, #7]
 80079be:	3301      	adds	r3, #1
 80079c0:	71fb      	strb	r3, [r7, #7]
 80079c2:	79fb      	ldrb	r3, [r7, #7]
 80079c4:	4a43      	ldr	r2, [pc, #268]	; (8007ad4 <prepareNewDataToSend+0x17c>)
 80079c6:	7851      	ldrb	r1, [r2, #1]
 80079c8:	4a41      	ldr	r2, [pc, #260]	; (8007ad0 <prepareNewDataToSend+0x178>)
 80079ca:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_TEMP.array[2];
 80079cc:	79fb      	ldrb	r3, [r7, #7]
 80079ce:	3301      	adds	r3, #1
 80079d0:	71fb      	strb	r3, [r7, #7]
 80079d2:	79fb      	ldrb	r3, [r7, #7]
 80079d4:	4a3f      	ldr	r2, [pc, #252]	; (8007ad4 <prepareNewDataToSend+0x17c>)
 80079d6:	7891      	ldrb	r1, [r2, #2]
 80079d8:	4a3d      	ldr	r2, [pc, #244]	; (8007ad0 <prepareNewDataToSend+0x178>)
 80079da:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.FC_TEMP.array[3];
 80079dc:	79fb      	ldrb	r3, [r7, #7]
 80079de:	3301      	adds	r3, #1
 80079e0:	71fb      	strb	r3, [r7, #7]
 80079e2:	79fb      	ldrb	r3, [r7, #7]
 80079e4:	4a3b      	ldr	r2, [pc, #236]	; (8007ad4 <prepareNewDataToSend+0x17c>)
 80079e6:	78d1      	ldrb	r1, [r2, #3]
 80079e8:	4a39      	ldr	r2, [pc, #228]	; (8007ad0 <prepareNewDataToSend+0x178>)
 80079ea:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_C.array[0];
 80079ec:	79fb      	ldrb	r3, [r7, #7]
 80079ee:	3301      	adds	r3, #1
 80079f0:	71fb      	strb	r3, [r7, #7]
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	4a37      	ldr	r2, [pc, #220]	; (8007ad4 <prepareNewDataToSend+0x17c>)
 80079f6:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 80079fa:	4a35      	ldr	r2, [pc, #212]	; (8007ad0 <prepareNewDataToSend+0x178>)
 80079fc:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_C.array[1];
 80079fe:	79fb      	ldrb	r3, [r7, #7]
 8007a00:	3301      	adds	r3, #1
 8007a02:	71fb      	strb	r3, [r7, #7]
 8007a04:	79fb      	ldrb	r3, [r7, #7]
 8007a06:	4a33      	ldr	r2, [pc, #204]	; (8007ad4 <prepareNewDataToSend+0x17c>)
 8007a08:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 8007a0c:	4a30      	ldr	r2, [pc, #192]	; (8007ad0 <prepareNewDataToSend+0x178>)
 8007a0e:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_C.array[2];
 8007a10:	79fb      	ldrb	r3, [r7, #7]
 8007a12:	3301      	adds	r3, #1
 8007a14:	71fb      	strb	r3, [r7, #7]
 8007a16:	79fb      	ldrb	r3, [r7, #7]
 8007a18:	4a2e      	ldr	r2, [pc, #184]	; (8007ad4 <prepareNewDataToSend+0x17c>)
 8007a1a:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
 8007a1e:	4a2c      	ldr	r2, [pc, #176]	; (8007ad0 <prepareNewDataToSend+0x178>)
 8007a20:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_C.array[3];
 8007a22:	79fb      	ldrb	r3, [r7, #7]
 8007a24:	3301      	adds	r3, #1
 8007a26:	71fb      	strb	r3, [r7, #7]
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	4a2a      	ldr	r2, [pc, #168]	; (8007ad4 <prepareNewDataToSend+0x17c>)
 8007a2c:	f892 1033 	ldrb.w	r1, [r2, #51]	; 0x33
 8007a30:	4a27      	ldr	r2, [pc, #156]	; (8007ad0 <prepareNewDataToSend+0x178>)
 8007a32:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_V.array[0];
 8007a34:	79fb      	ldrb	r3, [r7, #7]
 8007a36:	3301      	adds	r3, #1
 8007a38:	71fb      	strb	r3, [r7, #7]
 8007a3a:	79fb      	ldrb	r3, [r7, #7]
 8007a3c:	4a25      	ldr	r2, [pc, #148]	; (8007ad4 <prepareNewDataToSend+0x17c>)
 8007a3e:	f892 1020 	ldrb.w	r1, [r2, #32]
 8007a42:	4a23      	ldr	r2, [pc, #140]	; (8007ad0 <prepareNewDataToSend+0x178>)
 8007a44:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_V.array[1];
 8007a46:	79fb      	ldrb	r3, [r7, #7]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	71fb      	strb	r3, [r7, #7]
 8007a4c:	79fb      	ldrb	r3, [r7, #7]
 8007a4e:	4a21      	ldr	r2, [pc, #132]	; (8007ad4 <prepareNewDataToSend+0x17c>)
 8007a50:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8007a54:	4a1e      	ldr	r2, [pc, #120]	; (8007ad0 <prepareNewDataToSend+0x178>)
 8007a56:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_V.array[2];
 8007a58:	79fb      	ldrb	r3, [r7, #7]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	71fb      	strb	r3, [r7, #7]
 8007a5e:	79fb      	ldrb	r3, [r7, #7]
 8007a60:	4a1c      	ldr	r2, [pc, #112]	; (8007ad4 <prepareNewDataToSend+0x17c>)
 8007a62:	f892 1022 	ldrb.w	r1, [r2, #34]	; 0x22
 8007a66:	4a1a      	ldr	r2, [pc, #104]	; (8007ad0 <prepareNewDataToSend+0x178>)
 8007a68:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = VALUES.SC_V.array[3];
 8007a6a:	79fb      	ldrb	r3, [r7, #7]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	71fb      	strb	r3, [r7, #7]
 8007a70:	79fb      	ldrb	r3, [r7, #7]
 8007a72:	4a18      	ldr	r2, [pc, #96]	; (8007ad4 <prepareNewDataToSend+0x17c>)
 8007a74:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 8007a78:	4a15      	ldr	r2, [pc, #84]	; (8007ad0 <prepareNewDataToSend+0x178>)
 8007a7a:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = FANS.fanstors485.rpmtoRS[0];
 8007a7c:	79fb      	ldrb	r3, [r7, #7]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	71fb      	strb	r3, [r7, #7]
 8007a82:	79fb      	ldrb	r3, [r7, #7]
 8007a84:	4a14      	ldr	r2, [pc, #80]	; (8007ad8 <prepareNewDataToSend+0x180>)
 8007a86:	7811      	ldrb	r1, [r2, #0]
 8007a88:	4a11      	ldr	r2, [pc, #68]	; (8007ad0 <prepareNewDataToSend+0x178>)
 8007a8a:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = FANS.fanstors485.rpmtoRS[1];
 8007a8c:	79fb      	ldrb	r3, [r7, #7]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	71fb      	strb	r3, [r7, #7]
 8007a92:	79fb      	ldrb	r3, [r7, #7]
 8007a94:	4a10      	ldr	r2, [pc, #64]	; (8007ad8 <prepareNewDataToSend+0x180>)
 8007a96:	7851      	ldrb	r1, [r2, #1]
 8007a98:	4a0d      	ldr	r2, [pc, #52]	; (8007ad0 <prepareNewDataToSend+0x178>)
 8007a9a:	54d1      	strb	r1, [r2, r3]
  dataToTx[++j] = EOT_BYTE;
 8007a9c:	79fb      	ldrb	r3, [r7, #7]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	71fb      	strb	r3, [r7, #7]
 8007aa2:	79fb      	ldrb	r3, [r7, #7]
 8007aa4:	4a0a      	ldr	r2, [pc, #40]	; (8007ad0 <prepareNewDataToSend+0x178>)
 8007aa6:	2117      	movs	r1, #23
 8007aa8:	54d1      	strb	r1, [r2, r3]
  //OBLICZ SUME KONTROLNA
  uint8_t calculatedCrcSumOnMCU = crc_calc_TX();
 8007aaa:	f7ff fe1b 	bl	80076e4 <crc_calc_TX>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	71bb      	strb	r3, [r7, #6]

  SumaKontrolnaBoKtosMimeczyDupe = crc_calc_TX();
 8007ab2:	f7ff fe17 	bl	80076e4 <crc_calc_TX>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	461a      	mov	r2, r3
 8007aba:	4b08      	ldr	r3, [pc, #32]	; (8007adc <prepareNewDataToSend+0x184>)
 8007abc:	701a      	strb	r2, [r3, #0]
  //Wrzuc obliczona sume kontrolna na koniec wysylanej tablicy
  dataToTx[TX_FRAME_LENGHT - 1] = calculatedCrcSumOnMCU;
 8007abe:	4a04      	ldr	r2, [pc, #16]	; (8007ad0 <prepareNewDataToSend+0x178>)
 8007ac0:	79bb      	ldrb	r3, [r7, #6]
 8007ac2:	7513      	strb	r3, [r2, #20]
}
 8007ac4:	bf00      	nop
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	20000060 	.word	0x20000060
 8007ad0:	20000048 	.word	0x20000048
 8007ad4:	2000048c 	.word	0x2000048c
 8007ad8:	20000484 	.word	0x20000484
 8007adc:	20000061 	.word	0x20000061

08007ae0 <processReceivedData>:
/**
 * @fn processReveivedData()
 * @brief Funkcja przypisujaca odebrane dane do zmiennych docelowych
 */
static void processReceivedData(void)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	71fb      	strb	r3, [r7, #7]
  RS485_RX_VERIFIED_DATA.mode = dataFromRx[i];
 8007aea:	79fb      	ldrb	r3, [r7, #7]
 8007aec:	4a19      	ldr	r2, [pc, #100]	; (8007b54 <processReceivedData+0x74>)
 8007aee:	5cd3      	ldrb	r3, [r2, r3]
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	4b19      	ldr	r3, [pc, #100]	; (8007b58 <processReceivedData+0x78>)
 8007af4:	705a      	strb	r2, [r3, #1]
  RS485_RX_VERIFIED_DATA.scOn = dataFromRx[++i];
 8007af6:	79fb      	ldrb	r3, [r7, #7]
 8007af8:	3301      	adds	r3, #1
 8007afa:	71fb      	strb	r3, [r7, #7]
 8007afc:	79fb      	ldrb	r3, [r7, #7]
 8007afe:	4a15      	ldr	r2, [pc, #84]	; (8007b54 <processReceivedData+0x74>)
 8007b00:	5cd3      	ldrb	r3, [r2, r3]
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	4b14      	ldr	r3, [pc, #80]	; (8007b58 <processReceivedData+0x78>)
 8007b06:	709a      	strb	r2, [r3, #2]
  RS485_RX_VERIFIED_DATA.emergencyScenario = dataFromRx[++i];
 8007b08:	79fb      	ldrb	r3, [r7, #7]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	71fb      	strb	r3, [r7, #7]
 8007b0e:	79fb      	ldrb	r3, [r7, #7]
 8007b10:	4a10      	ldr	r2, [pc, #64]	; (8007b54 <processReceivedData+0x74>)
 8007b12:	5cd3      	ldrb	r3, [r2, r3]
 8007b14:	b2da      	uxtb	r2, r3
 8007b16:	4b10      	ldr	r3, [pc, #64]	; (8007b58 <processReceivedData+0x78>)
 8007b18:	70da      	strb	r2, [r3, #3]
  RS485_RX_VERIFIED_DATA.motorPWM = dataFromRx[++i];
 8007b1a:	79fb      	ldrb	r3, [r7, #7]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	71fb      	strb	r3, [r7, #7]
 8007b20:	79fb      	ldrb	r3, [r7, #7]
 8007b22:	4a0c      	ldr	r2, [pc, #48]	; (8007b54 <processReceivedData+0x74>)
 8007b24:	5cd3      	ldrb	r3, [r2, r3]
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	4b0b      	ldr	r3, [pc, #44]	; (8007b58 <processReceivedData+0x78>)
 8007b2a:	701a      	strb	r2, [r3, #0]
  switch (emergency)
 8007b2c:	4b0b      	ldr	r3, [pc, #44]	; (8007b5c <processReceivedData+0x7c>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d007      	beq.n	8007b44 <processReceivedData+0x64>
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d000      	beq.n	8007b3a <processReceivedData+0x5a>
    break;
    case 1:
      emergency = emergency;
    break;
    default:
    break;
 8007b38:	e005      	b.n	8007b46 <processReceivedData+0x66>
      emergency = emergency;
 8007b3a:	4b08      	ldr	r3, [pc, #32]	; (8007b5c <processReceivedData+0x7c>)
 8007b3c:	781a      	ldrb	r2, [r3, #0]
 8007b3e:	4b07      	ldr	r3, [pc, #28]	; (8007b5c <processReceivedData+0x7c>)
 8007b40:	701a      	strb	r2, [r3, #0]
    break;
 8007b42:	e000      	b.n	8007b46 <processReceivedData+0x66>
    break;
 8007b44:	bf00      	nop
    }
}
 8007b46:	bf00      	nop
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	2000003c 	.word	0x2000003c
 8007b58:	2000052c 	.word	0x2000052c
 8007b5c:	20000060 	.word	0x20000060

08007b60 <resetActData>:
/**
 * @fn resetActData
 * @brief Zerowanie zmiennych docelowych (odbywa sie m.in w przypadku zerwania transmisji)
 */
static void resetActData(void)
{
 8007b60:	b480      	push	{r7}
 8007b62:	af00      	add	r7, sp, #0
  RS485_RX_VERIFIED_DATA.motorPWM = 0;
 8007b64:	4b08      	ldr	r3, [pc, #32]	; (8007b88 <resetActData+0x28>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	701a      	strb	r2, [r3, #0]
  RS485_RX_VERIFIED_DATA.mode = 0;
 8007b6a:	4b07      	ldr	r3, [pc, #28]	; (8007b88 <resetActData+0x28>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	705a      	strb	r2, [r3, #1]
  RS485_RX_VERIFIED_DATA.emergencyScenario = 0;
 8007b70:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <resetActData+0x28>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	70da      	strb	r2, [r3, #3]
  RS485_RX_VERIFIED_DATA.scOn = 0;
 8007b76:	4b04      	ldr	r3, [pc, #16]	; (8007b88 <resetActData+0x28>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	709a      	strb	r2, [r3, #2]
}
 8007b7c:	bf00      	nop
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	2000052c 	.word	0x2000052c

08007b8c <timers_init>:
/**
 * @fn timers_init(void)
 * @brief Funkcja inicjalizujaca timery
 */
void timers_init(void)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim6);			//Inicjalizuj TIM6 pracujacy z czestotliwoscia 10kHz
 8007b90:	4803      	ldr	r0, [pc, #12]	; (8007ba0 <timers_init+0x14>)
 8007b92:	f7fc fa79 	bl	8004088 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);			//Inicjalizuj TIM7 pracujacy z czestotliwoscia 100kHz
 8007b96:	4803      	ldr	r0, [pc, #12]	; (8007ba4 <timers_init+0x18>)
 8007b98:	f7fc fa76 	bl	8004088 <HAL_TIM_Base_Start_IT>
}
 8007b9c:	bf00      	nop
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	20000220 	.word	0x20000220
 8007ba4:	20000304 	.word	0x20000304

08007ba8 <timers_step>:
/**
 * @fn timers_main(void)
 * @brief Glowna funkcja odpowiadajaca za interwaly czasowe wykorzystywane w systemie
 */
static inline void timers_step(void)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	af00      	add	r7, sp, #0
  timers_tick1kHz = 1;
 8007bac:	4b03      	ldr	r3, [pc, #12]	; (8007bbc <timers_step+0x14>)
 8007bae:	2201      	movs	r2, #1
 8007bb0:	701a      	strb	r2, [r3, #0]

  setSystemOperatingTime();
 8007bb2:	f000 f805 	bl	8007bc0 <setSystemOperatingTime>
}
 8007bb6:	bf00      	nop
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	20000534 	.word	0x20000534

08007bc0 <setSystemOperatingTime>:
/**
 * @fn setSystemOperatingTime(void)
 * @brief Funkcja przeliczajaca czas pracy systemu na milisekundy, sekundy, minuty oraz godziny
 */
static inline void setSystemOperatingTime(void)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0
  timers_mainTimeMiliseconds++;
 8007bc4:	4b1c      	ldr	r3, [pc, #112]	; (8007c38 <setSystemOperatingTime+0x78>)
 8007bc6:	881b      	ldrh	r3, [r3, #0]
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	3301      	adds	r3, #1
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	4b1a      	ldr	r3, [pc, #104]	; (8007c38 <setSystemOperatingTime+0x78>)
 8007bd0:	801a      	strh	r2, [r3, #0]

  //Sekundy
  if (timers_mainTimeMiliseconds >= PERIOD_1S)
 8007bd2:	4b19      	ldr	r3, [pc, #100]	; (8007c38 <setSystemOperatingTime+0x78>)
 8007bd4:	881b      	ldrh	r3, [r3, #0]
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bdc:	d309      	bcc.n	8007bf2 <setSystemOperatingTime+0x32>
    {
      timers_mainTimeMiliseconds = 0;
 8007bde:	4b16      	ldr	r3, [pc, #88]	; (8007c38 <setSystemOperatingTime+0x78>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	801a      	strh	r2, [r3, #0]
      timers_mainTimeSeconds++;
 8007be4:	4b15      	ldr	r3, [pc, #84]	; (8007c3c <setSystemOperatingTime+0x7c>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	3301      	adds	r3, #1
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	4b13      	ldr	r3, [pc, #76]	; (8007c3c <setSystemOperatingTime+0x7c>)
 8007bf0:	701a      	strb	r2, [r3, #0]
    }

  //Minuty
  if (timers_mainTimeSeconds >= 60)
 8007bf2:	4b12      	ldr	r3, [pc, #72]	; (8007c3c <setSystemOperatingTime+0x7c>)
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b3b      	cmp	r3, #59	; 0x3b
 8007bfa:	d909      	bls.n	8007c10 <setSystemOperatingTime+0x50>
    {
      timers_mainTimeSeconds = 0;
 8007bfc:	4b0f      	ldr	r3, [pc, #60]	; (8007c3c <setSystemOperatingTime+0x7c>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	701a      	strb	r2, [r3, #0]
      timers_mainTimeMinutes++;
 8007c02:	4b0f      	ldr	r3, [pc, #60]	; (8007c40 <setSystemOperatingTime+0x80>)
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	3301      	adds	r3, #1
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	4b0c      	ldr	r3, [pc, #48]	; (8007c40 <setSystemOperatingTime+0x80>)
 8007c0e:	701a      	strb	r2, [r3, #0]
    }

  //Godziny
  if (timers_mainTimeMinutes >= 60)
 8007c10:	4b0b      	ldr	r3, [pc, #44]	; (8007c40 <setSystemOperatingTime+0x80>)
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b3b      	cmp	r3, #59	; 0x3b
 8007c18:	d909      	bls.n	8007c2e <setSystemOperatingTime+0x6e>
    {
      timers_mainTimeMinutes = 0;
 8007c1a:	4b09      	ldr	r3, [pc, #36]	; (8007c40 <setSystemOperatingTime+0x80>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	701a      	strb	r2, [r3, #0]
      timers_mainTimeHours++;
 8007c20:	4b08      	ldr	r3, [pc, #32]	; (8007c44 <setSystemOperatingTime+0x84>)
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	3301      	adds	r3, #1
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	4b06      	ldr	r3, [pc, #24]	; (8007c44 <setSystemOperatingTime+0x84>)
 8007c2c:	701a      	strb	r2, [r3, #0]
    }
}
 8007c2e:	bf00      	nop
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	20000532 	.word	0x20000532
 8007c3c:	20000544 	.word	0x20000544
 8007c40:	2000053c 	.word	0x2000053c
 8007c44:	20000535 	.word	0x20000535

08007c48 <timers_beforeStep1kHz>:
/**
 * @fn timers_beforeStep1kHz(void)
 * @brief Funkcja sluzaca do obliczania czasu trwania petli hydrogreen_step(), wywolac przed hydrogreen_step()
 */
void timers_beforeStep1kHz(void)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	af00      	add	r7, sp, #0
  timers_sysCycle100kHzCnt = 0;
 8007c4c:	4b03      	ldr	r3, [pc, #12]	; (8007c5c <timers_beforeStep1kHz+0x14>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	601a      	str	r2, [r3, #0]
}
 8007c52:	bf00      	nop
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	20000070 	.word	0x20000070

08007c60 <timers_afterStep1kHz>:
/**
 * @fn timers_afterStep1kHz(void)
 * @brief Funkcja sluzaca do obliczania czasu trwania petli hydrogreen_step(), wywolac po hydrogreen_step()
 */
void timers_afterStep1kHz(void)
{
 8007c60:	b480      	push	{r7}
 8007c62:	af00      	add	r7, sp, #0
  static uint32_t actSysCyclePeriod;
  static uint32_t avgSysCyclePeriodSum;
  static uint16_t avgCnt;

  //Warunek wykorzystywany przy inicjalizacji systemu (tylko raz)
  if (!initFlag)
 8007c64:	4b2a      	ldr	r3, [pc, #168]	; (8007d10 <timers_afterStep1kHz+0xb0>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10b      	bne.n	8007c84 <timers_afterStep1kHz+0x24>
    {
      timers_minSysCyclePeriod = 10 * timers_sysCycle100kHzCnt;
 8007c6c:	4b29      	ldr	r3, [pc, #164]	; (8007d14 <timers_afterStep1kHz+0xb4>)
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	4613      	mov	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4b27      	ldr	r3, [pc, #156]	; (8007d18 <timers_afterStep1kHz+0xb8>)
 8007c7c:	601a      	str	r2, [r3, #0]
      initFlag = 1;
 8007c7e:	4b24      	ldr	r3, [pc, #144]	; (8007d10 <timers_afterStep1kHz+0xb0>)
 8007c80:	2201      	movs	r2, #1
 8007c82:	701a      	strb	r2, [r3, #0]
    }

  actSysCyclePeriod = 10 * timers_sysCycle100kHzCnt; 			//Przeliczenie otrzymanej wartosci na mikrosekundy
 8007c84:	4b23      	ldr	r3, [pc, #140]	; (8007d14 <timers_afterStep1kHz+0xb4>)
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	005b      	lsls	r3, r3, #1
 8007c90:	461a      	mov	r2, r3
 8007c92:	4b22      	ldr	r3, [pc, #136]	; (8007d1c <timers_afterStep1kHz+0xbc>)
 8007c94:	601a      	str	r2, [r3, #0]

  timers_sysCycle100kHzCnt = 0;
 8007c96:	4b1f      	ldr	r3, [pc, #124]	; (8007d14 <timers_afterStep1kHz+0xb4>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	601a      	str	r2, [r3, #0]

  //Oblicz sredni czas trwania cyklu ze 100 probek
  if (avgCnt <= 100)
 8007c9c:	4b20      	ldr	r3, [pc, #128]	; (8007d20 <timers_afterStep1kHz+0xc0>)
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	2b64      	cmp	r3, #100	; 0x64
 8007ca2:	d80d      	bhi.n	8007cc0 <timers_afterStep1kHz+0x60>
    {
      avgSysCyclePeriodSum = avgSysCyclePeriodSum + actSysCyclePeriod;
 8007ca4:	4b1f      	ldr	r3, [pc, #124]	; (8007d24 <timers_afterStep1kHz+0xc4>)
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	4b1c      	ldr	r3, [pc, #112]	; (8007d1c <timers_afterStep1kHz+0xbc>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4413      	add	r3, r2
 8007cae:	4a1d      	ldr	r2, [pc, #116]	; (8007d24 <timers_afterStep1kHz+0xc4>)
 8007cb0:	6013      	str	r3, [r2, #0]
      avgCnt++;
 8007cb2:	4b1b      	ldr	r3, [pc, #108]	; (8007d20 <timers_afterStep1kHz+0xc0>)
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	4b19      	ldr	r3, [pc, #100]	; (8007d20 <timers_afterStep1kHz+0xc0>)
 8007cbc:	801a      	strh	r2, [r3, #0]
 8007cbe:	e00d      	b.n	8007cdc <timers_afterStep1kHz+0x7c>
    }
  else
    {
      timers_avgSysCyclePeriod = avgSysCyclePeriodSum / avgCnt;
 8007cc0:	4b18      	ldr	r3, [pc, #96]	; (8007d24 <timers_afterStep1kHz+0xc4>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a16      	ldr	r2, [pc, #88]	; (8007d20 <timers_afterStep1kHz+0xc0>)
 8007cc6:	8812      	ldrh	r2, [r2, #0]
 8007cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ccc:	4a16      	ldr	r2, [pc, #88]	; (8007d28 <timers_afterStep1kHz+0xc8>)
 8007cce:	6013      	str	r3, [r2, #0]
      avgSysCyclePeriodSum = 0;
 8007cd0:	4b14      	ldr	r3, [pc, #80]	; (8007d24 <timers_afterStep1kHz+0xc4>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
      avgCnt = 0;
 8007cd6:	4b12      	ldr	r3, [pc, #72]	; (8007d20 <timers_afterStep1kHz+0xc0>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	801a      	strh	r2, [r3, #0]
    }

  //Najkrotszy czas trwania cyklu
  if (actSysCyclePeriod < timers_minSysCyclePeriod)
 8007cdc:	4b0f      	ldr	r3, [pc, #60]	; (8007d1c <timers_afterStep1kHz+0xbc>)
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	4b0d      	ldr	r3, [pc, #52]	; (8007d18 <timers_afterStep1kHz+0xb8>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d203      	bcs.n	8007cf0 <timers_afterStep1kHz+0x90>
    {
      timers_minSysCyclePeriod = actSysCyclePeriod;
 8007ce8:	4b0c      	ldr	r3, [pc, #48]	; (8007d1c <timers_afterStep1kHz+0xbc>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a0a      	ldr	r2, [pc, #40]	; (8007d18 <timers_afterStep1kHz+0xb8>)
 8007cee:	6013      	str	r3, [r2, #0]
    }

  //Najdluzszy czas trwania cyklu
  if (actSysCyclePeriod > timers_maxSysCyclePeriod)
 8007cf0:	4b0a      	ldr	r3, [pc, #40]	; (8007d1c <timers_afterStep1kHz+0xbc>)
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	4b0d      	ldr	r3, [pc, #52]	; (8007d2c <timers_afterStep1kHz+0xcc>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d903      	bls.n	8007d04 <timers_afterStep1kHz+0xa4>
    {
      timers_maxSysCyclePeriod = actSysCyclePeriod;
 8007cfc:	4b07      	ldr	r3, [pc, #28]	; (8007d1c <timers_afterStep1kHz+0xbc>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a0a      	ldr	r2, [pc, #40]	; (8007d2c <timers_afterStep1kHz+0xcc>)
 8007d02:	6013      	str	r3, [r2, #0]
    }
}
 8007d04:	bf00      	nop
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	20000074 	.word	0x20000074
 8007d14:	20000070 	.word	0x20000070
 8007d18:	20000540 	.word	0x20000540
 8007d1c:	20000078 	.word	0x20000078
 8007d20:	2000007c 	.word	0x2000007c
 8007d24:	20000080 	.word	0x20000080
 8007d28:	20000548 	.word	0x20000548
 8007d2c:	20000538 	.word	0x20000538

08007d30 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	af00      	add	r7, sp, #0
  timers_step();
 8007d34:	f7ff ff38 	bl	8007ba8 <timers_step>
}
 8007d38:	bf00      	nop
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a0a      	ldr	r2, [pc, #40]	; (8007d74 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d102      	bne.n	8007d54 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
      timers_tick10kHz = 1;
 8007d4e:	4b0a      	ldr	r3, [pc, #40]	; (8007d78 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8007d50:	2201      	movs	r2, #1
 8007d52:	701a      	strb	r2, [r3, #0]
    }

  if (htim->Instance == TIM7)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a08      	ldr	r2, [pc, #32]	; (8007d7c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d104      	bne.n	8007d68 <HAL_TIM_PeriodElapsedCallback+0x2c>
    {
      timers_sysCycle100kHzCnt++;
 8007d5e:	4b08      	ldr	r3, [pc, #32]	; (8007d80 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3301      	adds	r3, #1
 8007d64:	4a06      	ldr	r2, [pc, #24]	; (8007d80 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8007d66:	6013      	str	r3, [r2, #0]
    }
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	40001000 	.word	0x40001000
 8007d78:	20000530 	.word	0x20000530
 8007d7c:	40001400 	.word	0x40001400
 8007d80:	20000070 	.word	0x20000070

08007d84 <watchdog_init>:
/**
* @fn watchdog_init(void)
* @brief Funkcja sprawdzajaca przyczyne zresetowania systemu i inicjalizujaca watchdoga
*/
void watchdog_init(void)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b0a0      	sub	sp, #128	; 0x80
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d92:	fa93 f3a3 	rbit	r3, r3
 8007d96:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d9c:	677b      	str	r3, [r7, #116]	; 0x74
 8007d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007da0:	fa93 f3a3 	rbit	r3, r3
 8007da4:	673b      	str	r3, [r7, #112]	; 0x70
 8007da6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007daa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dae:	fa93 f3a3 	rbit	r3, r3
 8007db2:	66bb      	str	r3, [r7, #104]	; 0x68
  //Warunek sprawdzajacy czy system zostal zresetowany z powodu zaniku zasilania
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET)
 8007db4:	4b5a      	ldr	r3, [pc, #360]	; (8007f20 <watchdog_init+0x19c>)
 8007db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007db8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007dbc:	667b      	str	r3, [r7, #100]	; 0x64
 8007dbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dc0:	fa93 f3a3 	rbit	r3, r3
 8007dc4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8007dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dc8:	fab3 f383 	clz	r3, r3
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	f003 031f 	and.w	r3, r3, #31
 8007dd8:	2101      	movs	r1, #1
 8007dda:	fa01 f303 	lsl.w	r3, r1, r3
 8007dde:	4013      	ands	r3, r2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d003      	beq.n	8007dec <watchdog_init+0x68>
    {
      watchdog_flt = WATCHDOG_FLT_LPWRRST;
 8007de4:	4b4f      	ldr	r3, [pc, #316]	; (8007f24 <watchdog_init+0x1a0>)
 8007de6:	2201      	movs	r2, #1
 8007de8:	701a      	strb	r2, [r3, #0]
 8007dea:	e091      	b.n	8007f10 <watchdog_init+0x18c>
 8007dec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007df0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007df4:	fa93 f3a3 	rbit	r3, r3
 8007df8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007dfa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007dfe:	657b      	str	r3, [r7, #84]	; 0x54
 8007e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e02:	fa93 f3a3 	rbit	r3, r3
 8007e06:	653b      	str	r3, [r7, #80]	; 0x50
 8007e08:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e10:	fa93 f3a3 	rbit	r3, r3
 8007e14:	64bb      	str	r3, [r7, #72]	; 0x48
    }

  //Warunek sprawdzajacy czy system zaczal prace po wykorzystaniu resetu przez uklad czuwajacy
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET)
 8007e16:	4b42      	ldr	r3, [pc, #264]	; (8007f20 <watchdog_init+0x19c>)
 8007e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e1a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e22:	fa93 f3a3 	rbit	r3, r3
 8007e26:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e2a:	fab3 f383 	clz	r3, r3
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	f003 031f 	and.w	r3, r3, #31
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e40:	4013      	ands	r3, r2
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d003      	beq.n	8007e4e <watchdog_init+0xca>
    {
      watchdog_flt = WATCHDOG_FLT_IWDGRST;
 8007e46:	4b37      	ldr	r3, [pc, #220]	; (8007f24 <watchdog_init+0x1a0>)
 8007e48:	2202      	movs	r2, #2
 8007e4a:	701a      	strb	r2, [r3, #0]
 8007e4c:	e060      	b.n	8007f10 <watchdog_init+0x18c>
 8007e4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e56:	fa93 f3a3 	rbit	r3, r3
 8007e5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e60:	637b      	str	r3, [r7, #52]	; 0x34
 8007e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e64:	fa93 f3a3 	rbit	r3, r3
 8007e68:	633b      	str	r3, [r7, #48]	; 0x30
 8007e6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e72:	fa93 f3a3 	rbit	r3, r3
 8007e76:	62bb      	str	r3, [r7, #40]	; 0x28
    }

  //Warunek sprawdzajacy czy reset systemu zostal wywolany w programie
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET)
 8007e78:	4b29      	ldr	r3, [pc, #164]	; (8007f20 <watchdog_init+0x19c>)
 8007e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e80:	627b      	str	r3, [r7, #36]	; 0x24
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	fa93 f3a3 	rbit	r3, r3
 8007e88:	623b      	str	r3, [r7, #32]
  return result;
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	fab3 f383 	clz	r3, r3
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	f003 031f 	and.w	r3, r3, #31
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <watchdog_init+0x12c>
    {
      watchdog_flt = WATCHDOG_FLT_SFTRST;
 8007ea8:	4b1e      	ldr	r3, [pc, #120]	; (8007f24 <watchdog_init+0x1a0>)
 8007eaa:	2203      	movs	r2, #3
 8007eac:	701a      	strb	r2, [r3, #0]
 8007eae:	e02f      	b.n	8007f10 <watchdog_init+0x18c>
 8007eb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007eb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	fa93 f3a3 	rbit	r3, r3
 8007ebc:	61bb      	str	r3, [r7, #24]
 8007ebe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ec2:	617b      	str	r3, [r7, #20]
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	fa93 f3a3 	rbit	r3, r3
 8007eca:	613b      	str	r3, [r7, #16]
 8007ecc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ed0:	60fb      	str	r3, [r7, #12]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	fa93 f3a3 	rbit	r3, r3
 8007ed8:	60bb      	str	r3, [r7, #8]
    }

  //Warunek sprawdzajacy czy reset systemu nastapil poprzez wlaczenie badz odlaczenie zasilania
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 8007eda:	4b11      	ldr	r3, [pc, #68]	; (8007f20 <watchdog_init+0x19c>)
 8007edc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ede:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ee2:	607b      	str	r3, [r7, #4]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	fa93 f3a3 	rbit	r3, r3
 8007eea:	603b      	str	r3, [r7, #0]
  return result;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	fab3 f383 	clz	r3, r3
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	f003 031f 	and.w	r3, r3, #31
 8007efe:	2101      	movs	r1, #1
 8007f00:	fa01 f303 	lsl.w	r3, r1, r3
 8007f04:	4013      	ands	r3, r2
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <watchdog_init+0x18c>
    {
      watchdog_flt = WATCHDOG_FLT_NONE;
 8007f0a:	4b06      	ldr	r3, [pc, #24]	; (8007f24 <watchdog_init+0x1a0>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	701a      	strb	r2, [r3, #0]
    }

  HAL_IWDG_Refresh(&hiwdg); 			//Przeladowanie IWDG
 8007f10:	4805      	ldr	r0, [pc, #20]	; (8007f28 <watchdog_init+0x1a4>)
 8007f12:	f7fa fded 	bl	8002af0 <HAL_IWDG_Refresh>
}
 8007f16:	bf00      	nop
 8007f18:	3780      	adds	r7, #128	; 0x80
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	40021000 	.word	0x40021000
 8007f24:	2000054c 	.word	0x2000054c
 8007f28:	2000013c 	.word	0x2000013c

08007f2c <watchdog_step>:
/**
* @fn watchdog_step(void)
* @brief Funkcja przeladowujaca IWDG, powinna zostac wywolana wewnatrz hydrogreen_step()
*/
inline void watchdog_step(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	af00      	add	r7, sp, #0
  HAL_IWDG_Refresh(&hiwdg); 			//Przeladowanie IWDG
 8007f30:	4802      	ldr	r0, [pc, #8]	; (8007f3c <watchdog_step+0x10>)
 8007f32:	f7fa fddd 	bl	8002af0 <HAL_IWDG_Refresh>
}
 8007f36:	bf00      	nop
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	2000013c 	.word	0x2000013c

08007f40 <__libc_init_array>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	4e0d      	ldr	r6, [pc, #52]	; (8007f78 <__libc_init_array+0x38>)
 8007f44:	4c0d      	ldr	r4, [pc, #52]	; (8007f7c <__libc_init_array+0x3c>)
 8007f46:	1ba4      	subs	r4, r4, r6
 8007f48:	10a4      	asrs	r4, r4, #2
 8007f4a:	2500      	movs	r5, #0
 8007f4c:	42a5      	cmp	r5, r4
 8007f4e:	d109      	bne.n	8007f64 <__libc_init_array+0x24>
 8007f50:	4e0b      	ldr	r6, [pc, #44]	; (8007f80 <__libc_init_array+0x40>)
 8007f52:	4c0c      	ldr	r4, [pc, #48]	; (8007f84 <__libc_init_array+0x44>)
 8007f54:	f000 f820 	bl	8007f98 <_init>
 8007f58:	1ba4      	subs	r4, r4, r6
 8007f5a:	10a4      	asrs	r4, r4, #2
 8007f5c:	2500      	movs	r5, #0
 8007f5e:	42a5      	cmp	r5, r4
 8007f60:	d105      	bne.n	8007f6e <__libc_init_array+0x2e>
 8007f62:	bd70      	pop	{r4, r5, r6, pc}
 8007f64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f68:	4798      	blx	r3
 8007f6a:	3501      	adds	r5, #1
 8007f6c:	e7ee      	b.n	8007f4c <__libc_init_array+0xc>
 8007f6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f72:	4798      	blx	r3
 8007f74:	3501      	adds	r5, #1
 8007f76:	e7f2      	b.n	8007f5e <__libc_init_array+0x1e>
 8007f78:	08007fe8 	.word	0x08007fe8
 8007f7c:	08007fe8 	.word	0x08007fe8
 8007f80:	08007fe8 	.word	0x08007fe8
 8007f84:	08007fec 	.word	0x08007fec

08007f88 <memset>:
 8007f88:	4402      	add	r2, r0
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d100      	bne.n	8007f92 <memset+0xa>
 8007f90:	4770      	bx	lr
 8007f92:	f803 1b01 	strb.w	r1, [r3], #1
 8007f96:	e7f9      	b.n	8007f8c <memset+0x4>

08007f98 <_init>:
 8007f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9a:	bf00      	nop
 8007f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9e:	bc08      	pop	{r3}
 8007fa0:	469e      	mov	lr, r3
 8007fa2:	4770      	bx	lr

08007fa4 <_fini>:
 8007fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa6:	bf00      	nop
 8007fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007faa:	bc08      	pop	{r3}
 8007fac:	469e      	mov	lr, r3
 8007fae:	4770      	bx	lr
